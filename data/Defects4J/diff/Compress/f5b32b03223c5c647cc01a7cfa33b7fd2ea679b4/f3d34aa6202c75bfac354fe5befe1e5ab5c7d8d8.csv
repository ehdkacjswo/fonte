is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,20,import java.io.FilterInputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,27,import java.util.zip.Inflater;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,28,import java.util.zip.InflaterInputStream;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,53,/ FIXME: gives corrupt output
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,54,"/new CoderId(new byte[] { (byte)0x04, (byte)0x01, (byte)0x08 }, new DeflateDecoder()),"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,56,"new CoderId(new byte[] { (byte)0x04, (byte)0x01, (byte)0x08 }, new DeflateDecoder()),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,119,/    static class DeflateDecoder extends CoderBase {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,120,/        @Override
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,121,"/        InputStream decode(final InputStream in, final Coder coder, final String password)"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,122,/                throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,123,"/            System.out.println(""deflate prop count = "" + (coder.properties == null ? -1 : coder.properties.length));"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,124,"/            return new DeflaterInputStream(in, new Deflater(Deflater.DEFAULT_COMPRESSION, true));"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,125,/            //return new GZIPInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,121,static class DeflateDecoder extends CoderBase {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,122,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,123,"InputStream decode(final InputStream in, final Coder coder, final String password)"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,124,throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,125,"return new InflaterInputStream(new DummyByteAddingInputStream(in),"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,126,new Inflater(true));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,238,* ZLIB requires an extra dummy byte.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,240,* @see java.util.zip.Inflater#Inflater(boolean)
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,241,* @see org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,243,private static class DummyByteAddingInputStream extends FilterInputStream {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,244,private boolean addDummyByte = true;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,246,private DummyByteAddingInputStream(InputStream in) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,247,super(in);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,250,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,251,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,252,int result = super.read();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,253,if (result == -1 && addDummyByte) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,254,addDummyByte = false;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,255,result = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,257,return result;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,260,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,261,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,262,"int result = super.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,263,if (result == -1 && addDummyByte) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,264,addDummyByte = false;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,265,b[off] = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,266,return 1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,268,return result;
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,20,import java.io.File;
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,44,"evenZFile sevenZFile = new SevenZFile(getFile(""bla.7z""));"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,45,"test7zUnarchive(getFile(""bla.7z""));"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,48,public void test7zDeflateUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,49,"test7zUnarchive(getFile(""bla.deflate.7z""));"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,52,private void test7zUnarchive(File f) throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,53,SevenZFile sevenZFile = new SevenZFile(f);

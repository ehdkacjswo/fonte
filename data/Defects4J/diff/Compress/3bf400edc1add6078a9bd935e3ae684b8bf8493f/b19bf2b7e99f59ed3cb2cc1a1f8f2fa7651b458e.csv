is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,19,package org.apache.commons.compress.archivers;
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,23,* Provides information about ArchiveEntry stream offsets.
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,25,public interface EntryStreamOffsets {
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,27,/** Special value indicating that the offset is unknown. */
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,28,long OFFSET_UNKNOWN = -1;
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,31,"* Gets the offset of data stream within the archive file,"
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,33,* @return
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,34,"*      the offset of entry data stream, {@code OFFSET_UNKNOWN} if not known."
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,36,long getDataOffset();
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,39,"* Indicates whether the stream is contiguous, i.e. not split among"
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,40,"* several archive parts, interspersed with control blocks, etc."
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,42,* @return
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,43,"*      true if stream is contiguous, false otherwise."
True,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java,45,boolean isStreamContiguous();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,145,"ublic class TarArchiveEntry implements TarConstants, ArchiveEntry {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,145,"public class TarArchiveEntry implements ArchiveEntry, TarConstants {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,21,import org.apache.commons.compress.archivers.EntryStreamOffsets;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,51,mplements ArchiveEntry {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,52,"implements ArchiveEntry, EntryStreamOffsets"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,94,private long localHeaderOffset = OFFSET_UNKNOWN;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,95,private long dataOffset = OFFSET_UNKNOWN;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,96,private boolean isStreamContiguous = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,687,protected long getLocalHeaderOffset() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,688,return this.localHeaderOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,691,protected void setLocalHeaderOffset(long localHeaderOffset) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,692,this.localHeaderOffset = localHeaderOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,695,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,696,public long getDataOffset() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,697,return dataOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,701,* Sets the data offset.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,703,* @param dataOffset
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,704,*      new value of data offset.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,706,protected void setDataOffset(long dataOffset) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,707,this.dataOffset = dataOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,710,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,711,public boolean isStreamContiguous() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,712,return isStreamContiguous;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,715,protected void setStreamContiguous(boolean isStreamContiguous) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,716,this.isStreamContiguous = isStreamContiguous;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,842,&& localHeaderOffset == other.localHeaderOffset
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,843,&& dataOffset == other.dataOffset
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,229,long currentHeaderOffset = getBytesRead();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,311,current.entry.setLocalHeaderOffset(currentHeaderOffset);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,312,current.entry.setDataOffset(getBytesRead());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,313,current.entry.setStreamContiguous(true);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,106,rivate static final class OffsetEntry {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,107,rivate long headerOffset = -1;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,108,rivate long dataOffset = -1;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,443,inal OffsetEntry offsetEntry = ((Entry) ze).getOffsetEntry();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,444,inal long start = offsetEntry.dataOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,438,final long start = ze.getDataOffset();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,483,inal OffsetEntry offsetEntry = ((Entry) ze).getOffsetEntry();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,485,inal long start = offsetEntry.dataOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,478,final long start = ze.getDataOffset();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,648,inal OffsetEntry offset = new OffsetEntry();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,649,inal Entry ze = new Entry(offset);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,641,final Entry ze = new Entry();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,708,"ffset.headerOffset = ZipLong.getValue(cfhBuf, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,700,"ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,716,"etSizesAndOffsetFromZip64Extra(ze, offset, diskStart);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,708,"setSizesAndOffsetFromZip64Extra(ze, diskStart);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,740,"inal OffsetEntry offset,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,750,ffset.headerOffset == ZIP64_MAGIC;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,741,ze.getLocalHeaderOffset() == ZIP64_MAGIC;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,769,ffset.headerOffset =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,770,64.getRelativeHeaderOffset().getLongValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,760,ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1040,inal OffsetEntry offsetEntry = ze.getOffsetEntry();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1041,inal long offset = offsetEntry.headerOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1030,final long offset = ze.getLocalHeaderOffset();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1054,ffsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1055, SHORT + SHORT + fileNameLen + extraFieldLen;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1043,ze.setDataOffset(offset + LFH_OFFSET_FOR_FILENAME_LENGTH
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1044,+ SHORT + SHORT + fileNameLen + extraFieldLen);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1045,ze.setStreamContiguous(true);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1235,inal long val = (ent1.getOffsetEntry().headerOffset
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1236, ent2.getOffsetEntry().headerOffset);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1225,final long val = (ent1.getLocalHeaderOffset()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1226,- ent2.getLocalHeaderOffset());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1246,rivate final OffsetEntry offsetEntry;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1248,ntry(final OffsetEntry offset) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1249,his.offsetEntry = offset;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1252,ffsetEntry getOffsetEntry() {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1253,eturn offsetEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1236,Entry() {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1259, (int) (offsetEntry.headerOffset % Integer.MAX_VALUE);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1242,+ (int) getLocalHeaderOffset()+(int)(getLocalHeaderOffset()>>32);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1267,eturn offsetEntry.headerOffset
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1268,= otherEntry.offsetEntry.headerOffset
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1269,& offsetEntry.dataOffset
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1270,= otherEntry.offsetEntry.dataOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1250,return getLocalHeaderOffset()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1251,== otherEntry.getLocalHeaderOffset()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1252,&& getDataOffset()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1253,== otherEntry.getDataOffset();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,29,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,36,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,38,import org.junit.Assert;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,255,* Test correct population of header and data offsets.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,257,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,258,public void testOffsets() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,259,// mixed.zip contains both inflated and stored files
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,260,"try (InputStream archiveStream = ZipArchiveInputStream.class.getResourceAsStream(""/mixed.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,261,ZipArchiveInputStream zipStream =  new ZipArchiveInputStream((archiveStream))
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,263,ZipArchiveEntry inflatedEntry = zipStream.getNextZipEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,264,"Assert.assertEquals(""inflated.txt"", inflatedEntry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,265,"Assert.assertEquals(0x0000, inflatedEntry.getLocalHeaderOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,266,"Assert.assertEquals(0x0046, inflatedEntry.getDataOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,267,ZipArchiveEntry storedEntry = zipStream.getNextZipEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,268,"Assert.assertEquals(""stored.txt"", storedEntry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,269,"Assert.assertEquals(0x5892, storedEntry.getLocalHeaderOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,270,"Assert.assertEquals(0x58d6, storedEntry.getDataOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,271,Assert.assertNull(zipStream.getNextZipEntry());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,24,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,39,import java.util.zip.CRC32;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,45,import org.junit.Assert;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,405,* Test correct population of header and data offsets.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,407,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,408,public void testOffsets() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,409,// mixed.zip contains both inflated and stored files
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,410,"final File archive = getFile(""mixed.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,411,try (ZipFile zf = new ZipFile(archive)) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,412,"ZipArchiveEntry inflatedEntry = zf.getEntry(""inflated.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,413,"Assert.assertEquals(0x0000, inflatedEntry.getLocalHeaderOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,414,"Assert.assertEquals(0x0046, inflatedEntry.getDataOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,415,Assert.assertTrue(inflatedEntry.isStreamContiguous());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,416,"ZipArchiveEntry storedEntry = zf.getEntry(""stored.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,417,"Assert.assertEquals(0x5892, storedEntry.getLocalHeaderOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,418,"Assert.assertEquals(0x58d6, storedEntry.getDataOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,419,Assert.assertTrue(inflatedEntry.isStreamContiguous());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,424,* Test correct population of header and data offsets when they are written after stream.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,426,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,427,public void testDelayedOffsetsAndSizes() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,428,ByteArrayOutputStream zipContent = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,429,try (ZipArchiveOutputStream zipOutput = new ZipArchiveOutputStream(zipContent)) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,430,"ZipArchiveEntry inflatedEntry = new ZipArchiveEntry(""inflated.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,431,inflatedEntry.setMethod(ZipEntry.DEFLATED);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,432,zipOutput.putArchiveEntry(inflatedEntry);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,433,"zipOutput.write(""Hello Deflated\n"".getBytes());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,434,zipOutput.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,436,"byte[] storedContent = ""Hello Stored\n"".getBytes();"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,437,"ZipArchiveEntry storedEntry = new ZipArchiveEntry(""stored.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,438,storedEntry.setMethod(ZipEntry.STORED);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,439,storedEntry.setSize(storedContent.length);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,440,storedEntry.setCrc(calculateCrc32(storedContent));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,441,zipOutput.putArchiveEntry(storedEntry);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,442,"zipOutput.write(""Hello Stored\n"".getBytes());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,443,zipOutput.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,447,try (ZipFile zf = new ZipFile(new SeekableInMemoryByteChannel(zipContent.toByteArray()))) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,448,"ZipArchiveEntry inflatedEntry = zf.getEntry(""inflated.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,449,"Assert.assertNotEquals(-1L, inflatedEntry.getLocalHeaderOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,450,"Assert.assertNotEquals(-1L, inflatedEntry.getDataOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,451,Assert.assertTrue(inflatedEntry.isStreamContiguous());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,452,"Assert.assertNotEquals(-1L, inflatedEntry.getCompressedSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,453,"Assert.assertNotEquals(-1L, inflatedEntry.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,454,"ZipArchiveEntry storedEntry = zf.getEntry(""stored.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,455,"Assert.assertNotEquals(-1L, storedEntry.getLocalHeaderOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,456,"Assert.assertNotEquals(-1L, storedEntry.getDataOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,457,Assert.assertTrue(inflatedEntry.isStreamContiguous());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,458,"Assert.assertNotEquals(-1L, storedEntry.getCompressedSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,459,"Assert.assertNotEquals(-1L, storedEntry.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,526,private long calculateCrc32(byte[] content) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,527,CRC32 crc = new CRC32();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,528,crc.update(content);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,529,return crc.getValue();

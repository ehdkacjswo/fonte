is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,43,* <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,44,"* The client can supply an ExecutorService, but for reasons of memory model consistency,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,45,* this will be shut down by this class prior to completion.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,46,* </p>
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,47,rivate final ScatterGatherBackingStoreSupplier supplier;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,51,private final ScatterGatherBackingStoreSupplier backingStoreSupplier;
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,54,rivate static class DefaultSupplier implements ScatterGatherBackingStoreSupplier {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,58,private static class DefaultBackingStoreSupplier implements ScatterGatherBackingStoreSupplier {
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,74,catterZipOutputStream scatterStream = createDeferred(supplier);
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,78,ScatterZipOutputStream scatterStream = createDeferred(backingStoreSupplier);
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,87,his(Runtime.getRuntime().availableProcessors());
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,91,this(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()));
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,93, @param nThreads the number of threads to use in parallel.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,97,"* @param executorService The executorService to use for parallel scheduling. For technical reasons,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,98,*                        this will be shut down by this class.
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,95,ublic ParallelScatterZipCreator(int nThreads) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,96,"his( nThreads, new DefaultSupplier());"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,100,public ParallelScatterZipCreator(ExecutorService executorService) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,101,"this(executorService, new DefaultBackingStoreSupplier());"
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,102, @param nThreads the number of threads to use in parallel.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,107,"* @param executorService The executorService to use. For technical reasons, this will be shut down"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,108,*                        by this class.
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,105,"ublic ParallelScatterZipCreator(int nThreads, ScatterGatherBackingStoreSupplier backingStoreSupplier) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,106,upplier = backingStoreSupplier;
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,107,s = Executors.newFixedThreadPool(nThreads);
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,111,"public ParallelScatterZipCreator(ExecutorService executorService,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,112,ScatterGatherBackingStoreSupplier backingStoreSupplier) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,113,this.backingStoreSupplier = backingStoreSupplier;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,114,es = executorService;
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,116, @param zipArchiveEntry The entry to add. Compression method
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,123,* @param zipArchiveEntry The entry to add.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,128,"submit(createCallable(zipArchiveEntry, source));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,132,* Submit a callable for compression
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,133,* @param callable The callable to run
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,135,public void submit(Callable<Object> callable) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,136,futures.add(es.submit(callable));
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,140,* Create a callable that will compress the given archive entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,142,* <p>This method is expected to be called from a single client thread.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,143,* <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,144,* This method is used by clients that want finer grained control over how the callable is
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,145,"* created, possibly wanting to wrap this callable in a different callable</p>"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,147,* @param zipArchiveEntry The entry to add.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,148,* @param source    The source input stream supplier
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,149,* @return   A callable that will be used to check for errors
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,152,"public Callable<Object> createCallable(final ZipArchiveEntry zipArchiveEntry, final InputStreamSupplier source) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,125,/ Consider if we want to constrain the number of items that can enqueue here.
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,126,uture<Object> future = es.submit(new Callable<Object>() {
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,127,ublic Void call() throws Exception {
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,128,catterZipOutputStream streamToUse = tlScatterStreams.get();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,157,return new Callable<Object>() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,158,public Object call() throws Exception {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,159,final ScatterZipOutputStream streamToUse = tlScatterStreams.get();
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,139,utures.add( future);
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,164,"s.awaitTermination(1000 * 60, TimeUnit.SECONDS);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,193,"es.awaitTermination(1000 * 60, TimeUnit.SECONDS);  // == Infinity. We really *must* wait for this to complete"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,30,import java.util.concurrent.Callable;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,31,import java.util.concurrent.ExecutorService;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,32,import java.util.concurrent.Executors;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,39,private final int NUMITEMS = 5000;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,57,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,58,public void callableApi()
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,59,throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,60,"File result = File.createTempFile(""parallelScatterGather2"", """");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,61,ZipArchiveOutputStream zos = new ZipArchiveOutputStream(result);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,62,"zos.setEncoding(""UTF-8"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,63,ExecutorService es = Executors.newFixedThreadPool(1);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,65,ScatterGatherBackingStoreSupplier supp = new ScatterGatherBackingStoreSupplier() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,66,public ScatterGatherBackingStore get() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,67,"return new FileBasedScatterGatherBackingStore(File.createTempFile(""parallelscatter"", ""n1""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,71,"ParallelScatterZipCreator zipCreator = new ParallelScatterZipCreator(es, supp);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,72,"Map<String, byte[]> entries = writeEntriesAsCallable(zipCreator);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,73,zipCreator.writeTo(zos);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,74,zos.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,77,"removeEntriesFoundInZipFile(result, entries);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,78,assertTrue(entries.size() == 0);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,79,assertNotNull(zipCreator.getStatisticsMessage());
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,61,"ssertArrayEquals( expected, actual);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,90,"assertArrayEquals( ""For "" + zipArchiveEntry.getName(),  expected, actual);"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,68,or (int i = 0; i < 10000; i++){
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,69,"ipArchiveEntry za = new ZipArchiveEntry( ""file"" + i);"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,70,"inal String payload = ""content"" + i;"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,71,inal byte[] payloadBytes = payload.getBytes();
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,72,"ntries.put( za.getName(), payloadBytes);"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,73,a.setMethod(ZipArchiveEntry.DEFLATED);
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,74,a.setSize(payload.length());
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,75,a.setUnixMode(UnixStat.FILE_FLAG | 0664);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,97,for (int i = 0; i < NUMITEMS; i++){
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,98,"final byte[] payloadBytes = (""content"" + i).getBytes();"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,99,"ZipArchiveEntry za = createZipArchiveEntry(entries, i, payloadBytes);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,109,"private Map<String, byte[]> writeEntriesAsCallable(ParallelScatterZipCreator zipCreator) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,110,"Map<String, byte[]> entries = new HashMap<String, byte[]>();"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,111,for (int i = 0; i < NUMITEMS; i++){
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,112,"final byte[] payloadBytes = (""content"" + i).getBytes();"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,113,"ZipArchiveEntry za = createZipArchiveEntry(entries, i, payloadBytes);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,114,"final Callable<Object> callable = zipCreator.createCallable(za, new InputStreamSupplier() {"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,115,public InputStream get() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,116,return new ByteArrayInputStream(payloadBytes);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,119,zipCreator.submit(callable);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,121,return entries;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,124,"private ZipArchiveEntry createZipArchiveEntry(Map<String, byte[]> entries, int i, byte[] payloadBytes) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,125,"ZipArchiveEntry za = new ZipArchiveEntry( ""file"" + i);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,126,"entries.put( za.getName(), payloadBytes);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,127,za.setMethod(ZipArchiveEntry.DEFLATED);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,128,za.setSize(payloadBytes.length);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,129,za.setUnixMode(UnixStat.FILE_FLAG | 0664);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,130,return za;

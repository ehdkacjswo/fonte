is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,55,register(PaddingExtraField.class);
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,21,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,24,* An extra field who's sole purpose is to pad the local file header
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,25,* so that the entry's data starts at a certain position.
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,27,* <p>The actual content of the padding is ignored and not retained
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,28,* when reading a padding field.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,30,* @since 1.14
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,32,public class PaddingExtraField implements ZipExtraField {
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,35,"* Extra field id used for padding (there is no special value documented,"
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,36,* therefore USHORT_MAX seems to be good choice).
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,38,private static final ZipShort ID = new ZipShort(0xffff);
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,40,private int len = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,42,public PaddingExtraField() {
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,45,public PaddingExtraField(int len) {
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,46,this.len = len;
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,49,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,50,public ZipShort getHeaderId() {
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,51,return ID;
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,54,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,55,public ZipShort getLocalFileDataLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,56,return new ZipShort(len);
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,59,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,60,public ZipShort getCentralDirectoryLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,61,return ZipShort.ZERO;
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,64,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,65,public byte[] getLocalFileDataData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,66,return new byte[len];
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,69,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,70,public byte[] getCentralDirectoryData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,71,return new byte[0];
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,74,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,75,"public void parseFromLocalFileData(byte[] buffer, int offset, int length) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,76,len = length;
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,79,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,80,"public void parseFromCentralDirectoryData(byte[] buffer, int offset, int length) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,343,f ((alignment & (alignment - 1)) != 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,344,"hrow new IllegalArgumentException(""Invalid value for alignment, must be power of two: "" + alignment);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,343,if ((alignment & (alignment - 1)) != 0 || alignment > 0xffff) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,344,"throw new IllegalArgumentException(""Invalid value for alignment, must be power of two and no bigger than """
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,345,"+ 0xffff + "" but is "" + alignment);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,146, Size of the extra field header (id + length).
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,146,* Size of an extra field field header (id + length).
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,151," Extra field id used for padding (there is no special value documented,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,152, therefore USHORT_MAX seems to be good choice).
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,154,ublic static final int EXTRAFIELD_PADDING_ID = 0xffff;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1051,inal byte[] extra = ze.getLocalFileDataExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1045,byte[] extra = ze.getLocalFileDataExtra();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1054,nt padding = 0;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1057,adding = (int) ((-archiveOffset - len - EXTRAFIELD_HEADER_SIZE) & (alignment - 1));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1058,en += EXTRAFIELD_HEADER_SIZE+padding;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1050,int padding = (int) ((-archiveOffset - len - EXTRAFIELD_HEADER_SIZE) & (alignment - 1));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1051,ze.addExtraField(new PaddingExtraField(padding));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1052,extra = ze.getLocalFileDataExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1053,len += EXTRAFIELD_HEADER_SIZE + padding;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1111,nt totalExtra = extra.length + (padding > 0 ? padding + EXTRAFIELD_HEADER_SIZE : 0);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1112,f (totalExtra > 0xffff) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1113,"hrow new IOException(""Too much data for extra fields and padding""+"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1114,", extra=""+extra.length+"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1115,", padding=""+padding);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1118,"utShort(totalExtra, buf, LFH_EXTRA_LENGTH_OFFSET);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1107,"putShort(extra.length, buf, LFH_EXTRA_LENGTH_OFFSET);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1126,/ padding
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1127,f (padding > 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1128,"utShort(EXTRAFIELD_PADDING_ID, buf, LFH_FILENAME_OFFSET + nameLen + extra.length);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1129,"utShort(padding, buf, LFH_FILENAME_OFFSET + nameLen + extra.length + 2);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,30,public static final ZipShort ZERO = new ZipShort(0);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,512,Test(expected = IOException.class)
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,512,@Test(expected = IllegalArgumentException.class)
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,519,ipOutput.putArchiveEntry(inflatedEntry);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,520,"ipOutput.write(""Hello Stored\n"".getBytes(Charset.forName(""UTF-8"")));"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,521,ipOutput.closeArchiveEntry();

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,67,nt bytesRead = 0;
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,68,nt remainingInStack = outputStack.length - outputStackLocation;
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,69,f (remainingInStack > 0) {
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,70,"nt maxLength = Math.min(remainingInStack, len);"
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,71,"ystem.arraycopy(outputStack, outputStackLocation, b, off, maxLength);"
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,72,utputStackLocation += maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,73,ff += maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,74,en -= maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,75,ytesRead += maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,77,hile (len > 0) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,67,"int bytesRead = readFromStack(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,68,while (len - bytesRead > 0) {
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,83, else {
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,84,eturn result;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,75,return result;
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,87,emainingInStack = outputStack.length - outputStackLocation;
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,88,f (remainingInStack > 0) {
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,89,"nt maxLength = Math.min(remainingInStack, len);"
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,90,"ystem.arraycopy(outputStack, outputStackLocation, b, off, maxLength);"
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,91,utputStackLocation += maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,92,ff += maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,93,en -= maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,94,ytesRead += maxLength;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,77,"bytesRead += readFromStack(b, off + bytesRead, len - bytesRead);"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,182,"private int readFromStack(byte[] b, int off, int len) {"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,183,int remainingInStack = outputStack.length - outputStackLocation;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,184,if (remainingInStack > 0) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,185,"int maxLength = Math.min(remainingInStack, len);"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,186,"System.arraycopy(outputStack, outputStackLocation, b, off, maxLength);"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,187,outputStackLocation += maxLength;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,188,return maxLength;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,190,return 0;

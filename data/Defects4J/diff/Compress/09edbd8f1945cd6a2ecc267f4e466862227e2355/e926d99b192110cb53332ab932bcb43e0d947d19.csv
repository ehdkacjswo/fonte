is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,26,import java.util.Arrays;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,30,* @since 1.13
False,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,32,rivate final byte[] data;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,34,private volatile byte[] data;
False,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,34,"rivate volatile long position, size;"
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,36,"private volatile int position, size;"
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,43,public SeekableInMemoryByteChannel() {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,44,this(new byte[0]);
False,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,48,osition = newPosition;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,54,if (newPosition > Integer.MAX_VALUE) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,55,"throw new IllegalArgumentException(""Position cannot exceed "" + Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,57,position = (int) newPosition;
False,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,59,ize = newSize;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,68,if (size > newSize) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,69,size = (int) newSize;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,71,if (position > size) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,72,position = size;
False,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,68,ong pos = position;
False,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,69,ong sz = size;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,82,int pos = position;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,83,int sz = size;
False,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,71,ong possible = sz - pos;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,85,int possible = sz - pos;
False,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,73,anted = (int) possible;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,87,wanted = possible;
False,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,75,"uf.put(data, (int) pos, wanted);"
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,89,"buf.put(data, pos, wanted);"
False,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,90,/ TODO implement writing
False,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,93,hrow new NonWritableChannelException();
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,106,if (!isOpen()) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,107,throw new ClosedChannelException();
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,109,int pos = position;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,110,int sz = data.length;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,111,int wanted = b.remaining();
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,112,int possibleWithoutResize = sz - pos;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,113,if (wanted > possibleWithoutResize) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,114,resize(pos + wanted);
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,116,"b.get(data, pos, wanted);"
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,117,position = pos + wanted;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,118,if (size < position) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,119,size = position;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,121,return wanted;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,125,* Obtains the array backing this channel.
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,127,public byte[] array() {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,128,return data;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,131,private void resize(int newLength) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,132,int len = data.length;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,133,if (len <= 0) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,134,len = 1;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,136,while (len < newLength) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,137,len <<= 1;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,139,"data = Arrays.copyOf(data, len);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,44,import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,113,* Archives 2 files and unarchives it again. If the file length of result
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,114,"* and source is the same, it looks like the operations have worked"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,115,* @throws Exception
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,117,@Test
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,118,public void testZipArchiveCreationInMemory() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,119,"final File file1 = getFile(""test1.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,120,"final File file2 = getFile(""test2.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,121,SeekableInMemoryByteChannel c = new SeekableInMemoryByteChannel();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,122,try (ZipArchiveOutputStream os = new ZipArchiveOutputStream(c)) {
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,123,"os.putArchiveEntry(new ZipArchiveEntry(""testdata/test1.xml""));"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,124,"IOUtils.copy(new FileInputStream(file1), os);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,125,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,127,"os.putArchiveEntry(new ZipArchiveEntry(""testdata/test2.xml""));"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,128,"IOUtils.copy(new FileInputStream(file2), os);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,129,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,132,// Unarchive the same
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,133,final List<File> results = new ArrayList<>();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,135,try (ArchiveInputStream in = new ArchiveStreamFactory()
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,136,".createArchiveInputStream(""zip"", new ByteArrayInputStream(c.array()))) {"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,138,ZipArchiveEntry entry = null;
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,139,while((entry = (ZipArchiveEntry)in.getNextEntry()) != null) {
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,140,"final File outfile = new File(resultDir.getCanonicalPath() + ""/result/"" + entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,141,outfile.getParentFile().mkdirs();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,142,try (OutputStream o = new FileOutputStream(outfile)) {
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,143,"IOUtils.copy(in, o);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,145,results.add(outfile);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,149,"assertEquals(results.size(), 2);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,150,File result = results.get(0);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,151,"assertEquals(file1.length(), result.length());"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,152,result = results.get(1);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,153,"assertEquals(file2.length(), result.length());"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,32,import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,304,@Test
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,305,public void testStackOfContentCompressionsInMemory() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,306,final ArrayList<SevenZMethodConfiguration> methods = new ArrayList<>();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,307,methods.add(new SevenZMethodConfiguration(SevenZMethod.LZMA2));
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,308,methods.add(new SevenZMethodConfiguration(SevenZMethod.COPY));
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,309,methods.add(new SevenZMethodConfiguration(SevenZMethod.DEFLATE));
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,310,methods.add(new SevenZMethodConfiguration(SevenZMethod.BZIP2));
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,311,"createAndReadBack(new SeekableInMemoryByteChannel(), methods);"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,478,"private void createAndReadBack(final SeekableInMemoryByteChannel output, final Iterable<SevenZMethodConfiguration> methods) throws Exception {"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,479,final SevenZOutputFile outArchive = new SevenZOutputFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,480,outArchive.setContentMethods(methods);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,481,try {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,482,"addFile(outArchive, 0, true);"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,483,} finally {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,484,outArchive.close();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,486,try (SevenZFile archive =
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,487,"new SevenZFile(new SeekableInMemoryByteChannel(output.array()), ""in memory"","
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,488,null)) {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,489,"assertEquals(Boolean.TRUE, verifyFile(archive, 0, methods));"

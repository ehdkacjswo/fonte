is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,310,his.blockRandomised = bsR(1) == 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,310,"this.blockRandomised = bsR(bin, 1) == 1;"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,381,rivate int bsR(final int n) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,381,"private static int bsR(BitInputStream bin, final int n) throws IOException {"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,389,rivate boolean bsGetBit() throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,390,eturn bsR(1) != 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,389,private static boolean bsGetBit(BitInputStream bin) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,390,"return bsR(bin, 1) != 0;"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,394,eturn (char) bsR(8);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,394,"return (char) bsR(bin, 8);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,398,eturn (int) bsR(32);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,398,"return (int) bsR(bin, 32);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,443,final BitInputStream bin = this.bin;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,453,f (bsGetBit()) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,454,if (bsGetBit(bin)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,463,f (bsGetBit()) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,464,if (bsGetBit(bin)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,474,inal int nGroups = bsR(3);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,475,inal int nSelectors = bsR(15);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,474,"final int nGroups = bsR(bin, 3);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,475,"final int nSelectors = bsR(bin, 15);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,479,hile (bsGetBit()) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,479,while (bsGetBit(bin)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,506,nt curr = bsR(5);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,506,"int curr = bsR(bin, 5);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,509,hile (bsGetBit()) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,510,urr += bsGetBit() ? -1 : 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,509,while (bsGetBit(bin)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,510,curr += bsGetBit(bin) ? -1 : 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,552,his.origPtr = bsR(24);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,552,final BitInputStream bin = this.bin;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,553,"this.origPtr = bsR(bin, 24);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,613,nt zvec = (int) bsR(zn);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,614,"int zvec = (int) bsR(bin, zn);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,616,vec = (zvec << 1) | bsR(1);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,617,"zvec = (zvec << 1) | bsR(bin, 1);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,667,nt zvec = (int) bsR(zn);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,668,"int zvec = (int) bsR(bin, zn);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,670,vec = (zvec << 1) | (int) bsR(1);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,671,"zvec = (zvec << 1) | (int) bsR(bin, 1);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,684,nt zvec = bsR(zn);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,685,"int zvec = bsR(bin, zn);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,687,vec = (zvec << 1) | (int) bsR(1);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,688,"zvec = (zvec << 1) | (int) bsR(bin, 1);"
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,85,hile (bitsCachedSize < count && bitsCachedSize < 57) {
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,86,inal long nextByte = in.read();
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,87,f (nextByte < 0) {
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,88,eturn nextByte;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,85,if(ensureCache(count))
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,86,return -1;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,88,if (bitsCachedSize < count) {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,89,return processBitsGreater57(count);
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,90,} else {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,91,final long bitsOut;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,91,itsCached |= (nextByte << bitsCachedSize);
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,93,bitsOut = (bitsCached & MASKS[count]);
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,94,bitsCached >>>= count;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,93,itsCached <<= 8;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,94,itsCached |= nextByte;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,96,bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,96,itsCachedSize += 8;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,98,bitsCachedSize -= count;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,99,return bitsOut;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,103,private long processBitsGreater57(final int count) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,104,final long bitsOut;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,100,f (bitsCachedSize < count) {
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,101,/ bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,102,nt bitsToAddCount = count - bitsCachedSize;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,103,verflowBits = 8 - bitsToAddCount;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,108,// bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,109,int bitsToAddCount = count - bitsCachedSize;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,110,overflowBits = 8 - bitsToAddCount;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,111,final long nextByte = in.read();
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,112,if (nextByte < 0) {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,113,return nextByte;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,115,if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,116,long bitsToAdd = nextByte & MASKS[bitsToAddCount];
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,117,bitsCached |= (bitsToAdd << bitsCachedSize);
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,118,overflow = (nextByte >>> bitsToAddCount) & MASKS[overflowBits];
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,119,} else {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,120,bitsCached <<= bitsToAddCount;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,121,long bitsToAdd = (nextByte >>> (overflowBits)) & MASKS[bitsToAddCount];
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,122,bitsCached |= bitsToAdd;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,123,overflow = nextByte & MASKS[overflowBits];
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,125,bitsCachedSize = count;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,126,bitsOut = bitsCached & MASKS[count];
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,127,bitsCached = overflow;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,128,bitsCachedSize = overflowBits;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,129,return bitsOut;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,133,* Fills the cache up to 56 bits
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,134,* @param count
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,135,"* @return return true, when EOF"
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,136,* @throws IOException
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,138,private boolean ensureCache(final int count) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,139,while (bitsCachedSize < count && bitsCachedSize < 57) {
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,106,eturn nextByte;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,142,return true;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,109,ong bitsToAdd = nextByte & MASKS[bitsToAddCount];
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,110,itsCached |= (bitsToAdd << bitsCachedSize);
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,111,verflow = (nextByte >>> bitsToAddCount) & MASKS[overflowBits];
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,112, else {
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,113,itsCached <<= bitsToAddCount;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,114,ong bitsToAdd = (nextByte >>> (overflowBits)) & MASKS[bitsToAddCount];
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,115,itsCached |= bitsToAdd;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,116,verflow = nextByte & MASKS[overflowBits];
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,118,itsCachedSize = count;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,121,inal long bitsOut;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,122,f (overflowBits == 0) {
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,123,f (byteOrder == ByteOrder.LITTLE_ENDIAN) {
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,124,itsOut = (bitsCached & MASKS[count]);
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,125,itsCached >>>= count;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,145,bitsCached |= (nextByte << bitsCachedSize);
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,127,itsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,147,bitsCached <<= 8;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,148,bitsCached |= nextByte;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,129,itsCachedSize -= count;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,130, else {
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,131,itsOut = bitsCached & MASKS[count];
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,132,itsCached = overflow;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,133,itsCachedSize = overflowBits;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,150,bitsCachedSize += 8;
False,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,135,eturn bitsOut;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,152,return false;

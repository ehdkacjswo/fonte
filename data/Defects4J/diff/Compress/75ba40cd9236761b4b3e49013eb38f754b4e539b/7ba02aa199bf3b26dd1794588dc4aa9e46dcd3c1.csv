is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,28,import org.apache.commons.compress.utils.ByteUtils;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,79,private final ByteUtils.ByteSupplier supplier = new ByteUtils.ByteSupplier() {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,80,@Override
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,81,public int getAsByte() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,82,return readOneByte();
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,249,ong crc = 0;
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,250,or (int i = 0; i < 4; i++) {
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,251,rc |= (b[i] & 0xFFL) << (8 * i);
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,253,eturn crc;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,257,return ByteUtils.fromLittleEndian(b);
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,265,nt b = 0;
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,266,nt sz = 0;
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,267,or (int i = 0; i < 3; i++) {
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,268, = readOneByte();
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,269,f (b == -1) {
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,270,"hrow new IOException(""premature end of stream"");"
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,272,z |= (b << (i * 8));
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,274,eturn sz;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,269,"return (int) ByteUtils.fromLittleEndian(supplier, 3);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,26,import org.apache.commons.compress.utils.ByteUtils;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,51,private final ByteUtils.ByteConsumer consumer;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,61,consumer = new ByteUtils.OutputStreamByteConsumer(out);
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,114,or (int i = 0; i < numBytes; i++) {
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,115,ut.write((int) (num & 0xff));
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,116,um >>= 8;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,118,"ByteUtils.toLittleEndian(consumer, num, numBytes);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,25,import org.apache.commons.compress.utils.ByteUtils;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,76,private final ByteUtils.ByteSupplier supplier = new ByteUtils.ByteSupplier() {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,77,@Override
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,78,public int getAsByte() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,79,return readOneByte();
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,212,ffset = readOneByte();
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,213,ffset |= readOneByte() << 8;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,220,"offset = ByteUtils.fromLittleEndian(supplier, 2);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,232,ffset = readOneByte();
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,233,ffset |= readOneByte() << 8;
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,234,ffset |= readOneByte() << 16;
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,235,ffset |= ((long) readOneByte()) << 24;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,239,"offset = ByteUtils.fromLittleEndian(supplier, 4);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,278,ength = readOneByte();
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,279,ength |= readOneByte() << 8;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,282,"length = (int) ByteUtils.fromLittleEndian(supplier, 2);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,282,ength = readOneByte();
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,283,ength |= readOneByte() << 8;
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,284,ength |= readOneByte() << 16;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,285,"length = (int) ByteUtils.fromLittleEndian(supplier, 3);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,287,ength = readOneByte();
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,288,ength |= readOneByte() << 8;
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,289,ength |= readOneByte() << 16;
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,290,ength |= (((long) readOneByte()) << 24);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,288,"length = (int) ByteUtils.fromLittleEndian(supplier, 4);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,27,import org.apache.commons.compress.utils.ByteUtils;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,57,private final ByteUtils.ByteConsumer consumer;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,101,consumer = new ByteUtils.OutputStreamByteConsumer(os);
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,209,or (int i = 0; i < numBytes; i++) {
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,210,s.write(num & 0xff);
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,211,um >>= 8;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,212,"ByteUtils.toLittleEndian(consumer, num, numBytes);"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,9,*   http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,19,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,23,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,26,* Utility methods for reading and writing bytes.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,27,* @since 1.14
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,29,public final class ByteUtils {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,30,private ByteUtils() { /* no instances */ }
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,33,* Used to supply bytes.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,34,* @since 1.14
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,36,public interface ByteSupplier {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,38,"* The contract is similar to {@link InputStream#read()}, return"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,39,"* the byte as an unsigned int, -1 if there are no more bytes."
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,41,int getAsByte() throws IOException;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,45,* Used to consume bytes.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,46,* @since 1.14
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,48,public interface ByteConsumer {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,50,"* The contract is similar to {@link OutputStream#write(int)},"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,51,* consume the lower eight bytes of the int as a byte.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,53,void accept(int b) throws IOException;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,57,* Reads the given byte array as a little endian long.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,58,* @param bytes the byte array to convert
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,60,public static long fromLittleEndian(byte[] bytes) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,61,"return fromLittleEndian(bytes, 0, bytes.length);"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,65,* Reads the given byte array as a little endian long.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,66,* @param bytes the byte array to convert
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,67,* @param off the offset into the array that starts the value
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,68,* @param length the number of bytes representing the value
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,69,* @throws IllegalArgumentException if len is bigger than eight
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,71,"public static long fromLittleEndian(byte[] bytes, final int off, final int length) {"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,72,if (length > 8) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,73,"throw new IllegalArgumentException(""can't read more than eight bytes into a long value"");"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,75,long l = 0;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,76,for (int i = 0; i < length; i++) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,77,l |= (bytes[off + i] & 0xffl) << (8 * i);
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,79,return l;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,83,* Reads the given number of bytes from the given stream as a little endian long.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,84,* @param in the stream to read from
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,85,* @param length the number of bytes representing the value
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,86,* @throws IllegalArgumentException if len is bigger than eight
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,87,* @throws IOException if reading fails or the stream doesn't
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,88,* contain the given number of bytes anymore
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,90,"public static long fromLittleEndian(InputStream in, int length) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,91,"return fromLittleEndian(new InputStreamByteSupplier(in), length);"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,95,* Reads the given number of bytes from the given supplier as a little endian long.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,96,* @param supplier the supplier for bytes
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,97,* @param length the number of bytes representing the value
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,98,* @throws IllegalArgumentException if len is bigger than eight
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,99,* @throws IOException if the supplier fails or doesn't supply the
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,100,* given number of bytes anymore
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,102,"public static long fromLittleEndian(ByteSupplier supplier, final int length) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,103,if (length > 8) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,104,"throw new IllegalArgumentException(""can't read more than eight bytes into a long value"");"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,106,long l = 0;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,107,for (int i = 0; i < length; i++) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,108,int b = supplier.getAsByte();
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,109,if (b == -1) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,110,"throw new IOException(""premature end of data"");"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,112,l |= (b << (i * 8));
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,114,return l;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,118,* Writes the given value to the given stream as a little endian
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,119,* array of the given length.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,120,* @param out the stream to write to
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,121,* @param value the value to write
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,122,* @param length the number of bytes to use to represent the value
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,123,* @throws IOException if writing fails
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,125,"public static void toLittleEndian(OutputStream out, final long value, final int length)"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,126,throws IOException {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,127,"toLittleEndian(new OutputStreamByteConsumer(out), value, length);"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,131,* Provides the given value to the given consumer as a little endian
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,132,* sequence of the given length.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,133,* @param consumer the consumer to provide the bytes to
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,134,* @param value the value to provide
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,135,* @param length the number of bytes to use to represent the value
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,136,* @throws IOException if writing fails
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,138,"public static void toLittleEndian(ByteConsumer consumer, final long value, final int length)"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,139,throws IOException {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,140,long num = value;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,141,for (int i = 0; i < length; i++) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,142,consumer.accept((int) (num & 0xff));
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,143,num >>= 8;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,148,* {@link ByteSupplier} based on {@link InputStream}.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,149,* @since 1.14
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,151,public static class InputStreamByteSupplier implements ByteSupplier {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,152,private final InputStream is;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,153,public InputStreamByteSupplier(InputStream is) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,154,this.is = is;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,156,@Override
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,157,public int getAsByte() throws IOException {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,158,return is.read();
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,163,* {@link ByteConsumer} based on {@link OutputStream}.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,164,* @since 1.14
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,166,public static class OutputStreamByteConsumer implements ByteConsumer {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,167,private final OutputStream os;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,168,public OutputStreamByteConsumer(OutputStream os) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,169,this.os = os;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,171,@Override
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,172,public void accept(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,173,os.write(b);

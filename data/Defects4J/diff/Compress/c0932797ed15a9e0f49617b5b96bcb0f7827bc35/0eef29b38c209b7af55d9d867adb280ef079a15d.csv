is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,22,import java.util.Arrays;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,24,import org.apache.commons.compress.utils.ByteUtils;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,91,ong i = 0;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,92, += (((long) buffer[offset + 7]) << 56);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,93, += (((long) buffer[offset + 6] << 48) & 0x00FF000000000000L);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,94, += (((long) buffer[offset + 5] << 40) & 0x0000FF0000000000L);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,95, += (((long) buffer[offset + 4] << 32) & 0x000000FF00000000L);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,96, += (((long) buffer[offset + 3] << 24) & 0x00000000FF000000L);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,97, += (((long) buffer[offset + 2] << 16) & 0x0000000000FF0000L);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,98, += (((long) buffer[offset + 1] << 8) & 0x000000000000FF00L);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,99, += (buffer[offset] & 0x00000000000000FFL);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,101,eturn i;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,93,"return ByteUtils.fromLittleEndian(buffer, offset, 8);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,112,nt i = 0;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,113, = buffer[offset + 3] << 24;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,114, += (buffer[offset + 2] << 16) & 0x00FF0000;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,115, += (buffer[offset + 1] << 8) & 0x0000FF00;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,116, += buffer[offset] & 0x000000FF;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,118,eturn i;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,104,"return (int) ByteUtils.fromLittleEndian(buffer, offset, 4);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,129,nt i = 0;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,130, += (buffer[offset + 1] << 8) & 0x0000FF00;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,131, += buffer[offset] & 0x000000FF;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,133,eturn i;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,115,"return (int) ByteUtils.fromLittleEndian(buffer, offset, 2);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,141,inal byte[] copy = new byte[len];
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,142,"ystem.arraycopy(b, offset, copy, 0, len);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,143,eturn encoding.decode(copy);
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,123,"return encoding.decode(Arrays.copyOfRange(b, offset, offset + len));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,24,import org.apache.commons.compress.utils.ByteUtils;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,58,eturn new byte[] {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,59,"rops,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,60,"byte) (dictSize & 0xff),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,61,"byte) ((dictSize >> 8) & 0xff),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,62,"byte) ((dictSize >> 16) & 0xff),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,63,"byte) ((dictSize >> 24) & 0xff),"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,59,byte[] o = new byte[5];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,60,o[0] = props;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,61,"ByteUtils.toLittleEndian(o, dictSize, 1, 4);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,62,return o;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,83,ong dictSize = coder.properties[1];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,84,or (int i = 1; i < 4; i++) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,85,ictSize |= (coder.properties[i + 1] & 0xffl) << (8 * i);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,87,eturn (int) dictSize;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java,81,"return (int) ByteUtils.fromLittleEndian(coder.properties, 1, 4);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,27, rules for the big endian byte order of ZIP files.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,27,* rules for the little endian byte order of ZIP files.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,22,mport static org.apache.commons.compress.archivers.zip.ZipConstants.BYTE_MASK;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,22,import org.apache.commons.compress.utils.ByteUtils;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,27, rules for the big endian byte order of ZIP files.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,28,* rules for the little endian byte order of ZIP files.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,33,/private static final int BYTE_BIT_SIZE = 8;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,35,rivate static final int BYTE_1 = 1;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,36,rivate static final int BYTE_1_MASK = 0xFF00;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,37,rivate static final int BYTE_1_SHIFT = 8;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,39,rivate static final int BYTE_2 = 2;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,40,rivate static final int BYTE_2_MASK = 0xFF0000;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,41,rivate static final int BYTE_2_SHIFT = 16;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,43,rivate static final int BYTE_3 = 3;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,44,rivate static final long BYTE_3_MASK = 0xFF000000L;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,45,rivate static final int BYTE_3_SHIFT = 24;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,151,uf[offset++] = (byte) ((value & BYTE_MASK));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,152,uf[offset++] = (byte) ((value & BYTE_1_MASK) >> BYTE_1_SHIFT);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,153,uf[offset++] = (byte) ((value & BYTE_2_MASK) >> BYTE_2_SHIFT);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,154,uf[offset] = (byte) ((value & BYTE_3_MASK) >> BYTE_3_SHIFT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,138,"ByteUtils.toLittleEndian(buf, value, offset, 4);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,168,ong value = (bytes[offset + BYTE_3] << BYTE_3_SHIFT) & BYTE_3_MASK;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,169,alue += (bytes[offset + BYTE_2] << BYTE_2_SHIFT) & BYTE_2_MASK;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,170,alue += (bytes[offset + BYTE_1] << BYTE_1_SHIFT) & BYTE_1_MASK;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,171,alue += (bytes[offset] & BYTE_MASK);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,172,eturn value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,152,"return ByteUtils.fromLittleEndian(bytes, offset, 4);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,22,mport static org.apache.commons.compress.archivers.zip.ZipConstants.BYTE_MASK;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,22,import org.apache.commons.compress.utils.ByteUtils;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,26, rules for the big endian byte order of ZIP files.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,26,* rules for the little endian byte order of ZIP files.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,32,rivate static final int BYTE_1_MASK = 0xFF00;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,33,rivate static final int BYTE_1_SHIFT = 8;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,68,esult[0] = (byte) (value & BYTE_MASK);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,69,esult[1] = (byte) ((value & BYTE_1_MASK) >> BYTE_1_SHIFT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,65,"ByteUtils.toLittleEndian(result, value, 0, 2);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,101,uf[offset] = (byte) (value & BYTE_MASK);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,102,uf[offset+1] = (byte) ((value & BYTE_1_MASK) >> BYTE_1_SHIFT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,97,"ByteUtils.toLittleEndian(buf, value, offset, 2);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,112,nt value = (bytes[offset + 1] << BYTE_1_SHIFT) & BYTE_1_MASK;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,113,alue += (bytes[offset] & BYTE_MASK);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,114,eturn value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,107,"return (int) ByteUtils.fromLittleEndian(bytes, offset, 2);"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,25,import java.io.DataInput;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,34,import org.apache.commons.compress.utils.ByteUtils;
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,168,inal DataInputStream inData = new DataInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,170,final DataInput inData = new DataInputStream(in);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,181,arameters.setModificationTime(readLittleEndianInt(inData) * 1000);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,183,"parameters.setModificationTime(ByteUtils.fromLittleEndian(inData, 4) * 1000);"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,236,rivate static byte[] readToNull(final DataInputStream inData) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,238,private static byte[] readToNull(final DataInput inData) throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,245,rivate static long readLittleEndianInt(final DataInputStream inData) throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,246,eturn inData.readUnsignedByte()
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,247, (inData.readUnsignedByte() << 8)
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,248, (inData.readUnsignedByte() << 16)
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,249, (((long) inData.readUnsignedByte()) << 24);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,312,inal DataInputStream inData = new DataInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,307,final DataInput inData = new DataInputStream(in);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,315,inal long crcStored = readLittleEndianInt(inData);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,310,"final long crcStored = ByteUtils.fromLittleEndian(inData, 4);"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,323,inal long isize = readLittleEndianInt(inData);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,318,"final long isize = ByteUtils.fromLittleEndian(inData, 4);"

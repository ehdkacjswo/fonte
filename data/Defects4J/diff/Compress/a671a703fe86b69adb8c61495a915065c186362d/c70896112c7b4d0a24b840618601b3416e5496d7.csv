is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,39,import org.apache.commons.compress.utils.IOUtils;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,49,rivate static final int BUFFER_SIZE = 8 * 1024;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,51,rivate final byte[] SKIP_BUF = new byte[BUFFER_SIZE];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,54,/** The size the TAR header */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,55,private final int recordSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,57,/** The size of a block */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,58,private final int blockSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,60,/** True if file has hit EOF */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,63,/** Size of the current entry */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,66,/** How far into the entry the stream is at */
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,57,rivate byte[] readBuf;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,58,rotected final TarBuffer buffer;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,69,/** An input stream to read from */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,70,private final InputStream is;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,72,/** The meta-data about the current entry */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,75,/** The encoding of the file */
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,67,"his(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,83,"this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,77,"his(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE, encoding);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,93,"this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,94,encoding);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,86,"his(is, blockSize, TarBuffer.DEFAULT_RCDSIZE);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,103,"this(is, blockSize, TarConstants.DEFAULT_RCDSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,98,"his(is, blockSize, TarBuffer.DEFAULT_RCDSIZE, encoding);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,115,"this(is, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,108,"his(is, blockSize, recordSize, null);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,125,"this(is, blockSize, recordSize, null);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,121,"his.buffer = new TarBuffer(is, blockSize, recordSize);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,122,his.readBuf = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,138,this.is = is;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,141,this.recordSize = recordSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,142,this.blockSize = blockSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,133,uffer.close();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,151,is.close();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,137, Get the record size being used by this stream's TarBuffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,155,* Get the record size being used by this stream's buffer.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,142,eturn buffer.getRecordSize();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,160,return recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,177,/ REVIEW
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,178,"/ This is horribly inefficient, but it ensures that we"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,179,/ properly skip over bytes via the TarBuffer...
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,181,ong skip = numToSkip;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,182,hile (skip > 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,183,nt realSkip = (int) (skip > SKIP_BUF.length
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,184, SKIP_BUF.length : skip);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,185,"nt numRead = read(SKIP_BUF, 0, realSkip);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,186,f (numRead == -1) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,187,reak;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,189,kip -= numRead;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,191,eturn (numToSkip - skip);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,196,long available = (entrySize - entryOffset);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,197,"numToSkip = Math.min(numToSkip, available);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,199,"long skipped = IOUtils.skip(is, numToSkip);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,200,count(skipped);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,201,entryOffset += skipped;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,202,return skipped;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,220,ong numToSkip = entrySize - entryOffset;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,231,/* Skip will only go to the end of the current entry */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,232,skip(Long.MAX_VALUE);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,222,hile (numToSkip > 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,223,ong skipped = skip(numToSkip);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,224,f (skipped <= 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,225,"hrow new RuntimeException(""failed to skip current tar"""
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,226," "" entry"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,228,umToSkip -= skipped;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,231,eadBuf = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,234,/* skip to the end of the last record */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,235,skipRecordPadding();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,297,"* The last record block should be written at the full size, so skip any"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,298,* additional space used to fill a record after an entry
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,300,private void skipRecordPadding() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,301,if (this.entrySize > 0 && this.entrySize % this.recordSize != 0) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,302,long numRecords = (this.entrySize / this.recordSize) + 1;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,303,long padding = (numRecords * this.recordSize) - this.entrySize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,304,"long skipped = IOUtils.skip(is, padding);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,305,count(skipped);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,338,yte[] headerBuf = null;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,339,f (!hasHitEOF) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,340,eaderBuf = buffer.readRecord();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,341,asHitEOF = buffer.isEOFRecord(headerBuf);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,342,f (hasHitEOF && headerBuf != null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,343,uffer.tryToConsumeSecondEOFRecord();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,344,eaderBuf = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,357,byte[] headerBuf = readRecord();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,358,hasHitEOF = isEOFRecord(headerBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,359,if (hasHitEOF && headerBuf != null) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,360,tryToConsumeSecondEOFRecord();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,361,consumeRemainderOfLastBlock();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,362,headerBuf = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,368,* Determine if an archive record indicate End of Archive. End of
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,369,* archive is indicated by a record that consists entirely of null bytes.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,371,* @param record The record data to check.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,372,* @return true if the record data is an End of Archive
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,374,protected boolean isEOFRecord(byte[] record) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,375,"return record == null || ArchiveUtils.isArrayZero(record, recordSize);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,379,* Read a record from the input stream and return the data.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,381,* @return The record data or null if EOF has been hit.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,382,* @throws IOException on error
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,384,protected byte[] readRecord() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,386,byte[] record = new byte[recordSize];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,388,int readNow = is.read(record);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,389,count(readNow);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,390,if (readNow != recordSize) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,391,return null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,394,return record;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,518,* Returns the next Archive Entry in this Stream.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,520,"* @return the next entry,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,521,*         or {@code null} if there are no more entries
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,522,* @throws IOException if the next entry could not be read
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,530,* Tries to read the next record rewinding the stream if it is not a EOF record.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,532,* <p>This is meant to protect against cases where a tar
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,533,* implementation has written only one EOF record when two are
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,534,* expected.  Actually this won't help since a non-conforming
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,535,* implementation likely won't fill full blocks consisting of - by
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,536,* default - ten records either so we probably have already read
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,537,* beyond the archive anyway.</p>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,539,private void tryToConsumeSecondEOFRecord() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,540,boolean shouldReset = true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,541,boolean marked = is.markSupported();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,542,if (marked) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,543,is.mark(recordSize);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,545,try {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,546,shouldReset = !isEOFRecord(readRecord());
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,547,} finally {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,548,if (shouldReset && marked) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,549,pushedBackBytes(recordSize);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,550,is.reset();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,491,nt totalRead = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,570,int totalRead = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,493,f (entryOffset >= entrySize) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,572,if (hasHitEOF || entryOffset >= entrySize) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,497,f ((numToRead + entryOffset) > entrySize) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,498,umToRead = (int) (entrySize - entryOffset);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,501,f (readBuf != null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,502,nt sz = (numToRead > readBuf.length) ? readBuf.length
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,503, numToRead;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,505,"ystem.arraycopy(readBuf, 0, buf, offset, sz);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,507,f (sz >= readBuf.length) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,508,eadBuf = null;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,509, else {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,510,nt newLen = readBuf.length - sz;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,511,yte[] newBuf = new byte[newLen];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,513,"ystem.arraycopy(readBuf, sz, newBuf, 0, newLen);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,515,eadBuf = newBuf;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,518,otalRead += sz;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,519,umToRead -= sz;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,520,ffset += sz;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,523,hile (numToRead > 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,524,yte[] rec = buffer.readRecord();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,526,f (rec == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,527,/ Unexpected EOF!
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,528,"hrow new IOException(""unexpected EOF with "" + numToRead"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,529," "" bytes unread. Occured at byte: "" + getBytesRead());"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,531,ount(rec.length);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,532,nt sz = numToRead;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,533,nt recLen = rec.length;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,535,f (recLen > sz) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,536,"ystem.arraycopy(rec, 0, buf, offset, sz);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,538,eadBuf = new byte[recLen - sz];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,540,"ystem.arraycopy(rec, sz, readBuf, 0, recLen - sz);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,541, else {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,542,z = recLen;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,544,"ystem.arraycopy(rec, 0, buf, offset, recLen);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,547,otalRead += sz;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,548,umToRead -= sz;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,549,ffset += sz;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,576,"numToRead = Math.min(numToRead, available());"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,578,"totalRead = is.read(buf, offset, numToRead);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,579,count(totalRead);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,581,if (totalRead == -1) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,582,hasHitEOF = true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,583,} else {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,584,entryOffset += (long) totalRead;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,552,ntryOffset += totalRead;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,571,rotected final TarArchiveEntry getCurrentEntry() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,605,* Get the current TAR Archive Entry that this input stream is processing
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,607,* @return The current Archive Entry
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,609,public ArchiveEntry getCurrentEntry() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,626,"* This method is invoked once the end of the archive is hit, it"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,627,* tries to consume the remaining bytes under the assumption that
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,628,* the tool creating this archive has padded the last block.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,630,private void consumeRemainderOfLastBlock() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,631,long bytesReadOfLastBlock = getBytesRead() % blockSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,632,if (bytesReadOfLastBlock > 0) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,633,"long skipped = IOUtils.skip(is, blockSize - bytesReadOfLastBlock);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,634,count(skipped);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,70,rotected final TarBuffer buffer;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,72,private int recordsWritten;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,73,private final int recordsPerBlock;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,74,private final int recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,95,"his(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,97,"this(os, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,105,"his(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE, encoding);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,107,"this(os, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE, encoding);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,114,"his(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,116,"this(os, blockSize, TarConstants.DEFAULT_RCDSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,126,"his(os, blockSize, TarBuffer.DEFAULT_RCDSIZE, encoding);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,128,"this(os, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,152,"his.buffer = new TarBuffer(out, blockSize, recordSize);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,157,this.recordSize = recordSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,158,this.recordsPerBlock = blockSize / recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,220,uffer.flushBlock();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,223,padAsNeeded();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,224,out.flush();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,230,f(!finished) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,234,if (!finished) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,235,uffer.close();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,247,eturn buffer.getRecordSize();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,250,return this.recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,320,uffer.writeRecord(recordBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,323,writeRecord(recordBuf);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,356,uffer.writeRecord(assemBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,359,writeRecord(assemBuf);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,410,uffer.writeRecord(recordBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,413,writeRecord(recordBuf);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,441,"uffer.writeRecord(wBuf, wOffset);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,444,"writeRecord(wBuf, wOffset);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,515,uffer.writeRecord(recordBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,518,writeRecord(recordBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,536,* Write an archive record to the archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,538,* @param record The record data to write to the archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,539,* @throws IOException on error
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,541,private void writeRecord(byte[] record) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,542,if (record.length != recordSize) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,543,"throw new IOException(""record to write has length '"""
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,544,+ record.length
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,545,"+ ""' which is not the record size of '"""
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,546,"+ recordSize + ""'"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,549,out.write(record);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,550,recordsWritten++;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,554,"* Write an archive record to the archive, where the record may be"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,555,"* inside of a larger array buffer. The buffer must be ""offset plus"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,556,"* record size"" long."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,558,* @param buf The buffer containing the record data to write.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,559,* @param offset The offset of the record data within buf.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,560,* @throws IOException on error
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,562,"private void writeRecord(byte[] buf, int offset) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,564,if ((offset + recordSize) > buf.length) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,565,"throw new IOException(""record has length '"" + buf.length"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,566,"+ ""' with offset '"" + offset"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,567,"+ ""' which is less than the record size of '"""
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,568,"+ recordSize + ""'"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,571,"out.write(buf, offset, recordSize);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,572,recordsWritten++;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,575,private void padAsNeeded() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,576,int start = recordsWritten % recordsPerBlock;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,577,if (start != 0) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,578,for (int i = start; i < recordsPerBlock; i++) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,579,writeEOFRecord();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,3, or more contributor license agreements.  See the NOTICE file
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,4, distributed with this work for additional information
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,6," to you under the Apache License, Version 2.0 (the"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,7," ""License""); you may not use this file except in compliance"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,8, with the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,12," Unless required by applicable law or agreed to in writing,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,13, software distributed under the License is distributed on an
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,15," KIND, either express or implied.  See the License for the"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,16, specific language governing permissions and limitations
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,17, under the License.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,19,ackage org.apache.commons.compress.archivers.tar;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,21,mport java.io.IOException;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,22,mport java.io.InputStream;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,23,mport java.io.OutputStream;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,24,mport java.util.Arrays;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,27, The TarBuffer class implements the tar archive concept
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,28, of a buffered input stream. This concept goes back to the
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,29, days of blocked tape drives and special io devices. In the
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,30," Java universe, the only real function that this class"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,31," performs is to ensure that files have the correct ""block"""
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,32," size, or other tars will complain."
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,33, <p>
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,34, You should never have a need to access this class directly.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,35, TarBuffers are created by Tar IO Streams.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,36, @NotThreadSafe
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,39,"lass TarBuffer { // Not public, because only needed by the Tar IO streams"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,41,** Default record size */
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,42,ublic static final int DEFAULT_RCDSIZE = (512);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,44,** Default block size */
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,45,ublic static final int DEFAULT_BLKSIZE = (DEFAULT_RCDSIZE * 20);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,47,rivate static final byte[] DEFAULT_EOF_RECORD = new byte[DEFAULT_RCDSIZE];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,49,/ TODO make these final? (would need to change close() method)
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,50,rivate InputStream     inStream;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,51,rivate OutputStream    outStream;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,52,rivate final int             blockSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,53,rivate final int             recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,54,rivate final int             recsPerBlock;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,55,rivate final byte[]          blockBuffer;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,56,rivate final byte[]          eofRecord;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,58,rivate int             currBlkIdx;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,59,rivate int             currRecIdx;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,62, Constructor for a TarBuffer on an input stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,63, @param inStream the input stream to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,65,ublic TarBuffer(InputStream inStream) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,66,"his(inStream, TarBuffer.DEFAULT_BLKSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,70, Constructor for a TarBuffer on an input stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,71, @param inStream the input stream to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,72, @param blockSize the block size to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,74,"ublic TarBuffer(InputStream inStream, int blockSize) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,75,"his(inStream, blockSize, TarBuffer.DEFAULT_RCDSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,79, Constructor for a TarBuffer on an input stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,80, @param inStream the input stream to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,81, @param blockSize the block size to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,82, @param recordSize the record size to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,84,"ublic TarBuffer(InputStream inStream, int blockSize, int recordSize) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,85,"his(inStream, null, blockSize, recordSize);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,89, Constructor for a TarBuffer on an output stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,90, @param outStream the output stream to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,92,ublic TarBuffer(OutputStream outStream) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,93,"his(outStream, TarBuffer.DEFAULT_BLKSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,97, Constructor for a TarBuffer on an output stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,98, @param outStream the output stream to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,99, @param blockSize the block size to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,101,"ublic TarBuffer(OutputStream outStream, int blockSize) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,102,"his(outStream, blockSize, TarBuffer.DEFAULT_RCDSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,106, Constructor for a TarBuffer on an output stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,107, @param outStream the output stream to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,108, @param blockSize the block size to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,109, @param recordSize the record size to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,111,"ublic TarBuffer(OutputStream outStream, int blockSize, int recordSize) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,112,"his(null, outStream, blockSize, recordSize);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,116, Private constructor to perform common setup.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,118,"rivate TarBuffer(InputStream inStream, OutputStream outStream, int blockSize, int recordSize) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,119,his.inStream = inStream;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,120,his.outStream = outStream;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,121,his.blockSize = blockSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,122,his.recordSize = recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,123,his.recsPerBlock = (this.blockSize / this.recordSize);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,124,his.blockBuffer = new byte[this.blockSize];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,125,his.eofRecord = recordSize == DEFAULT_RCDSIZE
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,126, DEFAULT_EOF_RECORD : new byte[recordSize];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,128,f (this.inStream != null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,129,his.currBlkIdx = -1;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,130,his.currRecIdx = this.recsPerBlock;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,131, else {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,132,his.currBlkIdx = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,133,his.currRecIdx = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,138, Get the TAR Buffer's block size. Blocks consist of multiple records.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,139, @return the block size
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,141,ublic int getBlockSize() {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,142,eturn this.blockSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,146, Get the TAR Buffer's record size.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,147, @return the record size
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,149,ublic int getRecordSize() {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,150,eturn this.recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,154, Determine if an archive record indicate End of Archive. End of
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,155, archive is indicated by a record that consists entirely of null bytes.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,157, @param record The record data to check.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,158, @return true if the record data is an End of Archive
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,160,ublic boolean isEOFRecord(byte[] record) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,161,"eturn record == null || Arrays.equals(record, eofRecord);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,165, Skip over a record on the input stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,166, @throws IOException on error
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,168,ublic void skipRecord() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,169,f (inStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,170,"hrow new IOException(""reading (via skip) from an output buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,173,f (currRecIdx >= recsPerBlock && !readBlock()) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,174,eturn;    // UNDONE
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,177,urrRecIdx++;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,181, Read a record from the input stream and return the data.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,183, @return The record data or null if EOF has been hit.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,184, @throws IOException on error
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,186,ublic byte[] readRecord() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,187,f (inStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,188,f (outStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,189,"hrow new IOException(""input buffer is closed"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,191,"hrow new IOException(""reading from an output buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,194,f (currRecIdx >= recsPerBlock && !readBlock()) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,195,eturn null;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,198,yte[] result = new byte[recordSize];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,200,"ystem.arraycopy(blockBuffer,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,201,"currRecIdx * recordSize), result, 0,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,202,ecordSize);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,204,urrRecIdx++;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,206,eturn result;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,210," @return false if End-Of-File, else true"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,212,rivate boolean readBlock() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,213,f (inStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,214,"hrow new IOException(""reading from an output buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,217,urrRecIdx = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,219,nt offset = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,220,nt bytesNeeded = blockSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,222,hile (bytesNeeded > 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,223,"ong numBytes = inStream.read(blockBuffer, offset,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,224,ytesNeeded);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,227,/ NOTE
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,228,"/ We have fit EOF, and the block is not full!"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,230,/ This is a broken archive. It does not follow the standard
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,231,"/ blocking algorithm. However, because we are generous, and"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,232,"/ it requires little effort, we will simply ignore the error"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,233,/ and continue as if the entire block were read. This does
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,234,/ not appear to break anything upstream. We used to return
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,235,/ false in this case.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,237,/ Thanks to 'Yohann.Roussel@alcatel.fr' for this fix.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,239,f (numBytes == -1) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,240,f (offset == 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,241,/ Ensure that we do not read gigabytes of zeros
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,242,/ for a corrupt tar file.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,243,/ See http://issues.apache.org/bugzilla/show_bug.cgi?id=39924
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,244,eturn false;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,246,"/ However, just leaving the unread portion of the buffer dirty does"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,247,/ cause problems in some cases.  This problem is described in
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,248,/ http://issues.apache.org/bugzilla/show_bug.cgi?id=29877
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,250,/ The solution is to fill the unused portion of the buffer with zeros.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,252,"rrays.fill(blockBuffer, offset, offset + bytesNeeded, (byte) 0);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,254,reak;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,257,ffset += numBytes;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,258,ytesNeeded -= numBytes;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,260,f (numBytes != blockSize) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,261,/ TODO: Incomplete Read occured - throw exception?
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,265,urrBlkIdx++;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,267,eturn true;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,271," Get the current block number, zero based."
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,273, @return The current zero based block number.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,275,ublic int getCurrentBlockNum() {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,276,eturn currBlkIdx;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,280," Get the current record number, within the current block, zero based."
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,281," Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum."
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,283, @return The current zero based record number.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,285,ublic int getCurrentRecordNum() {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,286,eturn currRecIdx - 1;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,290, Write an archive record to the archive.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,292, @param record The record data to write to the archive.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,293, @throws IOException on error
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,295,ublic void writeRecord(byte[] record) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,296,f (outStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,297,f (inStream == null){
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,298,"hrow new IOException(""Output buffer is closed"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,300,"hrow new IOException(""writing to an input buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,303,f (record.length != recordSize) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,304,"hrow new IOException(""record to write has length '"""
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,305, record.length
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,306," ""' which is not the record size of '"""
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,307," recordSize + ""'"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,310,f (currRecIdx >= recsPerBlock) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,311,riteBlock();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,314,"ystem.arraycopy(record, 0, blockBuffer,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,315,"currRecIdx * recordSize),"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,316,ecordSize);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,318,urrRecIdx++;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,322," Write an archive record to the archive, where the record may be"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,323," inside of a larger array buffer. The buffer must be ""offset plus"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,324," record size"" long."
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,326, @param buf The buffer containing the record data to write.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,327, @param offset The offset of the record data within buf.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,328, @throws IOException on error
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,330,"ublic void writeRecord(byte[] buf, int offset) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,331,f (outStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,332,f (inStream == null){
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,333,"hrow new IOException(""Output buffer is closed"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,335,"hrow new IOException(""writing to an input buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,338,f ((offset + recordSize) > buf.length) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,339,"hrow new IOException(""record has length '"" + buf.length"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,340," ""' with offset '"" + offset"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,341," ""' which is less than the record size of '"""
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,342," recordSize + ""'"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,345,f (currRecIdx >= recsPerBlock) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,346,riteBlock();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,349,"ystem.arraycopy(buf, offset, blockBuffer,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,350,"currRecIdx * recordSize),"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,351,ecordSize);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,353,urrRecIdx++;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,357, Write a TarBuffer block to the archive.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,359,rivate void writeBlock() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,360,f (outStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,361,"hrow new IOException(""writing to an input buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,364,"utStream.write(blockBuffer, 0, blockSize);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,365,utStream.flush();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,367,urrRecIdx = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,368,urrBlkIdx++;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,369,"rrays.fill(blockBuffer, (byte) 0);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,373, Flush the current data block if it has any data in it.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,375,oid flushBlock() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,376,f (outStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,377,"hrow new IOException(""writing to an input buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,380,f (currRecIdx > 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,381,riteBlock();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,386," Close the TarBuffer. If this is an output buffer, also flush the"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,387, current block before closing.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,388, @throws IOException on error
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,390,ublic void close() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,391,f (outStream != null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,392,lushBlock();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,394,f (outStream != System.out
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,395,& outStream != System.err) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,396,utStream.close();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,398,utStream = null;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,400, else if (inStream != null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,401,f (inStream != System.in) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,402,nStream.close();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,404,nStream = null;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,409, Tries to read the next record rewinding the stream if it is not a EOF record.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,411, <p>This is meant to protect against cases where a tar
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,412, implemenation has written only one EOF record when two are
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,413, expected.  Actually this won't help since a non-conforming
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,414, implementation likely won't fill full blocks consisting of - by
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,415, default - ten records either so we probably have already read
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,416, beyond the archive anyway.</p>
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,418,oid tryToConsumeSecondEOFRecord() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,419,oolean shouldReset = true;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,420,oolean marked = inStream.markSupported();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,421,f (marked) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,422,nStream.mark(recordSize);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,424,ry {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,425,houldReset = !isEOFRecord(readRecord());
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,426, finally {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,427,f (shouldReset && marked) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,428,nStream.reset();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,30,/** Default record size */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,31,int DEFAULT_RCDSIZE = (512);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,33,/** Default block size */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,34,int DEFAULT_BLKSIZE = (DEFAULT_RCDSIZE * 20);
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,235,* Returns true if the first N bytes of an array are all zero
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,237,* @param a
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,238,*            The array to check
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,239,* @param size
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,240,*            The number of characters to check (not the size of the array)
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,241,* @return true if the first N bytes are zero
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,243,"public static boolean isArrayZero(byte[] a, int size) {"
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,244,for (int i = 0; i < size; i++) {
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,245,if (a[i] != 0) {
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,246,return false;
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,249,return true;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,75,* Skips the given number of bytes by repeatedly invoking skip on
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,76,* the given input stream if necessary.
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,78,* <p>This method will only skip less than the requested number of
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,79,* bytes if the end of the input stream has been reached.</p>
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,81,* @param input stream to skip bytes in
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,82,* @param numToSkip the number of bytes to skip
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,83,* @return the number of bytes actually skipped
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,84,* @throws IOException
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,86,"public static long skip(InputStream input, long numToSkip) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,87,long available = numToSkip;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,88,while (numToSkip > 0) {
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,89,long skipped = input.skip(numToSkip);
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,90,if (skipped == 0) {
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,91,break;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,93,numToSkip -= skipped;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,95,return (available - numToSkip);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,30,mport java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,31,import java.io.InputStream;
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,44,inal TarArchiveInputStream tais = new TarArchiveInputStream(null);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,44,final InputStream is = new ByteArrayInputStream(new byte[1]);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,45,final TarArchiveInputStream tais = new TarArchiveInputStream(is);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,55,inal TarArchiveInputStream tais = new TarArchiveInputStream(null);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,56,final InputStream is = new ByteArrayInputStream(new byte[1]);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,57,final TarArchiveInputStream tais = new TarArchiveInputStream(is);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,69,inal TarArchiveInputStream tais = new TarArchiveInputStream(null);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,71,final InputStream is = new ByteArrayInputStream(new byte[1]);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,72,final TarArchiveInputStream tais = new TarArchiveInputStream(is);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,485,"ssertEquals(TarBuffer.DEFAULT_BLKSIZE, f.length());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,485,"assertEquals(TarConstants.DEFAULT_BLKSIZE, f.length());"

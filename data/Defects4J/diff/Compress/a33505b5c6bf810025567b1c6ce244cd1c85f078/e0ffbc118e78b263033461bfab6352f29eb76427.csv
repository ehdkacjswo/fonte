is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,99,* @since Apache Commons Compress 1.1
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,111,* @since Apache Commons Compress 1.1
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,130,* @since Apache Commons Compress 1.1
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,137,* Whether this stream is able to read the given entry.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,139,* <p>Some archive formats support variants or details that are
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,140,* not supported (yet).</p>
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,142,* <p>This implementation always returns true.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,144,* @since Apache Commons Compress 1.1
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,146,public boolean canRead(ArchiveEntry ae) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,147,return true;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,130,* @since Apache Commons Compress 1.1
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,151,* @since Apache Commons Compress 1.1
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,158,* Whether this stream is able to write the given entry.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,160,* <p>Some archive formats support variants or details that are
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,161,* not supported (yet).</p>
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,163,* <p>This implementation always returns true.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,164,* @since Apache Commons Compress 1.1
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,166,public boolean canWrite(ArchiveEntry ae) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,167,return true;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,151," Checks whether the compression method of this entry is supported,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,152, i.e. whether the content of this entry can be accessed.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,154, @since Commons Compress 1.1
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,155," @see <a href=""https://issues.apache.org/jira/browse/COMPRESS-93"""
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,156,         >COMPRESS-93</a>
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,157, @return <code>true</code> if the compression method is known
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,158,"         and supported, <code>false</code> otherwise"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,160,ublic boolean isSupportedCompressionMethod() {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,161,eturn method == STORED || method == DEFLATED;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,199,ublic boolean canRead(ZipArchiveEntry ze) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,200,eturn !ze.isEncrypted() &&
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,201,ze.getMethod() == ZipArchiveEntry.STORED
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,202,| ze.getMethod() == ZipArchiveEntry.DEFLATED);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,199,public boolean canRead(ArchiveEntry ae) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,200,if (ae instanceof ZipArchiveEntry) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,201,ZipArchiveEntry ze = (ZipArchiveEntry) ae;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,202,return !ze.isEncrypted() &&
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,203,(ze.getMethod() == ZipArchiveEntry.STORED
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,204,|| ze.getMethod() == ZipArchiveEntry.DEFLATED);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,206,return super.canRead(ae);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,514,ublic boolean canWrite(ZipArchiveEntry ze) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,515,eturn !ze.isEncrypted() &&
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,516,ze.getMethod() == STORED || ze.getMethod() == DEFLATED);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,514,public boolean canWrite(ArchiveEntry ae) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,515,if (ae instanceof ZipArchiveEntry) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,516,ZipArchiveEntry ze = (ZipArchiveEntry) ae;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,517,return !ze.isEncrypted() &&
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,518,(ze.getMethod() == STORED || ze.getMethod() == DEFLATED);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,520,return super.canWrite(ae);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,125,"ssertTrue(bla.getEntry(""test1.xml"").isSupportedCompressionMethod());"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,125,"assertTrue(bla.canRead(bla.getEntry(""test1.xml"")));"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,129,"ssertFalse(moby.getEntry(""README"").isSupportedCompressionMethod());"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,129,"assertFalse(moby.canRead(moby.getEntry(""README"")));"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,148,ssertFalse(entry.isSupportedCompressionMethod());
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,148,assertFalse(zip.canRead(entry));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,204,ZipArchiveOutputStream zos =
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,205,new ZipArchiveOutputStream((java.io.OutputStream) null);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,206,ssertFalse(entry.isSupportedCompressionMethod());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,208,assertFalse(zos.canWrite(entry));
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,210,ssertTrue(entry.isSupportedCompressionMethod());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,212,assertTrue(zos.canWrite(entry));
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,214,ssertTrue(entry.isSupportedCompressionMethod());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,216,assertTrue(zos.canWrite(entry));
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,219,ssertFalse(entry.isSupportedCompressionMethod());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,221,assertFalse(zos.canWrite(entry));

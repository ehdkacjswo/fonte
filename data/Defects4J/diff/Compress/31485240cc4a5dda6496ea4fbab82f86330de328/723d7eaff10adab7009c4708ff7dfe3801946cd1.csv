is_addition,old_file_path,new_file_path,line_num,content
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,3, or more contributor license agreements.  See the NOTICE file
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,4, distributed with this work for additional information
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,6," to you under the Apache License, Version 2.0 (the"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,7," ""License""); you may not use this file except in compliance"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,8, with the License.  You may obtain a copy of the License at
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,12," Unless required by applicable law or agreed to in writing,"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,13, software distributed under the License is distributed on an
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,15," KIND, either express or implied.  See the License for the"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,16, specific language governing permissions and limitations
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,17, under the License.
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,19,ackage org.apache.commons.compress.examples;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,21,mport java.io.File;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,22,mport java.io.FileInputStream;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,23,mport java.io.FileNotFoundException;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,24,mport java.io.FileOutputStream;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,25,mport java.io.IOException;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,26,mport java.io.InputStream;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,28,mport org.apache.commons.compress.CompressException;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,29,mport org.apache.commons.compress.Compressor;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,30,mport org.apache.commons.compress.CompressorFactory;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,32,ublic class BZip2Example {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,35, Compression
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,37,ublic void compress() {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,38,ompressor compressor;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,39,ry {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,40,"ompressor = CompressorFactory.getInstance(""bz2"");"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,41,ompressor.compressToHere(
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,42,"ew File(""C:\\Temp\\test.tar""));"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,43, catch (CompressException e) {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,44,.printStackTrace();
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,51,ublic void compressStream() {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,52,nputStream in = null;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,53,ileOutputStream out = null;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,54,ileInputStream param = null;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,55,ry {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,56,/ Get a filestream
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,57,aram = new FileInputStream(
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,58,"ew File(""C:\\Temp\\test.tar""));"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,60,/ get the compressor
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,61,"ompressor compressor = CompressorFactory.getInstance(""bz2"");"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,63,/ compress this stream and get back an readable inputstream
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,64,n = compressor.compress(param);
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,66,/ write this stream to a destination of your desire
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,67,"ile f = new File(""C:\\Temp\\test.tar.example.bz2"");"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,68,ut = new FileOutputStream(f);
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,69,inal byte[] buffer = new byte[ 8024 ];
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,70,nt n = 0;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,71,hile( -1 != ( n = in.read( buffer ) ) ) {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,72,"ut.write( buffer, 0, n );"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,74, catch (CompressException e) {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,75,.printStackTrace();
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,76, catch (FileNotFoundException e) {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,77,.printStackTrace();
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,78, catch (IOException e) {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,79,.printStackTrace();
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,80, finally {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,81,ry {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,82,ut.close();
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,83,n.close();
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,84,aram.close();
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,85, catch (IOException e1) {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,86,1.printStackTrace();
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,92, Decompress a file.
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,94,ublic void decompress() {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,95,ompressor decompressor;
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,96,ry {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,97,"ecompressor = CompressorFactory.getInstance(""bz2"");"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,99,ecompressor.decompressTo(
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,100,"ew File(""C:\\Temp\\asf-logo-huge.tar.bz2""),"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,101,"ew File(""C:\\Temp\\asf-logo-huge.tar""));"
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,102, catch (CompressException e) {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,103,.printStackTrace();
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,107,ublic static void main(String[] args) {
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,108,ew BZip2Example().compress();
False,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,109,ew BZip2Example().decompress();
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,3, or more contributor license agreements.  See the NOTICE file
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,4, distributed with this work for additional information
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,6," to you under the Apache License, Version 2.0 (the"
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,7," ""License""); you may not use this file except in compliance"
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,8, with the License.  You may obtain a copy of the License at
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,12," Unless required by applicable law or agreed to in writing,"
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,13, software distributed under the License is distributed on an
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,15," KIND, either express or implied.  See the License for the"
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,16, specific language governing permissions and limitations
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,17, under the License.
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,19,ackage org.apache.commons.compress.examples;
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,21,mport java.io.File;
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,22,mport java.io.FileNotFoundException;
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,24,mport org.apache.commons.compress.Archive;
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,25,mport org.apache.commons.compress.ArchiveException;
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,26,mport org.apache.commons.compress.ArchiverFactory;
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,28,ublic class TarExample {
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,31, Example for Tar-packing
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,33,ublic void pack() {
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,34,ry {
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,35,"rchive archiver = ArchiverFactory.getInstance(""tar"");"
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,36,"rchiver.add(new File(""C:\\Temp\\allclasses-frame.html""));"
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,37,"rchiver.add(new File(""C:\\Temp\\allclasses-frame.html.bz2""));"
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,38,"rchiver.save(new File(""C:\\Temp\\myTar.tar""));"
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,39, catch (ArchiveException e) {
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,40,.printStackTrace();
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,41, catch (FileNotFoundException e) {
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,42,.printStackTrace();
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,47, Example for an unpack operation
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,49,ublic void unpack() {
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,50,ry {
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,51,rchive archiver = ArchiverFactory.getInstance(
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,52,"ew File(""C:\\Temp\\myTar.tar""));"
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,53,"rchiver.unpack(new File(""C:\\Temp\\unpacked\\""));"
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,54, catch (ArchiveException e) {
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,55,.printStackTrace();
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,59,ublic static void main(String[] args) {
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,60,ew TarExample().pack();
False,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,61,ew TarExample().unpack();
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,3, or more contributor license agreements.  See the NOTICE file
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,4, distributed with this work for additional information
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,6," to you under the Apache License, Version 2.0 (the"
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,7," ""License""); you may not use this file except in compliance"
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,8, with the License.  You may obtain a copy of the License at
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,12," Unless required by applicable law or agreed to in writing,"
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,13, software distributed under the License is distributed on an
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,15," KIND, either express or implied.  See the License for the"
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,16, specific language governing permissions and limitations
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,17, under the License.
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,19,ackage org.apache.commons.compress.examples;
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,21,mport java.io.File;
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,22,mport java.io.FileNotFoundException;
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,24,mport org.apache.commons.compress.Archive;
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,25,mport org.apache.commons.compress.ArchiveException;
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,26,mport org.apache.commons.compress.ArchiverFactory;
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,29,ublic class ZipExample {
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,32, Example for an pack operation
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,34,ublic void pack() {
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,35,ry {
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,36,"rchive archiver = ArchiverFactory.getInstance(""zip"");"
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,37,"rchiver.add(new File(""C:\\Temp\\1.html""));"
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,38,"rchiver.add(new File(""C:\\Temp\\1.html.bz2""));"
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,39,"rchiver.save(new File(""C:\\Temp\\ZIPTEST.zip""));"
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,40, catch (ArchiveException e) {
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,41,.printStackTrace();
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,42, catch (FileNotFoundException e) {
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,43,.printStackTrace();
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,48, Example for an unpack operation
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,50,ublic void unpack() {
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,51,ry {
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,52,"rchive archiver = ArchiverFactory.getInstance(new File(""C:\\Temp\\ZIPTEST.zip""));"
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,53,"rchiver.unpack(new File(""C:\\Temp\\unpacked\\""));"
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,54, catch (ArchiveException e) {
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,55,.printStackTrace();
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,59,ublic static void main (String argv[]) {
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,60,ew ZipExample().pack();
False,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,61,ew ZipExample().unpack();
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,17, under the License.
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,19,ackage org.apache.commons.compress;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,21,mport java.io.File;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,22,mport java.io.FileInputStream;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,23,mport java.io.FileNotFoundException;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,24,mport java.io.FileOutputStream;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,25,mport java.io.IOException;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,26,mport java.io.InputStream;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,27,mport java.io.OutputStream;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,28,mport java.util.ArrayList;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,29,mport java.util.Iterator;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,32, Abstract implementation of an archiver
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,34,ublic abstract class AbstractArchive extends PackableObject implements Archive {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,36,* hold filestreams for a possible pack operation */
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,37,rivate ArrayList entries = new ArrayList();
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,39,* the source of an unpack-operation */
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,40,rivate File archive = null;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,43, Compresses the file with the given String as a filename
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,44, @see org.apache.commons.compress.Archive#save(OutputStream)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,46,ublic void save(File output) throws ArchiveException {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,47,f(output == null) {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,48,"hrow new ArchiveException(""Destination directory must not be null."");"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,50,ry {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,51,his.save(new FileOutputStream(output));
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,52, catch (FileNotFoundException e) {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,53,"hrow new ArchiveException(""This path is not writeable"", e);"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,55,his.setArchive(output);
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,58,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,59, @see org.apache.commons.compress.Archive#save(java.io.FileOutputStream)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,61,ublic void save(OutputStream output) throws ArchiveException {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,62,oSave(output);
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,66, Specific implementation of the save opteration.
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,67, @param output - stream to archive to
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,68, @throws ArchiveException
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,70,rotected abstract void doSave(OutputStream output) throws ArchiveException;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,72,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,73, @see org.apache.commons.compress.Archive#getArchive()
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,75,ublic File getArchive() {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,76,eturn this.archive;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,79,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,80, @see org.apache.commons.compress.Archive#setArchive(java.io.File)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,82,ublic void setArchive(File file) {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,83,"/ TODO: when an archive is set, it's files must be added to the"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,84,/ internal file list for possible delete operations
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,85,his.archive = file;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,88,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,89, @see org.apache.commons.compress.Archive#add(java.io.File)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,91,ublic void add(File file) throws FileNotFoundException {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,92,nputStream is = new FileInputStream(file);
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,93,"rchiveEntry archiveEntry = new ArchiveEntry(file.getName(), is);"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,94,ntries.add( archiveEntry );
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,97,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,98, @see org.apache.commons.compress.Archive#add(java.io.InputStream)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,100,ublic void add(ArchiveEntry archiveEntry) {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,101,ntries.add( archiveEntry );
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,104,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,105, @see org.apache.commons.compress.Archive#getPackFilesIterator()
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,107,ublic Iterator getEntryIterator() {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,108,eturn this.entries.iterator();
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,111,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,112, @see org.apache.commons.compress.Archive#unpack(java.lang.String)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,114,ublic void unpack(File unpackDir) throws UnpackException {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,115,f(unpackDir == null) {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,116,"hrow new UnpackException(""Destination directory must not be null."");"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,118,f(!unpackDir.isDirectory()) {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,119,"hrow new UnpackException(""This file must be a valid directory."");"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,121,f(!unpackDir.canWrite()) {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,122,"hrow new UnpackException(""This path is not writeable"");"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,124,oUnpack(unpackDir);
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,128, Specific implementation of the unpack opteration.
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,129," @param unpackDir dir, to unpack to"
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,130, @throws UnpackException
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,132,rotected abstract void doUnpack(File unpackDir) throws UnpackException;
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,134,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,135, @see org.apache.commons.compress.Archive#close()
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,137,ublic void close() throws IOException {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,138,terator it = getEntryIterator();
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,139,hile(it.hasNext()) {
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,140,rchiveEntry ae = (ArchiveEntry)it.next();
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,141,nputStream is = ae.getStream();
False,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,142,s.close();
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,17, under the License.
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,19,ackage org.apache.commons.compress;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,21,mport java.io.File;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,22,mport java.io.FileInputStream;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,23,mport java.io.FileNotFoundException;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,24,mport java.io.FileOutputStream;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,25,mport java.io.IOException;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,26,mport java.io.InputStream;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,28, AbstractCompressor handles all compression/decompression
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,29, actions on an abstract basis.
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,31,ublic abstract class AbstractCompressor
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,32,xtends PackableObject
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,33,mplements Compressor {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,35,ublic AbstractCompressor() {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,36,uper();
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,40, Returns a String with the default file extension
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,41," for this compressor. For example, a zip-files default"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,42," file extension would be ""zip"" (without leading dot)."
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,44, @return the default file extension
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,46,ublic abstract String getDefaultFileExtension();
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,49,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,50, @see org.apache.commons.compress.Compressor#compressStream(java.io.FileInputStream)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,52,ublic InputStream compress(InputStream input) throws CompressException {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,53,ileOutputStream tempFileOutputStream = null;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,54,ry {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,55,"ile temp = File.createTempFile(""commons_"",""jkt"");"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,56,empFileOutputStream = new FileOutputStream(temp);
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,57,"ompressTo(input, tempFileOutputStream);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,58,eturn new FileInputStream(temp);
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,59, catch (IOException e) {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,60,"hrow new CompressException(""An I/O Exception has occured"", e);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,61, finally {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,62,ry {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,63,f(tempFileOutputStream != null) {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,64,empFileOutputStream.close();
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,66, catch (IOException e) {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,67,"hrow new CompressException(""An I/O Exception occured while closing the streams"", e);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,72,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,73," @see org.apache.commons.compress.Compressor#compress(java.io.File, java.io.File)"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,75,"ublic void compressTo(File input, File output) throws CompressException {"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,76,ileOutputStream outputStream = null;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,77,ileInputStream inputStream = null;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,78,ry {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,79,utputStream = new FileOutputStream( output );
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,80,nputStream = new FileInputStream( input );
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,81,"his.compressTo(inputStream, outputStream);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,82, catch (FileNotFoundException e) {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,83,"hrow new CompressException(""File not found"" ,e);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,87,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,88, @see org.apache.commons.compress.Compressor#compress(java.io.File)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,90,ublic void compressToHere(File input) throws CompressException {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,91,"tring pathToFile = input.getAbsolutePath().concat(""."").concat(getDefaultFileExtension());"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,92,ile output = new File(pathToFile);
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,93,"his.compressTo(input, output);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,96,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,97, @see org.apache.commons.compress.Compressor#compressStream(java.io.File)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,99,ublic InputStream compress(File input) throws CompressException {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,100,ry {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,101,eturn this.compress(
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,102,ew FileInputStream(input));
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,103, catch (FileNotFoundException e) {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,104,"hrow new CompressException(""File could not be found."",e);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,108,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,109, @see org.apache.commons.compress.Decompressor#decompress(java.io.File)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,111,ublic InputStream decompress(File input) throws CompressException {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,112,ile temp;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,113,nputStream result;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,114,ry {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,115,"emp = File.createTempFile(""compress_"", ""jkt"");"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,116,"his.decompressTo(input, temp);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,117,esult = new FileInputStream(temp);
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,118, catch (IOException e) {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,119,"hrow new CompressException(""Error while creating a temporary file"", e);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,121,eturn result;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,124,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,125, @see org.apache.commons.compress.Decompressor#decompress(java.io.FileInputStream)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,127,ublic InputStream decompress(InputStream input)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,128,hrows CompressException {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,129,ile temp;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,130,nputStream result;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,131,ry {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,132,"emp = File.createTempFile(""compress_"", ""jkt"");"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,133,"his.decompressTo(input, new FileOutputStream(temp));"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,134,esult = new FileInputStream(temp);
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,135, catch (IOException e) {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,136,"hrow new CompressException(""Error while creating a temporary file"", e);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,138,eturn result;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,141,* (non-Javadoc)
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,142," @see org.apache.commons.compress.Compressor#decompress(java.io.File, java.io.File)"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,144,"ublic void decompressTo(File input, File output)"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,145,hrows CompressException {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,146,ileInputStream inputStream = null;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,147,ileOutputStream outputStream = null;
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,148,ry {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,149,utputStream = new FileOutputStream( output );
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,150,nputStream = new FileInputStream( input );
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,151,"ecompressTo(inputStream, outputStream);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,152, catch (FileNotFoundException e) {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,153,"hrow new CompressException(""File could not be found"", e);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,154, finally {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,155,ry {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,156,f(inputStream != null) {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,157,nputStream.close();
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,159, catch (IOException e) {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,160,"hrow new CompressException(""An I/O Exception occured while closing the streams"", e);"
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,161, finally {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,162,ry {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,163,f(outputStream != null) {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,164,utputStream.close();
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,166, catch (IOException e) {
False,src/java/org/apache/commons/compress/AbstractCompressor.java,src/java/org/apache/commons/compress/AbstractCompressor.java,167,"hrow new CompressException(""An I/O Exception occured while closing the streams"", e);"
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,17, under the License.
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,19,ackage org.apache.commons.compress;
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,21,mport java.io.File;
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,22,mport java.io.FileNotFoundException;
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,23,mport java.io.IOException;
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,24,mport java.io.OutputStream;
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,25,mport java.util.Iterator;
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,27, Archive is the interface which defines all operations
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,28, for all possible archive-operations.
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,30, TODO:
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,31, - delete files from an archive
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,32, - add files to an existing archive
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,33, - recursivley add directories
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,35,ublic interface Archive {
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,37, Adds a file to the internal filelist
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,38, for a possible pack-operation
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,40,ublic void add(File file) throws FileNotFoundException;
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,43, Adds a FileInputStream to the internal filelist
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,44, for a possible pack-operation
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,46,ublic void add(ArchiveEntry entry);
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,49, Packs a file.
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,50, The destination filename must be set manually with setDestinationFile(...).
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,51, There must be at least 1 file to be packed.
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,53, @throws ArchiveException if there is no destination file or files to be packed
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,55,ublic void save(OutputStream output) throws ArchiveException;
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,58, Packs this file.
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,59, This methods ignores what has been set in setDestinationFile(...) and
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,60, uses the filename of the parameter. This string must not be null.
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,62, @throws ArchiveException if there is no destination file or files to be packed
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,64,ublic void save(File output) throws ArchiveException;
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,67, Sets an Archive for manipulating. An archive is set if someone
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,68, saves an Archive or calls getInstance(...) with an archive.
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,69, @param file the file to manipulate
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,71,oid setArchive(File file);
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,74," Returns the archive file and null,"
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,75, if this archiver has not been saved yet or
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,76, there has not been set an archive manually.
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,77," @return the archiver, or null"
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,79,ublic File getArchive();
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,82, Unpacks to the specified directory
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,83, @param destinationDir to unpack
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,84, @throws UnpackException if an unpack error occurs
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,86,ublic void unpack(File destinationDir) throws UnpackException;
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,89, Get an iterator of ArchiveEntrys which shall be archived
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,90, @return the iterator
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,92,ublic Iterator getEntryIterator();
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,95, Closes this archiver and all internal streams.
False,src/java/org/apache/commons/compress/Archive.java,src/java/org/apache/commons/compress/Archive.java,97,ublic void close() throws IOException ;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,17, under the License.
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,19,ackage org.apache.commons.compress;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,21,mport java.io.File;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,22,mport java.util.ArrayList;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,23,mport java.util.Iterator;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,24,mport java.util.List;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,26,mport org.apache.commons.compress.archivers.tar.TarArchive;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,27,mport org.apache.commons.compress.archivers.zip.ZipArchive;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,31, Provides implementations for all ArchiverFactory methods.
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,33,ublic class ArchiverFactory {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,34,* internal archiver list */
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,35,rivate static List archives;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,37,/ pre-register archives
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,38,tatic {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,39,rchives = new ArrayList();
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,40,ry {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,41,egisterArchiver(TarArchive.class);
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,42,egisterArchiver(ZipArchive.class);
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,43, catch (ArchiveException e) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,44,.printStackTrace();
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,48,rivate ArchiverFactory() {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,52, Registers a new archiver in the factory.
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,53, The archiver must implement the archiver interface.
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,55, @param className full qualified archiver implementation
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,56, @throws ClassNotFoundException if the new archiver class could not be found
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,57, @throws ArchiveException if the new archiver does not implement the archiver interface
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,59,ublic static void registerArchiver(String className)
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,60,"hrows ClassNotFoundException, ArchiveException {"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,61,lass clazz = Class.forName(className);
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,62,egisterArchiver(clazz);
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,66, Registers a new archiver in the factory.
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,67, The archiver must implement the archiver interface and must
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,68, be an concrete implementation
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,70, @param clazz full qualified archiver implementation
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,71, @throws ArchiveException if the new archiver does not implement the archiver interface
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,73,ublic static void registerArchiver(Class clazz)
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,74,hrows ArchiveException {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,75,"/ register only, if the class is assignable and not an interface"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,76,f(Archive.class.isAssignableFrom(clazz) && !(clazz.isInterface())) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,77,ry {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,78,rchives.add(clazz.newInstance());
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,79, catch (InstantiationException e) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,80,"hrow new ArchiveException(""Archive could not be instantiated"", e);"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,81, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,82,"hrow new ArchiveException(""Archive could not be instantiated"", e);"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,84, else {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,85,"hrow new ArchiveException(""Archive does not implement the Archive.class interface."");"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,90," Returns an empty Archive, if an archiver could be found for this factory."
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,91," If two Archive-implementations with the same name are registered,"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,92, the first matching archiver will be instanciated.
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,94," @return the archiver, or null, if no matching archiver could be found"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,95, @throws ArchiveException if the archiver could not be created
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,97,ublic static Archive getInstance(String archiverName)
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,98,hrows ArchiveException {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,99,ry {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,100,f(archiverName == null) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,101,"hrow new ArchiveException(""ArchiverFactory could not create instance"");"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,103,terator it = archives.iterator();
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,104,hile(it.hasNext()) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,105,ackableObject po = (PackableObject)it.next();
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,106,"f(po.isPackableWith(archiverName, PackableObject.CHOOSE_NAME)) {"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,107,eturn (Archive)po.getClass().newInstance();
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,110,eturn null;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,111, catch (InstantiationException e) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,112,"hrow new ArchiveException(""ArchiverFactory could not create instance"", e);"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,113, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,114,"hrow new ArchiveException(""ArchiverFactory could not create instance"", e);"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,119," Returns an archiver, filled with an existing archive."
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,120, Uses the byte header to identify the archiver. If no corresponding
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,121," archiver could be found, a filename extension check will be done."
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,122, @param file an existing archive
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,123," @return an archiver, filled with the archive"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,125,ublic static Archive getInstance(File file)
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,126,hrows ArchiveException {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,127,f(file == null || !file.isFile()) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,128,"hrow new ArchiveException(""ArchiverFactory could not create instance for this file"");"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,132,* Archive result */
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,133,ackableObject packable = null;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,135,ry {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,136,"ackable = PackableObject.identifyByHeader(file, archives);"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,138,f(packable == null) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,139,eturn null;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,141,rchive archive = (Archive)packable.getClass().newInstance();
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,142,rchive.setArchive(file);
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,143,eturn archive;
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,144, catch (SecurityException e) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,145,"hrow new ArchiveException(""A security violation occured while reading the field ARCHIVER_NAME"", e);"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,146, catch (IllegalArgumentException e) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,147,"hrow new ArchiveException(""Internal factory exception"", e);"
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,148, catch (Exception e) {
False,src/java/org/apache/commons/compress/ArchiverFactory.java,src/java/org/apache/commons/compress/ArchiverFactory.java,149,"hrow new ArchiveException(""ArchiverFactory could not create instance"", e);"
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,17, under the License.
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,19,ackage org.apache.commons.compress;
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,21,mport java.io.File;
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,22,mport java.io.InputStream;
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,23,mport java.io.OutputStream;
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,26, The Compressor Interface defines all operations for
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,27, the compress/decompress actions.
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,29,ublic interface Compressor {
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,31, Compresses this file and returns an
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,32, InputStream to the compressed File
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,34, @param input File to compress
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,35, @return InputStream of the compressed file
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,36, @throws CompressException if the Compressor reports an error
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,38,ublic InputStream compress(File input) throws CompressException;
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,41, Compresses this InputStream and returns an
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,42, InputStream to the compressed file
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,44, @param input Stream to compress
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,45, @return Stream to the compressed file
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,46, @throws CompressException if the Compressor reports an error
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,48,ublic InputStream compress(InputStream input) throws CompressException;
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,51, Compresses the file input and creates a file in the same
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,52, directory with the default file extension in its name.
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,54, @param input the file to compress
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,55, @throws CompressException if the Compressor reports an error
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,57,ublic void compressToHere(File input) throws CompressException;
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,60," Creates the file ""output"" with the compressed"
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,61," content of file ""input"""
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,63, @param input the file to compress
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,64, @param output the file to create
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,65, @throws CompressException if the Compressor reports an error
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,67,"ublic void compressTo(File input, File output) throws CompressException;"
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,70, Compresses the input stream and writes the compressed
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,71, bytes to the output stream. This method must be implemented
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,72, by all new compressortypes.
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,74, @param input InputStream to compress to
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,75, @param output OutputStream to which the byte shall be written
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,76, @throws CompressException if the Compressor reports an error
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,78,"ublic void compressTo(InputStream input, OutputStream output) throws CompressException;"
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,81, Decompresses a file and returns an InputStream
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,82, @param input file to decompress
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,83, @return the decompressed file as an inputstream
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,85,ublic InputStream decompress(File input) throws CompressException;
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,88, Decompresses a file and returns an InputStream
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,89, @param input inputstream to decompress
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,90, @return the decompressed InputStream
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,92,ublic InputStream decompress(InputStream input) throws CompressException;
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,95, Decompresses this file and writes the decompressed byte to the output file
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,96, @param input File to decompress
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,97, @param output File to write the decompressed bytes to
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,98, @throws CompressException if the Compressor reports an error
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,100,"ublic void decompressTo(File input, File output) throws CompressException;"
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,103, Decompresses this file and writes the decompressed file to the output-stream
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,104, @param input Stream to decompress
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,105, @param output Stream to write the decompressed bytes to
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,106, @throws CompressException if the Compressor reports an error
False,src/java/org/apache/commons/compress/Compressor.java,src/java/org/apache/commons/compress/Compressor.java,108,"ublic void decompressTo(InputStream input, OutputStream output) throws CompressException;"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,17, under the License.
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,19,ackage org.apache.commons.compress;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,21,mport java.io.File;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,22,mport java.util.ArrayList;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,23,mport java.util.Iterator;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,24,mport java.util.List;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,26,mport org.apache.commons.compress.compressors.bzip2.BZip2Compressor;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,28, Compressor-Factory.
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,29, Use CompressorFactory.TYPE.getInstance() for an new Compressor-Instance.
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,31,ublic abstract class CompressorFactory {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,32,* Name of this CompressorFactory*/
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,33,rivate final String name;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,34,* internal archiver list */
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,35,rivate static List compressors;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,37,/ register compressors
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,38,tatic {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,39,ompressors = new ArrayList();
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,40,ry {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,41,egisterCompressor(BZip2Compressor.class);
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,42, catch (CompressException e) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,43,.printStackTrace();
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,48, Registers a new archiver in the factory.
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,49, The archiver must implement the archiver interface.
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,51, @param className full qualified archiver implementation
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,52, @throws ClassNotFoundException if the new archiver class could not be found
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,53, @throws ArchiveException if the new archiver does not implement the archiver interface
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,55,ublic static void registerCompressor(String className)
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,56,"hrows ClassNotFoundException, CompressException {"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,57,lass clazz = Class.forName(className);
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,58,egisterCompressor(clazz);
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,62, Registers a new archiver in the factory.
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,63, The archiver must implement the archiver interface and must
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,64, be an concrete implementation
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,66, @param clazz full qualified archiver implementation
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,67, @throws ArchiveException if the new archiver does not implement the archiver interface
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,69,ublic static void registerCompressor(Class clazz)
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,70,hrows CompressException {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,71,"/ register only, if the class is assignable and not an interface"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,72,f(Compressor.class.isAssignableFrom(clazz) && !(clazz.isInterface())) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,73,ry {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,74,ompressors.add(clazz.newInstance());
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,75, catch (InstantiationException e) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,76,"hrow new CompressException(""Compressor could not be instantiated"", e);"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,77, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,78,"hrow new CompressException(""Compressor could not be instantiated"", e);"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,80, else {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,81,"hrow new CompressException(""Compressor does not implement the Compressor.class interface."");"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,86, Constructor. Takes the name of the implementation.
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,87, @param name - name of the implementation
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,89,rivate CompressorFactory(String name) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,90,his.name = name;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,94, Returns a compressor
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,95, @return the compressor
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,97,ublic abstract Compressor getInstance();
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,100," Returns an empty Compressor, if an matching compressor"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,101, could be found within this factory.
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,102," If two implementations with the same name are registered,"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,103, the first matching implementation will be instanciated.
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,105," @return the compressor, or null, if no matching compressor could be found"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,106, @throws CompressException if the compressor could not be created
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,108,ublic static Compressor getInstance(String compressorName)
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,109,hrows CompressException {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,110,ry {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,111,f(compressorName == null) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,112,"hrow new CompressException(""CompressorFactory could not create instance"");"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,114,terator it = compressors.iterator();
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,115,hile(it.hasNext()) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,116,ackableObject po = (PackableObject)it.next();
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,117,"f(po.isPackableWith(compressorName, PackableObject.CHOOSE_NAME)) {"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,118,eturn (Compressor)po.getClass().newInstance();
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,121,eturn null;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,122, catch (InstantiationException e) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,123,"hrow new CompressException(""CompressorFactory could not create instance"", e);"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,124, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,125,"hrow new CompressException(""CompressorFactory could not create instance"", e);"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,130," Returns an archiver, filled with an existing archive."
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,131, Uses the byte header to identify the archiver. If no corresponding
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,132," archiver could be found, a filename extension check will be done."
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,133, @param file an existing archive
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,134," @return an archiver, filled with the archive"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,136,ublic static Compressor getInstance(File file)
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,137,hrows CompressException {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,138,f(file == null || !file.isFile()) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,139,"hrow new CompressException(""CompressorFactory could not create instance for this file"");"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,143,* Archive result */
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,144,ackableObject packable = null;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,146,ry {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,147,"ackable = PackableObject.identifyByHeader(file, compressors);"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,149,f(packable == null) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,150,eturn null;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,152,ompressor compressor = (Compressor)packable.getClass().newInstance();
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,153,eturn compressor;
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,154, catch (SecurityException e) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,155,"hrow new CompressException(""A security violation occured while reading the field ARCHIVER_NAME"", e);"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,156, catch (IllegalArgumentException e) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,157,"hrow new CompressException(""Internal factory exception"", e);"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,158, catch (Exception e) {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,159,"hrow new CompressException(""CompressorFactory could not create instance"", e);"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,163, <code>BZIP2</code> Compressor Factory
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,165,"ublic static CompressorFactory BZIP2 = new CompressorFactory(""BZIP2"") {"
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,166,* (non-Javadoc)
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,167, @see org.apache.commons.compress.ArchiverFactory#getInstance()
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,169,ublic Compressor getInstance() {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,170,eturn new BZip2Compressor();
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,174,* (non-Javadoc)
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,175, @see java.lang.Object#toString()
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,177,ublic String toString() {
False,src/java/org/apache/commons/compress/CompressorFactory.java,src/java/org/apache/commons/compress/CompressorFactory.java,178,eturn name;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,17, under the License.
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,19,ackage org.apache.commons.compress;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,21,mport java.io.File;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,22,mport java.io.FileInputStream;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,23,mport java.io.IOException;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,24,mport java.util.Iterator;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,25,mport java.util.List;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,28, Abstract super object for Compressor and Archiver classes.
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,30,ublic abstract class PackableObject {
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,32,* Type for archive choosing: String */
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,33,rotected static final int CHOOSE_EXTENSION = 1;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,34,* Type for archive choosing: Long */
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,35,rotected static final int CHOOSE_NAME = 2;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,38, Header byte array for this archive.
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,40,ublic abstract byte[] getHeader();
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,43," Returns the default FileExtension for this archive,"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,44," for example ""zip"", ""tar""..."
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,46,ublic abstract String getDefaultFileExtension();
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,49, Returns the ArchiveName for this archive.
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,51,ublic abstract String getName();
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,54, String Chooser.
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,55, @param value
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,56, @param choose
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,57, @return
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,59,"rotected boolean isPackableWith(Object value, int choose) {"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,60,f(value == null) {
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,61,eturn false;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,63,f(choose == CHOOSE_EXTENSION) {
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,64,f(value.equals( getDefaultFileExtension())) {
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,65,eturn true;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,67, else if (choose == CHOOSE_NAME) {
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,68,f(value.equals( getName())) {
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,69,eturn true;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,72,eturn false;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,76, Compares a file to a list of packables and identifies an object by header.
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,77," If no matching header is found, it identifies the file by file extension."
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,78," If identification was not successfull, null is returned"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,80, @param file the file to identify
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,81, @param packables a list of packables
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,82," @return a matching packable object, or null"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,83, @throws IOException
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,85,"ublic static PackableObject identifyByHeader(File file, List packables) throws IOException {"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,86,* FileInputStream for the archive */
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,87,ileInputStream fis = null;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,89,ry {
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,90,* Archive result */
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,91,/PackableObject packable = null;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,93,/		 identify archive by header
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,94,is = new FileInputStream(file);
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,95,yte[] headerBytes = new byte[20];
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,96,"is.read(headerBytes, 0, 20);"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,98,terator iter = packables.iterator();
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,99,hile(iter.hasNext()) {
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,100,ackableObject p = (PackableObject)iter.next();
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,101,yte[] fieldHeader = p.getHeader();
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,102,f(fieldHeader != null) {
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,103,"f(CompressUtils.compareByteArrays(headerBytes, fieldHeader)) {"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,104,eturn p;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,109,"/ if we couldn't find an archiver by header bytes, we'll give it a try"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,110,"/ with the default name extension. This is useful, cause some archives"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,111,/ like tar have no header.
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,112,tring name = file.getName();
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,113,tring extension = null;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,114,"tring[] s = name.split(""\\."");"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,115,f(s.length > 1) {
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,116,xtension = s[ s.length - 1];
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,118,terator it = packables.iterator();
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,119,hile(it.hasNext()) {
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,120,ackableObject p = (PackableObject)it.next();
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,121,"f(p.isPackableWith(extension, PackableObject.CHOOSE_EXTENSION)) {"
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,122,eturn p;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,126,/ No implementation found
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,127,eturn null;
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,129, finally {
False,src/java/org/apache/commons/compress/PackableObject.java,src/java/org/apache/commons/compress/PackableObject.java,130,is.close();
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,17, under the License.
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,19,ackage org.apache.commons.compress.archivers.tar;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,21,mport java.io.BufferedInputStream;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,22,mport java.io.BufferedOutputStream;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,23,mport java.io.File;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,24,mport java.io.FileInputStream;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,25,mport java.io.FileNotFoundException;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,26,mport java.io.FileOutputStream;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,27,mport java.io.IOException;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,28,mport java.io.InputStream;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,29,mport java.io.OutputStream;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,30,mport java.util.Iterator;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,32,mport org.apache.commons.compress.AbstractArchive;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,33,mport org.apache.commons.compress.ArchiveEntry;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,34,mport org.apache.commons.compress.ArchiveException;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,35,mport org.apache.commons.compress.UnpackException;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,38, Archive-Implementation for Tar.
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,39," An tar archive has no header. This means, that the"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,40," ArchiverFactory.getInstance( new File(""file.tar"")) Method"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,41, cannot be used.
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,43,ublic class TarArchive extends AbstractArchive {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,45,* Buffer for the file operations */
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,46,rivate static final int BUFFER = 2048;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,49, DEFAULT_FILE_EXTENSION Field for this archiver.
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,51,"ublic final static String DEFAULT_FILE_EXTENSION = ""tar"";"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,54, ARCHIVER_NAME Field for this archiver.
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,56,"rivate final static String ARCHIVER_NAME = ""tar"";"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,59, This Archive should be instantiated in the Archive-Interface.
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,61,ublic TarArchive() {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,62,/ Empty
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,65,* (non-Javadoc)
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,66, @see org.apache.commons.compress.Archive#unpack()
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,68,rotected void doUnpack(File unpackDir) throws UnpackException {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,69,ileInputStream fInputStream = null;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,70,arInputStream zInputStream = null;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,72,ry {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,73,InputStream = new FileInputStream(this.getArchive());
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,74,InputStream = new TarInputStream(new BufferedInputStream(fInputStream));
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,75, catch(FileNotFoundException e) {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,76,"hrow new UnpackException(""SourceFile could not be found."", e);"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,79,ry {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,80,arEntry entry = null;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,82,hile((entry = zInputStream.getNextEntry()) != null) {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,83,ufferedOutputStream destination = null;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,85,nt count;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,86,yte data[] = new byte[BUFFER];
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,88,"tring filename = """";"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,89,ile f = new File(entry.getName());
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,90,f(f.isAbsolute()) {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,91,ilename = entry.getName().substring(3);
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,92, else {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,93,ilename = entry.getName();
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,96,tring fosString = unpackDir.getPath() + File.separator + filename;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,97,ile destFile = new File(fosString);
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,98,ile destPath = new File(destFile.getParent());
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,99,estPath.mkdirs();
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,101,ileOutputStream fos = new FileOutputStream(destFile);
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,102,ry {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,103,"estination = new BufferedOutputStream(fos, BUFFER);"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,105,"hile((count = zInputStream.read(data, 0, BUFFER))!= -1) {"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,106,"estination.write(data, 0, count);"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,108,estination.flush();
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,109, finally {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,110,f (destination != null)
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,111,estination.close();
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,114, catch(IOException e) {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,115,"hrow new UnpackException(""Exception while unpacking."", e);"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,116, finally {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,117,ry {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,118,InputStream.close();
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,119, catch (IOException e1) {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,120,"hrow new UnpackException(""Exception while unpacking."", e1);"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,125,* (non-Javadoc)
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,126, @see org.apache.commons.compress.AbstractArchive#doSave(java.io.FileOutputStream)
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,128,ublic void doSave(OutputStream output) throws ArchiveException {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,129,/ Stream initializing
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,130,/BufferedInputStream origin = null;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,132,/out.setMethod(ZipOutputStream.DEFLATED);
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,133,/byte data[] = new byte[BUFFER];
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,135,/ get a list of files from current directory
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,136,/ less than one file leads to an exception
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,137,terator iterator = this.getEntryIterator();
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,138,f(!iterator.hasNext()) {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,139,"hrow new ArchiveException(""There must be at least one file to be pack."");"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,142,/ Pack-Operation
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,143,arOutputStream out = null;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,145,ry {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,146,ut = new TarOutputStream(new BufferedOutputStream(output));
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,147,hile(iterator.hasNext()) {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,149,rchiveEntry archiveEntry = (ArchiveEntry)iterator.next();
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,150,nputStream fInputStream = archiveEntry.getStream();
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,152,arEntry entry = new TarEntry(archiveEntry.getName());
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,153,ntry.setModTime( 0 );
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,154,ntry.setSize( fInputStream.available() );
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,155,ntry.setUserID( 0 );
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,156,ntry.setGroupID( 0 );
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,157,"ntry.setUserName( ""avalon"" );"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,158,"ntry.setGroupName( ""excalibur"" );"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,159,ntry.setMode( 0100000 );
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,160,ut.putNextEntry( entry );
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,162,ut.copyEntryContents( fInputStream );
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,163,ut.closeEntry();
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,165, catch (IOException e) {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,166,"hrow new ArchiveException(""Creation of this archive failed cause of IOExceptions."", e);"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,167, finally {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,168,ry {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,169,f (out != null) {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,170,ut.close();
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,172, catch (IOException e1) {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,173,"hrow new ArchiveException(""Creation of this archive failed cause of IOExceptions."", e1);"
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,178,* (non-Javadoc)
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,179, @see org.apache.commons.compress.Archive#getArchiverName()
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,181,ublic String getName() {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,182,eturn ARCHIVER_NAME;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,185,* (non-Javadoc)
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,186, @see org.apache.commons.compress.Archive#getDefaultFileExtension()
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,188,ublic String getDefaultFileExtension() {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,189,eturn DEFAULT_FILE_EXTENSION;
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,192,* (non-Javadoc)
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,193, @see org.apache.commons.compress.Archive#getHeader()
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,195,ublic byte[] getHeader() {
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,196,/ tar's have no specific header
False,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,197,eturn null;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,17, under the License.
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,19,ackage org.apache.commons.compress.archivers.zip;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,21,mport java.io.BufferedInputStream;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,22,mport java.io.BufferedOutputStream;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,23,mport java.io.File;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,24,mport java.io.FileInputStream;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,25,mport java.io.FileNotFoundException;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,26,mport java.io.FileOutputStream;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,27,mport java.io.IOException;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,28,mport java.io.InputStream;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,29,mport java.io.OutputStream;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,30,mport java.util.Iterator;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,31,mport java.util.zip.ZipInputStream;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,33,mport org.apache.commons.compress.AbstractArchive;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,34,mport org.apache.commons.compress.ArchiveEntry;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,35,mport org.apache.commons.compress.ArchiveException;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,36,mport org.apache.commons.compress.UnpackException;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,39, Archive-Implementation for Zip.
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,41,ublic class ZipArchive extends AbstractArchive {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,43,* Buffer for the file operations */
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,44,rivate static final int BUFFER = 2048;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,47, HEADER Field for this archiver.
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,49,"rivate static final byte[] HEADER = { 0x50, 0x4b, 0x03, 0x04 };"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,52, DEFAULT_FILE_EXTENSION Field for this archiver.
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,54,"rivate static String DEFAULT_FILE_EXTENSION = ""zip"";"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,57, ARCHIVER_NAME Field for this archiver.
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,59,"rivate static final String ARCHIVER_NAME = ""zip"";"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,62, This Archive should be instantiated in the Archive-Interface.
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,64,ublic ZipArchive() {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,65,/ Empty
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,68,* (non-Javadoc)
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,69, @see org.apache.commons.compress.Archive#unpack()
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,71,rotected void doUnpack(File unpackDir) throws UnpackException {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,72,ufferedOutputStream destination = null;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,73,ileInputStream fInputStream = null;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,75,ry {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,76,InputStream = new FileInputStream(this.getArchive());
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,77, catch(FileNotFoundException e) {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,78,"hrow new UnpackException(""SourceFile could not be found."", e);"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,80,ipInputStream zInputStream = null;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,81,ry {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,82,"/ TODO: we have no ZipInputStream yet, so we need the sun implementation"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,83,InputStream = new ZipInputStream(new BufferedInputStream(fInputStream));
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,84,ava.util.zip.ZipEntry entry;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,86,hile((entry = zInputStream.getNextEntry()) != null) {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,87,nt count;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,88,yte data[] = new byte[BUFFER];
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,90,tring fosString = unpackDir.getAbsolutePath() + File.separator + entry.getName();
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,91,ileOutputStream fos = new FileOutputStream(fosString);
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,92,"estination = new BufferedOutputStream(fos, BUFFER);"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,94,"hile((count = zInputStream.read(data, 0, BUFFER))!= -1) {"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,95,"estination.write(data, 0, count);"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,97,estination.flush();
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,98,estination.close();
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,100, catch(IOException e) {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,101,"hrow new UnpackException(""Exception while unpacking."", e);"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,102, finally {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,103,ry {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,104,f (zInputStream != null){
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,105,InputStream.close();
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,107, catch (IOException e1) {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,108,"hrow new UnpackException(""Exception while unpacking."", e1);"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,113,* (non-Javadoc)
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,114, @see org.apache.commons.compress.Archive#pack()
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,116,rotected void doSave(OutputStream output) throws ArchiveException {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,117,/ Stream initializing
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,118,ufferedInputStream origin = null;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,120,/out.setMethod(ZipOutputStream.DEFLATED);
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,121,yte data[] = new byte[BUFFER];
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,123,/ get a list of filesStreams from current directory
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,124,/ less than one file leads to an exception
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,125,terator iterator = this.getEntryIterator();
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,126,f(!iterator.hasNext()) {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,127,"hrow new ArchiveException(""There must be at least one file to be pack."");"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,130,/ Pack-Operation
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,131,ipOutputStream out = null;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,132,ry {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,133,ut = new ZipOutputStream(new BufferedOutputStream(output));
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,134,hile(iterator.hasNext()) {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,135,rchiveEntry archiveEntry = (ArchiveEntry)iterator.next();
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,136,nputStream fInputStream = archiveEntry.getStream();
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,138,"rigin = new BufferedInputStream(fInputStream, BUFFER);"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,139,ipEntry entry = new ZipEntry(archiveEntry.getName());
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,140,ut.putNextEntry(entry);
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,142,nt count;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,143,"hile((count = origin.read(data, 0,	BUFFER)) != -1) {"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,144,"ut.write(data, 0, count);"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,146,rigin.close();
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,148, catch (IOException e) {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,149,"hrow new ArchiveException(""Creation of this archive failed cause of IOExceptions."", e);"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,150, finally {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,151,ry {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,152,f (out != null){
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,153,ut.close();
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,155, catch (IOException e1) {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,156,"hrow new ArchiveException(""Creation of this archive failed cause of IOExceptions."", e1);"
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,161,* (non-Javadoc)
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,162, @see org.apache.commons.compress.Archive#getArchiverName()
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,164,ublic String getName() {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,165,eturn ARCHIVER_NAME;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,168,* (non-Javadoc)
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,169, @see org.apache.commons.compress.Archive#getDefaultFileExtension()
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,171,ublic String getDefaultFileExtension() {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,172,eturn DEFAULT_FILE_EXTENSION;
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,175,* (non-Javadoc)
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,176, @see org.apache.commons.compress.Archive#getHeader()
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,178,ublic byte[] getHeader() {
False,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,179,eturn HEADER;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,17, under the License.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,19,ackage org.apache.commons.compress.compressors.bzip2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,21,mport java.io.FileNotFoundException;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,22,mport java.io.IOException;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,23,mport java.io.InputStream;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,24,mport java.io.OutputStream;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,26,mport org.apache.commons.compress.AbstractCompressor;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,27,mport org.apache.commons.compress.CompressException;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,28,mport org.apache.commons.compress.CompressUtils;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,30, Implementation of the Compressor Interface for BZip2.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,32, @author christian.grobmeier
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,34,ublic class BZip2Compressor extends AbstractCompressor {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,35,* Header BZ as byte-Array */
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,36,"rivate static final byte[] HEADER = new byte[]{(byte)'B', (byte)'Z'};"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,37,* Name of this implementation */
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,38,"rivate static final String NAME = ""bz2"";"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,39,* Default file extension*/
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,40,"rivate static String DEFAULT_FILE_EXTENSION = ""bz2"";"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,43, Constructor.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,45,ublic BZip2Compressor() {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,46,uper();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,49,* (non-Javadoc)
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,50," @see org.apache.commons.compress.Compressor#compress(java.io.InputStream, java.io.OutputStream)"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,52,"ublic void compressTo(InputStream in, OutputStream out) throws CompressException {"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,53,Zip2OutputStream outputBZStream = null;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,54,ry {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,55,utputBZStream = getPackedOutput( out );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,56,"ompressUtils.copy( in, outputBZStream );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,57, catch (FileNotFoundException e) {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,58,"hrow new CompressException(""File could not be found"", e);"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,59, catch (IOException e) {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,60,"hrow new CompressException(""An IO Exception occured"", e);"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,61, finally {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,62,ry {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,63,f (outputBZStream != null){
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,64,utputBZStream.close();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,66, catch (IOException e1) {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,67,"hrow new CompressException(""An IO Exception occured while closing the streams"", e1);"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,73, This decompress method uses a special InputStream Class for BZ2
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,74," @see org.apache.commons.compress.Compressor#decompress(java.io.InputStream, java.io.OutputStream)"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,76,"ublic void decompressTo(InputStream in, OutputStream out) throws CompressException {"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,77,Zip2InputStream inputStream = null;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,78,ry {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,79,nputStream = getPackedInput( in );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,80,"ompressUtils.copy( inputStream, out );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,81, catch (IOException e) {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,82,"hrow new CompressException(""An I/O Exception has occured"", e);"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,87, Skips the 'BZ' header bytes. required by the BZip2InputStream class.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,88, @param input input stream
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,89, @return {@link BZip2InputStream} instance
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,90, @throws IOException if an IO error occurs
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,92,rivate BZip2InputStream getPackedInput( final InputStream input )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,93,hrows IOException {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,94,/ skips the 'BZ' header bytes required by the BZip2InputStream class
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,95,nput.read();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,96,nput.read();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,97,eturn new BZip2InputStream( input );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,101," Writes a 'BZ' header to the output stream, and creates a"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,102," BZip2OutputStream object ready for use, as required by the"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,103, BZip2OutputStream class.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,105, @param output {@link OutputStream} to add a header to
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,106, @return {@link BZip2OutputStream} ready to write to
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,107, @throws IOException if an IO error occurs
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,109,rivate BZip2OutputStream getPackedOutput( final OutputStream output )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,110,hrows IOException {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,111,utput.write( HEADER );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,112,eturn new BZip2OutputStream( output );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,115,* (non-Javadoc)
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,116, @see org.apache.commons.compress.Compressor#getHeader()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,118,ublic byte[] getHeader() {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,119,eturn HEADER;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,122,* (non-Javadoc)
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,123, @see org.apache.commons.compress.Compressor#getName()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,125,ublic String getName() {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,126,eturn NAME;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,129,* (non-Javadoc)
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,130, @see org.apache.commons.compress.AbstractCompressor#getDefaultFileExtension()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,132,ublic String getDefaultFileExtension() {
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,133,eturn DEFAULT_FILE_EXTENSION;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,17, under the License.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,19,ackage org.apache.commons.compress.compressors.bzip2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,21,mport java.io.IOException;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,22,mport java.io.InputStream;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,26," This package is based on the work done by Keiron Liddle, Aftex Software"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,27, <keiron@aftexsw.com> to whom the Ant project is very grateful for his
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,28, great code.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,32, An input stream that decompresses from the BZip2 format (without the file
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,33, header chars) to be read as any other stream.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,35," @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a>"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,37,ublic class BZip2InputStream
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,38,xtends InputStream
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,39,mplements BZip2Constants
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,41,rivate static final int START_BLOCK_STATE = 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,42,rivate static final int RAND_PART_A_STATE = 2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,43,rivate static final int RAND_PART_B_STATE = 3;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,44,rivate static final int RAND_PART_C_STATE = 4;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,45,rivate static final int NO_RAND_PART_A_STATE = 5;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,46,rivate static final int NO_RAND_PART_B_STATE = 6;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,47,rivate static final int NO_RAND_PART_C_STATE = 7;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,49,rivate CRC m_crc = new CRC();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,50,rivate boolean[] m_inUse = new boolean[ 256 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,51,rivate char[] m_seqToUnseq = new char[ 256 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,52,rivate char[] m_unseqToSeq = new char[ 256 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,53,rivate char[] m_selector = new char[ MAX_SELECTORS ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,54,rivate char[] m_selectorMtf = new char[ MAX_SELECTORS ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,57, freq table collected to save a pass over the data
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,58, during decompression.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,60,rivate int[] m_unzftab = new int[ 256 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,62,rivate int[][] m_limit = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,63,rivate int[][] m_base = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,64,rivate int[][] m_perm = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,65,rivate int[] m_minLens = new int[ N_GROUPS ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,67,rivate boolean m_streamEnd;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,68,rivate int m_currentChar = -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,70,rivate int m_currentState = START_BLOCK_STATE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,71,rivate int m_rNToGo;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,72,rivate int m_rTPos;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,73,rivate int m_tPos;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,75,rivate int i2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,76,rivate int count;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,77,rivate int chPrev;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,78,rivate int ch2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,79,rivate int j2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,80,rivate char z;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,82,rivate boolean m_blockRandomised;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,85, always: in the range 0 .. 9.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,86, The current block size is 100000 * this number.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,88,rivate int m_blockSize100k;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,89,rivate int m_bsBuff;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,90,rivate int m_bsLive;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,92,rivate InputStream m_input;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,94,rivate int m_computedBlockCRC;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,95,rivate int m_computedCombinedCRC;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,98," index of the last char in the block, so"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,99, the block size == last + 1.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,101,rivate int m_last;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,102,rivate char[] m_ll8;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,103,rivate int m_nInUse;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,106, index in zptr[] of original string after sorting.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,108,rivate int m_origPtr;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,110,rivate int m_storedBlockCRC;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,111,rivate int m_storedCombinedCRC;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,112,rivate int[] m_tt;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,115, Initializes ein CBZip2 InputStream with the give
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,116, InputStream
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,117, @param input the InputStream to initialize with
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,119,ublic BZip2InputStream( final InputStream input )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,121,sSetStream( input );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,122,nitialize();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,123,nitBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,124,etupBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,127,rivate static void badBlockHeader()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,129,advise();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,132,rivate static void blockOverrun()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,134,advise();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,137,rivate static void cadvise()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,139,"ystem.out.println( ""CRC Error"" );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,140,/throw new CCoruptionError();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,143,rivate static void compressedStreamEOF()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,145,advise();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,148,rivate static void crcError()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,150,advise();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,153,* (non-Javadoc)
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,154, @see java.io.InputStream#read()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,156,ublic int read()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,158,f( m_streamEnd )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,160,eturn -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,162,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,164,nt retChar = m_currentChar;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,165,witch( m_currentState )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,167,ase START_BLOCK_STATE:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,168,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,169,ase RAND_PART_A_STATE:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,170,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,171,ase RAND_PART_B_STATE:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,172,etupRandPartB();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,173,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,174,ase RAND_PART_C_STATE:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,175,etupRandPartC();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,176,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,177,ase NO_RAND_PART_A_STATE:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,178,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,179,ase NO_RAND_PART_B_STATE:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,180,etupNoRandPartB();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,181,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,182,ase NO_RAND_PART_C_STATE:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,183,etupNoRandPartC();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,184,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,185,efault:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,186,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,188,eturn retChar;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,192,rivate void setDecompressStructureSizes( int newSize100k )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,194,f( !( 0 <= newSize100k && newSize100k <= 9 && 0 <= m_blockSize100k
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,195,& m_blockSize100k <= 9 ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,197,"/ throw new IOException(""Invalid block size"");"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,200,_blockSize100k = newSize100k;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,202,f( newSize100k == 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,204,eturn;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,207,nt n = BASE_BLOCK_SIZE * newSize100k;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,208,_ll8 = new char[ n ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,209,_tt = new int[ n ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,212,rivate void setupBlock()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,214,nt[] cftab = new int[ 257 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,215,har ch;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,217,ftab[ 0 ] = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,218,or( int i = 1; i <= 256; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,220,ftab[ i ] = m_unzftab[ i - 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,222,or( int i = 1; i <= 256; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,224,ftab[ i ] += cftab[ i - 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,227,or( int i = 0; i <= m_last; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,229,h = m_ll8[ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,230,_tt[ cftab[ ch ] ] = i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,231,ftab[ ch ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,233,ftab = null;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,235,_tPos = m_tt[ m_origPtr ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,237,ount = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,238,2 = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,239,h2 = 256;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,241, not a char and not EOF
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,243,f( m_blockRandomised )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,245,_rNToGo = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,246,_rTPos = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,247,etupRandPartA();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,249,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,251,etupNoRandPartA();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,255,rivate void setupNoRandPartA()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,257,f( i2 <= m_last )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,259,hPrev = ch2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,260,h2 = m_ll8[ m_tPos ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,261,_tPos = m_tt[ m_tPos ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,262,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,264,_currentChar = ch2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,265,_currentState = NO_RAND_PART_B_STATE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,266,_crc.updateCRC( ch2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,268,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,270,ndBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,271,nitBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,272,etupBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,276,rivate void setupNoRandPartB()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,278,f( ch2 != chPrev )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,280,_currentState = NO_RAND_PART_A_STATE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,281,ount = 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,282,etupNoRandPartA();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,284,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,286,ount++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,287,f( count >= 4 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,289, = m_ll8[ m_tPos ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,290,_tPos = m_tt[ m_tPos ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,291,_currentState = NO_RAND_PART_C_STATE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,292,2 = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,293,etupNoRandPartC();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,295,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,297,_currentState = NO_RAND_PART_A_STATE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,298,etupNoRandPartA();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,303,rivate void setupNoRandPartC()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,305,f( j2 < z )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,307,_currentChar = ch2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,308,_crc.updateCRC( ch2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,309,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,311,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,313,_currentState = NO_RAND_PART_A_STATE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,314,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,315,ount = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,316,etupNoRandPartA();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,320,rivate void setupRandPartA()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,322,f( i2 <= m_last )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,324,hPrev = ch2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,325,h2 = m_ll8[ m_tPos ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,326,_tPos = m_tt[ m_tPos ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,327,f( m_rNToGo == 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,329,_rNToGo = RAND_NUMS[ m_rTPos ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,330,_rTPos++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,331,f( m_rTPos == 512 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,333,_rTPos = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,336,_rNToGo--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,337,h2 ^= ( ( m_rNToGo == 1 ) ? 1 : 0 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,338,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,340,_currentChar = ch2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,341,_currentState = RAND_PART_B_STATE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,342,_crc.updateCRC( ch2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,344,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,346,ndBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,347,nitBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,348,etupBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,352,rivate void setupRandPartB()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,354,f( ch2 != chPrev )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,356,_currentState = RAND_PART_A_STATE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,357,ount = 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,358,etupRandPartA();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,360,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,362,ount++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,363,f( count >= 4 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,365, = m_ll8[ m_tPos ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,366,_tPos = m_tt[ m_tPos ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,367,f( m_rNToGo == 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,369,_rNToGo = RAND_NUMS[ m_rTPos ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,370,_rTPos++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,371,f( m_rTPos == 512 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,373,_rTPos = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,376,_rNToGo--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,377, ^= ( ( m_rNToGo == 1 ) ? 1 : 0 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,378,2 = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,379,_currentState = RAND_PART_C_STATE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,380,etupRandPartC();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,382,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,384,_currentState = RAND_PART_A_STATE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,385,etupRandPartA();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,390,rivate void setupRandPartC()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,392,f( j2 < z )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,394,_currentChar = ch2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,395,_crc.updateCRC( ch2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,396,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,398,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,400,_currentState = RAND_PART_A_STATE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,401,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,402,ount = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,403,etupRandPartA();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,407,rivate void getAndMoveToFrontDecode()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,409,nt nextSym;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,411,nt limitLast = BASE_BLOCK_SIZE * m_blockSize100k;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,412,_origPtr = readVariableSizedInt( 24 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,414,ecvDecodingTables();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,415,nt EOB = m_nInUse + 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,416,nt groupNo = -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,417,nt groupPos = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,420, Setting up the unzftab entries here is not strictly
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,421," necessary, but it does save having to do it later"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,422," in a separate pass, and so saves a block's worth of"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,423, cache misses.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,425,or( int i = 0; i <= 255; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,427,_unzftab[ i ] = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,430,inal char[] yy = new char[ 256 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,431,or( int i = 0; i <= 255; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,433,y[ i ] = (char)i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,436,_last = -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,437,nt zt;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,438,nt zn;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,439,nt zvec;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,440,nt zj;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,441,roupNo++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,442,roupPos = G_SIZE - 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,444,t = m_selector[ groupNo ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,445,n = m_minLens[ zt ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,446,vec = bsR( zn );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,447,hile( zvec > m_limit[ zt ][ zn ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,449,n++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,451,hile( m_bsLive < 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,453,nt zzi;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,454,nt thech = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,455,ry
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,457,hech = m_input.read();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,459,atch( IOException e )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,461,ompressedStreamEOF();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,463,f( thech == -1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,465,ompressedStreamEOF();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,467,zi = thech;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,468,_bsBuff = ( m_bsBuff << 8 ) | ( zzi & 0xff );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,469,_bsLive += 8;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,472,j = ( m_bsBuff >> ( m_bsLive - 1 ) ) & 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,473,_bsLive--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,475,vec = ( zvec << 1 ) | zj;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,477,extSym = m_perm[ zt ][ zvec - m_base[ zt ][ zn ] ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,479,hile( true )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,481,f( nextSym == EOB )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,483,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,486,f( nextSym == RUNA || nextSym == RUNB )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,488,har ch;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,489,nt s = -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,490,nt N = 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,491,o
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,493,f( nextSym == RUNA )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,495, = s + ( 0 + 1 ) * N;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,497,lse// if( nextSym == RUNB )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,499, = s + ( 1 + 1 ) * N;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,501, = N * 2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,503,f( groupPos == 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,505,roupNo++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,506,roupPos = G_SIZE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,508,roupPos--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,509,t = m_selector[ groupNo ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,510,n = m_minLens[ zt ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,511,vec = bsR( zn );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,512,hile( zvec > m_limit[ zt ][ zn ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,514,n++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,516,hile( m_bsLive < 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,518,nt zzi;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,519,nt thech = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,520,ry
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,522,hech = m_input.read();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,524,atch( IOException e )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,526,ompressedStreamEOF();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,528,f( thech == -1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,530,ompressedStreamEOF();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,532,zi = thech;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,533,_bsBuff = ( m_bsBuff << 8 ) | ( zzi & 0xff );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,534,_bsLive += 8;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,537,j = ( m_bsBuff >> ( m_bsLive - 1 ) ) & 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,538,_bsLive--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,539,vec = ( zvec << 1 ) | zj;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,542,extSym = m_perm[ zt ][ zvec - m_base[ zt ][ zn ] ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,544, while( nextSym == RUNA || nextSym == RUNB );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,546,++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,547,h = m_seqToUnseq[ yy[ 0 ] ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,548,_unzftab[ ch ] += s;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,550,hile( s > 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,552,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,553,_ll8[ m_last ] = ch;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,554,--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,557,f( m_last >= limitLast )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,559,lockOverrun();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,561,ontinue;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,563,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,565,har tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,566,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,567,f( m_last >= limitLast )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,569,lockOverrun();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,572,mp = yy[ nextSym - 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,573,_unzftab[ m_seqToUnseq[ tmp ] ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,574,_ll8[ m_last ] = m_seqToUnseq[ tmp ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,577," This loop is hammered during decompression,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,578, hence the unrolling.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,579, for (j = nextSym-1; j > 0; j--) yy[j] = yy[j-1];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,581,nt j = nextSym - 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,582,or( ; j > 3; j -= 4 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,584,y[ j ] = yy[ j - 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,585,y[ j - 1 ] = yy[ j - 2 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,586,y[ j - 2 ] = yy[ j - 3 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,587,y[ j - 3 ] = yy[ j - 4 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,589,or( ; j > 0; j-- )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,591,y[ j ] = yy[ j - 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,594,y[ 0 ] = tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,596,f( groupPos == 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,598,roupNo++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,599,roupPos = G_SIZE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,601,roupPos--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,602,t = m_selector[ groupNo ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,603,n = m_minLens[ zt ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,604,vec = bsR( zn );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,605,hile( zvec > m_limit[ zt ][ zn ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,607,n++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,609,hile( m_bsLive < 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,611,har ch = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,612,ry
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,614,h = (char)m_input.read();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,616,atch( IOException e )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,618,ompressedStreamEOF();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,621,_bsBuff = ( m_bsBuff << 8 ) | ( ch & 0xff );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,622,_bsLive += 8;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,625,j = ( m_bsBuff >> ( m_bsLive - 1 ) ) & 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,626,_bsLive--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,628,vec = ( zvec << 1 ) | zj;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,630,extSym = m_perm[ zt ][ zvec - m_base[ zt ][ zn ] ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,632,ontinue;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,637,rivate void bsFinishedWithStream()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,639,f (m_input != null)
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,641,ry
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,643,_input.close();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,645,atch ( IOException e )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,649,_input = null;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,652,rivate int readVariableSizedInt( final int numBits )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,654,eturn bsR( numBits );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,657,rivate char readUnsignedChar()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,659,eturn (char)bsR( 8 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,662,rivate int readInt()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,664,nt u = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,665, = ( u << 8 ) | bsR( 8 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,666, = ( u << 8 ) | bsR( 8 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,667, = ( u << 8 ) | bsR( 8 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,668, = ( u << 8 ) | bsR( 8 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,669,eturn u;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,672,rivate int bsR( final int n )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,674,hile( m_bsLive < n )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,676,nt ch = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,677,ry
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,679,h = m_input.read();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,681,atch( final IOException ioe )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,683,ompressedStreamEOF();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,686,f( ch == -1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,688,ompressedStreamEOF();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,691,_bsBuff = ( m_bsBuff << 8 ) | ( ch & 0xff );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,692,_bsLive += 8;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,695,inal int result = ( m_bsBuff >> ( m_bsLive - n ) ) & ( ( 1 << n ) - 1 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,696,_bsLive -= n;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,697,eturn result;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,700,rivate void bsSetStream( final InputStream input )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,702,_input = input;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,703,_bsLive = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,704,_bsBuff = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,707,rivate void complete()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,709,_storedCombinedCRC = readInt();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,710,f( m_storedCombinedCRC != m_computedCombinedCRC )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,712,rcError();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,715,sFinishedWithStream();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,716,_streamEnd = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,719,rivate void endBlock()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,721,_computedBlockCRC = m_crc.getFinalCRC();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,723, A bad CRC is considered a fatal error.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,725,f( m_storedBlockCRC != m_computedBlockCRC )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,727,rcError();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,730,_computedCombinedCRC = ( m_computedCombinedCRC << 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,731, ( m_computedCombinedCRC >>> 31 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,732,_computedCombinedCRC ^= m_computedBlockCRC;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,735,"rivate void hbCreateDecodeTables( final int[] limit,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,736,"inal int[] base,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,737,"inal int[] perm,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,738,"inal char[] length,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,739,"inal int minLen,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,740,"inal int maxLen,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,741,inal int alphaSize )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,743,nt pp = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,744,or( int i = minLen; i <= maxLen; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,746,or( int j = 0; j < alphaSize; j++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,748,f( length[ j ] == i )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,750,erm[ pp ] = j;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,751,p++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,756,or( int i = 0; i < MAX_CODE_LEN; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,758,ase[ i ] = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,761,or( int i = 0; i < alphaSize; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,763,ase[ length[ i ] + 1 ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,766,or( int i = 1; i < MAX_CODE_LEN; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,768,ase[ i ] += base[ i - 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,771,or( int i = 0; i < MAX_CODE_LEN; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,773,imit[ i ] = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,776,nt vec = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,777,or( int i = minLen; i <= maxLen; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,779,ec += ( base[ i + 1 ] - base[ i ] );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,780,imit[ i ] = vec - 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,781,ec <<= 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,784,or( int i = minLen + 1; i <= maxLen; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,786,ase[ i ] = ( ( limit[ i - 1 ] + 1 ) << 1 ) - base[ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,790,rivate void initBlock()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,792,inal char magic1 = readUnsignedChar();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,793,inal char magic2 = readUnsignedChar();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,794,inal char magic3 = readUnsignedChar();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,795,inal char magic4 = readUnsignedChar();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,796,inal char magic5 = readUnsignedChar();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,797,inal char magic6 = readUnsignedChar();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,798,f( magic1 == 0x17 && magic2 == 0x72 && magic3 == 0x45 &&
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,799,agic4 == 0x38 && magic5 == 0x50 && magic6 == 0x90 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,801,omplete();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,802,eturn;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,805,f( magic1 != 0x31 || magic2 != 0x41 || magic3 != 0x59 ||
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,806,agic4 != 0x26 || magic5 != 0x53 || magic6 != 0x59 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,808,adBlockHeader();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,809,_streamEnd = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,810,eturn;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,813,_storedBlockCRC = readInt();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,815,f( bsR( 1 ) == 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,817,_blockRandomised = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,819,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,821,_blockRandomised = false;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,824,/        currBlockNo++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,825,etAndMoveToFrontDecode();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,827,_crc.initialiseCRC();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,828,_currentState = START_BLOCK_STATE;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,831,rivate void initialize()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,833,inal char magic3 = readUnsignedChar();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,834,inal char magic4 = readUnsignedChar();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,835,f( magic3 != 'h' || magic4 < '1' || magic4 > '9' )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,837,sFinishedWithStream();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,838,_streamEnd = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,839,eturn;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,842,etDecompressStructureSizes( magic4 - '0' );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,843,_computedCombinedCRC = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,846,rivate void makeMaps()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,848,_nInUse = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,849,or( int i = 0; i < 256; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,851,f( m_inUse[ i ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,853,_seqToUnseq[ m_nInUse ] = (char)i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,854,_unseqToSeq[ i ] = (char)m_nInUse;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,855,_nInUse++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,860,rivate void recvDecodingTables()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,862,uildInUseTable();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,863,akeMaps();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,864,inal int alphaSize = m_nInUse + 2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,867, Now the selectors
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,869,inal int groupCount = bsR( 3 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,870,inal int selectorCount = bsR( 15 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,871,or( int i = 0; i < selectorCount; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,873,nt run = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,874,hile( bsR( 1 ) == 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,876,un++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,878,_selectorMtf[ i ] = (char)run;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,882, Undo the MTF values for the selectors.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,884,inal char[] pos = new char[ N_GROUPS ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,885,or( char v = 0; v < groupCount; v++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,887,os[ v ] = v;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,890,or( int i = 0; i < selectorCount; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,892,nt v = m_selectorMtf[ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,893,inal char tmp = pos[ v ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,894,hile( v > 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,896,os[ v ] = pos[ v - 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,897,--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,899,os[ 0 ] = tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,900,_selector[ i ] = tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,903,inal char[][] len = new char[ N_GROUPS ][ MAX_ALPHA_SIZE ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,905, Now the coding tables
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,907,or( int i = 0; i < groupCount; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,909,nt curr = bsR( 5 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,910,or( int j = 0; j < alphaSize; j++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,912,hile( bsR( 1 ) == 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,914,f( bsR( 1 ) == 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,916,urr++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,918,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,920,urr--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,923,en[ i ][ j ] = (char)curr;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,928, Create the Huffman decoding tables
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,930,or( int k = 0; k < groupCount; k++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,932,nt minLen = 32;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,933,nt maxLen = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,934,or( int i = 0; i < alphaSize; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,936,f( len[ k ][ i ] > maxLen )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,938,axLen = len[ k ][ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,940,f( len[ k ][ i ] < minLen )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,942,inLen = len[ k ][ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,945,"bCreateDecodeTables( m_limit[ k ], m_base[ k ], m_perm[ k ], len[ k ], minLen,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,946,"axLen, alphaSize );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,947,_minLens[ k ] = minLen;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,951,rivate void buildInUseTable()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,953,inal boolean[] inUse16 = new boolean[ 16 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,956, Receive the mapping table
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,958,or( int i = 0; i < 16; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,960,f( bsR( 1 ) == 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,962,nUse16[ i ] = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,964,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,966,nUse16[ i ] = false;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,970,or( int i = 0; i < 256; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,972,_inUse[ i ] = false;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,975,or( int i = 0; i < 16; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,977,f( inUse16[ i ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,979,or( int j = 0; j < 16; j++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,981,f( bsR( 1 ) == 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,983,_inUse[ i * 16 + j ] = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,990,* (non-Javadoc)
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,991, @see java.io.InputStream#close()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,993,ublic void close() throws IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,995,sFinishedWithStream();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,17, under the License.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,19,ackage org.apache.commons.compress.compressors.bzip2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,21,mport java.io.IOException;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,22,mport java.io.OutputStream;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,24," This package is based on the work done by Keiron Liddle, Aftex Software"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,25, <keiron@aftexsw.com> to whom the Ant project is very grateful for his
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,26, great code.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,29, An output stream that compresses into the BZip2 format (without the file
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,30, header chars) into another stream. TODO: Update to BZip2 1.0.1
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,32," @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a>"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,34,ublic class BZip2OutputStream
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,35,xtends OutputStream
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,36,mplements BZip2Constants
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,38,rivate static final int LOWER_BYTE_MASK = 0x000000ff;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,39,rivate static final int UPPER_BYTE_MASK = 0xffffff00;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,40,rivate static final int SETMASK = ( 1 << 21 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,41,rivate static final int CLEARMASK = ( ~SETMASK );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,42,rivate static final int GREATER_ICOST = 15;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,43,rivate static final int LESSER_ICOST = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,44,rivate static final int SMALL_THRESH = 20;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,45,rivate static final int DEPTH_THRESH = 10;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,48, If you are ever unlucky/improbable enough
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,49," to get a stack overflow whilst sorting,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,50, increase the following constant and try
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,51, again.  In practice I have never seen the
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,52," stack go above 27 elems, so the following"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,53, limit seems very generous.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,55,rivate static final int QSORT_STACK_SIZE = 1000;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,57,rivate CRC m_crc = new CRC();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,59,rivate boolean[] m_inUse = new boolean[ 256 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,61,rivate char[] m_seqToUnseq = new char[ 256 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,62,rivate char[] m_unseqToSeq = new char[ 256 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,64,rivate char[] m_selector = new char[ MAX_SELECTORS ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,65,rivate char[] m_selectorMtf = new char[ MAX_SELECTORS ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,67,rivate int[] m_mtfFreq = new int[ MAX_ALPHA_SIZE ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,69,rivate int m_currentChar = -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,70,rivate int m_runLength;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,72,rivate boolean m_closed;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,75, Knuth's increments seem to work better
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,76, than Incerpi-Sedgewick here.  Possibly
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,77, because the number of elems to sort is
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,78," usually small, typically <= 20."
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,80,rivate int[] m_incs = new int[]
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,82,", 4, 13, 40, 121, 364, 1093, 3280,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,83,"841, 29524, 88573, 265720,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,84,"97161, 2391484"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,87,rivate boolean m_blockRandomised;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,90, always: in the range 0 .. 9.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,91, The current block size is 100000 * this number.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,93,rivate int m_blockSize100k;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,94,rivate int m_bsBuff;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,95,rivate int m_bsLive;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,98," index of the last char in the block, so"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,99, the block size == last + 1.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,101,rivate int m_last;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,104, index in zptr[] of original string after sorting.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,106,rivate int m_origPtr;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,108,rivate int m_allowableBlockSize;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,110,rivate char[] m_block;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,112,rivate int m_blockCRC;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,113,rivate int m_combinedCRC;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,115,rivate OutputStream m_bsStream;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,116,rivate boolean m_firstAttempt;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,117,rivate int[] m_ftab;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,118,rivate int m_nInUse;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,120,rivate int m_nMTF;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,121,rivate int[] m_quadrant;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,122,rivate short[] m_szptr;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,123,rivate int m_workDone;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,126, Used when sorting.  If too many long comparisons
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,127," happen, we stop sorting, randomise the block"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,128," slightly, and try again."
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,130,rivate int m_workFactor;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,131,rivate int m_workLimit;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,132,rivate int[] m_zptr;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,134,ublic BZip2OutputStream( final OutputStream output )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,135,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,137,"his( output, 9 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,140,"ublic BZip2OutputStream( final OutputStream output, final int blockSize )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,141,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,143,sSetStream( output );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,144,_workFactor = 50;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,146,nt outBlockSize = blockSize;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,147,f( outBlockSize > 9 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,149,utBlockSize = 9;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,151,f( outBlockSize < 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,153,utBlockSize = 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,155,_blockSize100k = outBlockSize;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,156,llocateCompressStructures();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,157,nitialize();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,158,nitBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,161,"rivate static void hbMakeCodeLengths( char[] len, int[] freq,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,162,"nt alphaSize, int maxLen )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,165, Nodes and heap entries run from 1.  Entry 0
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,166, for both the heap and nodes is a sentinel.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,168,nt nNodes;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,170, Nodes and heap entries run from 1.  Entry 0
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,171, for both the heap and nodes is a sentinel.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,173,nt nHeap;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,175, Nodes and heap entries run from 1.  Entry 0
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,176, for both the heap and nodes is a sentinel.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,178,nt n1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,180, Nodes and heap entries run from 1.  Entry 0
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,181, for both the heap and nodes is a sentinel.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,183,nt n2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,185, Nodes and heap entries run from 1.  Entry 0
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,186, for both the heap and nodes is a sentinel.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,188,nt i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,190, Nodes and heap entries run from 1.  Entry 0
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,191, for both the heap and nodes is a sentinel.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,193,nt j;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,195, Nodes and heap entries run from 1.  Entry 0
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,196, for both the heap and nodes is a sentinel.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,198,nt k;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,199,oolean tooLong;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,201,nt[] heap = new int[ MAX_ALPHA_SIZE + 2 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,202,nt[] weights = new int[ MAX_ALPHA_SIZE * 2 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,203,nt[] parent = new int[ MAX_ALPHA_SIZE * 2 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,205,or( i = 0; i < alphaSize; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,207,eights[ i + 1 ] = ( freq[ i ] == 0 ? 1 : freq[ i ] ) << 8;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,210,hile( true )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,212,Nodes = alphaSize;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,213,Heap = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,215,eap[ 0 ] = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,216,eights[ 0 ] = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,217,arent[ 0 ] = -2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,219,or( i = 1; i <= alphaSize; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,221,arent[ i ] = -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,222,Heap++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,223,eap[ nHeap ] = i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,225,nt zz;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,226,nt tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,227,z = nHeap;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,228,mp = heap[ zz ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,229,hile( weights[ tmp ] < weights[ heap[ zz >> 1 ] ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,231,eap[ zz ] = heap[ zz >> 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,232,z >>= 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,234,eap[ zz ] = tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,237,f( !( nHeap < ( MAX_ALPHA_SIZE + 2 ) ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,239,anic();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,242,hile( nHeap > 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,244,1 = heap[ 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,245,eap[ 1 ] = heap[ nHeap ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,246,Heap--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,248,nt zz = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,249,nt yy = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,250,nt tmp = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,251,z = 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,252,mp = heap[ zz ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,253,hile( true )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,255,y = zz << 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,256,f( yy > nHeap )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,258,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,260,f( yy < nHeap &&
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,261,eights[ heap[ yy + 1 ] ] < weights[ heap[ yy ] ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,263,y++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,265,f( weights[ tmp ] < weights[ heap[ yy ] ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,267,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,269,eap[ zz ] = heap[ yy ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,270,z = yy;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,272,eap[ zz ] = tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,274,2 = heap[ 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,275,eap[ 1 ] = heap[ nHeap ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,276,Heap--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,278,nt zz = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,279,nt yy = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,280,nt tmp = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,281,z = 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,282,mp = heap[ zz ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,283,hile( true )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,285,y = zz << 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,286,f( yy > nHeap )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,288,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,290,f( yy < nHeap &&
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,291,eights[ heap[ yy + 1 ] ] < weights[ heap[ yy ] ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,293,y++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,295,f( weights[ tmp ] < weights[ heap[ yy ] ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,297,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,299,eap[ zz ] = heap[ yy ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,300,z = yy;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,302,eap[ zz ] = tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,304,Nodes++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,305,arent[ n1 ] = nNodes;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,306,arent[ n2 ] = nNodes;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,308,inal int v1 = weights[ n1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,309,inal int v2 = weights[ n2 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,310,"inal int weight = calculateWeight( v1, v2 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,311,eights[ nNodes ] = weight;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,313,arent[ nNodes ] = -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,314,Heap++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,315,eap[ nHeap ] = nNodes;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,317,nt zz = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,318,nt tmp = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,319,z = nHeap;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,320,mp = heap[ zz ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,321,hile( weights[ tmp ] < weights[ heap[ zz >> 1 ] ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,323,eap[ zz ] = heap[ zz >> 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,324,z >>= 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,326,eap[ zz ] = tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,329,f( !( nNodes < ( MAX_ALPHA_SIZE * 2 ) ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,331,anic();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,334,ooLong = false;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,335,or( i = 1; i <= alphaSize; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,337, = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,338, = i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,339,hile( parent[ k ] >= 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,341, = parent[ k ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,342,++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,344,en[ i - 1 ] = (char)j;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,345,f( j > maxLen )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,347,ooLong = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,351,f( !tooLong )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,353,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,356,or( i = 1; i < alphaSize; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,358, = weights[ i ] >> 8;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,359, = 1 + ( j / 2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,360,eights[ i ] = j << 8;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,365,"rivate static int calculateWeight( final int v1, final int v2 )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,367,inal int upper = ( v1 & UPPER_BYTE_MASK ) + ( v2 & UPPER_BYTE_MASK );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,368,inal int v1Lower = ( v1 & LOWER_BYTE_MASK );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,369,inal int v2Lower = ( v2 & LOWER_BYTE_MASK );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,370,inal int nnnn = ( v1Lower > v2Lower ) ? v1Lower : v2Lower;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,371,eturn upper | ( 1 + nnnn );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,374,rivate static void panic()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,376,"ystem.out.println( ""panic"" );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,377,/throw new CError();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,380,ublic void close()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,381,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,383,f( m_closed )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,385,eturn;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,388,f( m_runLength > 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,390,riteRun();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,392,_currentChar = -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,393,ndBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,394,ndCompression();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,395,_closed = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,396,uper.close();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,397,_bsStream.close();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,400,rotected void finalize()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,401,hrows Throwable
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,403,lose();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,406,ublic void flush()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,407,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,409,uper.flush();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,410,_bsStream.flush();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,414," modified by Oliver Merkel, 010128"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,416, @param bv Description of Parameter
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,417, @exception java.io.IOException Description of Exception
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,419,* (non-Javadoc)
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,420, @see java.io.OutputStream#write(int)
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,422,ublic void write( int bv )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,423,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,425,nt b = ( 256 + bv ) % 256;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,426,f( m_currentChar != -1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,428,f( m_currentChar == b )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,430,_runLength++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,431,f( m_runLength > 254 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,433,riteRun();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,434,_currentChar = -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,435,_runLength = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,438,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,440,riteRun();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,441,_runLength = 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,442,_currentChar = b;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,445,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,447,_currentChar = b;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,448,_runLength++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,452,rivate void allocateCompressStructures()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,454,nt n = BASE_BLOCK_SIZE * m_blockSize100k;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,455,_block = new char[ ( n + 1 + NUM_OVERSHOOT_BYTES ) ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,456,_quadrant = new int[ ( n + NUM_OVERSHOOT_BYTES ) ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,457,_zptr = new int[ n ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,458,_ftab = new int[ 65537 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,460,f( m_block == null || m_quadrant == null || m_zptr == null
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,461,| m_ftab == null )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,463,/int totalDraw = (n + 1 + NUM_OVERSHOOT_BYTES) + (n + NUM_OVERSHOOT_BYTES) + n + 65537;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,464,"/compressOutOfMemory ( totalDraw, n );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,468, The back end needs a place to store the MTF values
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,469, whilst it calculates the coding tables.  We could
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,470," put them in the zptr array.  However, these values"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,471," will fit in a short, so we overlay szptr at the"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,472," start of zptr, in the hope of reducing the number"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,473, of cache misses induced by the multiple traversals
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,474, of the MTF values when calculating coding tables.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,475, Seems to improve compression speed by about 1%.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,477,/    szptr = zptr;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,479,_szptr = new short[ 2 * n ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,482,rivate void bsFinishedWithStream()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,483,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,485,hile( m_bsLive > 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,487,nt ch = ( m_bsBuff >> 24 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,488,ry
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,490,_bsStream.write( ch );// write 8-bit
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,492,atch( IOException e )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,494,hrow e;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,496,_bsBuff <<= 8;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,497,_bsLive -= 8;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,501,"rivate void bsPutIntVS( int numBits, int c )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,502,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,504,"sW( numBits, c );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,507,rivate void bsPutUChar( int c )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,508,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,510,"sW( 8, c );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,513,rivate void bsPutint( int u )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,514,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,516,"sW( 8, ( u >> 24 ) & 0xff );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,517,"sW( 8, ( u >> 16 ) & 0xff );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,518,"sW( 8, ( u >> 8 ) & 0xff );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,519,"sW( 8, u & 0xff );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,522,rivate void bsSetStream( OutputStream f )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,524,_bsStream = f;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,525,_bsLive = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,526,_bsBuff = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,529,"rivate void bsW( int n, int v )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,530,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,532,hile( m_bsLive >= 8 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,534,nt ch = ( m_bsBuff >> 24 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,535,ry
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,537,_bsStream.write( ch );// write 8-bit
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,539,atch( IOException e )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,541,hrow e;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,543,_bsBuff <<= 8;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,544,_bsLive -= 8;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,546,_bsBuff |= ( v << ( 32 - m_bsLive - n ) );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,547,_bsLive += n;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,550,rivate void doReversibleTransformation()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,552,nt i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,554,_workLimit = m_workFactor * m_last;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,555,_workDone = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,556,_blockRandomised = false;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,557,_firstAttempt = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,559,ainSort();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,561,f( m_workDone > m_workLimit && m_firstAttempt )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,563,andomiseBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,564,_workLimit = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,565,_workDone = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,566,_blockRandomised = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,567,_firstAttempt = false;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,568,ainSort();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,571,_origPtr = -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,572,or( i = 0; i <= m_last; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,574,f( m_zptr[ i ] == 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,576,_origPtr = i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,577,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,582,f( m_origPtr == -1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,584,anic();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,588,rivate void endBlock()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,589,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,591,_blockCRC = m_crc.getFinalCRC();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,592,_combinedCRC = ( m_combinedCRC << 1 ) | ( m_combinedCRC >>> 31 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,593,_combinedCRC ^= m_blockCRC;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,596, sort the block and establish posn of original string
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,598,oReversibleTransformation();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,601," A 6-byte block header, the value chosen arbitrarily"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,602, as 0x314159265359 :-).  A 32 bit value does not really
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,603, give a strong enough guarantee that the value will not
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,604, appear by chance in the compressed datastream.  Worst-case
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,605," probability of this event, for a 900k block, is about"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,606," 2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48 bits."
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,607, For a compressed file of size 100Gb -- about 100000 blocks --
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,608, only a 48-bit marker will do.  NB: normal compression/
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,609, decompression do *not* rely on these statistical properties.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,610, They are only important when trying to recover blocks from
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,611, damaged files.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,613,sPutUChar( 0x31 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,614,sPutUChar( 0x41 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,615,sPutUChar( 0x59 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,616,sPutUChar( 0x26 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,617,sPutUChar( 0x53 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,618,sPutUChar( 0x59 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,621," Now the block's CRC, so it is in a known place."
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,623,sPutint( m_blockCRC );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,626, Now a single bit indicating randomisation.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,628,f( m_blockRandomised )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,630,"sW( 1, 1 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,632,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,634,"sW( 1, 0 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,638," Finally, block's contents proper."
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,640,oveToFrontCodeAndSend();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,643,rivate void endCompression()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,644,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,647," Now another magic 48-bit number, 0x177245385090, to"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,648," indicate the end of the last block.  (sqrt(pi), if"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,649," you want to know.  I did want to use e, but it contains"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,650, too much repetition -- 27 18 28 18 28 46 -- for me
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,651, to feel statistically comfortable.  Call me paranoid.)
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,653,sPutUChar( 0x17 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,654,sPutUChar( 0x72 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,655,sPutUChar( 0x45 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,656,sPutUChar( 0x38 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,657,sPutUChar( 0x50 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,658,sPutUChar( 0x90 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,660,sPutint( m_combinedCRC );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,662,sFinishedWithStream();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,665,"rivate boolean fullGtU( int i1, int i2 )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,667,nt k;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,668,har c1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,669,har c2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,670,nt s1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,671,nt s2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,673,1 = m_block[ i1 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,674,2 = m_block[ i2 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,675,f( c1 != c2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,677,eturn ( c1 > c2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,679,1++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,680,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,682,1 = m_block[ i1 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,683,2 = m_block[ i2 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,684,f( c1 != c2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,686,eturn ( c1 > c2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,688,1++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,689,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,691,1 = m_block[ i1 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,692,2 = m_block[ i2 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,693,f( c1 != c2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,695,eturn ( c1 > c2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,697,1++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,698,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,700,1 = m_block[ i1 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,701,2 = m_block[ i2 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,702,f( c1 != c2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,704,eturn ( c1 > c2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,706,1++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,707,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,709,1 = m_block[ i1 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,710,2 = m_block[ i2 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,711,f( c1 != c2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,713,eturn ( c1 > c2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,715,1++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,716,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,718,1 = m_block[ i1 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,719,2 = m_block[ i2 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,720,f( c1 != c2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,722,eturn ( c1 > c2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,724,1++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,725,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,727, = m_last + 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,729,o
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,731,1 = m_block[ i1 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,732,2 = m_block[ i2 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,733,f( c1 != c2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,735,eturn ( c1 > c2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,737,1 = m_quadrant[ i1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,738,2 = m_quadrant[ i2 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,739,f( s1 != s2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,741,eturn ( s1 > s2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,743,1++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,744,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,746,1 = m_block[ i1 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,747,2 = m_block[ i2 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,748,f( c1 != c2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,750,eturn ( c1 > c2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,752,1 = m_quadrant[ i1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,753,2 = m_quadrant[ i2 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,754,f( s1 != s2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,756,eturn ( s1 > s2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,758,1++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,759,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,761,1 = m_block[ i1 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,762,2 = m_block[ i2 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,763,f( c1 != c2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,765,eturn ( c1 > c2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,767,1 = m_quadrant[ i1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,768,2 = m_quadrant[ i2 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,769,f( s1 != s2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,771,eturn ( s1 > s2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,773,1++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,774,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,776,1 = m_block[ i1 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,777,2 = m_block[ i2 + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,778,f( c1 != c2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,780,eturn ( c1 > c2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,782,1 = m_quadrant[ i1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,783,2 = m_quadrant[ i2 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,784,f( s1 != s2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,786,eturn ( s1 > s2 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,788,1++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,789,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,791,f( i1 > m_last )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,793,1 -= m_last;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,794,1--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,797,f( i2 > m_last )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,799,2 -= m_last;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,800,2--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,804, -= 4;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,805,_workDone++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,806, while( k >= 0 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,808,eturn false;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,811,rivate void generateMTFValues()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,813,har[] yy = new char[ 256 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,814,nt i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,815,nt j;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,816,har tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,817,har tmp2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,818,nt zPend;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,819,nt wr;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,820,nt EOB;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,822,akeMaps();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,823,OB = m_nInUse + 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,825,or( i = 0; i <= EOB; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,827,_mtfFreq[ i ] = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,830,r = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,831,Pend = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,832,or( i = 0; i < m_nInUse; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,834,y[ i ] = (char)i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,837,or( i = 0; i <= m_last; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,839,har ll_i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,841,l_i = m_unseqToSeq[ m_block[ m_zptr[ i ] ] ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,843, = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,844,mp = yy[ j ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,845,hile( ll_i != tmp )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,847,++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,848,mp2 = tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,849,mp = yy[ j ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,850,y[ j ] = tmp2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,853,y[ 0 ] = tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,855,f( j == 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,857,Pend++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,859,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,861,f( zPend > 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,863,Pend--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,864,hile( true )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,866,witch( zPend % 2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,868,ase 0:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,869,_szptr[ wr ] = (short)RUNA;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,870,r++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,871,_mtfFreq[ RUNA ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,872,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,873,ase 1:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,874,_szptr[ wr ] = (short)RUNB;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,875,r++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,876,_mtfFreq[ RUNB ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,877,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,880,f( zPend < 2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,882,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,884,Pend = ( zPend - 2 ) / 2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,887,Pend = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,889,_szptr[ wr ] = (short)( j + 1 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,890,r++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,891,_mtfFreq[ j + 1 ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,895,f( zPend > 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,897,Pend--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,898,hile( true )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,900,witch( zPend % 2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,902,ase 0:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,903,_szptr[ wr ] = (short)RUNA;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,904,r++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,905,_mtfFreq[ RUNA ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,906,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,907,ase 1:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,908,_szptr[ wr ] = (short)RUNB;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,909,r++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,910,_mtfFreq[ RUNB ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,911,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,913,f( zPend < 2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,915,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,917,Pend = ( zPend - 2 ) / 2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,921,_szptr[ wr ] = (short)EOB;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,922,r++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,923,_mtfFreq[ EOB ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,925,_nMTF = wr;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,928,"rivate void hbAssignCodes( int[] code, char[] length, int minLen,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,929,"nt maxLen, int alphaSize )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,931,nt n;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,932,nt vec;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,933,nt i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,935,ec = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,936,or( n = minLen; n <= maxLen; n++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,938,or( i = 0; i < alphaSize; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,940,f( length[ i ] == n )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,942,ode[ i ] = vec;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,943,ec++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,947,ec <<= 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,951,rivate void initBlock()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,953,/        blockNo++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,954,_crc.initialiseCRC();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,955,_last = -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,956,/        ch = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,958,or( int i = 0; i < 256; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,960,_inUse[ i ] = false;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,964, 20 is just a paranoia constant
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,966,_allowableBlockSize = BASE_BLOCK_SIZE * m_blockSize100k - 20;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,969,rivate void initialize()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,970,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,973," Write `magic' bytes h indicating file-format == huffmanised,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,974, followed by a digit indicating blockSize100k.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,976,sPutUChar( 'h' );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,977,sPutUChar( '0' + m_blockSize100k );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,979,_combinedCRC = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,982,rivate void mainSort()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,984,nt i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,985,nt j;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,986,nt ss;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,987,nt sb;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,988,nt[] runningOrder = new int[ 256 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,989,nt[] copy = new int[ 256 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,990,oolean[] bigDone = new boolean[ 256 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,991,nt c1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,992,nt c2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,995," In the various block-sized structures, live data runs"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,996," from 0 to last+NUM_OVERSHOOT_BYTES inclusive.  First,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,997, set up the overshoot area for block.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,999,"/   if (verbosity >= 4) fprintf ( stderr, ""        sort initialise ...\n"" );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1000,or( i = 0; i < NUM_OVERSHOOT_BYTES; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1002,_block[ m_last + i + 2 ] = m_block[ ( i % ( m_last + 1 ) ) + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1004,or( i = 0; i <= m_last + NUM_OVERSHOOT_BYTES; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1006,_quadrant[ i ] = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1009,_block[ 0 ] = m_block[ m_last + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1011,f( m_last < 4000 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1014," Use simpleSort(), since the full sorting mechanism"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1015, has quite a large constant overhead.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1017,or( i = 0; i <= m_last; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1019,_zptr[ i ] = i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1021,_firstAttempt = false;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1022,_workDone = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1023,_workLimit = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1024,"impleSort( 0, m_last, 0 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1026,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1028,or( i = 0; i <= 255; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1030,igDone[ i ] = false;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1033,or( i = 0; i <= 65536; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1035,_ftab[ i ] = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1038,1 = m_block[ 0 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1039,or( i = 0; i <= m_last; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1041,2 = m_block[ i + 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1042,_ftab[ ( c1 << 8 ) + c2 ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1043,1 = c2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1046,or( i = 1; i <= 65536; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1048,_ftab[ i ] += m_ftab[ i - 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1051,1 = m_block[ 1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1052,or( i = 0; i < m_last; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1054,2 = m_block[ i + 2 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1055, = ( c1 << 8 ) + c2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1056,1 = c2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1057,_ftab[ j ]--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1058,_zptr[ m_ftab[ j ] ] = i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1061, = ( ( m_block[ m_last + 1 ] ) << 8 ) + ( m_block[ 1 ] );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1062,_ftab[ j ]--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1063,_zptr[ m_ftab[ j ] ] = m_last;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1066, Now ftab contains the first loc of every small bucket.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1067," Calculate the running order, from smallest to largest"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1068, big bucket.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1070,or( i = 0; i <= 255; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1072,unningOrder[ i ] = i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1075,nt vv;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1076,nt h = 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1077,o
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1079, = 3 * h + 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1080, while( h <= 256 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1081,o
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1083, = h / 3;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1084,or( i = h; i <= 255; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1086,v = runningOrder[ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1087, = i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1088,hile( ( m_ftab[ ( ( runningOrder[ j - h ] ) + 1 ) << 8 ]
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1089, m_ftab[ ( runningOrder[ j - h ] ) << 8 ] ) >
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1090, m_ftab[ ( ( vv ) + 1 ) << 8 ] - m_ftab[ ( vv ) << 8 ] ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1092,unningOrder[ j ] = runningOrder[ j - h ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1093, = j - h;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1094,f( j <= ( h - 1 ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1096,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1099,unningOrder[ j ] = vv;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1101, while( h != 1 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1105, The main sorting loop.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1107,or( i = 0; i <= 255; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1111," Process big buckets, starting with the least full."
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1113,s = runningOrder[ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1116, Complete the big bucket [ss] by quicksorting
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1117," any unsorted small buckets [ss, j].  Hopefully"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1118, previous pointer-scanning phases have already
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1119," completed many of the small buckets [ss, j], so"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1120, we don't have to sort them at all.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1122,or( j = 0; j <= 255; j++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1124,b = ( ss << 8 ) + j;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1125,f( !( ( m_ftab[ sb ] & SETMASK ) == SETMASK ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1127,nt lo = m_ftab[ sb ] & CLEARMASK;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1128,nt hi = ( m_ftab[ sb + 1 ] & CLEARMASK ) - 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1129,f( hi > lo )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1131,"Sort3( lo, hi, 2 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1132,f( m_workDone > m_workLimit && m_firstAttempt )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1134,eturn;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1137,_ftab[ sb ] |= SETMASK;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1142," The ss big bucket is now done.  Record this fact,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1143, and update the quadrant descriptors.  Remember to
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1144," update quadrants in the overshoot area too, if"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1145," necessary.  The ""if (i < 255)"" test merely skips"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1146," this updating for the last bucket processed, since"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1147, updating for the last bucket is pointless.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1149,igDone[ ss ] = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1151,f( i < 255 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1153,nt bbStart = m_ftab[ ss << 8 ] & CLEARMASK;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1154,nt bbSize = ( m_ftab[ ( ss + 1 ) << 8 ] & CLEARMASK ) - bbStart;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1155,nt shifts = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1157,hile( ( bbSize >> shifts ) > 65534 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1159,hifts++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1162,or( j = 0; j < bbSize; j++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1164,nt a2update = m_zptr[ bbStart + j ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1165,nt qVal = ( j >> shifts );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1166,_quadrant[ a2update ] = qVal;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1167,f( a2update < NUM_OVERSHOOT_BYTES )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1169,_quadrant[ a2update + m_last + 1 ] = qVal;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1173,f( !( ( ( bbSize - 1 ) >> shifts ) <= 65535 ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1175,anic();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1180, Now scan this big bucket so as to synthesise the
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1181," sorted order for small buckets [t, ss] for all t != ss."
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1183,or( j = 0; j <= 255; j++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1185,opy[ j ] = m_ftab[ ( j << 8 ) + ss ] & CLEARMASK;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1188,or( j = m_ftab[ ss << 8 ] & CLEARMASK;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1189, < ( m_ftab[ ( ss + 1 ) << 8 ] & CLEARMASK ); j++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1191,1 = m_block[ m_zptr[ j ] ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1192,f( !bigDone[ c1 ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1194,_zptr[ copy[ c1 ] ] = m_zptr[ j ] == 0 ? m_last : m_zptr[ j ] - 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1195,opy[ c1 ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1199,or( j = 0; j <= 255; j++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1201,_ftab[ ( j << 8 ) + ss ] |= SETMASK;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1207,rivate void makeMaps()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1209,nt i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1210,_nInUse = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1211,or( i = 0; i < 256; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1213,f( m_inUse[ i ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1215,_seqToUnseq[ m_nInUse ] = (char)i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1216,_unseqToSeq[ i ] = (char)m_nInUse;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1217,_nInUse++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1222,"rivate char med3( char a, char b, char c )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1224,har t;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1225,f( a > b )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1227, = a;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1228, = b;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1229, = t;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1231,f( b > c )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1233, = b;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1234, = c;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1235, = t;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1237,f( a > b )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1239, = a;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1241,eturn b;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1244,rivate void moveToFrontCodeAndSend()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1245,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1247,"sPutIntVS( 24, m_origPtr );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1248,enerateMTFValues();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1249,endMTFValues();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1252,"rivate void qSort3( int loSt, int hiSt, int dSt )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1254,nt unLo;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1255,nt unHi;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1256,nt ltLo;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1257,nt gtHi;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1258,nt med;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1259,nt n;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1260,nt m;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1261,nt sp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1262,nt lo;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1263,nt hi;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1264,nt d;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1265,tackElem[] stack = new StackElem[ QSORT_STACK_SIZE ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1266,or( int count = 0; count < QSORT_STACK_SIZE; count++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1268,tack[ count ] = new StackElem();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1271,p = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1273,tack[ sp ].m_ll = loSt;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1274,tack[ sp ].m_hh = hiSt;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1275,tack[ sp ].m_dd = dSt;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1276,p++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1278,hile( sp > 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1280,f( sp >= QSORT_STACK_SIZE )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1282,anic();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1285,p--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1286,o = stack[ sp ].m_ll;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1287,i = stack[ sp ].m_hh;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1288, = stack[ sp ].m_dd;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1290,f( hi - lo < SMALL_THRESH || d > DEPTH_THRESH )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1292,"impleSort( lo, hi, d );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1293,f( m_workDone > m_workLimit && m_firstAttempt )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1295,eturn;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1297,ontinue;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1300,"ed = med3( m_block[ m_zptr[ lo ] + d + 1 ],"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1301,"_block[ m_zptr[ hi ] + d + 1 ],"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1302,_block[ m_zptr[ ( lo + hi ) >> 1 ] + d + 1 ] );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1304,nLo = lo;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1305,tLo = lo;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1306,nHi = hi;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1307,tHi = hi;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1309,hile( true )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1311,hile( true )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1313,f( unLo > unHi )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1315,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1317, = m_block[ m_zptr[ unLo ] + d + 1 ] - med;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1318,f( n == 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1320,nt temp = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1321,emp = m_zptr[ unLo ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1322,_zptr[ unLo ] = m_zptr[ ltLo ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1323,_zptr[ ltLo ] = temp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1324,tLo++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1325,nLo++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1326,ontinue;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1329,f( n > 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1331,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1333,nLo++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1335,hile( true )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1337,f( unLo > unHi )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1339,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1341, = m_block[ m_zptr[ unHi ] + d + 1 ] - med;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1342,f( n == 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1344,nt temp = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1345,emp = m_zptr[ unHi ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1346,_zptr[ unHi ] = m_zptr[ gtHi ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1347,_zptr[ gtHi ] = temp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1348,tHi--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1349,nHi--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1350,ontinue;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1353,f( n < 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1355,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1357,nHi--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1359,f( unLo > unHi )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1361,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1363,nt temp = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1364,emp = m_zptr[ unLo ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1365,_zptr[ unLo ] = m_zptr[ unHi ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1366,_zptr[ unHi ] = temp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1367,nLo++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1368,nHi--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1371,f( gtHi < ltLo )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1373,tack[ sp ].m_ll = lo;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1374,tack[ sp ].m_hh = hi;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1375,tack[ sp ].m_dd = d + 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1376,p++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1377,ontinue;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1380, = ( ( ltLo - lo ) < ( unLo - ltLo ) ) ? ( ltLo - lo ) : ( unLo - ltLo );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1381,"swap( lo, unLo - n, n );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1382, = ( ( hi - gtHi ) < ( gtHi - unHi ) ) ? ( hi - gtHi ) : ( gtHi - unHi );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1383,"swap( unLo, hi - m + 1, m );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1385, = lo + unLo - ltLo - 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1386, = hi - ( gtHi - unHi ) + 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1388,tack[ sp ].m_ll = lo;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1389,tack[ sp ].m_hh = n;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1390,tack[ sp ].m_dd = d;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1391,p++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1393,tack[ sp ].m_ll = n + 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1394,tack[ sp ].m_hh = m - 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1395,tack[ sp ].m_dd = d + 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1396,p++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1398,tack[ sp ].m_ll = m;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1399,tack[ sp ].m_hh = hi;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1400,tack[ sp ].m_dd = d;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1401,p++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1405,rivate void randomiseBlock()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1407,nt i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1408,nt rNToGo = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1409,nt rTPos = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1410,or( i = 0; i < 256; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1412,_inUse[ i ] = false;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1415,or( i = 0; i <= m_last; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1417,f( rNToGo == 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1419,NToGo = (char)RAND_NUMS[ rTPos ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1420,TPos++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1421,f( rTPos == 512 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1423,TPos = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1426,NToGo--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1427,_block[ i + 1 ] ^= ( ( rNToGo == 1 ) ? 1 : 0 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1428,/ handle 16 bit signed numbers
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1429,_block[ i + 1 ] &= 0xFF;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1431,_inUse[ m_block[ i + 1 ] ] = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1435,rivate void sendMTFValues()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1436,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1438,har[][] len = new char[ N_GROUPS ][ MAX_ALPHA_SIZE ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1440,nt v;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1442,nt t;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1444,nt i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1446,nt j;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1448,nt gs;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1450,nt ge;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1452,nt bt;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1454,nt bc;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1456,nt iter;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1457,nt nSelectors = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1458,nt alphaSize;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1459,nt minLen;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1460,nt maxLen;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1461,nt selCtr;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1462,nt nGroups;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1464,lphaSize = m_nInUse + 2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1465,or( t = 0; t < N_GROUPS; t++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1467,or( v = 0; v < alphaSize; v++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1469,en[ t ][ v ] = (char)GREATER_ICOST;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1474, Decide how many coding tables to use
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1476,f( m_nMTF <= 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1478,anic();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1481,f( m_nMTF < 200 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1483,Groups = 2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1485,lse if( m_nMTF < 600 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1487,Groups = 3;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1489,lse if( m_nMTF < 1200 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1491,Groups = 4;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1493,lse if( m_nMTF < 2400 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1495,Groups = 5;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1497,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1499,Groups = 6;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1503, Generate an initial set of coding tables
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1505,nt nPart;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1506,nt remF;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1507,nt tFreq;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1508,nt aFreq;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1510,Part = nGroups;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1511,emF = m_nMTF;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1512,s = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1513,hile( nPart > 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1515,Freq = remF / nPart;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1516,e = gs - 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1517,Freq = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1518,hile( aFreq < tFreq && ge < alphaSize - 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1520,e++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1521,Freq += m_mtfFreq[ ge ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1524,f( ge > gs && nPart != nGroups && nPart != 1
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1525,& ( ( nGroups - nPart ) % 2 == 1 ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1527,Freq -= m_mtfFreq[ ge ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1528,e--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1531,or( v = 0; v < alphaSize; v++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1533,f( v >= gs && v <= ge )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1535,en[ nPart - 1 ][ v ] = (char)LESSER_ICOST;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1537,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1539,en[ nPart - 1 ][ v ] = (char)GREATER_ICOST;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1543,Part--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1544,s = ge + 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1545,emF -= aFreq;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1549,nt[][] rfreq = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1550,nt[] fave = new int[ N_GROUPS ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1551,hort[] cost = new short[ N_GROUPS ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1553, Iterate up to N_ITERS times to improve the tables.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1555,or( iter = 0; iter < N_ITERS; iter++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1557,or( t = 0; t < nGroups; t++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1559,ave[ t ] = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1562,or( t = 0; t < nGroups; t++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1564,or( v = 0; v < alphaSize; v++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1566,freq[ t ][ v ] = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1570,Selectors = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1571,s = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1572,hile( true )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1576, Set group start & end marks.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1578,f( gs >= m_nMTF )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1580,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1582,e = gs + G_SIZE - 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1583,f( ge >= m_nMTF )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1585,e = m_nMTF - 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1589, Calculate the cost of this group as coded
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1590, by each of the coding tables.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1592,or( t = 0; t < nGroups; t++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1594,ost[ t ] = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1597,f( nGroups == 6 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1599,hort cost0 = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1600,hort cost1 = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1601,hort cost2 = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1602,hort cost3 = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1603,hort cost4 = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1604,hort cost5 = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1606,or( i = gs; i <= ge; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1608,hort icv = m_szptr[ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1609,ost0 += len[ 0 ][ icv ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1610,ost1 += len[ 1 ][ icv ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1611,ost2 += len[ 2 ][ icv ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1612,ost3 += len[ 3 ][ icv ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1613,ost4 += len[ 4 ][ icv ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1614,ost5 += len[ 5 ][ icv ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1616,ost[ 0 ] = cost0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1617,ost[ 1 ] = cost1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1618,ost[ 2 ] = cost2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1619,ost[ 3 ] = cost3;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1620,ost[ 4 ] = cost4;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1621,ost[ 5 ] = cost5;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1623,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1625,or( i = gs; i <= ge; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1627,hort icv = m_szptr[ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1628,or( t = 0; t < nGroups; t++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1630,ost[ t ] += len[ t ][ icv ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1636," Find the coding table which is best for this group,"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1637, and record its identity in the selector table.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1639,c = 999999999;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1640,t = -1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1641,or( t = 0; t < nGroups; t++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1643,f( cost[ t ] < bc )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1645,c = cost[ t ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1646,t = t;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1650,ave[ bt ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1651,_selector[ nSelectors ] = (char)bt;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1652,Selectors++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1655, Increment the symbol frequencies for the selected table.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1657,or( i = gs; i <= ge; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1659,freq[ bt ][ m_szptr[ i ] ]++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1662,s = ge + 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1666, Recompute the tables based on the accumulated frequencies.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1668,or( t = 0; t < nGroups; t++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1670,"bMakeCodeLengths( len[ t ], rfreq[ t ], alphaSize, 20 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1674,freq = null;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1675,ave = null;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1676,ost = null;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1678,f( !( nGroups < 8 ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1680,anic();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1682,f( !( nSelectors < 32768 && nSelectors <= ( 2 + ( 900000 / G_SIZE ) ) ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1684,anic();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1688, Compute MTF values for the selectors.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1690,har[] pos = new char[ N_GROUPS ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1691,har ll_i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1692,har tmp2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1693,har tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1694,or( i = 0; i < nGroups; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1696,os[ i ] = (char)i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1698,or( i = 0; i < nSelectors; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1700,l_i = m_selector[ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1701, = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1702,mp = pos[ j ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1703,hile( ll_i != tmp )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1705,++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1706,mp2 = tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1707,mp = pos[ j ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1708,os[ j ] = tmp2;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1710,os[ 0 ] = tmp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1711,_selectorMtf[ i ] = (char)j;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1715,nt[][] code = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1718, Assign actual codes for the tables.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1720,or( t = 0; t < nGroups; t++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1722,inLen = 32;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1723,axLen = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1724,or( i = 0; i < alphaSize; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1726,f( len[ t ][ i ] > maxLen )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1728,axLen = len[ t ][ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1730,f( len[ t ][ i ] < minLen )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1732,inLen = len[ t ][ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1735,f( maxLen > 20 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1737,anic();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1739,f( minLen < 1 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1741,anic();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1743,"bAssignCodes( code[ t ], len[ t ], minLen, maxLen, alphaSize );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1747, Transmit the mapping table.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1749,oolean[] inUse16 = new boolean[ 16 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1750,or( i = 0; i < 16; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1752,nUse16[ i ] = false;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1753,or( j = 0; j < 16; j++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1755,f( m_inUse[ i * 16 + j ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1757,nUse16[ i ] = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1762,or( i = 0; i < 16; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1764,f( inUse16[ i ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1766,"sW( 1, 1 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1768,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1770,"sW( 1, 0 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1774,or( i = 0; i < 16; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1776,f( inUse16[ i ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1778,or( j = 0; j < 16; j++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1780,f( m_inUse[ i * 16 + j ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1782,"sW( 1, 1 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1784,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1786,"sW( 1, 0 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1795, Now the selectors.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1797,"sW( 3, nGroups );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1798,"sW( 15, nSelectors );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1799,or( i = 0; i < nSelectors; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1801,or( j = 0; j < m_selectorMtf[ i ]; j++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1803,"sW( 1, 1 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1805,"sW( 1, 0 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1808,or( t = 0; t < nGroups; t++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1810,nt curr = len[ t ][ 0 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1811,"sW( 5, curr );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1812,or( i = 0; i < alphaSize; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1814,hile( curr < len[ t ][ i ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1816,"sW( 2, 2 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1817,urr++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1819, 10
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1822,hile( curr > len[ t ][ i ] )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1824,"sW( 2, 3 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1825,urr--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1827, 11
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1830,"sW( 1, 0 );"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1835," And finally, the block data proper"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1837,elCtr = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1838,s = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1839,hile( true )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1841,f( gs >= m_nMTF )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1843,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1845,e = gs + G_SIZE - 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1846,f( ge >= m_nMTF )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1848,e = m_nMTF - 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1850,or( i = gs; i <= ge; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1852,"sW( len[ m_selector[ selCtr ] ][ m_szptr[ i ] ],"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1853,ode[ m_selector[ selCtr ] ][ m_szptr[ i ] ] );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1856,s = ge + 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1857,elCtr++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1859,f( !( selCtr == nSelectors ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1861,anic();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1865,"rivate void simpleSort( int lo, int hi, int d )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1867,nt i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1868,nt j;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1869,nt h;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1870,nt bigN;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1871,nt hp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1872,nt v;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1874,igN = hi - lo + 1;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1875,f( bigN < 2 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1877,eturn;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1880,p = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1881,hile( m_incs[ hp ] < bigN )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1883,p++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1885,p--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1887,or( ; hp >= 0; hp-- )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1889, = m_incs[ hp ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1891, = lo + h;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1892,hile( true )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1895, copy 1
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1897,f( i > hi )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1899,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1901, = m_zptr[ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1902, = i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1903,"hile( fullGtU( m_zptr[ j - h ] + d, v + d ) )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1905,_zptr[ j ] = m_zptr[ j - h ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1906, = j - h;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1907,f( j <= ( lo + h - 1 ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1909,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1912,_zptr[ j ] = v;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1913,++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1916, copy 2
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1918,f( i > hi )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1920,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1922, = m_zptr[ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1923, = i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1924,"hile( fullGtU( m_zptr[ j - h ] + d, v + d ) )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1926,_zptr[ j ] = m_zptr[ j - h ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1927, = j - h;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1928,f( j <= ( lo + h - 1 ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1930,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1933,_zptr[ j ] = v;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1934,++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1937, copy 3
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1939,f( i > hi )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1941,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1943, = m_zptr[ i ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1944, = i;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1945,"hile( fullGtU( m_zptr[ j - h ] + d, v + d ) )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1947,_zptr[ j ] = m_zptr[ j - h ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1948, = j - h;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1949,f( j <= ( lo + h - 1 ) )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1951,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1954,_zptr[ j ] = v;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1955,++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1957,f( m_workDone > m_workLimit && m_firstAttempt )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1959,eturn;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1965,"rivate void vswap( int p1, int p2, int n )"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1967,nt temp = 0;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1968,hile( n > 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1970,emp = m_zptr[ p1 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1971,_zptr[ p1 ] = m_zptr[ p2 ];
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1972,_zptr[ p2 ] = temp;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1973,1++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1974,2++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1975,--;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1979,rivate void writeRun()
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1980,hrows IOException
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1982,f( m_last < m_allowableBlockSize )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1984,_inUse[ m_currentChar ] = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1985,or( int i = 0; i < m_runLength; i++ )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1987,_crc.updateCRC( (char)m_currentChar );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1989,witch( m_runLength )
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1991,ase 1:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1992,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1993,_block[ m_last + 1 ] = (char)m_currentChar;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1994,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1995,ase 2:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1996,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1997,_block[ m_last + 1 ] = (char)m_currentChar;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1998,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1999,_block[ m_last + 1 ] = (char)m_currentChar;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2000,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2001,ase 3:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2002,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2003,_block[ m_last + 1 ] = (char)m_currentChar;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2004,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2005,_block[ m_last + 1 ] = (char)m_currentChar;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2006,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2007,_block[ m_last + 1 ] = (char)m_currentChar;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2008,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2009,efault:
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2010,_inUse[ m_runLength - 4 ] = true;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2011,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2012,_block[ m_last + 1 ] = (char)m_currentChar;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2013,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2014,_block[ m_last + 1 ] = (char)m_currentChar;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2015,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2016,_block[ m_last + 1 ] = (char)m_currentChar;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2017,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2018,_block[ m_last + 1 ] = (char)m_currentChar;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2019,_last++;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2020,_block[ m_last + 1 ] = (char)( m_runLength - 4 );
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2021,reak;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2024,lse
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2026,ndBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2027,nitBlock();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2028,riteRun();
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2032,rivate static class StackElem
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2034,nt m_dd;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2035,nt m_hh;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2036,nt m_ll;
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,17, under the License.
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,19,ackage org.apache.commons.compress.compressors.bzip2;
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,22," This package is based on the work done by Keiron Liddle, Aftex Software"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,23, <keiron@aftexsw.com> to whom the Ant project is very grateful for his
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,24, great code.
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,28, A simple class the hold and calculate the CRC for sanity checking of the
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,29, data.
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,31," @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a>"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,33,lass CRC
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,35,rivate static int[] CRC32_TABLE = new int[]
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,37,"x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,38,"x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,39,"x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,40,"x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,41,"x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,42,"x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,43,"x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,44,"x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,45,"x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,46,"x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,47,"xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,48,"xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,49,"xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,50,"xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,51,"xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,52,"xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,53,"x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,54,"x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,55,"x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,56,"x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,57,"x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,58,"x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,59,"x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,60,"x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,61,"xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,62,"xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,63,"x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,64,"x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,65,"xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,66,"xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,67,"xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,68,"xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,69,"x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,70,"x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,71,"x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,72,"x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,73,"x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,74,"x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,75,"x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,76,"x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,77,"xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,78,"xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,79,"xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,80,"xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,81,"xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,82,"xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,83,"x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,84,"x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,85,"x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,86,"x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,87,"x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,88,"x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,89,"x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,90,"x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,91,"x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,92,"x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,93,"xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,94,"xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,95,"xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,96,"xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,97,"x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,98,"x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,99,"xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,100,"xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4"
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,103,rivate int m_globalCrc;
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,105,rotected CRC()
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,107,nitialiseCRC();
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,110,nt getFinalCRC()
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,112,eturn ~m_globalCrc;
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,115,oid initialiseCRC()
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,117,_globalCrc = 0xffffffff;
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,120,oid updateCRC( final int inCh )
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,122,nt temp = ( m_globalCrc >> 24 ) ^ inCh;
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,123,f( temp < 0 )
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,125,emp = 256 + temp;
False,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,127,_globalCrc = ( m_globalCrc << 8 ) ^ CRC32_TABLE[ temp ];
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,19,package org.apache.commons.compress.archivers;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,22,* Represents an entry of an archive.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,24,public interface ArchiveEntry {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,26,public String getName();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,28,public long getSize();
False,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,19,ackage org.apache.commons.compress;
True,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,19,package org.apache.commons.compress.archivers;
False,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,21, Exception for the archiver.
True,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,22,* Archiver related Exception
False,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,23,ublic class ArchiveException extends PackableObjectException {
False,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,25, Comment for <code>serialVersionUID</code>
True,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,24,public class ArchiveException extends Exception {
False,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,30, Calls the IOException constructor
False,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,37, Calls the super constructor with a message
False,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,38, @param message the message
False,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,45, Calls the super constructor with a message
False,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,46, and fills the stacktrace with the stacktrace of
False,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,47, an exception
False,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,49, @param message the message
False,src/java/org/apache/commons/compress/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,50, @param e the exception
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,19,package org.apache.commons.compress.archivers;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,24,public abstract class ArchiveInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,27,* Returns the next Archive Entry in this Stream.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,28,* @return the next entry
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,29,* @throws IOException if the next entry could not be read
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,31,public abstract ArchiveEntry getNextEntry() throws IOException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,19,package org.apache.commons.compress.archivers;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,24,public abstract class ArchiveOutputStream extends OutputStream {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,26,public abstract void putArchiveEntry(ArchiveEntry entry) throws IOException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,28,public abstract void closeArchiveEntry() throws IOException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,19,package org.apache.commons.compress.archivers;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,23,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,24,import java.lang.reflect.Constructor;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,25,import java.lang.reflect.InvocationTargetException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,26,import java.lang.reflect.Method;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,27,import java.util.HashMap;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,28,import java.util.Iterator;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,29,import java.util.Map;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,31,import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,32,import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,33,import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,34,import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,35,import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,36,import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,37,import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,38,import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,39,import org.apache.commons.compress.utils.ReflectionUtils;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,41,public class ArchiveStreamFactory {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,43,final Map inputStreamClasses = new HashMap();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,44,final Map outputStreamClasses = new HashMap();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,46,public ArchiveStreamFactory() throws ArchiveException {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,47,"registerArchiveInputStream(""zip"", ZipArchiveInputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,48,"registerArchiveOutputStream(""zip"", ZipArchiveOutputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,50,"registerArchiveInputStream(""tar"", TarArchiveInputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,51,"registerArchiveOutputStream(""tar"", TarArchiveOutputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,53,"registerArchiveInputStream(""ar"", ArArchiveInputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,54,"registerArchiveOutputStream(""ar"", ArArchiveOutputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,56,"registerArchiveInputStream(""jar"", JarArchiveInputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,57,"registerArchiveOutputStream(""jar"", JarArchiveOutputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,61,"public void registerArchiveInputStream( final String name, final Class stream ) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,62,if (ArchiveInputStream.class.isAssignableFrom(stream) && !(stream.isInterface())) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,63,"inputStreamClasses.put(name, stream);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,64,} else {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,65,"throw new ArchiveException(""Archive does not implement the ArchiveInputStream interface."");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,69,"public void registerArchiveOutputStream( final String name, final Class stream ) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,70,"ReflectionUtils.registerClazz(outputStreamClasses, name, ArchiveOutputStream.class, stream);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,71,if (ArchiveOutputStream.class.isAssignableFrom(stream) && !(stream.isInterface())) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,72,"outputStreamClasses.put(name, stream);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,73,} else {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,74,"throw new ArchiveException(""Archive does not implement the ArchiveOutputStream interface."");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,78,"public ArchiveInputStream createArchiveInputStream( final String archiverName, final InputStream out ) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,79,try {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,80,final Class clazz = (Class) inputStreamClasses.get(archiverName);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,82,if (clazz == null) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,83,"throw new ArchiveException(""ArchiverFactory could not create instance"");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,86,final Class[] params = { InputStream.class };
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,87,final Constructor constructor = clazz.getConstructor(params);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,88,final Object[] initargs = { out };
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,89,return (ArchiveInputStream) constructor.newInstance(initargs);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,90,} catch (InstantiationException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,91,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,92,} catch (IllegalAccessException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,93,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,94,} catch (SecurityException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,95,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,96,} catch (NoSuchMethodException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,97,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,98,} catch (IllegalArgumentException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,99,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,100,} catch (InvocationTargetException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,101,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,105,"public ArchiveOutputStream createArchiveOutputStream( final String archiverName, final OutputStream out ) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,106,try {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,107,final Class clazz = (Class) outputStreamClasses.get(archiverName);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,109,if (clazz == null) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,110,"throw new ArchiveException(""ArchiverFactory could not create instance"");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,113,final Class[] params = { OutputStream.class };
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,114,final Constructor constructor = clazz.getConstructor(params);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,115,final Object[] initargs = { out };
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,116,return (ArchiveOutputStream) constructor.newInstance(initargs);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,117,} catch (InstantiationException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,118,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,119,} catch (IllegalAccessException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,120,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,121,} catch (SecurityException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,122,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,123,} catch (NoSuchMethodException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,124,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,125,} catch (IllegalArgumentException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,126,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,127,} catch (InvocationTargetException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,128,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,132,public ArchiveInputStream createArchiveInputStream( final InputStream input ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,134,final byte[] signature = new byte[12];
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,135,input.mark(signature.length);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,136,input.read(signature);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,137,// reset not supported exception?
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,138,input.reset();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,140,//		for (int i = 0; i < signature.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,141,//			System.out.print(Integer.toHexString(signature[i]));
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,142,"//			System.out.print("","");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,144,"//		System.out.println("""");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,146,for (Iterator it = inputStreamClasses.values().iterator(); it.hasNext();) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,147,final Class clazz = (Class) it.next();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,148,try {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,149,"final Method method = clazz.getMethod(""matches"", new Class[] { byte[].class });"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,151,"final Object result = method.invoke(null, new Object[] { signature } );"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,153,if (result.equals(Boolean.TRUE)) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,154,final Class[] params = { InputStream.class };
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,155,final Constructor constructor = clazz.getConstructor(params);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,156,final Object[] initargs = { input };
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,157,return (ArchiveInputStream) constructor.newInstance(initargs);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,159,} catch (SecurityException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,160,} catch (NoSuchMethodException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,161,} catch (IllegalArgumentException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,162,} catch (IllegalAccessException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,163,} catch (InvocationTargetException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,164,} catch (InstantiationException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,167,return null;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,19,package org.apache.commons.compress.archivers.ar;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,21,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,23,public class ArArchiveEntry implements ArchiveEntry {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,25,private final String name;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,26,private int userId;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,27,private int groupId;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,28,private int mode;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,29,private long lastModified;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,30,private long length;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,32,"public ArArchiveEntry(String name, long length) {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,33,"this(name, length, 0, 0, 33188, System.currentTimeMillis());"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,36,"public ArArchiveEntry(String name, long length, int userId, int groupId, int mode, long lastModified) {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,37,this.name = name;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,38,this.length = length;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,39,this.userId = userId;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,40,this.groupId = groupId;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,41,this.mode = mode;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,42,this.lastModified = lastModified;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,45,public long getSize() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,46,return this.getLength();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,49,public String getName() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,50,return name;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,53,public int getUserId() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,54,return userId;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,57,public int getGroupId() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,58,return groupId;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,61,public int getMode() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,62,return mode;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,65,public long getLastModified() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,66,return lastModified;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,69,public long getLength() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,70,return length;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,19,package org.apache.commons.compress.archivers.ar;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,25,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,27,public class ArArchiveInputStream extends ArchiveInputStream {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,29,private final InputStream input;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,30,private long offset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,32,public ArArchiveInputStream( final InputStream pInput ) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,33,input = pInput;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,36,public ArchiveEntry getNextEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,38,if (offset == 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,39,"final byte[] expected = ""!<arch>\n"".getBytes();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,40,final byte[] realized = new byte[expected.length];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,41,final int read = input.read(realized);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,42,if (read != expected.length) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,43,"throw new IOException(""failed to read header"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,45,for (int i = 0; i < expected.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,46,if (expected[i] != realized[i]) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,47,"throw new IOException(""invalid header "" + new String(realized));"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,52,if (input.available() == 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,53,return null;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,56,if (offset % 2 != 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,57,read();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,60,final byte[] name = new byte[16];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,61,final byte[] lastmodified = new byte[12];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,62,final byte[] userid = new byte[6];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,63,final byte[] groupid = new byte[6];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,64,final byte[] filemode = new byte[8];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,65,final byte[] length = new byte[10];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,67,read(name);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,68,read(lastmodified);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,69,read(userid);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,70,read(groupid);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,71,read(filemode);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,72,read(length);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,75,"final byte[] expected = ""`\012"".getBytes();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,76,final byte[] realized = new byte[expected.length];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,77,final int read = input.read(realized);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,78,if (read != expected.length) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,79,"throw new IOException(""failed to read entry header"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,81,for (int i = 0; i < expected.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,82,if (expected[i] != realized[i]) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,83,"throw new IOException(""invalid entry header. not read the content?"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,88,"return new ArArchiveEntry(new String(name).trim(), Long.parseLong(new String(length).trim()));"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,93,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,94,final int ret = input.read();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,95,offset++;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,96,return ret;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,99,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,100,"return this.input.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,103,public static boolean matches( byte[] signature ) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,104,// 3c21 7261 6863 0a3e
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,106,if (signature[0] != 0x21) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,107,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,109,if (signature[1] != 0x3c) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,110,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,112,if (signature[2] != 0x61) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,113,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,115,if (signature[3] != 0x72) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,116,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,118,if (signature[4] != 0x63) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,119,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,121,if (signature[5] != 0x68) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,122,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,124,if (signature[6] != 0x3e) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,125,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,127,if (signature[7] != 0x0a) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,128,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,131,return true;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,19,package org.apache.commons.compress.archivers.ar;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,25,import org.apache.commons.compress.archivers.ArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,27,public class ArArchiveOutputStream extends ArchiveOutputStream {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,29,private final OutputStream out;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,30,private long archiveOffset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,31,private long entryOffset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,32,private ArArchiveEntry prevEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,34,public ArArchiveOutputStream( final OutputStream pOut ) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,35,out = pOut;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,39,private long writeArchiveHeader() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,40,"final String header = ""!<arch>\n"";"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,41,out.write(header.getBytes());
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,42,return header.length();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,45,public void closeArchiveEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,46,if ((entryOffset % 2) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,47,write('\n');
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,48,archiveOffset++;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,52,public void putArchiveEntry( final ArchiveEntry pEntry ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,53,ArArchiveEntry pArEntry = (ArArchiveEntry)pEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,54,if (prevEntry == null) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,55,archiveOffset += writeArchiveHeader();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,56,} else {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,57,if (prevEntry.getLength() != entryOffset) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,58,"throw new IOException(""length does not match entry ("" + prevEntry.getLength() + "" != "" + entryOffset);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,61,closeArchiveEntry();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,64,prevEntry = pArEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,66,archiveOffset += writeEntryHeader(pArEntry);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,68,entryOffset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,71,"private long fill( final long pOffset, final long pNewOffset, final char pFill ) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,72,final long diff = pNewOffset - pOffset;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,74,if (diff > 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,75,for (int i = 0; i < diff; i++) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,76,write(pFill);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,80,return pNewOffset;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,83,private long write( final String data ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,84,"final byte[] bytes = data.getBytes(""ascii"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,85,write(bytes);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,86,return bytes.length;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,89,private long writeEntryHeader( final ArArchiveEntry pEntry ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,91,long offset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,93,final String n = pEntry.getName();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,94,if (n.length() > 16) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,95,"throw new IOException(""filename too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,97,offset += write(n);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,99,"offset = fill(offset, 16, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,100,"final String m = """" + (pEntry.getLastModified() / 1000);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,101,if (m.length() > 12) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,102,"throw new IOException(""modified too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,104,offset += write(m);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,106,"offset = fill(offset, 28, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,107,"final String u = """" + pEntry.getUserId();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,108,if (u.length() > 6) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,109,"throw new IOException(""userid too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,111,offset += write(u);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,113,"offset = fill(offset, 34, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,114,"final String g = """" + pEntry.getGroupId();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,115,if (g.length() > 6) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,116,"throw new IOException(""groupid too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,118,offset += write(g);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,120,"offset = fill(offset, 40, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,121,"final String fm = """" + Integer.toString(pEntry.getMode(), 8);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,122,if (fm.length() > 8) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,123,"throw new IOException(""filemode too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,125,offset += write(fm);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,127,"offset = fill(offset, 48, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,128,"final String s = """" + pEntry.getLength();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,129,if (s.length() > 10) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,130,"throw new IOException(""size too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,132,offset += write(s);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,134,"offset = fill(offset, 58, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,136,"offset += write(""`\012"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,138,return offset;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,141,public void write(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,142,out.write(b);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,143,entryOffset++;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,146,"public void write(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,147,"out.write(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,148,entryOffset += len;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,151,public void write(byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,152,out.write(b);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,153,entryOffset += b.length;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,156,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,157,closeArchiveEntry();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,158,out.close();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,159,prevEntry = null;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,162,public String getDefaultFileExtension() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,163,"return ""ar"";"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,166,public byte[] getHeader() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,167,// TODO Auto-generated method stub
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,168,return null;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,171,public String getName() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,172,"return ""ar"";"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,19,package org.apache.commons.compress.archivers.jar;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,21,import java.security.cert.Certificate;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,22,import java.util.jar.Attributes;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,23,import java.util.jar.JarEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,24,import java.util.zip.ZipEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,25,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,27,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,28,import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,30,public class JarArchiveEntry extends ZipArchiveEntry implements ArchiveEntry {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,32,private Attributes manifestAttributes = null;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,33,private Certificate[] certificates = null;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,35,public JarArchiveEntry(ZipEntry entry) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,36,super(entry);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,39,public JarArchiveEntry(String name) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,40,super(name);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,43,public JarArchiveEntry(ZipArchiveEntry entry) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,44,super(entry);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,47,public JarArchiveEntry(JarEntry entry) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,48,super(entry);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,52,public Attributes getManifestAttributes() {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,53,return manifestAttributes;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,56,public Certificate[] getCertificates() {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,57,return certificates;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,19,package org.apache.commons.compress.archivers.jar;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,25,import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,26,import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,28,public class JarArchiveInputStream extends ZipArchiveInputStream {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,30,public JarArchiveInputStream( final InputStream inputStream ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,31,super(inputStream);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,34,public ArchiveEntry getNextEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,35,return (ArchiveEntry)new JarArchiveEntry((ZipArchiveEntry)super.getNextEntry());
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,38,public static boolean matches( byte[] signature ) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,39,// 4b50 0403 0014 0008
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,41,if (signature[0] != 0x50) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,42,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,44,if (signature[1] != 0x4b) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,45,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,47,if (signature[2] != 0x03) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,48,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,50,if (signature[3] != 0x04) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,51,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,53,if (signature[4] != 0x14) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,54,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,56,if (signature[5] != 0x00) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,57,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,59,if (signature[6] != 0x08) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,60,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,62,if (signature[7] != 0x00) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,63,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,66,return true;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,19,package org.apache.commons.compress.archivers.jar;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,25,import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,26,import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,28,public class JarArchiveOutputStream extends ZipArchiveOutputStream {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,30,public JarArchiveOutputStream( final OutputStream out ) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,31,super(out);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,34,public void putArchiveEntry(ArchiveEntry entry) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,35,// TODO special jar stuff
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,36,super.putArchiveEntry((ZipArchiveEntry) entry);
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,66," @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,67," @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,68," @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,69, @version $Revision: 155439 $ $Date$
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,70, @see TarInputStream
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,71, @see TarOutputStream
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,73,ublic class TarEntry
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,76, The length of the mode field in a header buffer.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,78,rivate final static int MODELEN = 8;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,81, The length of the user id field in a header buffer.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,83,rivate final static int UIDLEN = 8;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,86, The length of the group id field in a header buffer.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,88,rivate final static int GIDLEN = 8;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,91, The length of the checksum field in a header buffer.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,93,rivate final static int CHKSUMLEN = 8;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,96, The length of the size field in a header buffer.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,98,rivate final static int SIZELEN = 12;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,101, The length of the magic field in a header buffer.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,103,rivate final static int MAGICLEN = 8;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,106, The length of the modification time field in a header buffer.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,108,rivate final static int MODTIMELEN = 12;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,111, The length of the user name field in a header buffer.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,113,rivate final static int UNAMELEN = 32;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,116, The length of the group name field in a header buffer.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,118,rivate final static int GNAMELEN = 32;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,121, The length of the devices field in a header buffer.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,123,rivate final static int DEVLEN = 8;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,126," LF_ constants represent the ""link flag"" of an entry, or more commonly,"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,127," the ""entry type"". This is the ""old way"" of indicating a normal file."
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,129,/private final static byte LF_OLDNORM = 0;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,132, Normal file type.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,134,rivate final static byte LF_NORMAL = (byte)'0';
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,137, Link file type.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,139,/private final static byte LF_LINK = (byte)'1';
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,142, Symbolic link file type.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,144,/private final static byte LF_SYMLINK = (byte)'2';
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,147, Character device file type.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,149,/private final static byte LF_CHR = (byte)'3';
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,152, Block device file type.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,154,/private final static byte LF_BLK = (byte)'4';
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,157, Directory file type.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,159,rivate final static byte LF_DIR = (byte)'5';
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,162, FIFO (pipe) file type.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,164,/private final static byte LF_FIFO = (byte)'6';
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,167, Contiguous file type.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,169,/private final static byte LF_CONTIG = (byte)'7';
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,172, The magic tag representing a POSIX tar archive.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,174,"rivate final static String TMAGIC = ""ustar"";"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,177, The magic tag representing a GNU tar archive.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,179,"/private final static String GNU_TMAGIC = ""ustar  "";"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,182, The name of the GNU tar entry which contains a long name.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,184,"tatic String GNU_LONGLINK = ""././@LongLink"";"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,187, Identifies the *next* file on the tape as having a long name.
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,189,tatic byte LF_GNUTYPE_LONGNAME = (byte)'L';
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,68,public class TarArchiveEntry implements ArchiveEntry {
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,248,rivate int m_mode;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,127,private int m_mode;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,276,ublic TarEntry( final String name )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,152,public TarArchiveEntry( final String name )
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,284,_linkFlag = isDir ? TarEntry.LF_DIR : TarEntry.LF_NORMAL;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,160,m_linkFlag = isDir ? TarConstants.LF_DIR : TarConstants.LF_NORMAL;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,297,"ublic TarEntry( final String name, final byte linkFlag )"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,173,"public TarArchiveEntry( final String name, final byte linkFlag )"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,309,ublic TarEntry( final File file )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,185,public TarArchiveEntry( final File file )
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,360,_linkFlag = TarEntry.LF_DIR;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,236,m_linkFlag = TarConstants.LF_DIR;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,370,_linkFlag = TarEntry.LF_NORMAL;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,246,m_linkFlag = TarConstants.LF_NORMAL;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,385,ublic TarEntry( final byte[] header )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,261,public TarArchiveEntry( final byte[] header )
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,394,rivate TarEntry()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,270,private TarArchiveEntry()
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,396,_magic = new StringBuffer( TarEntry.TMAGIC );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,272,m_magic = new StringBuffer( TarConstants.TMAGIC );
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,531,ublic TarEntry[] getDirectoryEntries()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,407,public TarArchiveEntry[] getDirectoryEntries()
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,535,eturn new TarEntry[ 0 ];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,411,return new TarArchiveEntry[ 0 ];
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,539,inal TarEntry[] result = new TarEntry[ list.length ];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,415,final TarArchiveEntry[] result = new TarArchiveEntry[ list.length ];
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,543,"esult[ i ] = new TarEntry( new File( m_file, list[ i ] ) );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,419,"result[ i ] = new TarArchiveEntry( new File( m_file, list[ i ] ) );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,681,ublic boolean isDescendent( final TarEntry desc )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,557,public boolean isDescendent( final TarArchiveEntry desc )
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,698,f( m_linkFlag == TarEntry.LF_DIR )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,574,if( m_linkFlag == TarConstants.LF_DIR )
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,718,eturn m_linkFlag == TarEntry.LF_GNUTYPE_LONGNAME &&
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,719,_name.toString().equals( TarEntry.GNU_LONGLINK );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,594,return m_linkFlag == TarConstants.LF_GNUTYPE_LONGNAME &&
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,595,m_name.toString().equals( TarConstants.GNU_LONGLINK );
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,729,ublic boolean equals( final TarEntry other )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,605,public boolean equals( final TarArchiveEntry other )
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,745,"_mode = (int)TarUtils.parseOctal( header, offset, TarEntry.MODELEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,746,ffset += TarEntry.MODELEN;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,747,"_userID = (int)TarUtils.parseOctal( header, offset, TarEntry.UIDLEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,748,ffset += TarEntry.UIDLEN;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,749,"_groupID = (int)TarUtils.parseOctal( header, offset, TarEntry.GIDLEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,750,ffset += TarEntry.GIDLEN;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,751,"_size = TarUtils.parseOctal( header, offset, TarEntry.SIZELEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,752,ffset += TarEntry.SIZELEN;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,753,"_modTime = TarUtils.parseOctal( header, offset, TarEntry.MODTIMELEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,754,ffset += TarEntry.MODTIMELEN;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,755,"_checkSum = (int)TarUtils.parseOctal( header, offset, TarEntry.CHKSUMLEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,756,ffset += TarEntry.CHKSUMLEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,621,"m_mode = (int)TarUtils.parseOctal( header, offset, TarConstants.MODELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,622,offset += TarConstants.MODELEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,623,"m_userID = (int)TarUtils.parseOctal( header, offset, TarConstants.UIDLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,624,offset += TarConstants.UIDLEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,625,"m_groupID = (int)TarUtils.parseOctal( header, offset, TarConstants.GIDLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,626,offset += TarConstants.GIDLEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,627,"m_size = TarUtils.parseOctal( header, offset, TarConstants.SIZELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,628,offset += TarConstants.SIZELEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,629,"m_modTime = TarUtils.parseOctal( header, offset, TarConstants.MODTIMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,630,offset += TarConstants.MODTIMELEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,631,"m_checkSum = (int)TarUtils.parseOctal( header, offset, TarConstants.CHKSUMLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,632,offset += TarConstants.CHKSUMLEN;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,760,"_magic = TarUtils.parseName( header, offset, TarEntry.MAGICLEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,761,ffset += TarEntry.MAGICLEN;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,762,"_userName = TarUtils.parseName( header, offset, TarEntry.UNAMELEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,763,ffset += TarEntry.UNAMELEN;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,764,"_groupName = TarUtils.parseName( header, offset, TarEntry.GNAMELEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,765,ffset += TarEntry.GNAMELEN;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,766,"_devMajor = (int)TarUtils.parseOctal( header, offset, TarEntry.DEVLEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,767,ffset += TarEntry.DEVLEN;
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,768,"_devMinor = (int)TarUtils.parseOctal( header, offset, TarEntry.DEVLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,636,"m_magic = TarUtils.parseName( header, offset, TarConstants.MAGICLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,637,offset += TarConstants.MAGICLEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,638,"m_userName = TarUtils.parseName( header, offset, TarConstants.UNAMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,639,offset += TarConstants.UNAMELEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,640,"m_groupName = TarUtils.parseName( header, offset, TarConstants.GNAMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,641,offset += TarConstants.GNAMELEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,642,"m_devMajor = (int)TarUtils.parseOctal( header, offset, TarConstants.DEVLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,643,offset += TarConstants.DEVLEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,644,"m_devMinor = (int)TarUtils.parseOctal( header, offset, TarConstants.DEVLEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,781,"ffset = TarUtils.getOctalBytes( m_mode, buffer, offset, TarEntry.MODELEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,782,"ffset = TarUtils.getOctalBytes( m_userID, buffer, offset, TarEntry.UIDLEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,783,"ffset = TarUtils.getOctalBytes( m_groupID, buffer, offset, TarEntry.GIDLEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,784,"ffset = TarUtils.getLongOctalBytes( m_size, buffer, offset, TarEntry.SIZELEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,785,"ffset = TarUtils.getLongOctalBytes( m_modTime, buffer, offset, TarEntry.MODTIMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,657,"offset = TarUtils.getOctalBytes( m_mode, buffer, offset, TarConstants.MODELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,658,"offset = TarUtils.getOctalBytes( m_userID, buffer, offset, TarConstants.UIDLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,659,"offset = TarUtils.getOctalBytes( m_groupID, buffer, offset, TarConstants.GIDLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,660,"offset = TarUtils.getLongOctalBytes( m_size, buffer, offset, TarConstants.SIZELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,661,"offset = TarUtils.getLongOctalBytes( m_modTime, buffer, offset, TarConstants.MODTIMELEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,788,or( int i = 0; i < TarEntry.CHKSUMLEN; ++i )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,664,for( int i = 0; i < TarConstants.CHKSUMLEN; ++i )
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,795,"ffset = TarUtils.getNameBytes( m_magic, buffer, offset, TarEntry.MAGICLEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,796,"ffset = TarUtils.getNameBytes( m_userName, buffer, offset, TarEntry.UNAMELEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,797,"ffset = TarUtils.getNameBytes( m_groupName, buffer, offset, TarEntry.GNAMELEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,798,"ffset = TarUtils.getOctalBytes( m_devMajor, buffer, offset, TarEntry.DEVLEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,799,"ffset = TarUtils.getOctalBytes( m_devMinor, buffer, offset, TarEntry.DEVLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,671,"offset = TarUtils.getNameBytes( m_magic, buffer, offset, TarConstants.MAGICLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,672,"offset = TarUtils.getNameBytes( m_userName, buffer, offset, TarConstants.UNAMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,673,"offset = TarUtils.getNameBytes( m_groupName, buffer, offset, TarConstants.GNAMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,674,"offset = TarUtils.getOctalBytes( m_devMajor, buffer, offset, TarConstants.DEVLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,675,"offset = TarUtils.getOctalBytes( m_devMinor, buffer, offset, TarConstants.DEVLEN );"
False,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,807,"arUtils.getCheckSumOctalBytes( checkSum, buffer, checkSumOffset, TarEntry.CHKSUMLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,683,"TarUtils.getCheckSumOctalBytes( checkSum, buffer, checkSumOffset, TarConstants.CHKSUMLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,19,package org.apache.commons.compress.archivers.tar;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,25,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,27,public class TarArchiveInputStream extends ArchiveInputStream {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,28,private final TarInputStream in;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,30,public TarArchiveInputStream( InputStream inputStream ) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,31,in = new TarInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,34,public ArchiveEntry getNextEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,35,return (ArchiveEntry)in.getNextEntry();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,38,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,39,"return in.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,42,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,43,return in.read();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,46,public static boolean matches( byte[] signature ) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,47,// 6574 7473 2e31 6d78
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,49,if (signature[0] != 0x74) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,50,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,52,if (signature[1] != 0x65) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,53,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,55,if (signature[2] != 0x73) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,56,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,58,if (signature[3] != 0x74) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,59,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,61,if (signature[4] != 0x31) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,62,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,64,if (signature[5] != 0x2e) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,65,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,67,if (signature[6] != 0x78) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,68,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,70,if (signature[7] != 0x6d) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,71,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,74,return true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,19,package org.apache.commons.compress.archivers.tar;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,25,import org.apache.commons.compress.archivers.ArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,27,public class TarArchiveOutputStream extends ArchiveOutputStream {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,29,private TarOutputStream out = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,31,public TarArchiveOutputStream(OutputStream out) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,32,this.out = new TarOutputStream(out);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,35,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,36,this.out.close();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,39,public void closeArchiveEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,40,this.out.closeEntry();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,43,public void putArchiveEntry(ArchiveEntry entry) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,44,this.out.putNextEntry((TarArchiveEntry)entry);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,47,"public void write(byte[] buffer, int offset, int length) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,48,"this.out.write(buffer, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,51,public String getDefaultFileExtension() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,52,"return ""tar"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,55,public byte[] getHeader() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,56,// TODO Auto-generated method stub
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,57,return null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,60,public String getName() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,61,"return ""tar"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,64,public void write(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,65,this.out.write(b);
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,24,import java.util.Arrays;
False,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,35," @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
False,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,36," @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
False,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,37, @version $Revision: 155439 $ $Date$
False,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,39,ublic class TarBuffer
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,36,class TarBuffer
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,441,"// However, just leaving the unread portion of the buffer dirty does"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,442,// cause problems in some cases.  This problem is described in
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,443,// http://issues.apache.org/bugzilla/show_bug.cgi?id=29877
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,445,// The solution is to fill the unused portion of the buffer with zeros.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,447,"Arrays.fill(m_blockBuffer, offset, offset + bytesNeeded, (byte) 0);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,19,package org.apache.commons.compress.archivers.tar;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,22,* This interface contains all the definitions used in the package.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,24,interface TarConstants
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,27,* The length of the mode field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,29,int MODELEN = 8;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,32,* The length of the user id field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,34,int UIDLEN = 8;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,37,* The length of the group id field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,39,int GIDLEN = 8;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,42,* The length of the checksum field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,44,int CHKSUMLEN = 8;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,47,* The length of the size field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,49,int SIZELEN = 12;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,52,* The length of the magic field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,54,int MAGICLEN = 8;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,57,* The length of the modification time field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,59,int MODTIMELEN = 12;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,62,* The length of the user name field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,64,int UNAMELEN = 32;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,67,* The length of the group name field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,69,int GNAMELEN = 32;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,72,* The length of the devices field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,74,int DEVLEN = 8;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,77,"* LF_ constants represent the ""link flag"" of an entry, or more commonly,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,78,"* the ""entry type"". This is the ""old way"" of indicating a normal file."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,80,byte LF_OLDNORM = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,83,* Normal file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,85,byte LF_NORMAL = (byte)'0';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,88,* Link file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,90,byte LF_LINK = (byte)'1';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,93,* Symbolic link file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,95,byte LF_SYMLINK = (byte)'2';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,98,* Character device file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,100,byte LF_CHR = (byte)'3';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,103,* Block device file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,105,byte LF_BLK = (byte)'4';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,108,* Directory file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,110,byte LF_DIR = (byte)'5';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,113,* FIFO (pipe) file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,115,byte LF_FIFO = (byte)'6';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,118,* Contiguous file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,120,byte LF_CONTIG = (byte)'7';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,123,* The magic tag representing a POSIX tar archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,125,"String TMAGIC = ""ustar"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,128,* The magic tag representing a GNU tar archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,130,"String GNU_TMAGIC = ""ustar  "";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,133,* The namr of the GNU tar entry which contains a long name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,135,"String GNU_LONGLINK = ""././@LongLink"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,138,* Identifies the *next* file on the tape as having a long name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,140,byte LF_GNUTYPE_LONGNAME = (byte)'L';
False,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,30," @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
False,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,31," @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
False,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,32," @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
False,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,33, @version $Revision: 155439 $ $Date$
False,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,34, @see TarInputStream
False,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,35, @see TarEntry
False,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,37,ublic final class TarInputStream extends FilterInputStream
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,31,public class TarInputStream
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,32,extends FilterInputStream
False,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,40,rivate TarEntry m_currEntry;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,35,private TarArchiveEntry m_currEntry;
False,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,115,ublic TarEntry getNextEntry()
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,110,public TarArchiveEntry getNextEntry()
False,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,167,_currEntry = new TarEntry( headerBuf );
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,162,m_currEntry = new TarArchiveEntry( headerBuf );
False,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,310,eturn m_oneBuf[ 0 ];
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,305,return (int)m_oneBuf[ 0 ];
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,30," @author Timothy Gerard Endres <a href=""mailto:time@ice.com"">time@ice.com</a>"
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,31," @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,32, @version $Revision: 155439 $ $Date$
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,33, @see TarInputStream
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,34, @see TarEntry
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,36,ublic final class TarOutputStream extends FilterOutputStream
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,31,public class TarOutputStream
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,32,extends FilterOutputStream
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,65,rivate long m_currBytes;
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,66,rivate long m_currSize;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,61,private int m_currBytes;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,62,private int m_currSize;
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,224, @param entry The TarEntry to be written to the archive.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,220,* @param entry The TarArchiveEntry to be written to the archive.
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,227,ublic void putNextEntry( final TarEntry entry )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,223,public void putNextEntry( final TarArchiveEntry entry )
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,230,f( entry.getName().length() >= TarEntry.NAMELEN )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,226,if( entry.getName().length() >= TarArchiveEntry.NAMELEN )
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,234,"/ create a TarEntry for the LongLink, the contents"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,230,"// create a TarArchiveEntry for the LongLink, the contents"
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,236,inal TarEntry longLinkEntry =
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,237,"ew TarEntry( TarEntry.GNU_LONGLINK,"
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,238,arEntry.LF_GNUTYPE_LONGNAME );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,232,final TarArchiveEntry longLinkEntry =
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,233,"new TarArchiveEntry( TarConstants.GNU_LONGLINK,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,234,TarConstants.LF_GNUTYPE_LONGNAME );
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,249,"' is too long ( > "" + TarEntry.NAMELEN + "" bytes)"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,245,"""' is too long ( > "" + TarArchiveEntry.NAMELEN + "" bytes)"";"
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,265,_currSize = entry.getSize();
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,261,m_currSize = (int)entry.getSize();
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,276,oid copyEntryContents( final InputStream input )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,272,public void copyEntryContents( final InputStream input )
False,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,378,umToWrite = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,374,numToWrite -= numToWrite;
False,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,24," @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
False,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,25," @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
False,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,26, @version $Revision: 155439 $ $Date$
False,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,28,ublic class TarUtils
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,24,class TarUtils
False,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,46," @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,47, @version $Revision: 155439 $
False,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,28," @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,29, @version $Revision: 155439 $
False,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,24," @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,25, @version $Revision: 155439 $
False,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,27," @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,28, @version $Revision: 155439 $
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,21,import java.lang.reflect.InvocationTargetException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,22,import java.lang.reflect.Method;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,23,import java.util.ArrayList;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,24,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,26,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,29,* Extension that adds better handling of extra fields and provides access to
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,30,* the internal and external file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,32,public class ZipArchiveEntry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,33,extends java.util.zip.ZipEntry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,34,implements ArchiveEntry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,37,* Helper for JDK 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,39,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,41,private static Method c_setCompressedSizeMethod;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,44,* Helper for JDK 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,46,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,48,private static final Object c_lockReflection = new Object();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,51,* Helper for JDK 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,53,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,55,private static boolean c_triedToGetMethod;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,57,private final ArrayList m_extraFields = new ArrayList();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,59,private int m_internalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,60,private long m_externalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,63,* Helper for JDK 1.1 <-> 1.2 incompatibility.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,65,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,67,private Long m_compressedSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,70,* Creates a new zip entry with the specified name.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,72,* @param name the name of entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,73,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,75,public ZipArchiveEntry( final String name )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,77,super( name );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,81,* Creates a new zip entry with fields taken from the specified zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,83,* @param entry the JDK ZipEntry to adapt
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,84,* @exception ZipException if can not create entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,85,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,87,public ZipArchiveEntry( java.util.zip.ZipEntry entry )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,88,throws ZipException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,91,"* REVISIT: call super(entry) instead of this stuff in Ant2,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,92,"* ""copy constructor"" has not been available in JDK 1.1"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,94,super( entry.getName() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,96,setComment( entry.getComment() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,97,setMethod( entry.getMethod() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,98,setTime( entry.getTime() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,100,final long size = entry.getSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,101,if( size > 0 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,103,setSize( size );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,106,final long cSize = entry.getCompressedSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,107,if( cSize > 0 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,109,setComprSize( cSize );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,112,final long crc = entry.getCrc();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,113,if( crc > 0 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,115,setCrc( crc );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,118,final byte[] extra = entry.getExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,119,if( extra != null )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,121,setExtraFields( ExtraFieldUtils.parse( extra ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,123,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,125,// initializes extra data to an empty byte array
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,126,setExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,131,* Creates a new zip entry with fields taken from the specified zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,133,* @param entry the entry to adapt
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,134,* @exception ZipException if can not create entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,135,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,137,public ZipArchiveEntry( final ZipArchiveEntry entry )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,138,throws ZipException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,140,this( (java.util.zip.ZipEntry)entry );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,141,setInternalAttributes( entry.getInternalAttributes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,142,setExternalAttributes( entry.getExternalAttributes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,143,setExtraFields( entry.getExtraFields() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,147,* Try to get a handle to the setCompressedSize method.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,149,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,151,private static void checkSCS()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,153,if( !c_triedToGetMethod )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,155,synchronized( c_lockReflection )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,157,c_triedToGetMethod = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,158,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,160,c_setCompressedSizeMethod =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,161,"java.util.zip.ZipEntry.class.getMethod( ""setCompressedSize"","
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,162,new Class[]{Long.TYPE} );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,164,catch( NoSuchMethodException nse )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,172,* Are we running JDK 1.2 or higher?
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,174,* @return Description of the Returned Value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,175,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,177,private static boolean haveSetCompressedSize()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,179,checkSCS();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,180,return c_setCompressedSizeMethod != null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,184,* Invoke setCompressedSize via reflection.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,186,* @param entry Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,187,* @param size Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,188,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,190,"private static void performSetCompressedSize( final ZipArchiveEntry entry,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,191,final long size )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,193,final Long[] s = {new Long( size )};
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,194,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,196,"c_setCompressedSizeMethod.invoke( entry, s );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,198,catch( final InvocationTargetException ite )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,200,final Throwable nested = ite.getTargetException();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,201,"final String message = ""Exception setting the compressed size "" +"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,202,"""of "" + entry + "": "" + nested.getMessage();"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,203,throw new RuntimeException( message );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,205,catch( final Throwable t )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,207,"final String message = ""Exception setting the compressed size "" +"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,208,"""of "" + entry + "": "" + t.getMessage();"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,209,throw new RuntimeException( message );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,214,* Make this class work in JDK 1.1 like a 1.2 class. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,216,* This either stores the size for later usage or invokes setCompressedSize
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,217,* via reflection.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,219,* @param size The new ComprSize value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,220,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,222,public void setComprSize( final long size )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,224,if( haveSetCompressedSize() )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,226,"performSetCompressedSize( this, size );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,228,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,230,m_compressedSize = new Long( size );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,235,* Sets the external file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,237,* @param externalAttributes The new ExternalAttributes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,238,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,240,public void setExternalAttributes( final long externalAttributes )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,242,m_externalAttributes = externalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,246,* Throws an Exception if extra data cannot be parsed into extra fields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,248,* @param extra The new Extra value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,249,* @throws RuntimeException if fail to set extra data
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,250,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,252,public void setExtra( final byte[] extra )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,253,throws RuntimeException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,255,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,257,setExtraFields( ExtraFieldUtils.parse( extra ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,259,catch( final Exception e )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,261,throw new RuntimeException( e.getMessage() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,266,* Replaces all currently attached extra fields with the new array.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,268,* @param fields The new ExtraFields value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,269,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,271,public void setExtraFields( final ZipExtraField[] fields )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,273,m_extraFields.clear();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,274,for( int i = 0; i < fields.length; i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,276,m_extraFields.add( fields[ i ] );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,278,setExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,282,* Sets the internal file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,284,* @param value The new InternalAttributes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,285,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,287,public void setInternalAttributes( final int value )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,289,m_internalAttributes = value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,293,* Retrieves the extra data for the central directory.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,295,* @return The CentralDirectoryExtra value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,296,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,298,public byte[] getCentralDirectoryExtra()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,300,return ExtraFieldUtils.mergeCentralDirectoryData( getExtraFields() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,304,* Override to make this class work in JDK 1.1 like a 1.2 class.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,306,* @return The CompressedSize value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,307,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,309,public long getCompressedSize()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,311,if( m_compressedSize != null )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,313,// has been set explicitly and we are running in a 1.1 VM
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,314,return m_compressedSize.longValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,316,return super.getCompressedSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,320,* Retrieves the external file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,322,* @return The ExternalAttributes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,323,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,325,public long getExternalAttributes()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,327,return m_externalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,331,* Retrieves extra fields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,333,* @return The ExtraFields value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,334,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,336,public ZipExtraField[] getExtraFields()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,338,final ZipExtraField[] result = new ZipExtraField[ m_extraFields.size() ];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,339,return (ZipExtraField[])m_extraFields.toArray( result );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,343,* Retrieves the internal file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,345,* @return The InternalAttributes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,346,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,348,public int getInternalAttributes()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,350,return m_internalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,354,* Retrieves the extra data for the local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,356,* @return The LocalFileDataExtra value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,357,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,359,public byte[] getLocalFileDataExtra()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,361,byte[] extra = getExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,362,return extra != null ? extra : new byte[ 0 ];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,366,* Adds an extra fields - replacing an already present extra field of the
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,367,* same type.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,369,* @param extraField The feature to be added to the ExtraField attribute
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,370,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,372,public void addExtraField( final ZipExtraField extraField )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,374,final ZipShort type = extraField.getHeaderID();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,375,boolean done = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,376,for( int i = 0; !done && i < m_extraFields.size(); i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,378,final ZipExtraField other = (ZipExtraField)m_extraFields.get( i );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,379,if( other.getHeaderID().equals( type ) )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,381,"m_extraFields.set( i, extraField );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,382,done = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,385,if( !done )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,387,m_extraFields.add( extraField );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,389,setExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,393,* Overwrite clone
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,395,* @return Description of the Returned Value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,396,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,398,public Object clone()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,400,ZipArchiveEntry entry = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,401,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,403,entry = new ZipArchiveEntry( (java.util.zip.ZipEntry)super.clone() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,405,catch( final Exception e )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,407,// impossible as extra data is in correct format
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,408,e.printStackTrace();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,409,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,412,entry.setInternalAttributes( getInternalAttributes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,413,entry.setExternalAttributes( getExternalAttributes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,414,entry.setExtraFields( getExtraFields() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,415,return entry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,419,* Remove an extra fields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,421,* @param type Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,422,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,424,public void removeExtraField( final ZipShort type )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,426,boolean done = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,427,for( int i = 0; !done && i < m_extraFields.size(); i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,429,if( ( (ZipExtraField)m_extraFields.get( i ) ).getHeaderID().equals( type ) )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,431,m_extraFields.remove( i );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,432,done = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,435,if( !done )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,437,throw new java.util.NoSuchElementException();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,439,setExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,443,* Unfortunately {@link java.util.zip.ZipOutputStream
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,444,"* java.util.zip.ZipOutputStream} seems to access the extra data directly,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,445,* so overriding getExtra doesn't help - we need to modify super's data
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,446,* directly.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,448,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,450,protected void setExtra()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,452,super.setExtra( ExtraFieldUtils.mergeLocalFileDataData( getExtraFields() ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,23,import java.util.zip.ZipInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,26,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,28,public class ZipArchiveInputStream extends ArchiveInputStream {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,30,private final ZipInputStream input;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,32,public ZipArchiveInputStream(InputStream inputStream) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,33,input = new ZipInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,36,public ArchiveEntry getNextEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,37,java.util.zip.ZipEntry entry = input.getNextEntry();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,38,if(entry == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,39,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,41,return (ArchiveEntry)new ZipArchiveEntry(entry);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,44,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,45,"return input.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,48,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,49,return input.read();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,53,public static boolean matches( byte[] signature ) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,54,// 4b50 0403 0014 0000
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,56,if (signature[0] != 0x50) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,57,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,59,if (signature[1] != 0x4b) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,60,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,62,if (signature[2] != 0x03) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,63,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,65,if (signature[3] != 0x04) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,66,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,68,if (signature[4] != 0x14) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,69,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,71,if (signature[5] != 0x00) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,72,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,74,if (signature[6] != 0x00) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,75,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,77,if (signature[7] != 0x00) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,78,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,81,return true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,23,import java.util.zip.ZipOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,26,import org.apache.commons.compress.archivers.ArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,28,public class ZipArchiveOutputStream extends ArchiveOutputStream {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,30,private ZipOutputStream zipOut = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,32,public ZipArchiveOutputStream(OutputStream out) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,33,this.zipOut = new ZipOutputStream(out);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,36,public void putArchiveEntry(ArchiveEntry entry) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,37,zipOut.putNextEntry((ZipArchiveEntry) entry);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,40,public String getDefaultFileExtension() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,41,"return ""zip"";"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,44,public byte[] getHeader() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,45,// TODO Auto-generated method stub
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,46,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,49,public String getName() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,50,"return ""zip"";"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,53,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,54,zipOut.close();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,57,"public void write(byte[] buffer, int offset, int length) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,58,"zipOut.write(buffer, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,61,public void closeArchiveEntry() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,62,// do nothing
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,65,public void write(int arg0) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,66,this.zipOut.write(arg0);
False,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,30," @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,31, @version $Revision: 155439 $
False,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,408,"hrow new Error(""Should never happen"");// TODO replace with AssertionError? (1.4+)"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,405,e.printStackTrace();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,406,return null;
False,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,31," @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,32, @version $Revision: 155439 $
False,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,25," @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,26, @version $Revision: 155439 $
False,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,25,mport java.util.Date;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,26,import java.util.Date;
False,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,45," @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,46, @version $Revision: 155439 $
False,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,48,lass ZipOutputStream
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,45,public class ZipOutputStream
False,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,201,rivate ZipEntry m_entry;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,198,private ZipArchiveEntry m_entry;
False,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,391,inal ZipEntry entry = (ZipEntry)m_entries.get( i );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,388,final ZipArchiveEntry entry = (ZipArchiveEntry)m_entries.get( i );
False,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,407,ublic void putNextEntry( final ZipEntry entry )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,404,public void putNextEntry( final ZipArchiveEntry entry )
False,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,538,rotected void writeCentralFileHeader( final ZipEntry entry )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,535,protected void writeCentralFileHeader( final ZipArchiveEntry entry )
False,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,638,rotected void writeDataDescriptor( ZipEntry ze )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,635,protected void writeDataDescriptor( ZipArchiveEntry ze )
False,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,659,rotected void writeLocalFileHeader( final ZipEntry entry )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,656,protected void writeLocalFileHeader( final ZipArchiveEntry entry )
False,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,25," @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,26, @version $Revision: 155439 $
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,19,package org.apache.commons.compress.changes;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,22,interface Change {
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,23,// public void perform(ArchiveInputStream input);
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,24,public int type();
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,19,package org.apache.commons.compress.changes;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,22,import java.util.LinkedHashSet;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,23,import java.util.Set;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,28,public final class ChangeSet {
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,30,private final Set changes = new LinkedHashSet();
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,32,public static final int CHANGE_TYPE_DELETE = 1;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,33,public static final int CHANGE_TYPE_ADD = 2;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,36,public void delete( final String pFilename ) {
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,37,changes.add(new DeleteChange(pFilename));
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,40,"public void move( final String pFrom, final String pTo ) {"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,43,"public void add( final ArchiveEntry pEntry, final InputStream pInput) {"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,46,public Set asSet() {
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,47,return changes;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,19,package org.apache.commons.compress.changes;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,23,import java.util.Iterator;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,26,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,27,import org.apache.commons.compress.archivers.ArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,28,import org.apache.commons.compress.utils.IOUtils;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,31,* Performs the operations of a change set
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,33,public class ChangeWorker {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,34,private ChangeWorker() {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,35,// nothing to do
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,39,* TODO
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,40,* @param changes
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,41,* @param in
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,42,* @param out
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,43,* @throws IOException
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,45,"public static void perform(ChangeSet changes, ArchiveInputStream in, ArchiveOutputStream out) throws IOException {"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,46,ArchiveEntry entry = null;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,47,while((entry = in.getNextEntry()) != null) {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,48,System.out.println(entry.getName());
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,49,boolean copy = true;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,51,for (Iterator it = changes.asSet().iterator(); it.hasNext();) {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,52,Change change = (Change)it.next();
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,54,if(change.type() == ChangeSet.CHANGE_TYPE_DELETE) {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,55,DeleteChange delete = ((DeleteChange)change);
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,56,if(entry.getName() != null &&
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,57,entry.getName().equals(delete.targetFile())) {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,58,copy = false;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,63,if(copy) {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,64,// copy archive
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,65,// TODO: unsafe long to int
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,66,"System.out.println(""Copy: "" + entry.getName());"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,67,long size = entry.getSize();
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,68,out.putArchiveEntry(entry);
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,69,"IOUtils.copy((InputStream)in, out, (int)size);"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,70,out.closeArchiveEntry();
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,74,"System.out.println(""---"");"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,76,// add operation stuff
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,77,out.close();
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,19,ackage org.apache.commons.compress;
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,19,package org.apache.commons.compress.changes;
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,21,import org.apache.commons.compress.archivers.ArchiveInputStream;
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,22, Exception occurs when a exception within
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,23, the compress actions occurs.
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,24,* Implementation for a delete operation
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,25,ublic class CompressException extends PackableObjectException {
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,27, Comment for <code>serialVersionUID</code>
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,29,rivate static final long serialVersionUID = 3257005449554507057L;
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,26,class DeleteChange implements Change {
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,27,private String filename = null;
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,32, Calls the IOException constructor
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,30,* Constructor. Takes the filename of the file to be deleted
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,31,* from the stream as argument.
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,32,* @param pFilename the filename of the file to delete
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,34,ublic CompressException() {
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,35,uper();
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,34,public DeleteChange(final String pFilename) {
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,35,if(pFilename == null) {
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,36,throw new NullPointerException();
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,38,filename = pFilename;
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,41,public void perform(ArchiveInputStream input) {
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,42,"System.out.println(""PERFORMING DELETE"");"
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,39, Calls the IOException constructor with a message
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,40, @param message the message
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,42,ublic CompressException(String message) {
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,43,uper(message);
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,45,public String targetFile() {
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,46,return filename;
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,47, Calls the IOException constructor with a message
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,48, and fills the stacktrace with the stacktrace of
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,49, an exception
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,51, @param message the message
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,52, @param e the exception
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,54,"ublic CompressException(String message, Exception e) {"
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,55,uper(message);
False,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,56,his.initCause(e);
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,49,public int type() {
True,src/java/org/apache/commons/compress/CompressException.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,50,return ChangeSet.CHANGE_TYPE_DELETE;
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,19,package org.apache.commons.compress.compressors;
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,21,public class CompressorException extends Exception {
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,23,private static final long serialVersionUID = -2770299103090672278L;
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,25,public CompressorException() {
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,26,super();
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,29,"public CompressorException(String arg0, Throwable arg1) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,30,"super(arg0, arg1);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,33,public CompressorException(String arg0) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,34,super(arg0);
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,37,public CompressorException(Throwable arg0) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,38,super(arg0);
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,19,package org.apache.commons.compress.compressors;
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,23,public abstract class CompressorInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,24,// TODO
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,19,package org.apache.commons.compress.compressors;
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,21,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,23,public abstract class CompressorOutputStream extends OutputStream {
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,24,// TODO
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,19,package org.apache.commons.compress.compressors;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,23,import java.lang.reflect.Constructor;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,24,import java.lang.reflect.InvocationTargetException;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,25,import java.util.HashMap;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,26,import java.util.Map;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,28,import org.apache.commons.compress.archivers.ArchiveException;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,29,import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,30,import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,31,import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,32,import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,34,public class CompressorStreamFactory {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,35,final Map inputStreamClasses = new HashMap();
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,36,final Map outputStreamClasses = new HashMap();
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,38,public CompressorStreamFactory() throws CompressorException {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,39,"registerInputStream(""gz"", GzipCompressorInputStream.class);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,40,"registerOutputStream(""gz"", GzipCompressorOutputStream.class);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,41,"registerInputStream(""bzip2"", BZip2CompressorInputStream.class);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,42,"registerOutputStream(""bzip2"", BZip2CompressorOutputStream.class);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,46,"public void registerInputStream( final String name, final Class stream ) throws CompressorException {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,47,if (CompressorInputStream.class.isAssignableFrom(stream) && !(stream.isInterface())) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,48,"inputStreamClasses.put(name, stream);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,49,} else {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,50,"throw new CompressorException(""Compressor does not implement the CompressorInputStream interface."");"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,54,"public void registerOutputStream( final String name, final Class stream ) throws CompressorException {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,55,if (CompressorOutputStream.class.isAssignableFrom(stream) && !(stream.isInterface())) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,56,"outputStreamClasses.put(name, stream);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,57,} else {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,58,"throw new CompressorException(""Compressor does not implement the CompressorOutputStream interface."");"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,62,"public CompressorInputStream createCompressorInputStream( final String name, final InputStream out ) throws CompressorException {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,63,try {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,64,final Class clazz = (Class) inputStreamClasses.get(name);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,66,if (clazz == null) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,67,"throw new CompressorException(""CompressorFactory could not create instance"");"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,70,final Class[] params = { InputStream.class };
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,71,final Constructor constructor = clazz.getConstructor(params);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,72,final Object[] initargs = { out };
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,73,return (CompressorInputStream) constructor.newInstance(initargs);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,74,} catch (InstantiationException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,75,"throw new CompressorException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,76,} catch (IllegalAccessException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,77,"throw new CompressorException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,78,} catch (SecurityException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,79,"throw new CompressorException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,80,} catch (NoSuchMethodException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,81,"throw new CompressorException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,82,} catch (IllegalArgumentException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,83,"throw new CompressorException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,84,} catch (InvocationTargetException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,85,"throw new CompressorException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,89,"public CompressorOutputStream createCompressorOutputStream( final String name, final OutputStream out ) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,90,try {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,91,final Class clazz = (Class) outputStreamClasses.get(name);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,93,if (clazz == null) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,94,"throw new ArchiveException(""CompressorFactory could not create instance"");"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,97,final Class[] params = { OutputStream.class };
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,98,final Constructor constructor = clazz.getConstructor(params);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,99,final Object[] initargs = { out };
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,100,return (CompressorOutputStream) constructor.newInstance(initargs);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,101,} catch (InstantiationException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,102,"throw new ArchiveException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,103,} catch (IllegalAccessException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,104,"throw new ArchiveException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,105,} catch (SecurityException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,106,"throw new ArchiveException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,107,} catch (NoSuchMethodException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,108,"throw new ArchiveException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,109,} catch (IllegalArgumentException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,110,"throw new ArchiveException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,111,} catch (InvocationTargetException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,112,"throw new ArchiveException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,19,package org.apache.commons.compress.compressors.bzip2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,24,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,27,* An input stream that decompresses from the BZip2 format (without the file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,28,* header chars) to be read as any other stream.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,30,public class BZip2CompressorInputStream extends CompressorInputStream implements BZip2Constants {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,32,private static void cadvise() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,33,"System.out.println(""CRC Error"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,34,//throw new CCoruptionError();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,38,private static void badBGLengths() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,39,cadvise();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,42,private static void bitStreamEOF() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,43,cadvise();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,47,private static void compressedStreamEOF() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,48,cadvise();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,51,private void makeMaps() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,52,int i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,53,nInUse = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,54,for (i = 0; i < 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,55,if (inUse[i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,56,seqToUnseq[nInUse] = (char) i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,57,unseqToSeq[i] = (char) nInUse;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,58,nInUse++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,64,"index of the last char in the block, so"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,65,the block size == last + 1.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,67,private int  last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,70,index in zptr[] of original string after sorting.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,72,private int  origPtr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,75,always: in the range 0 .. 9.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,76,The current block size is 100000 * this number.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,78,private int blockSize100k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,80,private boolean blockRandomised;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,82,private int bsBuff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,83,private int bsLive;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,84,private CRC mCrc = new CRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,86,private boolean[] inUse = new boolean[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,87,private int nInUse;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,89,private char[] seqToUnseq = new char[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,90,private char[] unseqToSeq = new char[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,92,private char[] selector = new char[MAX_SELECTORS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,93,private char[] selectorMtf = new char[MAX_SELECTORS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,95,private int[] tt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,96,private char[] ll8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,99,freq table collected to save a pass over the data
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,100,during decompression.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,102,private int[] unzftab = new int[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,104,private int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,105,private int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,106,private int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,107,private int[] minLens = new int[N_GROUPS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,109,private InputStream bsStream;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,111,private boolean streamEnd = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,113,private int currentChar = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,115,private static final int START_BLOCK_STATE = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,116,private static final int RAND_PART_A_STATE = 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,117,private static final int RAND_PART_B_STATE = 3;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,118,private static final int RAND_PART_C_STATE = 4;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,119,private static final int NO_RAND_PART_A_STATE = 5;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,120,private static final int NO_RAND_PART_B_STATE = 6;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,121,private static final int NO_RAND_PART_C_STATE = 7;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,123,private int currentState = START_BLOCK_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,125,"private int storedBlockCRC, storedCombinedCRC;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,126,"private int computedBlockCRC, computedCombinedCRC;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,128,"int i2, count, chPrev, ch2;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,129,"int i, tPos;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,130,int rNToGo = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,131,int rTPos  = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,132,int j2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,133,char z;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,135,public BZip2CompressorInputStream(InputStream zStream) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,136,ll8 = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,137,tt = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,138,bsSetStream(zStream);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,139,initialize();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,140,initBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,141,setupBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,144,public int read() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,145,if (streamEnd) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,146,return -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,147,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,148,int retChar = currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,149,switch(currentState) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,150,case START_BLOCK_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,151,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,152,case RAND_PART_A_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,153,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,154,case RAND_PART_B_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,155,setupRandPartB();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,156,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,157,case RAND_PART_C_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,158,setupRandPartC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,159,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,160,case NO_RAND_PART_A_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,161,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,162,case NO_RAND_PART_B_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,163,setupNoRandPartB();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,164,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,165,case NO_RAND_PART_C_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,166,setupNoRandPartC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,167,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,168,default:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,169,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,171,return retChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,175,private void initialize() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,176,"char magic3, magic4;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,177,magic3 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,178,magic4 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,179,if (magic3 != 'h' || magic4 < '1' || magic4 > '9') {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,180,bsFinishedWithStream();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,181,streamEnd = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,182,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,185,setDecompressStructureSizes(magic4 - '0');
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,186,computedCombinedCRC = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,189,private void initBlock() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,190,"char magic1, magic2, magic3, magic4;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,191,"char magic5, magic6;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,192,magic1 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,193,magic2 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,194,magic3 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,195,magic4 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,196,magic5 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,197,magic6 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,198,if (magic1 == 0x17 && magic2 == 0x72 && magic3 == 0x45
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,199,&& magic4 == 0x38 && magic5 == 0x50 && magic6 == 0x90) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,200,complete();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,201,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,204,if (magic1 != 0x31 || magic2 != 0x41 || magic3 != 0x59
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,205,|| magic4 != 0x26 || magic5 != 0x53 || magic6 != 0x59) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,206,badBlockHeader();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,207,streamEnd = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,208,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,211,storedBlockCRC = bsGetInt32();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,213,if (bsR(1) == 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,214,blockRandomised = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,215,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,216,blockRandomised = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,219,//        currBlockNo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,220,getAndMoveToFrontDecode();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,222,mCrc.initialiseCRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,223,currentState = START_BLOCK_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,226,private void endBlock() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,227,computedBlockCRC = mCrc.getFinalCRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,228,/* A bad CRC is considered a fatal error. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,229,if (storedBlockCRC != computedBlockCRC) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,230,crcError();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,233,computedCombinedCRC = (computedCombinedCRC << 1)
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,234,| (computedCombinedCRC >>> 31);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,235,computedCombinedCRC ^= computedBlockCRC;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,238,private void complete() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,239,storedCombinedCRC = bsGetInt32();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,240,if (storedCombinedCRC != computedCombinedCRC) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,241,crcError();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,244,bsFinishedWithStream();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,245,streamEnd = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,248,private static void blockOverrun() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,249,cadvise();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,252,private static void badBlockHeader() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,253,cadvise();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,256,private static void crcError() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,257,cadvise();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,260,private void bsFinishedWithStream() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,261,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,262,if (this.bsStream != null) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,263,if (this.bsStream != System.in) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,264,this.bsStream.close();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,265,this.bsStream = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,268,} catch (IOException ioe) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,269,//ignore
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,273,private void bsSetStream(InputStream f) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,274,bsStream = f;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,275,bsLive = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,276,bsBuff = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,279,private int bsR(int n) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,280,int v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,281,while (bsLive < n) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,282,int zzi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,283,char thech = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,284,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,285,thech = (char) bsStream.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,286,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,287,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,289,if (thech == -1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,290,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,292,zzi = thech;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,293,bsBuff = (bsBuff << 8) | (zzi & 0xff);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,294,bsLive += 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,297,v = (bsBuff >> (bsLive - n)) & ((1 << n) - 1);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,298,bsLive -= n;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,299,return v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,302,private char bsGetUChar() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,303,return (char) bsR(8);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,306,private int bsGetint() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,307,int u = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,308,u = (u << 8) | bsR(8);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,309,u = (u << 8) | bsR(8);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,310,u = (u << 8) | bsR(8);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,311,u = (u << 8) | bsR(8);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,312,return u;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,315,private int bsGetIntVS(int numBits) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,316,return (int) bsR(numBits);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,319,private int bsGetInt32() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,320,return (int) bsGetint();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,323,"private void hbCreateDecodeTables(int[] limit, int[] base,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,324,"int[] perm, char[] length,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,325,"int minLen, int maxLen, int alphaSize) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,326,"int pp, i, j, vec;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,328,pp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,329,for (i = minLen; i <= maxLen; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,330,for (j = 0; j < alphaSize; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,331,if (length[j] == i) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,332,perm[pp] = j;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,333,pp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,338,for (i = 0; i < MAX_CODE_LEN; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,339,base[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,341,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,342,base[length[i] + 1]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,345,for (i = 1; i < MAX_CODE_LEN; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,346,base[i] += base[i - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,349,for (i = 0; i < MAX_CODE_LEN; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,350,limit[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,352,vec = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,354,for (i = minLen; i <= maxLen; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,355,vec += (base[i + 1] - base[i]);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,356,limit[i] = vec - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,357,vec <<= 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,359,for (i = minLen + 1; i <= maxLen; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,360,base[i] = ((limit[i - 1] + 1) << 1) - base[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,364,private void recvDecodingTables() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,365,char len[][] = new char[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,366,"int i, j, t, nGroups, nSelectors, alphaSize;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,367,"int minLen, maxLen;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,368,boolean[] inUse16 = new boolean[16];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,370,/* Receive the mapping table */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,371,for (i = 0; i < 16; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,372,if (bsR(1) == 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,373,inUse16[i] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,374,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,375,inUse16[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,379,for (i = 0; i < 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,380,inUse[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,383,for (i = 0; i < 16; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,384,if (inUse16[i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,385,for (j = 0; j < 16; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,386,if (bsR(1) == 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,387,inUse[i * 16 + j] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,393,makeMaps();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,394,alphaSize = nInUse + 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,396,/* Now the selectors */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,397,nGroups = bsR(3);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,398,nSelectors = bsR(15);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,399,for (i = 0; i < nSelectors; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,400,j = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,401,while (bsR(1) == 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,402,j++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,404,selectorMtf[i] = (char) j;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,407,/* Undo the MTF values for the selectors. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,409,char[] pos = new char[N_GROUPS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,410,"char tmp, v;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,411,for (v = 0; v < nGroups; v++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,412,pos[v] = v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,415,for (i = 0; i < nSelectors; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,416,v = selectorMtf[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,417,tmp = pos[v];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,418,while (v > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,419,pos[v] = pos[v - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,420,v--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,422,pos[0] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,423,selector[i] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,427,/* Now the coding tables */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,428,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,429,int curr = bsR(5);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,430,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,431,while (bsR(1) == 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,432,if (bsR(1) == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,433,curr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,434,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,435,curr--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,438,len[t][i] = (char) curr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,442,/* Create the Huffman decoding tables */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,443,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,444,minLen = 32;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,445,maxLen = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,446,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,447,if (len[t][i] > maxLen) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,448,maxLen = len[t][i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,450,if (len[t][i] < minLen) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,451,minLen = len[t][i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,454,"hbCreateDecodeTables(limit[t], base[t], perm[t], len[t], minLen,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,455,"maxLen, alphaSize);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,456,minLens[t] = minLen;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,460,private void getAndMoveToFrontDecode() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,461,char[] yy = new char[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,462,"int i, j, nextSym, limitLast;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,463,"int EOB, groupNo, groupPos;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,465,limitLast = baseBlockSize * blockSize100k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,466,origPtr = bsGetIntVS(24);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,468,recvDecodingTables();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,469,EOB = nInUse + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,470,groupNo = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,471,groupPos = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,474,Setting up the unzftab entries here is not strictly
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,475,"necessary, but it does save having to do it later"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,476,"in a separate pass, and so saves a block's worth of"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,477,cache misses.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,479,for (i = 0; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,480,unzftab[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,483,for (i = 0; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,484,yy[i] = (char) i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,487,last = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,490,"int zt, zn, zvec, zj;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,491,if (groupPos == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,492,groupNo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,493,groupPos = G_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,495,groupPos--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,496,zt = selector[groupNo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,497,zn = minLens[zt];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,498,zvec = bsR(zn);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,499,while (zvec > limit[zt][zn]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,500,zn++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,503,while (bsLive < 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,504,int zzi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,505,char thech = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,506,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,507,thech = (char) bsStream.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,508,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,509,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,511,if (thech == -1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,512,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,514,zzi = thech;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,515,bsBuff = (bsBuff << 8) | (zzi & 0xff);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,516,bsLive += 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,519,zj = (bsBuff >> (bsLive - 1)) & 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,520,bsLive--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,522,zvec = (zvec << 1) | zj;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,524,nextSym = perm[zt][zvec - base[zt][zn]];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,527,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,529,if (nextSym == EOB) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,530,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,533,if (nextSym == RUNA || nextSym == RUNB) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,534,char ch;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,535,int s = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,536,int N = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,537,do {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,538,if (nextSym == RUNA) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,539,s = s + (0 + 1) * N;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,540,} else if (nextSym == RUNB) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,541,s = s + (1 + 1) * N;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,543,N = N * 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,545,"int zt, zn, zvec, zj;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,546,if (groupPos == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,547,groupNo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,548,groupPos = G_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,550,groupPos--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,551,zt = selector[groupNo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,552,zn = minLens[zt];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,553,zvec = bsR(zn);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,554,while (zvec > limit[zt][zn]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,555,zn++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,558,while (bsLive < 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,559,int zzi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,560,char thech = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,561,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,562,thech = (char) bsStream.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,563,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,564,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,566,if (thech == -1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,567,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,569,zzi = thech;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,570,bsBuff = (bsBuff << 8) | (zzi & 0xff);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,571,bsLive += 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,574,zj = (bsBuff >> (bsLive - 1)) & 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,575,bsLive--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,577,zvec = (zvec << 1) | zj;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,579,nextSym = perm[zt][zvec - base[zt][zn]];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,581,} while (nextSym == RUNA || nextSym == RUNB);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,583,s++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,584,ch = seqToUnseq[yy[0]];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,585,unzftab[ch] += s;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,587,while (s > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,588,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,589,ll8[last] = ch;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,590,s--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,593,if (last >= limitLast) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,594,blockOverrun();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,596,continue;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,597,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,598,char tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,599,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,600,if (last >= limitLast) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,601,blockOverrun();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,604,tmp = yy[nextSym - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,605,unzftab[seqToUnseq[tmp]]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,606,ll8[last] = seqToUnseq[tmp];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,609,"This loop is hammered during decompression,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,610,hence the unrolling.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,612,for (j = nextSym-1; j > 0; j--) yy[j] = yy[j-1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,615,j = nextSym - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,616,for (; j > 3; j -= 4) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,617,yy[j]     = yy[j - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,618,yy[j - 1] = yy[j - 2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,619,yy[j - 2] = yy[j - 3];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,620,yy[j - 3] = yy[j - 4];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,622,for (; j > 0; j--) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,623,yy[j] = yy[j - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,626,yy[0] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,628,"int zt, zn, zvec, zj;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,629,if (groupPos == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,630,groupNo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,631,groupPos = G_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,633,groupPos--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,634,zt = selector[groupNo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,635,zn = minLens[zt];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,636,zvec = bsR(zn);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,637,while (zvec > limit[zt][zn]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,638,zn++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,641,while (bsLive < 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,642,int zzi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,643,char thech = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,644,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,645,thech = (char) bsStream.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,646,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,647,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,649,zzi = thech;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,650,bsBuff = (bsBuff << 8) | (zzi & 0xff);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,651,bsLive += 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,654,zj = (bsBuff >> (bsLive - 1)) & 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,655,bsLive--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,657,zvec = (zvec << 1) | zj;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,659,nextSym = perm[zt][zvec - base[zt][zn]];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,661,continue;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,666,private void setupBlock() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,667,int[] cftab = new int[257];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,668,char ch;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,670,cftab[0] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,671,for (i = 1; i <= 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,672,cftab[i] = unzftab[i - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,674,for (i = 1; i <= 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,675,cftab[i] += cftab[i - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,678,for (i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,679,ch = (char) ll8[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,680,tt[cftab[ch]] = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,681,cftab[ch]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,683,cftab = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,685,tPos = tt[origPtr];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,687,count = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,688,i2 = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,689,ch2 = 256;   /* not a char and not EOF */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,691,if (blockRandomised) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,692,rNToGo = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,693,rTPos = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,694,setupRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,695,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,696,setupNoRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,700,private void setupRandPartA() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,701,if (i2 <= last) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,702,chPrev = ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,703,ch2 = ll8[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,704,tPos = tt[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,705,if (rNToGo == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,706,rNToGo = rNums[rTPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,707,rTPos++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,708,if (rTPos == 512) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,709,rTPos = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,712,rNToGo--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,713,ch2 ^= (int) ((rNToGo == 1) ? 1 : 0);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,714,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,716,currentChar = ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,717,currentState = RAND_PART_B_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,718,mCrc.updateCRC(ch2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,719,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,720,endBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,721,initBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,722,setupBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,726,private void setupNoRandPartA() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,727,if (i2 <= last) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,728,chPrev = ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,729,ch2 = ll8[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,730,tPos = tt[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,731,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,733,currentChar = ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,734,currentState = NO_RAND_PART_B_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,735,mCrc.updateCRC(ch2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,736,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,737,endBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,738,initBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,739,setupBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,743,private void setupRandPartB() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,744,if (ch2 != chPrev) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,745,currentState = RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,746,count = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,747,setupRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,748,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,749,count++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,750,if (count >= 4) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,751,z = ll8[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,752,tPos = tt[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,753,if (rNToGo == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,754,rNToGo = rNums[rTPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,755,rTPos++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,756,if (rTPos == 512) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,757,rTPos = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,760,rNToGo--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,761,z ^= ((rNToGo == 1) ? 1 : 0);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,762,j2 = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,763,currentState = RAND_PART_C_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,764,setupRandPartC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,765,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,766,currentState = RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,767,setupRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,772,private void setupRandPartC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,773,if (j2 < (int) z) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,774,currentChar = ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,775,mCrc.updateCRC(ch2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,776,j2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,777,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,778,currentState = RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,779,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,780,count = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,781,setupRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,785,private void setupNoRandPartB() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,786,if (ch2 != chPrev) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,787,currentState = NO_RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,788,count = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,789,setupNoRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,790,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,791,count++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,792,if (count >= 4) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,793,z = ll8[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,794,tPos = tt[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,795,currentState = NO_RAND_PART_C_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,796,j2 = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,797,setupNoRandPartC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,798,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,799,currentState = NO_RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,800,setupNoRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,805,private void setupNoRandPartC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,806,if (j2 < (int) z) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,807,currentChar = ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,808,mCrc.updateCRC(ch2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,809,j2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,810,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,811,currentState = NO_RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,812,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,813,count = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,814,setupNoRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,818,private void setDecompressStructureSizes(int newSize100k) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,819,if (!(0 <= newSize100k && newSize100k <= 9 && 0 <= blockSize100k
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,820,&& blockSize100k <= 9)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,821,"// throw new IOException(""Invalid block size"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,824,blockSize100k = newSize100k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,826,if (newSize100k == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,827,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,830,int n = baseBlockSize * newSize100k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,831,ll8 = new char[n];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,832,tt = new int[n];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,19,package org.apache.commons.compress.compressors.bzip2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,24,import org.apache.commons.compress.compressors.CompressorOutputStream;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,27,* An output stream that compresses into the BZip2 format (without the file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,28,* header chars) into another stream. TODO: Update to BZip2 1.0.1
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,30,public class BZip2CompressorOutputStream extends CompressorOutputStream implements BZip2Constants {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,31,protected static final int SETMASK = (1 << 21);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,32,protected static final int CLEARMASK = (~SETMASK);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,33,protected static final int GREATER_ICOST = 15;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,34,protected static final int LESSER_ICOST = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,35,protected static final int SMALL_THRESH = 20;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,36,protected static final int DEPTH_THRESH = 10;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,39,If you are ever unlucky/improbable enough
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,40,"to get a stack overflow whilst sorting,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,41,increase the following constant and try
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,42,again.  In practice I have never seen the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,43,"stack go above 27 elems, so the following"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,44,limit seems very generous.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,46,protected static final int QSORT_STACK_SIZE = 1000;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,48,private static void panic() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,49,"System.out.println(""panic"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,50,//throw new CError();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,53,private void makeMaps() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,54,int i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,55,nInUse = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,56,for (i = 0; i < 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,57,if (inUse[i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,58,seqToUnseq[nInUse] = (char) i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,59,unseqToSeq[i] = (char) nInUse;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,60,nInUse++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,65,"protected static void hbMakeCodeLengths(char[] len, int[] freq,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,66,"int alphaSize, int maxLen) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,68,Nodes and heap entries run from 1.  Entry 0
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,69,for both the heap and nodes is a sentinel.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,71,"int nNodes, nHeap, n1, n2, i, j, k;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,72,boolean  tooLong;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,74,int[] heap = new int[MAX_ALPHA_SIZE + 2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,75,int[] weight = new int[MAX_ALPHA_SIZE * 2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,76,int[] parent = new int[MAX_ALPHA_SIZE * 2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,78,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,79,weight[i + 1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,82,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,83,nNodes = alphaSize;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,84,nHeap = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,86,heap[0] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,87,weight[0] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,88,parent[0] = -2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,90,for (i = 1; i <= alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,91,parent[i] = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,92,nHeap++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,93,heap[nHeap] = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,95,"int zz, tmp;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,96,zz = nHeap;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,97,tmp = heap[zz];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,98,while (weight[tmp] < weight[heap[zz >> 1]]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,99,heap[zz] = heap[zz >> 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,100,zz >>= 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,102,heap[zz] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,105,if (!(nHeap < (MAX_ALPHA_SIZE + 2))) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,106,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,109,while (nHeap > 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,110,n1 = heap[1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,111,heap[1] = heap[nHeap];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,112,nHeap--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,114,"int zz = 0, yy = 0, tmp = 0;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,115,zz = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,116,tmp = heap[zz];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,117,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,118,yy = zz << 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,119,if (yy > nHeap) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,120,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,122,if (yy < nHeap
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,123,&& weight[heap[yy + 1]] < weight[heap[yy]]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,124,yy++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,126,if (weight[tmp] < weight[heap[yy]]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,127,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,129,heap[zz] = heap[yy];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,130,zz = yy;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,132,heap[zz] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,134,n2 = heap[1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,135,heap[1] = heap[nHeap];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,136,nHeap--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,138,"int zz = 0, yy = 0, tmp = 0;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,139,zz = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,140,tmp = heap[zz];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,141,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,142,yy = zz << 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,143,if (yy > nHeap) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,144,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,146,if (yy < nHeap
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,147,&& weight[heap[yy + 1]] < weight[heap[yy]]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,148,yy++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,150,if (weight[tmp] < weight[heap[yy]]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,151,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,153,heap[zz] = heap[yy];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,154,zz = yy;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,156,heap[zz] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,158,nNodes++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,159,parent[n1] = parent[n2] = nNodes;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,161,weight[nNodes] = ((weight[n1] & 0xffffff00)
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,162,+ (weight[n2] & 0xffffff00))
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,163,| (1 + (((weight[n1] & 0x000000ff) >
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,164,(weight[n2] & 0x000000ff)) ?
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,165,(weight[n1] & 0x000000ff) :
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,166,(weight[n2] & 0x000000ff)));
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,168,parent[nNodes] = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,169,nHeap++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,170,heap[nHeap] = nNodes;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,172,"int zz = 0, tmp = 0;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,173,zz = nHeap;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,174,tmp = heap[zz];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,175,while (weight[tmp] < weight[heap[zz >> 1]]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,176,heap[zz] = heap[zz >> 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,177,zz >>= 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,179,heap[zz] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,182,if (!(nNodes < (MAX_ALPHA_SIZE * 2))) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,183,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,186,tooLong = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,187,for (i = 1; i <= alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,188,j = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,189,k = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,190,while (parent[k] >= 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,191,k = parent[k];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,192,j++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,194,len[i - 1] = (char) j;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,195,if (j > maxLen) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,196,tooLong = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,200,if (!tooLong) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,201,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,204,for (i = 1; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,205,j = weight[i] >> 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,206,j = 1 + (j / 2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,207,weight[i] = j << 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,213,"index of the last char in the block, so"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,214,the block size == last + 1.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,216,int last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,219,index in zptr[] of original string after sorting.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,221,int origPtr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,224,always: in the range 0 .. 9.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,225,The current block size is 100000 * this number.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,227,int blockSize100k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,229,boolean blockRandomised;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,231,int bytesOut;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,232,int bsBuff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,233,int bsLive;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,234,CRC mCrc = new CRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,236,private boolean[] inUse = new boolean[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,237,private int nInUse;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,239,private char[] seqToUnseq = new char[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,240,private char[] unseqToSeq = new char[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,242,private char[] selector = new char[MAX_SELECTORS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,243,private char[] selectorMtf = new char[MAX_SELECTORS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,245,private char[] block;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,246,private int[] quadrant;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,247,private int[] zptr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,248,private short[] szptr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,249,private int[] ftab;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,251,private int nMTF;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,253,private int[] mtfFreq = new int[MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,256,* Used when sorting.  If too many long comparisons
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,257,"* happen, we stop sorting, randomise the block"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,258,"* slightly, and try again."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,260,private int workFactor;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,261,private int workDone;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,262,private int workLimit;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,263,private boolean firstAttempt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,264,private int nBlocksRandomised;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,266,private int currentChar = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,267,private int runLength = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,269,public BZip2CompressorOutputStream(OutputStream inStream) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,270,"this(inStream, 9);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,273,"public BZip2CompressorOutputStream(OutputStream inStream, int inBlockSize)"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,274,throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,275,block = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,276,quadrant = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,277,zptr = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,278,ftab = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,280,bsSetStream(inStream);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,282,workFactor = 50;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,283,if (inBlockSize > 9) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,284,inBlockSize = 9;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,286,if (inBlockSize < 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,287,inBlockSize = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,289,blockSize100k = inBlockSize;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,290,allocateCompressStructures();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,291,initialize();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,292,initBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,297,"* modified by Oliver Merkel, 010128"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,300,public void write(int bv) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,301,int b = (256 + bv) % 256;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,302,if (currentChar != -1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,303,if (currentChar == b) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,304,runLength++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,305,if (runLength > 254) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,306,writeRun();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,307,currentChar = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,308,runLength = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,310,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,311,writeRun();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,312,runLength = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,313,currentChar = b;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,315,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,316,currentChar = b;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,317,runLength++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,321,private void writeRun() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,322,if (last < allowableBlockSize) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,323,inUse[currentChar] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,324,for (int i = 0; i < runLength; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,325,mCrc.updateCRC((char) currentChar);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,327,switch (runLength) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,328,case 1:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,329,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,330,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,331,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,332,case 2:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,333,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,334,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,335,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,336,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,337,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,338,case 3:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,339,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,340,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,341,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,342,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,343,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,344,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,345,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,346,default:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,347,inUse[runLength - 4] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,348,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,349,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,350,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,351,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,352,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,353,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,354,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,355,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,356,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,357,block[last + 1] = (char) (runLength - 4);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,358,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,360,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,361,endBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,362,initBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,363,writeRun();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,367,boolean closed = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,369,protected void finalize() throws Throwable {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,370,close();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,371,super.finalize();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,374,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,375,if (closed) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,376,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,379,if (runLength > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,380,writeRun();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,382,currentChar = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,383,endBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,384,endCompression();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,385,closed = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,386,super.close();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,387,bsStream.close();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,390,public void flush() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,391,super.flush();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,392,bsStream.flush();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,395,"private int blockCRC, combinedCRC;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,397,private void initialize() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,398,bytesOut = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,399,nBlocksRandomised = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,401,"/* Write `magic' bytes h indicating file-format == huffmanised,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,402,followed by a digit indicating blockSize100k.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,404,bsPutUChar('h');
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,405,bsPutUChar('0' + blockSize100k);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,407,combinedCRC = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,410,private int allowableBlockSize;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,412,private void initBlock() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,413,//        blockNo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,414,mCrc.initialiseCRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,415,last = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,416,//        ch = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,418,for (int i = 0; i < 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,419,inUse[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,422,/* 20 is just a paranoia constant */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,423,allowableBlockSize = baseBlockSize * blockSize100k - 20;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,426,private void endBlock() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,427,blockCRC = mCrc.getFinalCRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,428,combinedCRC = (combinedCRC << 1) | (combinedCRC >>> 31);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,429,combinedCRC ^= blockCRC;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,431,/* sort the block and establish posn of original string */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,432,doReversibleTransformation();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,435,"A 6-byte block header, the value chosen arbitrarily"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,436,as 0x314159265359 :-).  A 32 bit value does not really
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,437,give a strong enough guarantee that the value will not
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,438,appear by chance in the compressed datastream.  Worst-case
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,439,"probability of this event, for a 900k block, is about"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,440,"2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48 bits."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,441,For a compressed file of size 100Gb -- about 100000 blocks --
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,442,only a 48-bit marker will do.  NB: normal compression/
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,443,decompression do *not* rely on these statistical properties.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,444,They are only important when trying to recover blocks from
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,445,damaged files.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,447,bsPutUChar(0x31);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,448,bsPutUChar(0x41);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,449,bsPutUChar(0x59);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,450,bsPutUChar(0x26);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,451,bsPutUChar(0x53);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,452,bsPutUChar(0x59);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,454,"/* Now the block's CRC, so it is in a known place. */"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,455,bsPutint(blockCRC);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,457,/* Now a single bit indicating randomisation. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,458,if (blockRandomised) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,459,"bsW(1, 1);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,460,nBlocksRandomised++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,461,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,462,"bsW(1, 0);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,465,"/* Finally, block's contents proper. */"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,466,moveToFrontCodeAndSend();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,469,private void endCompression() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,471,"Now another magic 48-bit number, 0x177245385090, to"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,472,"indicate the end of the last block.  (sqrt(pi), if"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,473,"you want to know.  I did want to use e, but it contains"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,474,too much repetition -- 27 18 28 18 28 46 -- for me
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,475,to feel statistically comfortable.  Call me paranoid.)
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,477,bsPutUChar(0x17);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,478,bsPutUChar(0x72);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,479,bsPutUChar(0x45);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,480,bsPutUChar(0x38);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,481,bsPutUChar(0x50);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,482,bsPutUChar(0x90);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,484,bsPutint(combinedCRC);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,486,bsFinishedWithStream();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,489,"private void hbAssignCodes (int[] code, char[] length, int minLen,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,490,"int maxLen, int alphaSize) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,491,"int n, vec, i;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,493,vec = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,494,for (n = minLen; n <= maxLen; n++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,495,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,496,if (length[i] == n) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,497,code[i] = vec;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,498,vec++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,501,vec <<= 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,505,private void bsSetStream(OutputStream f) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,506,bsStream = f;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,507,bsLive = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,508,bsBuff = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,509,bytesOut = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,512,private void bsFinishedWithStream() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,513,while (bsLive > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,514,int ch = (bsBuff >> 24);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,515,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,516,bsStream.write(ch); // write 8-bit
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,517,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,518,throw  e;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,520,bsBuff <<= 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,521,bsLive -= 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,522,bytesOut++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,526,"private void bsW(int n, int v) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,527,while (bsLive >= 8) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,528,int ch = (bsBuff >> 24);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,529,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,530,bsStream.write(ch); // write 8-bit
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,531,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,532,throw e;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,534,bsBuff <<= 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,535,bsLive -= 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,536,bytesOut++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,538,bsBuff |= (v << (32 - bsLive - n));
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,539,bsLive += n;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,542,private void bsPutUChar(int c) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,543,"bsW(8, c);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,546,private void bsPutint(int u) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,547,"bsW(8, (u >> 24) & 0xff);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,548,"bsW(8, (u >> 16) & 0xff);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,549,"bsW(8, (u >>  8) & 0xff);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,550,"bsW(8,  u        & 0xff);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,553,"private void bsPutIntVS(int numBits, int c) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,554,"bsW(numBits, c);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,557,private void sendMTFValues() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,558,char len[][] = new char[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,560,"int v, t, i, j, gs, ge, totc, bt, bc, iter;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,561,"int nSelectors = 0, alphaSize, minLen, maxLen, selCtr;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,562,int nGroups;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,563,//int nBytes;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,565,alphaSize = nInUse + 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,566,for (t = 0; t < N_GROUPS; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,567,for (v = 0; v < alphaSize; v++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,568,len[t][v] = (char) GREATER_ICOST;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,572,/* Decide how many coding tables to use */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,573,if (nMTF <= 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,574,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,577,if (nMTF < 200) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,578,nGroups = 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,579,} else if (nMTF < 600) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,580,nGroups = 3;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,581,} else if (nMTF < 1200) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,582,nGroups = 4;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,583,} else if (nMTF < 2400) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,584,nGroups = 5;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,585,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,586,nGroups = 6;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,589,/* Generate an initial set of coding tables */ {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,590,"int nPart, remF, tFreq, aFreq;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,592,nPart = nGroups;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,593,remF  = nMTF;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,594,gs = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,595,while (nPart > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,596,tFreq = remF / nPart;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,597,ge = gs - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,598,aFreq = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,599,while (aFreq < tFreq && ge < alphaSize - 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,600,ge++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,601,aFreq += mtfFreq[ge];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,604,if (ge > gs && nPart != nGroups && nPart != 1
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,605,&& ((nGroups - nPart) % 2 == 1)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,606,aFreq -= mtfFreq[ge];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,607,ge--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,610,for (v = 0; v < alphaSize; v++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,611,if (v >= gs && v <= ge) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,612,len[nPart - 1][v] = (char) LESSER_ICOST;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,613,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,614,len[nPart - 1][v] = (char) GREATER_ICOST;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,618,nPart--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,619,gs = ge + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,620,remF -= aFreq;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,624,int[][] rfreq = new int[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,625,int[] fave = new int[N_GROUPS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,626,short[] cost = new short[N_GROUPS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,628,Iterate up to N_ITERS times to improve the tables.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,630,for (iter = 0; iter < N_ITERS; iter++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,631,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,632,fave[t] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,635,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,636,for (v = 0; v < alphaSize; v++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,637,rfreq[t][v] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,641,nSelectors = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,642,totc = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,643,gs = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,644,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,646,/* Set group start & end marks. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,647,if (gs >= nMTF) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,648,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,650,ge = gs + G_SIZE - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,651,if (ge >= nMTF) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,652,ge = nMTF - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,656,Calculate the cost of this group as coded
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,657,by each of the coding tables.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,659,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,660,cost[t] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,663,if (nGroups == 6) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,664,"short cost0, cost1, cost2, cost3, cost4, cost5;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,665,cost0 = cost1 = cost2 = cost3 = cost4 = cost5 = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,666,for (i = gs; i <= ge; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,667,short icv = szptr[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,668,cost0 += len[0][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,669,cost1 += len[1][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,670,cost2 += len[2][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,671,cost3 += len[3][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,672,cost4 += len[4][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,673,cost5 += len[5][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,675,cost[0] = cost0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,676,cost[1] = cost1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,677,cost[2] = cost2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,678,cost[3] = cost3;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,679,cost[4] = cost4;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,680,cost[5] = cost5;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,681,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,682,for (i = gs; i <= ge; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,683,short icv = szptr[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,684,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,685,cost[t] += len[t][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,691,"Find the coding table which is best for this group,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,692,and record its identity in the selector table.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,694,bc = 999999999;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,695,bt = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,696,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,697,if (cost[t] < bc) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,698,bc = cost[t];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,699,bt = t;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,702,totc += bc;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,703,fave[bt]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,704,selector[nSelectors] = (char) bt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,705,nSelectors++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,708,Increment the symbol frequencies for the selected table.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,710,for (i = gs; i <= ge; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,711,rfreq[bt][szptr[i]]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,714,gs = ge + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,718,Recompute the tables based on the accumulated frequencies.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,720,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,721,"hbMakeCodeLengths(len[t], rfreq[t], alphaSize, 20);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,725,rfreq = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,726,fave = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,727,cost = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,729,if (!(nGroups < 8)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,730,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,732,if (!(nSelectors < 32768 && nSelectors <= (2 + (900000 / G_SIZE)))) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,733,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,737,/* Compute MTF values for the selectors. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,739,char[] pos = new char[N_GROUPS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,740,"char ll_i, tmp2, tmp;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,741,for (i = 0; i < nGroups; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,742,pos[i] = (char) i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,744,for (i = 0; i < nSelectors; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,745,ll_i = selector[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,746,j = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,747,tmp = pos[j];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,748,while (ll_i != tmp) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,749,j++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,750,tmp2 = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,751,tmp = pos[j];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,752,pos[j] = tmp2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,754,pos[0] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,755,selectorMtf[i] = (char) j;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,759,int[][] code = new int[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,761,/* Assign actual codes for the tables. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,762,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,763,minLen = 32;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,764,maxLen = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,765,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,766,if (len[t][i] > maxLen) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,767,maxLen = len[t][i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,769,if (len[t][i] < minLen) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,770,minLen = len[t][i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,773,if (maxLen > 20) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,774,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,776,if (minLen < 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,777,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,779,"hbAssignCodes(code[t], len[t], minLen, maxLen, alphaSize);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,782,/* Transmit the mapping table. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,784,boolean[] inUse16 = new boolean[16];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,785,for (i = 0; i < 16; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,786,inUse16[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,787,for (j = 0; j < 16; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,788,if (inUse[i * 16 + j]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,789,inUse16[i] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,794,//nBytes = bytesOut;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,795,for (i = 0; i < 16; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,796,if (inUse16[i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,797,"bsW(1, 1);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,798,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,799,"bsW(1, 0);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,803,for (i = 0; i < 16; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,804,if (inUse16[i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,805,for (j = 0; j < 16; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,806,if (inUse[i * 16 + j]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,807,"bsW(1, 1);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,808,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,809,"bsW(1, 0);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,817,/* Now the selectors. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,818,//nBytes = bytesOut;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,819,"bsW (3, nGroups);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,820,"bsW (15, nSelectors);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,821,for (i = 0; i < nSelectors; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,822,for (j = 0; j < selectorMtf[i]; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,823,"bsW(1, 1);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,825,"bsW(1, 0);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,828,/* Now the coding tables. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,829,//nBytes = bytesOut;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,831,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,832,int curr = len[t][0];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,833,"bsW(5, curr);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,834,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,835,while (curr < len[t][i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,836,"bsW(2, 2);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,837,curr++; /* 10 */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,839,while (curr > len[t][i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,840,"bsW(2, 3);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,841,curr--; /* 11 */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,843,"bsW (1, 0);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,847,"/* And finally, the block data proper */"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,848,//nBytes = bytesOut;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,849,selCtr = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,850,gs = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,851,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,852,if (gs >= nMTF) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,853,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,855,ge = gs + G_SIZE - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,856,if (ge >= nMTF) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,857,ge = nMTF - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,859,for (i = gs; i <= ge; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,860,"bsW(len[selector[selCtr]][szptr[i]],"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,861,code[selector[selCtr]][szptr[i]]);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,864,gs = ge + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,865,selCtr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,867,if (!(selCtr == nSelectors)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,868,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,872,private void moveToFrontCodeAndSend () throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,873,"bsPutIntVS(24, origPtr);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,874,generateMTFValues();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,875,sendMTFValues();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,878,private OutputStream bsStream;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,880,"private void simpleSort(int lo, int hi, int d) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,881,"int i, j, h, bigN, hp;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,882,int v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,884,bigN = hi - lo + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,885,if (bigN < 2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,886,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,889,hp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,890,while (incs[hp] < bigN) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,891,hp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,893,hp--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,895,for (; hp >= 0; hp--) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,896,h = incs[hp];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,898,i = lo + h;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,899,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,900,/* copy 1 */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,901,if (i > hi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,902,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,904,v = zptr[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,905,j = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,906,"while (fullGtU(zptr[j - h] + d, v + d)) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,907,zptr[j] = zptr[j - h];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,908,j = j - h;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,909,if (j <= (lo + h - 1)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,910,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,913,zptr[j] = v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,914,i++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,916,/* copy 2 */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,917,if (i > hi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,918,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,920,v = zptr[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,921,j = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,922,"while (fullGtU(zptr[j - h] + d, v + d)) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,923,zptr[j] = zptr[j - h];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,924,j = j - h;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,925,if (j <= (lo + h - 1)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,926,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,929,zptr[j] = v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,930,i++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,932,/* copy 3 */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,933,if (i > hi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,934,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,936,v = zptr[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,937,j = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,938,"while (fullGtU(zptr[j - h] + d, v + d)) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,939,zptr[j] = zptr[j - h];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,940,j = j - h;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,941,if (j <= (lo + h - 1)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,942,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,945,zptr[j] = v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,946,i++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,948,if (workDone > workLimit && firstAttempt) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,949,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,955,"private void vswap(int p1, int p2, int n) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,956,int temp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,957,while (n > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,958,temp = zptr[p1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,959,zptr[p1] = zptr[p2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,960,zptr[p2] = temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,961,p1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,962,p2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,963,n--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,967,"private char med3(char a, char b, char c) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,968,char t;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,969,if (a > b) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,970,t = a;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,971,a = b;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,972,b = t;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,974,if (b > c) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,975,t = b;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,976,b = c;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,977,c = t;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,979,if (a > b) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,980,b = a;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,982,return b;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,985,private static class StackElem {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,986,int ll;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,987,int hh;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,988,int dd;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,991,"private void qSort3(int loSt, int hiSt, int dSt) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,992,"int unLo, unHi, ltLo, gtHi, med, n, m;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,993,"int sp, lo, hi, d;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,994,StackElem[] stack = new StackElem[QSORT_STACK_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,995,for (int count = 0; count < QSORT_STACK_SIZE; count++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,996,stack[count] = new StackElem();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,999,sp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1001,stack[sp].ll = loSt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1002,stack[sp].hh = hiSt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1003,stack[sp].dd = dSt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1004,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1006,while (sp > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1007,if (sp >= QSORT_STACK_SIZE) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1008,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1011,sp--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1012,lo = stack[sp].ll;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1013,hi = stack[sp].hh;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1014,d = stack[sp].dd;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1016,if (hi - lo < SMALL_THRESH || d > DEPTH_THRESH) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1017,"simpleSort(lo, hi, d);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1018,if (workDone > workLimit && firstAttempt) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1019,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1021,continue;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1024,"med = med3(block[zptr[lo] + d + 1],"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1025,"block[zptr[hi            ] + d  + 1],"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1026,block[zptr[(lo + hi) >> 1] + d + 1]);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1028,unLo = ltLo = lo;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1029,unHi = gtHi = hi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1031,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1032,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1033,if (unLo > unHi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1034,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1036,n = ((int) block[zptr[unLo] + d + 1]) - med;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1037,if (n == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1038,int temp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1039,temp = zptr[unLo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1040,zptr[unLo] = zptr[ltLo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1041,zptr[ltLo] = temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1042,ltLo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1043,unLo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1044,continue;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1046,if (n >  0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1047,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1049,unLo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1051,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1052,if (unLo > unHi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1053,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1055,n = ((int) block[zptr[unHi] + d + 1]) - med;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1056,if (n == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1057,int temp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1058,temp = zptr[unHi];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1059,zptr[unHi] = zptr[gtHi];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1060,zptr[gtHi] = temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1061,gtHi--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1062,unHi--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1063,continue;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1065,if (n <  0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1066,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1068,unHi--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1070,if (unLo > unHi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1071,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1073,int temp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1074,temp = zptr[unLo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1075,zptr[unLo] = zptr[unHi];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1076,zptr[unHi] = temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1077,unLo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1078,unHi--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1081,if (gtHi < ltLo) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1082,stack[sp].ll = lo;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1083,stack[sp].hh = hi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1084,stack[sp].dd = d + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1085,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1086,continue;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1089,n = ((ltLo - lo) < (unLo - ltLo)) ? (ltLo - lo) : (unLo - ltLo);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1090,"vswap(lo, unLo - n, n);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1091,m = ((hi - gtHi) < (gtHi - unHi)) ? (hi - gtHi) : (gtHi - unHi);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1092,"vswap(unLo, hi - m + 1, m);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1094,n = lo + unLo - ltLo - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1095,m = hi - (gtHi - unHi) + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1097,stack[sp].ll = lo;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1098,stack[sp].hh = n;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1099,stack[sp].dd = d;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1100,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1102,stack[sp].ll = n + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1103,stack[sp].hh = m - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1104,stack[sp].dd = d + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1105,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1107,stack[sp].ll = m;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1108,stack[sp].hh = hi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1109,stack[sp].dd = d;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1110,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1114,private void mainSort() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1115,"int i, j, ss, sb;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1116,int[] runningOrder = new int[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1117,int[] copy = new int[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1118,boolean[] bigDone = new boolean[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1119,"int c1, c2;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1120,int numQSorted;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1123,"In the various block-sized structures, live data runs"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1124,"from 0 to last+NUM_OVERSHOOT_BYTES inclusive.  First,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1125,set up the overshoot area for block.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1128,"//   if (verbosity >= 4) fprintf ( stderr, ""   sort initialise ...\n"" );"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1129,for (i = 0; i < NUM_OVERSHOOT_BYTES; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1130,block[last + i + 2] = block[(i % (last + 1)) + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1132,for (i = 0; i <= last + NUM_OVERSHOOT_BYTES; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1133,quadrant[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1136,block[0] = (char) (block[last + 1]);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1138,if (last < 4000) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1140,"Use simpleSort(), since the full sorting mechanism"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1141,has quite a large constant overhead.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1143,for (i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1144,zptr[i] = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1146,firstAttempt = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1147,workDone = workLimit = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1148,"simpleSort(0, last, 0);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1149,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1150,numQSorted = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1151,for (i = 0; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1152,bigDone[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1155,for (i = 0; i <= 65536; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1156,ftab[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1159,c1 = block[0];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1160,for (i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1161,c2 = block[i + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1162,ftab[(c1 << 8) + c2]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1163,c1 = c2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1166,for (i = 1; i <= 65536; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1167,ftab[i] += ftab[i - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1170,c1 = block[1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1171,for (i = 0; i < last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1172,c2 = block[i + 2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1173,j = (c1 << 8) + c2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1174,c1 = c2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1175,ftab[j]--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1176,zptr[ftab[j]] = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1179,j = ((block[last + 1]) << 8) + (block[1]);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1180,ftab[j]--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1181,zptr[ftab[j]] = last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1184,Now ftab contains the first loc of every small bucket.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1185,"Calculate the running order, from smallest to largest"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1186,big bucket.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1189,for (i = 0; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1190,runningOrder[i] = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1194,int vv;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1195,int h = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1196,do {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1197,h = 3 * h + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1199,while (h <= 256);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1200,do {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1201,h = h / 3;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1202,for (i = h; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1203,vv = runningOrder[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1204,j = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1205,while ((ftab[((runningOrder[j - h]) + 1) << 8]
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1206,- ftab[(runningOrder[j - h]) << 8]) >
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1207,(ftab[((vv) + 1) << 8] - ftab[(vv) << 8])) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1208,runningOrder[j] = runningOrder[j - h];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1209,j = j - h;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1210,if (j <= (h - 1)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1211,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1214,runningOrder[j] = vv;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1216,} while (h != 1);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1220,The main sorting loop.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1222,for (i = 0; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1225,"Process big buckets, starting with the least full."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1227,ss = runningOrder[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1230,Complete the big bucket [ss] by quicksorting
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1231,"any unsorted small buckets [ss, j].  Hopefully"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1232,previous pointer-scanning phases have already
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1233,"completed many of the small buckets [ss, j], so"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1234,we don't have to sort them at all.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1236,for (j = 0; j <= 255; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1237,sb = (ss << 8) + j;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1238,if (!((ftab[sb] & SETMASK) == SETMASK)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1239,int lo = ftab[sb] & CLEARMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1240,int hi = (ftab[sb + 1] & CLEARMASK) - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1241,if (hi > lo) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1242,"qSort3(lo, hi, 2);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1243,numQSorted += (hi - lo + 1);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1244,if (workDone > workLimit && firstAttempt) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1245,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1248,ftab[sb] |= SETMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1253,"The ss big bucket is now done.  Record this fact,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1254,and update the quadrant descriptors.  Remember to
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1255,"update quadrants in the overshoot area too, if"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1256,"necessary.  The ""if (i < 255)"" test merely skips"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1257,"this updating for the last bucket processed, since"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1258,updating for the last bucket is pointless.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1260,bigDone[ss] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1262,if (i < 255) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1263,int bbStart  = ftab[ss << 8] & CLEARMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1264,int bbSize   = (ftab[(ss + 1) << 8] & CLEARMASK) - bbStart;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1265,int shifts   = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1267,while ((bbSize >> shifts) > 65534) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1268,shifts++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1271,for (j = 0; j < bbSize; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1272,int a2update = zptr[bbStart + j];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1273,int qVal = (j >> shifts);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1274,quadrant[a2update] = qVal;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1275,if (a2update < NUM_OVERSHOOT_BYTES) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1276,quadrant[a2update + last + 1] = qVal;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1280,if (!(((bbSize - 1) >> shifts) <= 65535)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1281,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1286,Now scan this big bucket so as to synthesise the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1287,"sorted order for small buckets [t, ss] for all t != ss."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1289,for (j = 0; j <= 255; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1290,copy[j] = ftab[(j << 8) + ss] & CLEARMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1293,for (j = ftab[ss << 8] & CLEARMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1294,j < (ftab[(ss + 1) << 8] & CLEARMASK); j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1295,c1 = block[zptr[j]];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1296,if (!bigDone[c1]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1297,zptr[copy[c1]] = zptr[j] == 0 ? last : zptr[j] - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1298,copy[c1]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1302,for (j = 0; j <= 255; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1303,ftab[(j << 8) + ss] |= SETMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1309,private void randomiseBlock() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1310,int i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1311,int rNToGo = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1312,int rTPos  = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1313,for (i = 0; i < 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1314,inUse[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1317,for (i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1318,if (rNToGo == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1319,rNToGo = (char) rNums[rTPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1320,rTPos++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1321,if (rTPos == 512) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1322,rTPos = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1325,rNToGo--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1326,block[i + 1] ^= ((rNToGo == 1) ? 1 : 0);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1327,// handle 16 bit signed numbers
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1328,block[i + 1] &= 0xFF;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1330,inUse[block[i + 1]] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1334,private void doReversibleTransformation() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1335,int i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1337,workLimit = workFactor * last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1338,workDone = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1339,blockRandomised = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1340,firstAttempt = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1342,mainSort();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1344,if (workDone > workLimit && firstAttempt) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1345,randomiseBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1346,workLimit = workDone = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1347,blockRandomised = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1348,firstAttempt = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1349,mainSort();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1352,origPtr = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1353,for (i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1354,if (zptr[i] == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1355,origPtr = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1356,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1360,if (origPtr == -1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1361,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1365,"private boolean fullGtU(int i1, int i2) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1366,int k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1367,"char c1, c2;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1368,"int s1, s2;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1370,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1371,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1372,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1373,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1375,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1376,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1378,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1379,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1380,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1381,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1383,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1384,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1386,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1387,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1388,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1389,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1391,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1392,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1394,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1395,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1396,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1397,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1399,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1400,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1402,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1403,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1404,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1405,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1407,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1408,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1410,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1411,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1412,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1413,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1415,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1416,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1418,k = last + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1420,do {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1421,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1422,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1423,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1424,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1426,s1 = quadrant[i1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1427,s2 = quadrant[i2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1428,if (s1 != s2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1429,return (s1 > s2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1431,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1432,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1434,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1435,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1436,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1437,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1439,s1 = quadrant[i1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1440,s2 = quadrant[i2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1441,if (s1 != s2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1442,return (s1 > s2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1444,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1445,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1447,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1448,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1449,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1450,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1452,s1 = quadrant[i1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1453,s2 = quadrant[i2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1454,if (s1 != s2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1455,return (s1 > s2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1457,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1458,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1460,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1461,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1462,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1463,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1465,s1 = quadrant[i1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1466,s2 = quadrant[i2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1467,if (s1 != s2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1468,return (s1 > s2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1470,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1471,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1473,if (i1 > last) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1474,i1 -= last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1475,i1--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1477,if (i2 > last) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1478,i2 -= last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1479,i2--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1482,k -= 4;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1483,workDone++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1484,} while (k >= 0);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1486,return false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1490,Knuth's increments seem to work better
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1491,than Incerpi-Sedgewick here.  Possibly
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1492,because the number of elems to sort is
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1493,"usually small, typically <= 20."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1495,"private int[] incs = { 1, 4, 13, 40, 121, 364, 1093, 3280,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1496,"9841, 29524, 88573, 265720,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1497,"797161, 2391484 };"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1499,private void allocateCompressStructures () {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1500,int n = baseBlockSize * blockSize100k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1501,block = new char[(n + 1 + NUM_OVERSHOOT_BYTES)];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1502,quadrant = new int[(n + NUM_OVERSHOOT_BYTES)];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1503,zptr = new int[n];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1504,ftab = new int[65537];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1506,if (block == null || quadrant == null || zptr == null
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1507,|| ftab == null) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1508,//int totalDraw = (n + 1 + NUM_OVERSHOOT_BYTES) + (n + NUM_OVERSHOOT_BYTES) + n + 65537;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1509,"//compressOutOfMemory ( totalDraw, n );"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1513,The back end needs a place to store the MTF values
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1514,whilst it calculates the coding tables.  We could
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1515,"put them in the zptr array.  However, these values"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1516,"will fit in a short, so we overlay szptr at the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1517,"start of zptr, in the hope of reducing the number"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1518,of cache misses induced by the multiple traversals
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1519,of the MTF values when calculating coding tables.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1520,Seems to improve compression speed by about 1%.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1522,//    szptr = zptr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1525,szptr = new short[2 * n];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1528,private void generateMTFValues() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1529,char[] yy = new char[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1530,"int  i, j;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1531,char tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1532,char tmp2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1533,int zPend;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1534,int wr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1535,int EOB;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1537,makeMaps();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1538,EOB = nInUse + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1540,for (i = 0; i <= EOB; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1541,mtfFreq[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1544,wr = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1545,zPend = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1546,for (i = 0; i < nInUse; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1547,yy[i] = (char) i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1551,for (i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1552,char ll_i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1554,ll_i = unseqToSeq[block[zptr[i]]];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1556,j = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1557,tmp = yy[j];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1558,while (ll_i != tmp) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1559,j++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1560,tmp2 = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1561,tmp = yy[j];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1562,yy[j] = tmp2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1564,yy[0] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1566,if (j == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1567,zPend++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1568,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1569,if (zPend > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1570,zPend--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1571,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1572,switch (zPend % 2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1573,case 0:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1574,szptr[wr] = (short) RUNA;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1575,wr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1576,mtfFreq[RUNA]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1577,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1578,case 1:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1579,szptr[wr] = (short) RUNB;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1580,wr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1581,mtfFreq[RUNB]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1582,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1584,if (zPend < 2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1585,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1587,zPend = (zPend - 2) / 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1589,zPend = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1591,szptr[wr] = (short) (j + 1);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1592,wr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1593,mtfFreq[j + 1]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1597,if (zPend > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1598,zPend--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1599,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1600,switch (zPend % 2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1601,case 0:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1602,szptr[wr] = (short) RUNA;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1603,wr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1604,mtfFreq[RUNA]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1605,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1606,case 1:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1607,szptr[wr] = (short) RUNB;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1608,wr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1609,mtfFreq[RUNB]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1610,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1612,if (zPend < 2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1613,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1615,zPend = (zPend - 2) / 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1619,szptr[wr] = (short) EOB;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1620,wr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1621,mtfFreq[EOB]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1623,nMTF = wr;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,23," This package is based on the work done by Keiron Liddle, Aftex Software"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,24, <keiron@aftexsw.com> to whom the Ant project is very grateful for his
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,25, great code.
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,32," @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a>"
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,34,nterface BZip2Constants
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,36,nt BASE_BLOCK_SIZE = 100000;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,26,interface BZip2Constants {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,28,int baseBlockSize = 100000;
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,44,nt MAX_SELECTORS = ( 2 + ( 900000 / G_SIZE ) );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,36,int MAX_SELECTORS = (2 + (900000 / G_SIZE));
False,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,47,nt[] RAND_NUMS = new int[]
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,39,int[] rNums = {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,19,package org.apache.commons.compress.compressors.bzip2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,22,* A simple class the hold and calculate the CRC for sanity checking of the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,23,* data.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,25,class CRC {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,26,"private static int[] CRC32_TABLE = new int[] { 0x00000000, 0x04c11db7,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,27,"0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b, 0x1a864db2,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,28,"0x1e475005, 0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,29,"0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd, 0x4c11db70,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,30,"0x48d0c6c7, 0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,31,"0x569796c2, 0x52568b75, 0x6a1936c8, 0x6ed82b7f, 0x639b0da6,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,32,"0x675a1011, 0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,33,"0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039, 0x8b27c03c,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,34,"0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5, 0xbe2b5b58, 0xbaea46ef,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,35,"0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,36,"0xa06c0b5d, 0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,37,"0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95, 0xf23a8028,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,38,"0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1, 0xe13ef6f4, 0xe5ffeb43,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,39,"0xe8bccd9a, 0xec7dd02d, 0x34867077, 0x30476dc0, 0x3d044b19,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,40,"0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,41,"0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,42,"0x054bf6a4, 0x0808d07d, 0x0cc9cdca, 0x7897ab07, 0x7c56b6b0,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,43,"0x71159069, 0x75d48dde, 0x6b93dddb, 0x6f52c06c, 0x6211e6b5,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,44,"0x66d0fb02, 0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,45,"0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba, 0xaca5c697,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,46,"0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,47,"0xb6238b25, 0xb2e29692, 0x8aad2b2f, 0x8e6c3698, 0x832f1041,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,48,"0x87ee0df6, 0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,49,"0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e, 0xf3b06b3b,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,50,"0xf771768c, 0xfa325055, 0xfef34de2, 0xc6bcf05f, 0xc27dede8,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,51,"0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34, 0xdc3abded,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,52,"0xd8fba05a, 0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,53,"0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb, 0x4f040d56,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,54,"0x4bc510e1, 0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,55,"0x558240e4, 0x51435d53, 0x251d3b9e, 0x21dc2629, 0x2c9f00f0,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,56,"0x285e1d47, 0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,57,"0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff, 0x1011a0fa,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,58,"0x14d0bd4d, 0x19939b94, 0x1d528623, 0xf12f560e, 0xf5ee4bb9,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,59,"0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,60,"0xef68060b, 0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,61,"0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3, 0xbd3e8d7e,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,62,"0xb9ff90c9, 0xb4bcb610, 0xb07daba7, 0xae3afba2, 0xaafbe615,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,63,"0xa7b8c0cc, 0xa379dd7b, 0x9b3660c6, 0x9ff77d71, 0x92b45ba8,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,64,"0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,65,"0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,66,"0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c, 0x7b827d21, 0x7f436096,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,67,"0x7200464f, 0x76c15bf8, 0x68860bfd, 0x6c47164a, 0x61043093,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,68,"0x65c52d24, 0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,69,"0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec, 0x3793a651,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,70,"0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,71,"0x2d15ebe3, 0x29d4f654, 0xc5a92679, 0xc1683bce, 0xcc2b1d17,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,72,"0xc8ea00a0, 0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,73,"0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18, 0xf0a5bd1d,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,74,"0xf464a0aa, 0xf9278673, 0xfde69bc4, 0x89b8fd09, 0x8d79e0be,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,75,"0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662, 0x933eb0bb,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,76,"0x97ffad0c, 0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,77,"0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4 };"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,79,private int m_globalCrc;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,81,protected CRC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,82,initialiseCRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,85,int getFinalCRC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,86,return ~m_globalCrc;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,89,void initialiseCRC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,90,m_globalCrc = 0xffffffff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,93,void updateCRC(final int inCh) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,94,int temp = (m_globalCrc >> 24) ^ inCh;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,95,if (temp < 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,96,temp = 256 + temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,98,m_globalCrc = (m_globalCrc << 8) ^ CRC32_TABLE[temp];
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,19,package org.apache.commons.compress.compressors.gzip;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,23,import java.util.zip.GZIPInputStream;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,25,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,27,public class GzipCompressorInputStream extends CompressorInputStream {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,29,private final GZIPInputStream in;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,31,public GzipCompressorInputStream(InputStream inputStream) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,32,in = new GZIPInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,35,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,36,return in.read();
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,19,ackage org.apache.commons.compress;
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,19,package org.apache.commons.compress.compressors.gzip;
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,22,import java.io.OutputStream;
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,23,import java.util.zip.GZIPOutputStream;
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,24, Exception for the archiver.
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,26,ublic class PackableObjectException extends IOException {
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,28, Comment for <code>serialVersionUID</code>
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,30,rivate static final long serialVersionUID = 3904960871745534257L;
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,25,import org.apache.commons.compress.compressors.CompressorOutputStream;
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,33, Calls the IOException constructor
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,35,ublic PackableObjectException() {
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,36,uper();
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,27,public class GzipCompressorOutputStream extends CompressorOutputStream {
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,29,private final GZIPOutputStream out;
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,31,public GzipCompressorOutputStream( final OutputStream outputStream ) throws IOException {
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,32,out = new GZIPOutputStream(outputStream);
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,40, Calls the super constructor with a message
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,41, @param message the message
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,43,ublic PackableObjectException(String message) {
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,44,uper(message);
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,35,public void write(int b) throws IOException {
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,36,out.write(b);
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,48, Calls the super constructor with a message
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,49, and fills the stacktrace with the stacktrace of
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,50, an exception
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,52, @param message the message
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,53, @param e the exception
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,55,"ublic PackableObjectException(String message, Exception e) {"
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,56,uper(message);
False,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,57,his.initCause(e);
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,39,public void close() throws IOException {
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,40,out.close();
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,19,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,22,public final class CompressUtils {
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,25,* Compares one byte array to another
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,26,* @param source- the array to compare to
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,27,* @param headerBytes - the bytearray match
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,29,"public static boolean compareByteArrays(byte[] source, byte[] match) {"
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,30,int i = 0;
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,31,while(source.length < i || i < match.length ) {
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,32,if(source[i] != match[i]) {
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,33,return false;
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,35,i++;
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,37,return true;
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,19,ackage org.apache.commons.compress;
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,19,package org.apache.commons.compress.utils;
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,26, Utils for Compress.
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,28,ublic class CompressUtils {
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,25,public final class IOUtils {
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,31, This class should not be constructed
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,33,rivate CompressUtils() {
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,34,/ unused
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,38, Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,28,* Copies the content of a InputStream into an OutputStream
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,30,* @param input
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,31,*            the InputStream to copy
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,32,* @param output
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,33,*            the target Stream
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,34,* @throws IOException
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,35,*             if the streams are interrupted
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,40,"ublic static void copy( final InputStream input, final OutputStream output )"
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,41,hrows IOException {
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,42,inal byte[] buffer = new byte[ 8024 ];
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,37,"public static void copy(final InputStream input, final OutputStream output) throws IOException {"
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,38,final byte[] buffer = new byte[8024];
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,44,hile( -1 != ( n = input.read( buffer ) ) ) {
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,45,"utput.write( buffer, 0, n );"
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,40,while (-1 != (n = input.read(buffer))) {
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,41,"output.write(buffer, 0, n);"
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,45,"public static void copy(final InputStream input, final OutputStream output, int buffersize) throws IOException {"
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,46,final byte[] buffer = new byte[buffersize];
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,47,int n = 0;
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,48,while (-1 != (n = input.read(buffer))) {
True,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,49,"output.write(buffer, 0, n);"
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,50, Compares one byte array to another
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,51, @param source the array to compare to
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,52, @param match  the bytearray match
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,54,"ublic static boolean compareByteArrays(byte[] source, byte[] match) {"
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,55,nt i = 0;
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,56,hile(source.length < i || i < match.length ) {
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,57,f(source[i] != match[i]) {
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,58,eturn false;
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,60,++;
False,src/java/org/apache/commons/compress/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,62,eturn true;
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,19,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,21,import java.util.Map;
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,23,import org.apache.commons.compress.archivers.ArchiveException;
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,25,public final class ReflectionUtils {
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,27,"public static void registerClazz(Map map, String name, Class type, Class clazz) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,28,if (type.isAssignableFrom(clazz) && !(clazz.isInterface())) {
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,29,"map.put(name, clazz);"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,30,} else {
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,31,"throw new ArchiveException(""Archive does not implement the "" + type + "" interface."");"
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,1,package org.apache.commons.compress;
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,3,import java.io.File;
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,5,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,7,public abstract class AbstractTestCase extends TestCase {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,9,protected File dir;
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,11,protected void setUp() throws Exception {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,12,"dir = File.createTempFile(""dir"", """");"
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,13,dir.delete();
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,14,dir.mkdir();
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,17,protected void tearDown() throws Exception {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,18,dir.delete();
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,19,dir = null;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,19,package org.apache.commons.compress;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,21,import java.io.BufferedInputStream;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,22,import java.io.File;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,23,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,25,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,27,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,28,import org.apache.commons.compress.archivers.ArchiveStreamFactory;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,29,import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,30,import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,31,import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,32,import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,34,public final class DetectArchiverTestCase extends TestCase {
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,35,public void testDetection() throws Exception {
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,36,final ArchiveStreamFactory factory = new ArchiveStreamFactory();
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,38,final ArchiveInputStream ar = factory.createArchiveInputStream(
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,39,new BufferedInputStream(new FileInputStream(
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,40,"new File(getClass().getClassLoader().getResource(""bla.ar"").getFile()))));"
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,41,assertTrue(ar instanceof ArArchiveInputStream);
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,43,final ArchiveInputStream tar = factory.createArchiveInputStream(
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,44,new BufferedInputStream(new FileInputStream(
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,45,"new File(getClass().getClassLoader().getResource(""bla.tar"").getFile()))));"
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,46,assertTrue(tar instanceof TarArchiveInputStream);
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,48,final ArchiveInputStream zip = factory.createArchiveInputStream(
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,49,new BufferedInputStream(new FileInputStream(
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,50,"new File(getClass().getClassLoader().getResource(""bla.zip"").getFile()))));"
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,51,assertTrue(zip instanceof ZipArchiveInputStream);
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,53,final ArchiveInputStream jar = factory.createArchiveInputStream(
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,54,new BufferedInputStream(new FileInputStream(
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,55,"new File(getClass().getClassLoader().getResource(""bla.jar"").getFile()))));"
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,56,assertTrue(jar instanceof JarArchiveInputStream);
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,58,//		final ArchiveInputStream tgz = factory.createArchiveInputStream(
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,59,//				new BufferedInputStream(new FileInputStream(
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,60,"//						new File(getClass().getClassLoader().getResource(""bla.tgz"").getFile()))));"
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,61,//		assertTrue(tgz instanceof TarArchiveInputStream);
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,22, Exception occurs when a exception within
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,23, the unpack actions occurs.
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,25,ublic class UnpackException  extends ArchiveException {
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,27, Comment for <code>serialVersionUID</code>
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,29,rivate static final long serialVersionUID = 3906647522633135668L;
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,32, Calls the super constructor
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,34,ublic UnpackException() {
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,35,uper();
True,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,21,import junit.framework.TestCase;
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,39, Calls the super constructor with a message
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,40, @param message the message
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,42,ublic UnpackException(String message) {
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,43,uper(message);
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,47, Calls the super constructor with a message
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,48, and fills the stacktrace with the stacktrace of
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,49, an exception
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,51, @param message the message
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,52, @param e the exception
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,54,"ublic UnpackException(String message, Exception e) {"
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,55,uper(message);
False,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,56,his.initCause(e);
True,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,23,public final class DetectCompressorTestCase extends TestCase {
True,src/java/org/apache/commons/compress/UnpackException.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,24,public void testDetection() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,19,package org.apache.commons.compress.archivers;
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,21,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,23,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,24,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,25,import java.io.OutputStream;
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,27,import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,28,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,30,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,32,public final class ArTestCase extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,33,public void testArArchiveCreation() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,34,"final File output = new File(dir, ""bla.ar"");"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,36,"final File file1 = new File(getClass().getClassLoader().getResource(""test1.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,37,"final File file2 = new File(getClass().getClassLoader().getResource(""test2.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,39,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,40,"final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(""ar"", out);"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,41,"os.putArchiveEntry(new ArArchiveEntry(""test1.xml"", file1.length()));"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,42,"IOUtils.copy(new FileInputStream(file1), os);"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,43,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,45,"os.putArchiveEntry(new ArArchiveEntry(""test2.xml"", file2.length()));"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,46,"IOUtils.copy(new FileInputStream(file2), os);"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,47,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,49,os.close();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,52,public void testArUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,53,"final File output = new File(dir, ""bla.ar"");"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,55,"final File file1 = new File(getClass().getClassLoader().getResource(""test1.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,56,"final File file2 = new File(getClass().getClassLoader().getResource(""test2.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,58,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,59,"final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(""ar"", out);"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,60,"os.putArchiveEntry(new ArArchiveEntry(""test1.xml"", file1.length()));"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,61,"IOUtils.copy(new FileInputStream(file1), os);"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,62,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,64,"os.putArchiveEntry(new ArArchiveEntry(""test2.xml"", file2.length()));"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,65,"IOUtils.copy(new FileInputStream(file2), os);"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,66,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,67,os.close();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,70,// UnArArchive Operation
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,71,final File input = output;
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,72,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,73,"final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(""ar"", is);"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,74,final ArArchiveEntry entry = (ArArchiveEntry)in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,76,"File target = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,77,final OutputStream out = new FileOutputStream(target);
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,79,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,81,out.close();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,82,in.close();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,19,package org.apache.commons.compress.archivers;
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,21,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,23,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,24,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,25,import java.io.OutputStream;
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,27,import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,28,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,30,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,32,public final class JarTestCase extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,33,public void testJarArchiveCreation() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,34,"final File output = new File(dir, ""bla.jar"");"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,36,"final File file1 = new File(getClass().getClassLoader().getResource(""test1.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,37,"final File file2 = new File(getClass().getClassLoader().getResource(""test2.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,39,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,41,"final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(""jar"", out);"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,43,"os.putArchiveEntry(new ZipArchiveEntry(""testdata/test1.xml""));"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,44,"IOUtils.copy(new FileInputStream(file1), os);"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,45,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,47,"os.putArchiveEntry(new ZipArchiveEntry(""testdata/test2.xml""));"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,48,"IOUtils.copy(new FileInputStream(file2), os);"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,49,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,51,os.close();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,55,public void testJarUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,56,"final File input = new File(getClass().getClassLoader().getResource(""bla.jar"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,57,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,58,"final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(""jar"", is);"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,60,ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,61,"File o = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,62,o.getParentFile().mkdirs();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,63,OutputStream out = new FileOutputStream(o);
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,64,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,65,out.close();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,67,entry = (ZipArchiveEntry)in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,68,"o = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,69,o.getParentFile().mkdirs();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,70,out = new FileOutputStream(o);
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,71,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,72,out.close();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,74,entry = (ZipArchiveEntry)in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,75,"o = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,76,o.getParentFile().mkdirs();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,77,out = new FileOutputStream(o);
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,78,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,79,out.close();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,81,in.close();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,19,package org.apache.commons.compress.archivers;
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,21,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,23,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,24,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,25,import java.io.OutputStream;
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,27,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,28,import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,29,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,31,public final class TarTestCase extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,32,public void testTarArchiveCreation() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,34,"final File output = new File(dir, ""bla.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,36,"final File file1 = new File(getClass().getClassLoader().getResource(""test1.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,38,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,40,"final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(""tar"", out);"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,42,"final TarArchiveEntry entry = new TarArchiveEntry(""testdata/test1.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,43,entry.setModTime(0);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,44,entry.setSize(file1.length());
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,45,entry.setUserID(0);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,46,entry.setGroupID(0);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,47,"entry.setUserName(""avalon"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,48,"entry.setGroupName(""excalibur"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,49,entry.setMode(0100000);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,51,os.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,52,"IOUtils.copy(new FileInputStream(file1), os);"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,54,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,55,os.close();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,57,public void testTarUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,58,"final File input = new File(getClass().getClassLoader().getResource(""bla.tar"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,59,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,60,"final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(""tar"", is);"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,61,final TarArchiveEntry entry = (TarArchiveEntry)in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,62,"final OutputStream out = new FileOutputStream(new File(dir, entry.getName()));"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,63,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,64,out.close();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,65,in.close();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,19,package org.apache.commons.compress.archivers;
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,21,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,23,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,24,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,25,import java.io.OutputStream;
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,27,import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,28,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,30,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,32,public final class ZipTestCase extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,33,public void testZipArchiveCreation() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,35,"final File output = new File(dir, ""bla.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,37,"final File file1 = new File(getClass().getClassLoader().getResource(""test1.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,38,"final File file2 = new File(getClass().getClassLoader().getResource(""test2.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,40,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,42,"final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(""zip"", out);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,44,"os.putArchiveEntry(new ZipArchiveEntry(""testdata/test1.xml""));"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,45,"IOUtils.copy(new FileInputStream(file1), os);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,46,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,48,"os.putArchiveEntry(new ZipArchiveEntry(""testdata/test2.xml""));"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,49,"IOUtils.copy(new FileInputStream(file2), os);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,50,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,52,os.close();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,54,public void testZipUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,56,"final File input = new File(getClass().getClassLoader().getResource(""bla.zip"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,58,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,59,"final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(""zip"", is);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,61,final ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,62,"final OutputStream out = new FileOutputStream(new File(dir, entry.getName()));"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,64,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,66,out.close();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,67,in.close();
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,19,ackage org.apache.commons.compress;
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,19,package org.apache.commons.compress.archivers.memory;
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,21,mport java.io.InputStream;
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,23, Represents an entry of an archive.
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,25,ublic class ArchiveEntry {
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,26,* Name of this entry */
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,27,rivate String name = null;
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,28,* name of this entry stream */
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,29,rivate InputStream stream = null;
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,32, Should only called with parameters
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,34,rivate ArchiveEntry() {
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,35,/ unused
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,21,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,23,public final class MemoryArchiveEntry implements ArchiveEntry {
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,25,private final String name;
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,39, Constructs a new ArchiveEntry with name and stram
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,40, @param entryName the name of this entry
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,41, @param entryStream the inputstream of this entry
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,43,"ublic ArchiveEntry(String entryName, InputStream entryStream) {"
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,44,uper();
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,45,his.name = entryName;
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,46,his.stream = entryStream;
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,27,public MemoryArchiveEntry( final String pName ) {
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,28,name = pName;
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,50, Returns this entries name
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,51, @return name of this entry
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,58, Returns this entries InputStream stream
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,59, @return InputStream of this entry
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,61,ublic InputStream getStream() {
False,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,62,eturn stream;
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,35,public long getSize() {
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,36,// TODO Auto-generated method stub
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,37,return 0;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,19,package org.apache.commons.compress.archivers.memory;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,21,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,23,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,24,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,26,public final class MemoryArchiveInputStream extends ArchiveInputStream {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,28,private final String[] filenames;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,29,private final String[] content;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,30,private int p;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,32,public MemoryArchiveInputStream( final String[][] pFiles ) {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,33,filenames = new String[pFiles.length];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,34,content = new String[pFiles.length];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,36,for (int i = 0; i < pFiles.length; i++) {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,37,String[] nameAndContent = pFiles[i];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,38,filenames[i] = nameAndContent[0];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,39,content[i] = nameAndContent[1];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,41,p = 0;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,44,public ArchiveEntry getNextEntry() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,45,if (p >= filenames.length) {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,46,return null;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,49,return new MemoryArchiveEntry(filenames[p]);
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,52,public String readString() {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,53,return content[p++];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,56,public int read() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,57,return 0;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,19,package org.apache.commons.compress.archivers.memory;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,21,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,23,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,27,public final class MemoryArchiveTestCase extends TestCase {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,29,public void testReading() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,31,final MemoryArchiveInputStream is = new MemoryArchiveInputStream(new String[][] {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,32,"{ ""test1"",     ""content1"" },"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,33,"{ ""test2"",     ""content2"" },"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,36,final ArchiveEntry entry1 = is.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,37,assertNotNull(entry1);
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,38,"assertEquals(""test1"", entry1.getName());"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,39,final String content1 = is.readString();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,40,"assertEquals(""content1"", content1);"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,42,final ArchiveEntry entry2 = is.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,43,assertNotNull(entry2);
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,44,"assertEquals(""test2"", entry2.getName());"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,45,final String content2 = is.readString();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,46,"assertEquals(""content2"", content2);"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,48,final ArchiveEntry entry3 = is.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,49,assertNull(entry3);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,19,package org.apache.commons.compress.changes;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,21,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,23,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,26,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,27,import org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,29,public final class ChangeSetTestCase extends TestCase {
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,31,private void apply( final ChangeSet cs ) throws IOException {
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,33,final ArchiveInputStream is = new MemoryArchiveInputStream(new String[][] {
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,34,"{ ""test1"",      """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,35,"{ ""test2"",      """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,36,"{ ""dir1/test1"", """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,37,"{ ""dir1/test2"", """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,38,"{ ""dir2/test1"", """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,39,"{ ""dir2/test2"", """" }"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,42,while(true) {
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,43,final ArchiveEntry entry = is.getNextEntry();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,45,if (entry == null) {
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,46,break;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,49,"// delete, new name, new content"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,19,package org.apache.commons.compress.changes;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,21,import java.io.File;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,23,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,24,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,26,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,28,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,29,import org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,30,import org.apache.commons.compress.archivers.*;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,32,public class ChangeWorkerTest extends TestCase {
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,34,final ArchiveInputStream is = null;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,36,protected void setUp() throws Exception {
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,37,super.setUp();
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,38,final ArchiveInputStream is = new MemoryArchiveInputStream(new String[][] {
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,39,"{ ""test1"",      """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,40,"{ ""test2"",      """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,41,"{ ""dir1/test1"", """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,42,"{ ""dir1/test2"", """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,43,"{ ""dir2/test1"", """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,44,"{ ""dir2/test2"", """" }"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,48,protected void tearDown() throws Exception {
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,49,super.tearDown();
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,52,public void testPerform() throws Exception {
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,53,ChangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,54,"changes.delete(""test2.xml"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,56,"final File input = new File(getClass().getClassLoader().getResource(""bla.zip"").getFile());"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,57,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,58,"ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(""zip"", is);"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,60,"File temp = File.createTempFile(""test"", "".zip"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,61,"ArchiveOutputStream out = new ArchiveStreamFactory().createArchiveOutputStream(""zip"", new FileOutputStream(temp));"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,63,System.out.println(temp.getAbsolutePath());
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,64,"ChangeWorker.perform(changes, ais, out);"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,19,package org.apache.commons.compress.compressors;
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,21,import java.io.File;
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,23,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,24,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,25,import java.io.OutputStream;
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,27,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,28,import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,29,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,31,public final class BZip2TestCase extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,32,public void testBzipCreation()  throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,33,"final File output = new File(dir, ""bla.txt.bz2"");"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,34,System.out.println(dir);
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,35,"final File file1 = new File(getClass().getClassLoader().getResource(""test.txt"").getFile());"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,36,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,37,"CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(""bzip2"", out);"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,38,"IOUtils.copy(new FileInputStream(file1), cos);"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,39,cos.close();
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,42,public void testBzip2Unarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,43,"final File output = new File(dir, ""test-entpackt.txt"");"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,44,System.out.println(dir);
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,45,"final File input = new File(getClass().getClassLoader().getResource(""bla.txt.bz2"").getFile());"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,46,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,47,"//final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(""bzip2"", is);"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,48,final CompressorInputStream in = new BZip2CompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,49,"IOUtils.copy(in, new FileOutputStream(output));"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,50,in.close();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,19,package org.apache.commons.compress.compressors;
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,21,import java.io.File;
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,23,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,24,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,25,import java.io.OutputStream;
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,27,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,28,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,30,public final class GZipTestCase extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,31,public void testGzipCreation()  throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,32,"final File output = new File(dir, ""bla.gz"");"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,33,"final File file1 = new File(getClass().getClassLoader().getResource(""test1.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,34,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,35,"CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(""gz"", out);"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,36,"IOUtils.copy(new FileInputStream(file1), cos);"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,37,cos.close();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,40,public void testGzipUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,41,"final File output = new File(dir, ""bla-entpackt.tar"");"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,42,"final File input = new File(getClass().getClassLoader().getResource(""bla.tgz"").getFile());"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,43,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,44,"final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(""gz"", is);"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,45,"IOUtils.copy(in, new FileOutputStream(output));"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,46,in.close();
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,17, under the License.
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,19,ackage org.apache.commons.compress;
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,21,mport junit.framework.TestCase;
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,24, Test for Compress Utils
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,25, @author christian.grobmeier
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,27,ublic class CompressUtilsTest extends TestCase {
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,29,ublic void testCompareByteArrays() {
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,30,"yte[] source = { 0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0 };"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,31,"yte[] match = { 0x0, 0x0, 0x0, 0x0, 0x0 };"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,33,"ssertTrue(CompressUtils.compareByteArrays(source, match));"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,35,"yte[] match2 = { 0x0, 0x0, 0x0, 0x0, 0x10 };"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,36,"ssertFalse(CompressUtils.compareByteArrays(source, match2));"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,38,"yte[] source3 = { 0x50, 0x4b, 0x03, 0x04, 0x0,0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0 };"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,39,"yte[] match3 = { 0x50, 0x4b, 0x03, 0x04};"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,40,"ssertTrue(CompressUtils.compareByteArrays(source3, match3));"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,42,"yte[] source4 = { 0x50, 0x4b, 0x03, 0x04, 0x0,0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0 };"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,43,"yte[] match4 = { 0x52, 0x4b, 0x03, 0x04};"
False,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,44,"ssertFalse(CompressUtils.compareByteArrays(source4, match4));"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,17, under the License.
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,20,ackage org.apache.commons.compress.archivers.tar;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,22,mport java.io.BufferedInputStream;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,23,mport java.io.File;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,24,mport java.io.FileInputStream;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,25,mport java.io.FileOutputStream;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,26,mport java.io.IOException;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,27,mport java.io.InputStream;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,29,mport org.apache.commons.io.IOUtils;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,30,mport org.apache.commons.io.input.NullInputStream;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,31,mport org.apache.commons.io.output.NullOutputStream;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,33,mport junit.framework.TestCase;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,36, Test case for all tar resources.
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,38, @todo Find V7 tar and do tests against it
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,39," @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,40, @version $Revision: 155439 $ $Date$
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,42,ublic final class TarTestCase extends TestCase
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,44,rivate static final char SP = File.separatorChar;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,45,"rivate static final String BASE_DATA_NAME = ""data.txt"";"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,46,"rivate static final String LFN_PART = ""a-b-c-d-e-f-g-h-i-j/"";"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,47,rivate static final String LONG_FILE_NAME =
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,48,"FN_PART + LFN_PART + LFN_PART + LFN_PART + LFN_PART + ""a"";"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,50,rivate static final String BASEDIR = calcBaseDir();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,52,rivate static final File BASEDIR_FILE = new File( BASEDIR );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,53,"rivate static final File POSIX_TAR_FILE = new File( BASEDIR_FILE, ""posix.tar"" );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,54,/    private static final File V7_TAR_FILE =
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,55,"/        new File( BASEDIR_FILE, ""v7.tar"" );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,56,"rivate static final File GNU_TAR_FILE = new File( BASEDIR_FILE, ""gnu.tar"" );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,57,"rivate static final File DATA_FILE1 = new File( BASEDIR_FILE, BASE_DATA_NAME );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,58,"rivate static final String USER_NAME = ""avalon"";"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,59,"rivate static final String GROUP_NAME = ""excalibur"";"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,60,rivate static final long SIZE = DATA_FILE1.length();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,61,rivate static final int GROUP_ID = 0;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,62,rivate static final int USER_ID = 0;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,63,rivate static final int MODE = 0100000;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,64,rivate static final int MOD_TIME = 0;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,66,rivate static String calcBaseDir()
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,68,inal String name = TarTestCase.class.getName();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,69,inal int size = name.length();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,70,"inal String filename = name.substring( 0, size - 11 ).replace( '.', SP );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,71,"eturn ""src"" + SP + ""test"" + SP + SP + filename + SP;"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,74,ublic void testReadPosixTar() throws Exception
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,76,"ompareTar( BASE_DATA_NAME, POSIX_TAR_FILE );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,79,ublic void testReadGnuTar() throws Exception
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,81,"ompareTar( LONG_FILE_NAME, GNU_TAR_FILE );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,84,ublic void testWritePosixTar() throws Exception
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,86,"/final File temp = new File( BASEDIR_FILE, ""posix2.tar"" );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,87,"inal File temp = File.createTempFile( ""delete-me"", ""tar"" );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,88,inal FileOutputStream fileOutput = new FileOutputStream( temp );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,89,inal TarOutputStream output = new TarOutputStream( fileOutput );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,90,/output.setBufferDebug( true );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,91,inal TarEntry entry = new TarEntry( BASE_DATA_NAME );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,92,etupEntry( entry );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,93,utput.putNextEntry( entry );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,95,inal FileInputStream fileInput = new FileInputStream( DATA_FILE1 );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,96,utput.copyEntryContents( fileInput );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,97,utput.closeEntry();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,98,OUtils.closeQuietly( fileInput );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,99,OUtils.closeQuietly( output );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,100,OUtils.closeQuietly( fileOutput );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,102,"ssertTrue( ""Tar files Equal"", contentEquals( temp, POSIX_TAR_FILE ) );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,103,emp.delete();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,106,ublic void testWriteGnuTar() throws Exception
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,108,"/final File temp = new File( BASEDIR_FILE, ""gnu2.tar"" );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,109,"inal File temp = File.createTempFile( ""delete-me"", ""tar"" );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,110,inal FileOutputStream fileOutput = new FileOutputStream( temp );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,111,inal TarOutputStream output = new TarOutputStream( fileOutput );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,112,/output.setBufferDebug( true );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,113,utput.setLongFileMode( TarOutputStream.LONGFILE_GNU );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,114,inal TarEntry entry = new TarEntry( LONG_FILE_NAME );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,115,etupEntry( entry );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,116,utput.putNextEntry( entry );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,118,inal FileInputStream fileInput = new FileInputStream( DATA_FILE1 );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,119,utput.copyEntryContents( fileInput );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,120,utput.closeEntry();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,121,OUtils.closeQuietly( fileInput );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,122,OUtils.closeQuietly( output );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,123,OUtils.closeQuietly( fileOutput );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,125,/Have to compare it this way as the contents will differ
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,126,/due to entry created for second part of name
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,127,"ompareTar( LONG_FILE_NAME, temp );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,128,emp.delete();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,131,ublic void testArchive8GbFile() throws Exception
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,133,ong size = (long) 8 * 1024 * 1024 * 1024;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,135,arOutputStream out = new TarOutputStream(new NullOutputStream());
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,136,"arEntry entry = new TarEntry(""bigfile.data"");"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,137,ntry.setSize(size);
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,139,ut.putNextEntry(entry);
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,140,ut.copyEntryContents( new NullInputStream(size) );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,141,ut.closeEntry();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,144,rivate void setupEntry( final TarEntry entry )
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,146,ntry.setModTime( MOD_TIME );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,147,ntry.setSize( SIZE );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,148,ntry.setUserID( USER_ID );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,149,ntry.setGroupID( GROUP_ID );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,150,ntry.setUserName( USER_NAME );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,151,ntry.setGroupName( GROUP_NAME );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,152,ntry.setMode( MODE );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,155,rivate void checkEntry( final TarEntry entry )
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,157,"ssertEquals( ""Entry size"", SIZE, entry.getSize() );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,158,"ssertEquals( ""Entry User ID"", USER_ID, entry.getUserID() );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,159,"ssertEquals( ""Entry Group ID"", GROUP_ID, entry.getGroupID() );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,160,"ssertEquals( ""Entry User name"", USER_NAME, entry.getUserName() );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,161,"ssertEquals( ""Entry group name"", GROUP_NAME, entry.getGroupName() );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,162,"ssertEquals( ""Entry mode"", MODE, entry.getMode() );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,163,"ssertEquals( ""Entry mode"", MOD_TIME, entry.getModTime().getTime() / 1000 );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,167, Read tar entry with specified name from tar file1 and compare
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,168, against data file DATA_FILE1.
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,170, @param entryName the expected name of entry
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,171, @param file1 the tar file comparing
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,172, @throws IOException if an error occurs
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,174,"rivate void compareTar( final String entryName, final File file1 )"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,175,hrows IOException
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,177,inal FileInputStream fileInput = new FileInputStream( file1 );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,178,inal TarInputStream input = new TarInputStream( fileInput );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,179,/input.setDebug( true );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,180,inal TarEntry entry = input.getNextEntry();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,182,"ssertEquals( ""Entry name"", entryName, entry.getName() );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,183,heckEntry( entry );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,185,"inal File temp = new File( BASEDIR_FILE, entryName.length() + ""data.txt"" );//File.createTempFile( ""delete-me"", ""tar"" );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,186,inal FileOutputStream output = new FileOutputStream( temp );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,187,nput.copyEntryContents( output );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,188,OUtils.closeQuietly( output );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,190,"ssertNull( ""Next Entry"", input.getNextEntry() );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,192,OUtils.closeQuietly( input );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,194,"ssertTrue( ""Data Equals"", contentEquals( temp, DATA_FILE1 ) );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,195,emp.delete();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,199, Compare the contents of two files to determine if they are equal or not.
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,201, @param file1 the first file
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,202, @param file2 the second file
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,203," @return true if the content of the files are equal or they both don't exist, false otherwise"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,205,"rivate boolean contentEquals( final File file1, final File file2 )"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,206,hrows IOException
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,208,inal boolean file1Exists = file1.exists();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,209,f( file1Exists != file2.exists() )
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,211,eturn false;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,214,f( !file1Exists )
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,216,/ two not existing files are equal
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,217,eturn true;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,220,f( file1.isDirectory() || file2.isDirectory() )
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,222,/ don't want to compare directory contents
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,223,eturn false;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,226,nputStream input1 = null;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,227,nputStream input2 = null;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,228,ry
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,230,nput1 = new FileInputStream( file1 );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,231,nput2 = new FileInputStream( file2 );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,232,"eturn contentEquals( input1, input2 );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,235,inally
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,237,OUtils.closeQuietly( input1 );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,238,OUtils.closeQuietly( input2 );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,243, Compare the contents of two Streams to determine if they are equal or not.
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,245, @param input1 the first stream
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,246, @param input2 the second stream
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,247," @return true if the content of the streams are equal or they both don't exist, false otherwise"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,249,"rivate boolean contentEquals( final InputStream input1,"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,250,inal InputStream input2 )
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,251,hrows IOException
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,253,inal InputStream bufferedInput1 = new BufferedInputStream( input1 );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,254,inal InputStream bufferedInput2 = new BufferedInputStream( input2 );
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,256,nt count = 0;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,257,nt ch = bufferedInput1.read();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,258,hile( -1 != ch )
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,260,inal int ch2 = bufferedInput2.read();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,261,ount++;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,262,f( ch != ch2 )
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,264,"ystem.out.println( ""count = "" + count );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,265,"ystem.out.println( ""ch2 = "" + ch2 );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,266,"ystem.out.println( ""ch = "" + ch );"
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,267,eturn false;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,269,h = bufferedInput1.read();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,272,inal int ch2 = bufferedInput2.read();
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,273,f( -1 != ch2 )
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,275,eturn false;
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,277,lse
False,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,279,eturn true;
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,17, under the License.
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,20,ackage org.apache.commons.compress.archivers.zip;
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,22,mport java.util.zip.ZipException;
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,24,mport junit.framework.TestCase;
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,27, JUnit testcases AsiExtraField.
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,29," @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,31,ublic class AsiExtraFieldTestCase extends TestCase implements UnixStat
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,34, Test file mode magic.
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,36,ublic void testModes()
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,38,inal AsiExtraField field = new AsiExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,39,ield.setMode( 0123 );
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,40,"ssertEquals( ""plain file"", 0100123, field.getMode() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,41,ield.setDirectory( true );
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,42,"ssertEquals( ""directory"", 040123, field.getMode() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,43,"ield.setLinkedFile( ""test"" );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,44,"ssertEquals( ""symbolic link"", 0120123, field.getMode() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,47,rivate AsiExtraField createField()
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,49,inal AsiExtraField field = new AsiExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,50,ield.setMode( 0123 );
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,51,ield.setUserID( 5 );
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,52,ield.setGroupId( 6 );
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,53,eturn field;
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,56,ublic void testContent1()
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,58,inal AsiExtraField field = createField();
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,59,inal byte[] data = field.getLocalFileDataData();
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,61,"/ CRC manually calculated, sorry"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,62,"inal byte[] expect = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, // CRC"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,63,"123, (byte)0x80, // mode"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,64,", 0, 0, 0, // link length"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,65,", 0, 6, 0};                        // uid, gid"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,66,"ssertEquals( ""no link"", expect.length, data.length );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,67,or( int i = 0; i < expect.length; i++ )
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,69,"ssertEquals( ""no link, byte "" + i, expect[ i ], data[ i ] );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,72,"ield.setLinkedFile( ""test"" );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,75,ublic void testContent2()
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,77,inal AsiExtraField field = createField();
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,78,"ield.setLinkedFile( ""test"" );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,80,inal byte[] data = field.getLocalFileDataData();
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,81,"inal byte[] expect = new byte[]{0x75, (byte)0x8E, 0x41, (byte)0xFD, // CRC"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,82,"123, (byte)0xA0, // mode"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,83,", 0, 0, 0, // link length"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,84,", 0, 6, 0, // uid, gid"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,85,"byte)'t', (byte)'e', (byte)'s', (byte)'t'};"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,86,"ssertEquals( ""no link"", expect.length, data.length );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,87,or( int i = 0; i < expect.length; i++ )
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,89,"ssertEquals( ""no link, byte "" + i, expect[ i ], data[ i ] );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,94,ublic void testReparse1()
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,95,hrows ZipException
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,97,"/ CRC manually calculated, sorry"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,98,"inal byte[] data = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, // CRC"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,99,"123, (byte)0x80, // mode"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,100,", 0, 0, 0, // link length"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,101,", 0, 6, 0};                        // uid, gid"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,102,inal AsiExtraField field = new AsiExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,103,"ield.parseFromLocalFileData( data, 0, data.length );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,105,"ssertEquals( ""length plain file"", data.length,"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,106,ield.getLocalFileDataLength().getValue() );
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,107,"ssertTrue( ""plain file, no link"", !field.isLink() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,108,"ssertTrue( ""plain file, no dir"", !field.isDirectory() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,109,"ssertEquals( ""mode plain file"", FILE_FLAG | 0123, field.getMode() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,110,"ssertEquals( ""uid plain file"", 5, field.getUserID() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,111,"ssertEquals( ""gid plain file"", 6, field.getGroupID() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,114,ublic void testReparse2()
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,115,hrows ZipException
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,117,"inal byte[] data = new byte[]{0x75, (byte)0x8E, 0x41, (byte)0xFD, // CRC"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,118,"123, (byte)0xA0, // mode"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,119,", 0, 0, 0, // link length"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,120,", 0, 6, 0, // uid, gid"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,121,"byte)'t', (byte)'e', (byte)'s', (byte)'t'};"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,122,inal AsiExtraField field = new AsiExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,123,"ield.parseFromLocalFileData( data, 0, data.length );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,124,"ssertEquals( ""length link"", data.length,"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,125,ield.getLocalFileDataLength().getValue() );
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,126,"ssertTrue( ""link, is link"", field.isLink() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,127,"ssertTrue( ""link, no dir"", !field.isDirectory() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,128,"ssertEquals( ""mode link"", LINK_FLAG | 0123, field.getMode() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,129,"ssertEquals( ""uid link"", 5, field.getUserID() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,130,"ssertEquals( ""gid link"", 6, field.getGroupID() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,131,"ssertEquals( ""test"", field.getLinkedFile() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,134,ublic void testReparse3()
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,135,hrows ZipException
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,137,"inal byte[] data = new byte[]{(byte)0x8E, 0x01, (byte)0xBF, (byte)0x0E, // CRC"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,138,"123, (byte)0x40, // mode"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,139,", 0, 0, 0, // link"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,140,", 0, 6, 0};                          // uid, gid"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,141,inal AsiExtraField field = new AsiExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,142,"ield.parseFromLocalFileData( data, 0, data.length );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,143,"ssertEquals( ""length dir"", data.length,"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,144,ield.getLocalFileDataLength().getValue() );
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,145,"ssertTrue( ""dir, no link"", !field.isLink() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,146,"ssertTrue( ""dir, is dir"", field.isDirectory() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,147,"ssertEquals( ""mode dir"", DIR_FLAG | 0123, field.getMode() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,148,"ssertEquals( ""uid dir"", 5, field.getUserID() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,149,"ssertEquals( ""gid dir"", 6, field.getGroupID() );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,152,ublic void testReparse4()
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,153,hrows Exception
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,155,"inal byte[] data = new byte[]{0, 0, 0, 0, // bad CRC"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,156,"123, (byte)0x40, // mode"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,157,", 0, 0, 0, // link"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,158,", 0, 6, 0};                          // uid, gid"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,159,inal AsiExtraField field = new AsiExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,160,ry
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,162,"ield.parseFromLocalFileData( data, 0, data.length );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,163,"ail( ""should raise bad CRC exception"" );"
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,165,atch( Exception e )
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,167,"ssertEquals( ""bad CRC checksum 0 instead of ebf018e"","
False,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,168,.getMessage() );
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,17, under the License.
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,20,ackage org.apache.commons.compress.archivers.zip;
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,22,mport junit.framework.TestCase;
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,25, JUnit testcases ExtraFieldUtils.
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,27," @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,29,ublic class ExtraFieldUtilsTestCase extends TestCase implements UnixStat
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,31,rivate AsiExtraField m_field;
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,32,rivate UnrecognizedExtraField m_dummy;
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,33,rivate byte[] m_data;
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,34,rivate byte[] m_local;
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,36,ublic void setUp()
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,38,_field = new AsiExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,39,_field.setMode( 0755 );
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,40,_field.setDirectory( true );
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,41,_dummy = new UnrecognizedExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,42,_dummy.setHeaderID( new ZipShort( 1 ) );
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,43,_dummy.setLocalFileDataData( new byte[ 0 ] );
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,44,_dummy.setCentralDirectoryData( new byte[]{0} );
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,46,_local = m_field.getLocalFileDataData();
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,47,inal byte[] dummyLocal = m_dummy.getLocalFileDataData();
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,48,_data = new byte[ 4 + m_local.length + 4 + dummyLocal.length ];
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,49,"ystem.arraycopy( m_field.getHeaderID().getBytes(), 0, m_data, 0, 2 );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,50,"ystem.arraycopy( m_field.getLocalFileDataLength().getBytes(), 0, m_data, 2, 2 );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,51,"ystem.arraycopy( m_local, 0, m_data, 4, m_local.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,52,"ystem.arraycopy( m_dummy.getHeaderID().getBytes(), 0, m_data,"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,53," + m_local.length, 2 );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,54,"ystem.arraycopy( m_dummy.getLocalFileDataLength().getBytes(), 0, m_data,"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,55," + m_local.length + 2, 2 );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,56,"ystem.arraycopy( dummyLocal, 0, m_data,"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,57," + m_local.length + 4, dummyLocal.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,62, test parser.
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,64,ublic void testParse() throws Exception
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,66,inal ZipExtraField[] extraField = ExtraFieldUtils.parse( m_data );
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,67,"ssertEquals( ""number of fields"", 2, extraField.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,68,"ssertTrue( ""type field 1"", extraField[ 0 ] instanceof AsiExtraField );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,69,"ssertEquals( ""mode field 1"", 040755,"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,70, (AsiExtraField)extraField[ 0 ] ).getMode() );
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,71,"ssertTrue( ""type field 2"", extraField[ 1 ] instanceof UnrecognizedExtraField );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,72,"ssertEquals( ""data length field 2"", 0,"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,73,xtraField[ 1 ].getLocalFileDataLength().getValue() );
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,75,inal byte[] data2 = new byte[ m_data.length - 1 ];
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,76,"ystem.arraycopy( m_data, 0, data2, 0, data2.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,77,ry
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,79,xtraFieldUtils.parse( data2 );
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,80,"ail( ""data should be invalid"" );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,82,atch( Exception e )
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,84,"ssertEquals( ""message"","
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,85,"data starting at "" + ( 4 + m_local.length ) + "" is in unknown format"","
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,86,.getMessage() );
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,91, Test merge methods
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,93,ublic void testMerge()
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,95,inal byte[] local =
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,96,"xtraFieldUtils.mergeLocalFileDataData( new ZipExtraField[]{m_field, m_dummy} );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,97,"ssertEquals( ""local length"", m_data.length, local.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,98,or( int i = 0; i < local.length; i++ )
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,100,"ssertEquals( ""local byte "" + i, m_data[ i ], local[ i ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,103,inal byte[] dummyCentral = m_dummy.getCentralDirectoryData();
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,104,inal byte[] data2 = new byte[ 4 + m_local.length + 4 + dummyCentral.length ];
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,105,"ystem.arraycopy( m_data, 0, data2, 0, 4 + m_local.length + 2 );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,106,"ystem.arraycopy( m_dummy.getCentralDirectoryLength().getBytes(), 0,"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,107,"ata2, 4 + m_local.length + 2, 2 );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,108,"ystem.arraycopy( dummyCentral, 0, data2,"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,109," + m_local.length + 4, dummyCentral.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,111,inal byte[] central =
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,112,"xtraFieldUtils.mergeCentralDirectoryData( new ZipExtraField[]{m_field, m_dummy} );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,113,"ssertEquals( ""central length"", data2.length, central.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,114,or( int i = 0; i < central.length; i++ )
False,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,116,"ssertEquals( ""central byte "" + i, data2[ i ], central[ i ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,17, under the License.
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,20,ackage org.apache.commons.compress.archivers.zip;
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,22,mport java.util.NoSuchElementException;
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,24,mport junit.framework.TestCase;
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,27, JUnit testcases ZipEntry.
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,29," @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,31,ublic class ZipEntryTestCase extends TestCase
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,34, test handling of extra fields
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,36,ublic void testExtraFields()
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,38,inal AsiExtraField field = createField();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,39,inal UnrecognizedExtraField extraField = createExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,41,"inal ZipEntry entry = new ZipEntry( ""test/"" );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,42,"ntry.setExtraFields( new ZipExtraField[]{field, extraField} );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,43,inal byte[] data1 = entry.getExtra();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,44,ipExtraField[] result = entry.getExtraFields();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,45,"ssertEquals( ""first pass"", 2, result.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,46,"ssertSame( field, result[ 0 ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,47,"ssertSame( extraField, result[ 1 ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,49,nrecognizedExtraField u2 = new UnrecognizedExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,50,2.setHeaderID( new ZipShort( 1 ) );
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,51,2.setLocalFileDataData( new byte[]{1} );
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,53,ntry.addExtraField( u2 );
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,54,yte[] data2 = entry.getExtra();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,55,esult = entry.getExtraFields();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,56,"ssertEquals( ""second pass"", 2, result.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,57,"ssertSame( field, result[ 0 ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,58,"ssertSame( u2, result[ 1 ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,59,"ssertEquals( ""length second pass"", data1.length + 1, data2.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,61,nrecognizedExtraField u3 = new UnrecognizedExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,62,3.setHeaderID( new ZipShort( 2 ) );
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,63,3.setLocalFileDataData( new byte[]{1} );
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,64,ntry.addExtraField( u3 );
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,65,esult = entry.getExtraFields();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,66,"ssertEquals( ""third pass"", 3, result.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,68,ntry.removeExtraField( new ZipShort( 1 ) );
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,69,yte[] data3 = entry.getExtra();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,70,esult = entry.getExtraFields();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,71,"ssertEquals( ""fourth pass"", 2, result.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,72,"ssertSame( field, result[ 0 ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,73,"ssertSame( u3, result[ 1 ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,74,"ssertEquals( ""length fourth pass"", data2.length, data3.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,76,ry
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,78,ntry.removeExtraField( new ZipShort( 1 ) );
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,79,"ail( ""should be no such element"" );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,81,atch( final NoSuchElementException nse )
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,86,rivate UnrecognizedExtraField createExtraField()
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,88,nrecognizedExtraField extraField = new UnrecognizedExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,89,xtraField.setHeaderID( new ZipShort( 1 ) );
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,90,xtraField.setLocalFileDataData( new byte[ 0 ] );
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,91,eturn extraField;
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,94,rivate AsiExtraField createField()
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,96,inal AsiExtraField field = new AsiExtraField();
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,97,ield.setDirectory( true );
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,98,ield.setMode( 0755 );
False,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,99,eturn field;
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,17, under the License.
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,20,ackage org.apache.commons.compress.archivers.zip;
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,22,mport junit.framework.TestCase;
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,25, JUnit 3 testcases for org.apache.tools.zip.ZipLong.
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,27," @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,29,ublic class ZipLongTestCase extends TestCase
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,32, Test conversion to bytes.
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,34,ublic void testToBytes()
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,36,inal ZipLong zipLong = new ZipLong( 0x12345678 );
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,37,inal byte[] result = zipLong.getBytes();
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,38,"ssertEquals( ""length getBytes"", 4, result.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,39,"ssertEquals( ""first byte getBytes"", 0x78, result[ 0 ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,40,"ssertEquals( ""second byte getBytes"", 0x56, result[ 1 ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,41,"ssertEquals( ""third byte getBytes"", 0x34, result[ 2 ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,42,"ssertEquals( ""fourth byte getBytes"", 0x12, result[ 3 ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,46, Test conversion from bytes.
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,48,ublic void testFromBytes()
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,50,"inal byte[] value = new byte[]{0x78, 0x56, 0x34, 0x12};"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,51,inal ZipLong zipLong = new ZipLong( value );
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,52,"ssertEquals( ""value from bytes"", 0x12345678, zipLong.getValue() );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,56, Test the contract of the equals method.
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,58,ublic void testEquals()
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,60,inal ZipLong zipLong1 = new ZipLong( 0x12345678 );
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,61,inal ZipLong zipLong2 = new ZipLong( 0x12345678 );
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,62,inal ZipLong zipLong3 = new ZipLong( 0x87654321 );
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,64,"ssertTrue( ""reflexive"", zipLong1.equals( zipLong1 ) );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,66,"ssertTrue( ""works"", zipLong1.equals( zipLong2 ) );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,67,"ssertTrue( ""works, part two"", !zipLong1.equals( zipLong3 ) );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,69,"ssertTrue( ""symmetric"", zipLong2.equals( zipLong1 ) );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,71,"ssertTrue( ""null handling"", !zipLong1.equals( null ) );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,72,"ssertTrue( ""non ZipLong handling"", !zipLong1.equals( new Integer( 0x1234 ) ) );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,76, Test sign handling.
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,78,ublic void testSign()
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,80,inal ZipLong zipLong =
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,81,"ew ZipLong( new byte[]{(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF} );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,82,"ssertEquals( 0x00000000FFFFFFFFl, zipLong.getValue() );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,17, under the License.
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,20,ackage org.apache.commons.compress.archivers.zip;
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,22,mport junit.framework.TestCase;
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,25, JUnit 3 testcases for org.apache.tools.zip.ZipShort.
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,27," @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,29,ublic class ZipShortTestCase extends TestCase
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,32, Test conversion to bytes.
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,34,ublic void testToBytes()
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,36,inal ZipShort zipShort = new ZipShort( 0x1234 );
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,37,yte[] result = zipShort.getBytes();
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,38,"ssertEquals( ""length getBytes"", 2, result.length );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,39,"ssertEquals( ""first byte getBytes"", 0x34, result[ 0 ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,40,"ssertEquals( ""second byte getBytes"", 0x12, result[ 1 ] );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,44, Test conversion from bytes.
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,46,ublic void testFromBytes()
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,48,"yte[] val = new byte[]{0x34, 0x12};"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,49,inal ZipShort zipShort = new ZipShort( val );
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,50,"ssertEquals( ""value from bytes"", 0x1234, zipShort.getValue() );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,54, Test the contract of the equals method.
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,56,ublic void testEquals()
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,58,inal ZipShort zipShort = new ZipShort( 0x1234 );
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,59,inal ZipShort zipShort2 = new ZipShort( 0x1234 );
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,60,inal ZipShort zipShort3 = new ZipShort( 0x5678 );
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,62,"ssertTrue( ""reflexive"", zipShort.equals( zipShort ) );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,64,"ssertTrue( ""works"", zipShort.equals( zipShort2 ) );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,65,"ssertTrue( ""works, part two"", !zipShort.equals( zipShort3 ) );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,67,"ssertTrue( ""symmetric"", zipShort2.equals( zipShort ) );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,69,"ssertTrue( ""null handling"", !zipShort.equals( null ) );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,70,"ssertTrue( ""non ZipShort handling"", !zipShort.equals( new Integer( 0x1234 ) ) );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,74, Test sign handling.
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,76,ublic void testSign()
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,78,"inal ZipShort zipShort = new ZipShort( new byte[]{(byte)0xFF, (byte)0xFF} );"
False,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,79,"ssertEquals( 0x0000FFFF, zipShort.getValue() );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,17, under the License.
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,20,ackage org.apache.commons.compress.compressors.bzip2;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,22,mport java.io.BufferedInputStream;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,23,mport java.io.File;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,24,mport java.io.FileInputStream;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,25,mport java.io.FileOutputStream;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,26,mport java.io.IOException;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,27,mport java.io.InputStream;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,28,mport java.io.OutputStream;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,30,mport org.apache.commons.compress.CompressUtils;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,31,mport org.apache.commons.io.IOUtils;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,33,mport junit.framework.TestCase;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,36, A test the stress tested the BZip implementation to verify
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,37, that it behaves correctly.
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,39," @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,40, @version $Revision: 280140 $ $Date$
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,42,ublic class BzipTestCase extends TestCase
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,44,"rivate static final byte[] HEADER = new byte[]{(byte)'B', (byte)'Z'};"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,46,ublic void testBzipOutputStream()
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,47,hrows Exception
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,49,"inal InputStream input = getInputStream( ""asf-logo-huge.tar"" );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,50,"inal File outputFile = getOutputFile( "".tar.bz2"" );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,51,inal OutputStream output = new FileOutputStream( outputFile );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,52,inal BZip2OutputStream packedOutput = getPackedOutput( output );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,53,"ompressUtils.copy( input, packedOutput );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,54,OUtils.closeQuietly( input );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,55,OUtils.closeQuietly( packedOutput );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,56,OUtils.closeQuietly( output );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,57,"ompareContents( ""asf-logo-huge.tar.bz2"", outputFile );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,58,orceDelete( outputFile );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,61,rivate void forceDelete( final File outputFile ) throws IOException
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,63,f( !outputFile.delete() )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,65,"inal String message = ""File "" + outputFile + "" unable to be deleted."";"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,66,hrow new IOException( message );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,70,ublic void testBzipInputStream()
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,71,hrows Exception
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,73,"inal InputStream input = getInputStream( ""asf-logo-huge.tar.bz2"" );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,74,"inal File outputFile = getOutputFile( "".tar"" );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,75,inal OutputStream output = new FileOutputStream( outputFile );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,76,inal BZip2InputStream packedInput = getPackedInput( input );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,77,"ompressUtils.copy( packedInput, output );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,78,OUtils.closeQuietly( input );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,79,OUtils.closeQuietly( packedInput );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,80,OUtils.closeQuietly( output );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,81,"ompareContents( ""asf-logo-huge.tar"", outputFile );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,82,orceDelete( outputFile );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,85,ublic void testCBZip2InputStreamClose()
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,86,hrows Exception
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,88,"inal InputStream input = getInputStream( ""asf-logo-huge.tar.bz2"" );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,89,"inal File outputFile = getOutputFile( "".tar.bz2"" );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,90,inal OutputStream output = new FileOutputStream( outputFile );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,91,"ompressUtils.copy( input, output );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,92,OUtils.closeQuietly( input );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,93,OUtils.closeQuietly( output );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,94,"ssertTrue( ""Check output file exists."" , outputFile.exists() );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,95,inal InputStream input2 = new FileInputStream( outputFile );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,96,inal InputStream packedInput = getPackedInput( input2 );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,97,OUtils.closeQuietly( packedInput );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,98,ry
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,100,nput2.read();
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,101,"ssertTrue(""Source input stream is still opened."", false);"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,102, catch ( Exception e )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,104,/ Read closed stream.
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,106,orceDelete( outputFile );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,110, Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,112,"/    private void copy( final InputStream input,"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,113,/                       final OutputStream output )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,114,/        throws IOException
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,116,/        final byte[] buffer = new byte[ 8024 ];
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,117,/        int n = 0;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,118,/        while( -1 != ( n = input.read( buffer ) ) )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,120,"/            output.write( buffer, 0, n );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,124,"rivate void compareContents( final String initial, final File generated )"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,125,hrows Exception
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,127,inal InputStream input1 = getInputStream( initial );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,128,inal InputStream input2 = new FileInputStream( generated );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,129,"inal boolean test = contentEquals( input1, input2 );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,130,OUtils.closeQuietly( input1 );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,131,OUtils.closeQuietly( input2 );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,132,"ssertTrue( ""Contents of "" + initial + "" matches generated version "" + generated, test );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,135,rivate BZip2InputStream getPackedInput( final InputStream input )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,136,hrows IOException
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,138,inal int b1 = input.read();
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,139,inal int b2 = input.read();
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,140,"ssertEquals( ""Equal header byte1"", b1, 'B' );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,141,"ssertEquals( ""Equal header byte2"", b2, 'Z' );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,142,eturn new BZip2InputStream( input );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,145,rivate BZip2OutputStream getPackedOutput( final OutputStream output )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,146,hrows IOException
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,148,utput.write( HEADER );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,149,eturn new BZip2OutputStream( output );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,152,rivate File getOutputFile( final String postfix )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,153,hrows IOException
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,155,"inal File cwd = new File( ""."" );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,156,"eturn File.createTempFile( ""ant-test"", postfix, cwd );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,159,rivate InputStream getInputStream( final String resource )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,160,hrows Exception
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,162,inal String filename =
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,163,"src"" + File.separator + ""test"" + File.separator +"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,164,"etClass().getName().replace( '.', File.separatorChar );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,165,inal String path = getPath( filename );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,166,"inal File input = new File( path, resource );"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,167,eturn new FileInputStream( input );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,168,/        final ClassLoader loader = getClass().getClassLoader();
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,169,/        return loader.getResourceAsStream( resource );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,173, Compare the contents of two Streams to determine if they are equal or not.
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,175, @param input1 the first stream
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,176, @param input2 the second stream
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,177," @return true if the content of the streams are equal or they both don't exist, false otherwise"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,179,"rivate boolean contentEquals( final InputStream input1,"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,180,inal InputStream input2 )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,181,hrows IOException
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,183,inal InputStream bufferedInput1 = new BufferedInputStream( input1 );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,184,inal InputStream bufferedInput2 = new BufferedInputStream( input2 );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,186,nt ch = bufferedInput1.read();
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,187,hile( -1 != ch )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,189,inal int ch2 = bufferedInput2.read();
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,190,f( ch != ch2 )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,192,eturn false;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,194,h = bufferedInput1.read();
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,197,inal int ch2 = bufferedInput2.read();
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,198,f( -1 != ch2 )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,200,eturn false;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,202,lse
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,204,eturn true;
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,208,rivate String getPath( final String filepath )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,210,inal int index = filepath.lastIndexOf( File.separatorChar );
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,211,f( -1 == index )
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,213,"eturn """";"
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,215,lse
False,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,217,"eturn filepath.substring( 0, index );"

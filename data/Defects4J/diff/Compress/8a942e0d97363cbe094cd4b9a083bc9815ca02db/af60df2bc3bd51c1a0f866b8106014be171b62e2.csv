is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,22,import java.io.InputStream;
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,43,rivate List<ScatterGatherBackingStore> backingStores = synchronizedList(new ArrayList<ScatterGatherBackingStore>());
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,63,ackingStores.add( bs);
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,125,"treamToUse.addArchiveEntry(zipArchiveEntry, source.get(), method);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,124,InputStream payload = source.get();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,125,try {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,126,"streamToUse.addArchiveEntry(zipArchiveEntry, payload, method);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,127,} finally {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,128,payload.close();
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,158,or (ScatterGatherBackingStore backingStore : backingStores) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,159,ackingStore.close();
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,85, @param payload         The content to write for the entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,85,* @param payload         The content to write for the entry. The caller is responsible for closing this.
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,91,ayload.close();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,848,final byte[] copyBuffer = new byte[16384];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,856,yte[] tmpBuf = new byte[4096];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,858,hile ((length = src.read( tmpBuf )) >= 0 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,857,while ((length = src.read(copyBuffer)) >= 0 )
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,860,"treamCompressor.writeCounted(tmpBuf, 0, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,859,"streamCompressor.writeCounted(copyBuffer, 0, length);"
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,39,"catterZipOutputStream.addArchiveEntry(zab, new ByteArrayInputStream(B_PAYLOAD), ZipArchiveEntry.DEFLATED);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,39,ByteArrayInputStream payload = new ByteArrayInputStream(B_PAYLOAD);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,40,"scatterZipOutputStream.addArchiveEntry(zab, payload, ZipArchiveEntry.DEFLATED);"
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,42,"catterZipOutputStream.addArchiveEntry(zae, new ByteArrayInputStream(A_PAYLOAD), ZipArchiveEntry.DEFLATED);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,43,ByteArrayInputStream payload1 = new ByteArrayInputStream(A_PAYLOAD);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,44,"scatterZipOutputStream.addArchiveEntry(zae, payload1, ZipArchiveEntry.DEFLATED);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,140,* Adds an archive entry to this archive.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,141,* <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,142,* This method is expected to be called from a single client thread
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,143,* </p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,145,* @param zipArchiveEntryRequestSupplier Should supply the entry to be added.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,146,* @since 1.13
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,148,public void addArchiveEntry(final ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,149,submit(createCallable(zipArchiveEntryRequestSupplier));
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,197,* Create a callable that will compress archive entry supplied by {@link ZipArchiveEntryRequestSupplier}.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,199,* <p>This method is expected to be called from a single client thread.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,201,"* The same as {@link #createCallable(ZipArchiveEntry, InputStreamSupplier)}, but the archive entry"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,202,* to be added is supplied by a {@link ZipArchiveEntryRequestSupplier}.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,204,"* @see #createCallable(ZipArchiveEntry, InputStreamSupplier)"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,206,* @param zipArchiveEntryRequestSupplier Should supply the entry to be added.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,207,"* @return A callable that should subsequently passed to #submit, possibly in a wrapped/adapted from. The"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,208,"* value of this callable is not used, but any exceptions happening inside the compression"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,209,* will be propagated through the callable.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,210,* @since 1.13
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,212,public final Callable<Object> createCallable(final ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,213,return new Callable<Object>() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,214,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,215,public Object call() throws Exception {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,216,tlScatterStreams.get().addArchiveEntry(zipArchiveEntryRequestSupplier.get());
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,217,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,18,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,20,import org.apache.commons.compress.parallel.InputStreamSupplier;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,25,* Supplies {@link ZipArchiveEntryRequest}.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,27,* Implementations are required to support thread-handover. While an instance will
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,28,"* not be accessed concurrently by multiple threads, it will be called by"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,29,* a different thread than it was created on.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,31,* @since 1.13
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,33,public interface ZipArchiveEntryRequestSupplier {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,36,* Supply a {@link ZipArchiveEntryRequest} to be added to a parallel archive.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,37,* @return The {@link ZipArchiveEntryRequest} instance. Should never be null.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java,39,ZipArchiveEntryRequest get();
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,116,"ipCreator.addArchiveEntry(za, new InputStreamSupplier() {"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,116,final InputStreamSupplier iss = new InputStreamSupplier() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,122,if (i % 2 == 0) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,123,"zipCreator.addArchiveEntry(za, iss);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,124,} else {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,125,final ZipArchiveEntryRequestSupplier zaSupplier = new ZipArchiveEntryRequestSupplier() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,126,@Override
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,127,public ZipArchiveEntryRequest get() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,128,"return ZipArchiveEntryRequest.createZipArchiveEntryRequest(za, iss);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,131,zipCreator.addArchiveEntry(zaSupplier);
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,131,"inal Callable<Object> callable = zipCreator.createCallable(za, new InputStreamSupplier() {"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,142,final InputStreamSupplier iss = new InputStreamSupplier() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,148,final Callable<Object> callable;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,149,if (i % 2 == 0) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,150,"callable = zipCreator.createCallable(za, iss);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,151,} else {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,152,final ZipArchiveEntryRequestSupplier zaSupplier = new ZipArchiveEntryRequestSupplier() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,153,@Override
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,154,public ZipArchiveEntryRequest get() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,155,"return ZipArchiveEntryRequest.createZipArchiveEntryRequest(za, iss);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,158,callable = zipCreator.createCallable(zaSupplier);

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,521,eturn new FramedLZ4CompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,521,"return new FramedLZ4CompressorInputStream(in, actualDecompressConcatenated);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,149,* Adds some initial data to fill the window with.
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,151,* @param data the data to fill the window with.
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,152,* @param off offset of real data into the array
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,153,* @param len amount of data
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,154,* @throws IllegalStateException if the stream has already started to write data
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,155,* @see LZ77Compressor#prefill
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,157,"public void prefill(byte[] data, int off, int len) {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,158,if (len > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,159,"byte[] b = Arrays.copyOfRange(data, off, off + len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,160,compressor.prefill(b);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,161,recordLiteral(b);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,28,import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,41, TODO before releasing 1.14:
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,43, + xxhash32 checksum validation
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,44, + skippable frames
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,45, + decompressConcatenated
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,46, + block dependence
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,46,private static final byte[] SKIPPABLE_FRAME_TRAILER = new byte[] {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,47,"0x2a, 0x4d, 0x18"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,49,private static final byte SKIPPABLE_FRAME_PREFIX_BYTE_MASK = 0x50;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,71,private final boolean decompressConcatenated;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,74,private boolean expectBlockDependency;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,84,"// used for block checksum, if present"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,85,private final XXHash32 blockHash = new XXHash32();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,87,// only created if the frame doesn't set the block independence flag
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,88,private byte[] blockDependencyBuffer;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,87, using the LZ4 frame format.
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,92,* using the LZ4 frame format and stops after decompressing the
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,93,* first frame.
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,98,"this(in, false);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,102,* Creates a new input stream that decompresses streams compressed
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,103,* using the LZ4 frame format.
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,104,* @param in  the InputStream from which to read the compressed data
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,105,"* @param decompressConcatenated if true, decompress until the end"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,106,"*          of the input; if false, stop after the first LZ4 frame"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,107,*          and leave the input position to point to the next byte
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,108,*          after the frame stream
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,109,* @throws IOException if reading fails
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,111,"public FramedLZ4CompressorInputStream(InputStream in, boolean decompressConcatenated) throws IOException {"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,93,eadSignature();
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,94,eadFrameDescriptor();
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,95,extBlock();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,113,this.decompressConcatenated = decompressConcatenated;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,114,init(true);
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,127,f (expectContentChecksum && r != -1) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,128,"ontentHash.update(b, off, r);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,146,if (r != -1) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,147,if (expectBlockDependency) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,148,"appendToBlockDependencyBuffer(b, off, r);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,150,if (expectContentChecksum) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,151,"contentHash.update(b, off, r);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,133,rivate void readSignature() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,157,private void init(boolean firstFrame) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,158,if (readSignature(firstFrame)) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,159,readFrameDescriptor();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,160,nextBlock();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,164,private boolean readSignature(boolean firstFrame) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,165,"String garbageMessage = firstFrame ? ""Not a LZ4 frame stream"" : ""LZ4 frame stream followed by garbage"";"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,135,"inal int read = IOUtils.readFully(in, b);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,167,"int read = IOUtils.readFully(in, b);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,169,if (0 == read && !firstFrame) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,170,// good LZ4 frame and nothing after it
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,171,endReached = true;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,172,return false;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,174,if (4 != read) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,175,throw new IOException(garbageMessage);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,178,read = skipSkippableFrame(b);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,179,if (0 == read && !firstFrame) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,180,// good LZ4 frame with only some skippable frames after it
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,181,endReached = true;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,182,return false;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,138,"hrow new IOException(""Not a LZ4 frame stream"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,185,throw new IOException(garbageMessage);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,187,return true;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,151,f ((flags & BLOCK_INDEPENDENCE_MASK) == 0) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,152,"hrow new IOException(""Block dependence is not supported"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,199,expectBlockDependency = (flags & BLOCK_INDEPENDENCE_MASK) == 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,200,if (expectBlockDependency) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,201,if (blockDependencyBuffer == null) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,202,blockDependencyBuffer = new byte[BlockLZ4CompressorInputStream.WINDOW_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,204,} else {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,205,blockDependencyBuffer = null;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,188,ndReached = true;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,242,if (!decompressConcatenated) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,243,endReached = true;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,244,} else {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,245,init(false);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,250,if (expectBlockChecksum) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,251,"capped = new ChecksumCalculatingInputStream(blockHash, capped);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,198,urrentBlock = new BlockLZ4CompressorInputStream(capped);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,258,BlockLZ4CompressorInputStream s = new BlockLZ4CompressorInputStream(capped);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,259,if (expectBlockDependency) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,260,s.prefill(blockDependencyBuffer);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,262,currentBlock = s;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,207,"nt skipped = (int) IOUtils.skip(in, 4);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,208,ount(skipped);
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,209,f (4 != skipped) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,210,"hrow new IOException(""Premature end of stream while reading block checksum"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,271,"verifyChecksum(blockHash, ""block"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,272,blockHash.reset();
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,218,yte[] checksum = new byte[4];
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,219,"nt read = IOUtils.readFully(in, checksum);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,220,ount(read);
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,221,f (4 != read) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,222,"hrow new IOException(""Premature end of stream while reading content checksum"");"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,224,ong expectedHash = contentHash.getValue();
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,225,f (expectedHash != ByteUtils.fromLittleEndian(checksum)) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,226,"hrow new IOException(""content checksum mismatch."");"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,228,ontentHash.reset();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,279,"verifyChecksum(contentHash, ""content"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,281,contentHash.reset();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,284,"private void verifyChecksum(XXHash32 hash, String kind) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,285,byte[] checksum = new byte[4];
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,286,"int read = IOUtils.readFully(in, checksum);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,287,count(read);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,288,if (4 != read) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,289,"throw new IOException(""Premature end of stream while reading "" + kind + "" checksum"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,291,long expectedHash = hash.getValue();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,292,if (expectedHash != ByteUtils.fromLittleEndian(checksum)) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,293,"throw new IOException(kind + "" checksum mismatch."");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,320,private static boolean isSkippableFrameSignature(byte[] b) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,321,if ((b[0] & SKIPPABLE_FRAME_PREFIX_BYTE_MASK) != SKIPPABLE_FRAME_PREFIX_BYTE_MASK) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,322,return false;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,324,for (int i = 1; i < 4; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,325,if (b[i] != SKIPPABLE_FRAME_TRAILER[i - 1]) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,326,return false;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,329,return true;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,333,* Skips over the contents of a skippable frame as well as
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,334,* skippable frames following it.
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,336,* <p>It then tries to read four more bytes which are supposed to
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,337,* hold an LZ4 signature and returns the number of bytes read
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,338,* while storing the bytes in the given array.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,340,private int skipSkippableFrame(byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,341,int read = 4;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,342,while (read == 4 && isSkippableFrameSignature(b)) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,343,"long len = ByteUtils.fromLittleEndian(supplier, 4);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,344,"long skipped = IOUtils.skip(in, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,345,count(skipped);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,346,if (len != skipped) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,347,"throw new IOException(""Premature end of stream while skipping frame"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,349,"read = IOUtils.readFully(in, b);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,350,count(read);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,352,return read;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,355,"private void appendToBlockDependencyBuffer(final byte[] b, final int off, int len) {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,356,"len = Math.min(len, blockDependencyBuffer.length);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,357,if (len > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,358,int keep = blockDependencyBuffer.length - len;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,359,if (keep > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,360,// move last keep bytes towards the start of the buffer
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,361,"System.arraycopy(blockDependencyBuffer, len, blockDependencyBuffer, 0, keep);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,363,// append new data
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,364,"System.arraycopy(b, off, blockDependencyBuffer, keep, len);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,39, TODO before releasing 1.14:
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,41, + block dependence
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,55,// only created if the config requires block dependency
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,56,private byte[] blockDependencyBuffer;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,57,private int collectedBlockDependencyBytes;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,65,"64(64 * 1024, 0),"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,64,"K64(64 * 1024, 4),"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,67,"256(256 * 1024, 1),"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,66,"K256(256 * 1024, 5),"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,69,"1(1024 * 1024, 2),"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,68,"M1(1024 * 1024, 6),"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,71,"4(1024 * 1024, 4);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,70,"M4(1024 * 1024, 7);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,91,"rivate final boolean withContentChecksum, withBlockChecksum;"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,90,"private final boolean withContentChecksum, withBlockChecksum, withBlockDependency;"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,99,"ublic static final Parameters DEFAULT = new Parameters(BlockSize.M4, true, false);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,98,"public static final Parameters DEFAULT = new Parameters(BlockSize.M4, true, false, false);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,108,"his(blockSize, true, false);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,107,"this(blockSize, true, false, false);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,116,* @param withBlockDependency whether a block may depend on
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,117,* the content of a previous block. Enabling this may improve
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,118,* compression ratio but makes it impossible to decompress the
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,119,* output in parallel.
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,118,"ublic Parameters(BlockSize blockSize, boolean withContentChecksum, boolean withBlockChecksum) {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,121,"public Parameters(BlockSize blockSize, boolean withContentChecksum, boolean withBlockChecksum,"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,122,boolean withBlockDependency) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,126,this.withBlockDependency = withBlockDependency;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,127," "", withBlockChecksum "" + withBlockChecksum;"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,132,"+ "", withBlockChecksum "" + withBlockChecksum + "", withBlockDependency "" + withBlockDependency;"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,160,blockDependencyBuffer = params.withBlockDependency
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,161,? new byte[BlockLZ4CompressorInputStream.WINDOW_SIZE]
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,162,: null;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,165,"ontentHash.update(data, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,173,if (params.withContentChecksum) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,174,"contentHash.update(data, off, len);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,202,nt flags = FramedLZ4CompressorInputStream.SUPPORTED_VERSION
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,203, FramedLZ4CompressorInputStream.BLOCK_INDEPENDENCE_MASK;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,212,int flags = FramedLZ4CompressorInputStream.SUPPORTED_VERSION;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,213,if (!params.withBlockDependency) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,214,flags |= FramedLZ4CompressorInputStream.BLOCK_INDEPENDENCE_MASK;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,212,nt bd = params.blockSize.getIndex() << 4;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,224,int bd = (params.blockSize.getIndex() << 4) & FramedLZ4CompressorInputStream.BLOCK_MAX_SIZE_MASK;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,232,final boolean withBlockDependency = params.withBlockDependency;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,221,ry (OutputStream o = new BlockLZ4CompressorOutputStream(baos)) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,234,try (BlockLZ4CompressorOutputStream o = new BlockLZ4CompressorOutputStream(baos)) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,235,if (withBlockDependency) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,236,"o.prefill(blockDependencyBuffer, blockDependencyBuffer.length - collectedBlockDependencyBytes,"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,237,collectedBlockDependencyBytes);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,241,if (withBlockDependency) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,242,"appendToBlockDependencyBuffer(blockData, 0, currentIndex);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,248,"yteUtils.toLittleEndian(out, contentHash.getValue(), 4);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,268,if (params.withContentChecksum) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,269,"ByteUtils.toLittleEndian(out, contentHash.getValue(), 4);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,273,"private void appendToBlockDependencyBuffer(final byte[] b, final int off, int len) {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,274,"len = Math.min(len, blockDependencyBuffer.length);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,275,if (len > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,276,int keep = blockDependencyBuffer.length - len;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,277,if (keep > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,278,// move last keep bytes towards the start of the buffer
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,279,"System.arraycopy(blockDependencyBuffer, len, blockDependencyBuffer, 0, keep);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,281,// append new data
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,282,"System.arraycopy(b, off, blockDependencyBuffer, keep, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,283,"collectedBlockDependencyBytes = Math.min(collectedBlockDependencyBytes + len,"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,284,blockDependencyBuffer.length);
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,34, block must be a literal block for the scheme to work.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,34,* block must be a literal block for the scheme to work - unless the
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,35,* {@link #prefill prefill} method has been used to provide initial
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,36,* data that is never returned by {@link #read read} but only used for
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,37,* back-references.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,39,* <p>Subclasses must override the three-arg {@link #read read} method
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,40,* as the no-arg version delegates to it and the default
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,41,"* implementation delegates to the no-arg version, leading to infinite"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,42,* mutual recursion and a {@code StackOverflowError} otherwise.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,44,* <p>The contract for subclasses' {@code read} implementation is:</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,45,* <ul>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,47,*  <li>keep track of the current state of the stream. Is it inside a
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,48,*  literal block or a back-reference or in-between blocks?</li>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,50,*  <li>Use {@link #readOneByte} to access the underlying stream
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,51,*  directly.</li>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,53,"*  <li>If a new literal block starts, use {@link #startLiteral} to"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,54,*  tell this class about it and read the literal data using {@link
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,55,*  #readLiteral} until it returns {@code 0}. {@link
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,56,*  #hasMoreDataInBlock} will return {@code false} before the next
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,57,*  call to {@link #readLiteral} would return {@code 0}.</li>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,59,"*  <li>If a new back-reference starts, use {@link #startBackReference} to"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,60,*  tell this class about it and read the literal data using {@link
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,61,*  #readBackReference} until it returns {@code 0}. {@link
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,62,*  #hasMoreDataInBlock} will return {@code false} before the next
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,63,*  call to {@link #readBackReference} would return {@code 0}.</li>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,65,"*  <li>If the end of the stream has been reached, return {@code -1}"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,66,*  as this class' methods will never do so themselves.</li>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,68,* </ul>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,70,* <p>{@link #readOneByte} and {@link #readLiteral} update the counter
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,71,* for bytes read.</p>
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,43,** Buffer to write decompressed bytes to for back-references */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,81,"* Buffer to write decompressed bytes to for back-references, will"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,82,* be three times windowSize big.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,84,* <p>Three times so we can slide the whole buffer a windowSize to
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,85,* the left once we've read twice windowSize and still have enough
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,86,* data inside of it to satisfy back-references.</p>
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,46,** One behind the index of the last byte in the buffer that was written */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,90,"/** One behind the index of the last byte in the buffer that was written, i.e. the next position to write to */"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,167,* Adds some initial data to fill the window with.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,169,* <p>This is used if the stream has been cut into blocks and
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,170,* back-references of one block may refer to data of the previous
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,171,* block(s). One such example is the LZ4 frame format using block
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,172,* dependency.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,174,* @param data the data to fill the window with.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,175,* @throws IllegalStateException if the stream has already started to read data
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,177,public void prefill(byte[] data) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,178,if (writeIndex != 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,179,"throw new IllegalStateException(""the stream has already been read from, can't prefill anymore"");"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,181,"// we don't need more data than the big offset could refer to, so cap it"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,182,"int len = Math.min(windowSize, data.length);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,183,// we need the last data as we are dealing with *back*-references
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,184,"System.arraycopy(data, data.length - len, buf, 0, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,185,writeIndex += len;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,186,readIndex += len;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,159,"inal int reallyTryToRead = (int) Math.min(Math.min(bytesToRead, bytesRemaining),"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,160,uf.length - writeIndex);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,226,"// min of ""what is still inside the literal"", ""what does the user want"" and ""how muc can fit into the buffer"""
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,227,"final int reallyTryToRead = Math.min((int) Math.min(bytesToRead, bytesRemaining),"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,228,buf.length - writeIndex);
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,220,"nt copy = (int) Math.min(Math.min(bytesToCopy, bytesRemaining),"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,221,uf.length - writeIndex);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,288,"int copy = Math.min((int) Math.min(bytesToCopy, bytesRemaining),"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,289,buf.length - writeIndex);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,300,// back-reference overlaps with the bytes created from it
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,301,// like go back two bytes and then copy six (by copying
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,302,// the last two bytes three time).
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,22,import java.util.Arrays;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,40, function used in this class is the same used by zlib and InfoZIP's
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,41, ZIP implementation of DEFLATE. Strongly inspired by InfoZIP's
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,42, implementation.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,41,* function used in this class is the same as the one used by zlib and
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,42,* InfoZIP's ZIP implementation of DEFLATE. The whole class is
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,43,* strongly inspired by InfoZIP's implementation.</p>
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,51, BackReference back references} or {@link EOD end of data
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,52,* BackReference back-references} or {@link EOD end of data
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,222,/ number of insertString calls for the up to three last bytes of the last match
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,223,// number of missed insertString calls for the up to three last
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,224,// bytes of the last match that can only be performed once more
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,225,// data has been read
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,245,or (int i = 0; i < HASH_SIZE; i++) {
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,246,ead[i] = NO_MATCH;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,248,"Arrays.fill(head, NO_MATCH);"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,273,hile (len > wSize) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,274,while (len > wSize) { // chop into windowSize sized chunks
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,302,* Adds some initial data to fill the window with.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,304,* <p>This is used if the stream has been cut into blocks and
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,305,* back-references of one block may refer to data of the previous
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,306,* block(s). One such example is the LZ4 frame format using block
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,307,* dependency.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,309,* @param data the data to fill the window with.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,310,* @throws IllegalStateException if the compressor has already started to accept data
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,312,public void prefill(byte[] data) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,313,if (currentPosition != 0 || lookahead != 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,314,"throw new IllegalStateException(""the compressor has already started to accept data, can't prefill anymore"");"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,317,// don't need more than windowSize for back-references
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,318,"final int len = Math.min(params.getWindowSize(), data.length);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,319,"System.arraycopy(data, data.length - len, window, 0, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,321,if (len >= NUMBER_OF_BYTES_IN_HASH) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,322,initialize();
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,323,final int stop = len - NUMBER_OF_BYTES_IN_HASH + 1;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,324,for (int i = 0; i < stop; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,325,insertString(i);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,327,missedInserts = NUMBER_OF_BYTES_IN_HASH - 1;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,328,} else { // not enough data to hash anything
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,329,missedInserts = len;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,331,blockStart = currentPosition = len;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,397, returns the previous previous head of the hash-chain.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,431,* returns the previous head of the hash-chain.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,493,if (currentLength == maxPossibleLength) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,494,// no need to search any further
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,495,break;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,18,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,20,import java.io.FilterInputStream;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,23,import java.util.zip.Checksum;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,26,* A stream that calculates the checksum of the data read.
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,27,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,28,* @since 1.14
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,30,public class ChecksumCalculatingInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,31,private final InputStream in;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,32,private final Checksum checksum;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,34,"public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,35,this.checksum = checksum;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,36,this.in = in;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,40,* Reads a single byte from the stream
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,41,* @throws IOException if the underlying stream throws or the
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,42,* stream is exhausted and the Checksum doesn't match the expected
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,43,* value
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,45,@Override
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,46,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,47,final int ret = in.read();
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,48,if (ret >= 0) {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,49,checksum.update(ret);
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,51,return ret;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,55,* Reads a byte array from the stream
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,56,* @throws IOException if the underlying stream throws or the
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,57,* stream is exhausted and the Checksum doesn't match the expected
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,58,* value
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,60,@Override
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,61,public int read(final byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,62,"return read(b, 0, b.length);"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,66,* Reads from the stream into a byte array.
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,67,* @throws IOException if the underlying stream throws or the
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,68,* stream is exhausted and the Checksum doesn't match the expected
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,69,* value
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,71,@Override
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,72,"public int read(final byte[] b, final int off, final int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,73,"final int ret = in.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,74,if (ret >= 0) {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,75,"checksum.update(b, off, ret);"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,77,return ret;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,80,@Override
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,81,public long skip(final long n) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,82,"// Can't really skip, we have to hash everything to verify the checksum"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,83,if (read() >= 0) {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,84,return 1;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,86,return 0;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,90,* Returns the calculated checksum.
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,91,* @return the calculated checksum.
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,93,public long getValue() {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,94,return checksum.getValue();
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,30,import java.util.Arrays;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,86,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,87,public void readBlaLz4WithDecompressConcatenated() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,88,"try (InputStream a = new FramedLZ4CompressorInputStream(new FileInputStream(getFile(""bla.tar.lz4"")), true);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,89,"FileInputStream e = new FileInputStream(getFile(""bla.tar""))) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,90,byte[] expected = IOUtils.toByteArray(e);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,91,byte[] actual = IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,92,"assertArrayEquals(expected, actual);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,96,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,97,public void readDoubledBlaLz4WithDecompressConcatenatedTrue() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,98,readDoubledBlaLz4(new StreamWrapper() {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,99,public InputStream wrap(InputStream in) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,100,"return new FramedLZ4CompressorInputStream(in, true);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,102,"}, true);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,105,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,106,public void readDoubledBlaLz4WithDecompressConcatenatedFalse() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,107,readDoubledBlaLz4(new StreamWrapper() {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,108,public InputStream wrap(InputStream in) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,109,"return new FramedLZ4CompressorInputStream(in, false);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,111,"}, false);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,114,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,115,public void readDoubledBlaLz4WithoutExplicitDecompressConcatenated() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,116,readDoubledBlaLz4(new StreamWrapper() {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,117,public InputStream wrap(InputStream in) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,118,return new FramedLZ4CompressorInputStream(in);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,120,"}, false);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,123,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,124,public void readBlaLz4ViaFactoryWithDecompressConcatenated() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,125,try (InputStream a = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,126,".createCompressorInputStream(CompressorStreamFactory.getLZ4Framed(),"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,127,"new FileInputStream(getFile(""bla.tar.lz4"")),"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,128,true);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,129,"FileInputStream e = new FileInputStream(getFile(""bla.tar""))) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,130,byte[] expected = IOUtils.toByteArray(e);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,131,byte[] actual = IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,132,"assertArrayEquals(expected, actual);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,136,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,137,public void readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedTrue() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,138,readDoubledBlaLz4(new StreamWrapper() {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,139,public InputStream wrap(InputStream in) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,140,return new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,141,".createCompressorInputStream(CompressorStreamFactory.getLZ4Framed(), in, true);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,143,"}, true);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,146,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,147,public void readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedFalse() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,148,readDoubledBlaLz4(new StreamWrapper() {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,149,public InputStream wrap(InputStream in) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,150,return new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,151,".createCompressorInputStream(CompressorStreamFactory.getLZ4Framed(), in, false);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,153,"}, false);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,156,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,157,public void readDoubledBlaLz4ViaFactoryWithoutExplicitDecompressConcatenated() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,158,readDoubledBlaLz4(new StreamWrapper() {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,159,public InputStream wrap(InputStream in) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,160,return new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,161,".createCompressorInputStream(CompressorStreamFactory.getLZ4Framed(), in);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,163,"}, false);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,166,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,167,public void readBlaDumpLz4() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,168,"try (InputStream a = new FramedLZ4CompressorInputStream(new FileInputStream(getFile(""bla.dump.lz4"")));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,169,"FileInputStream e = new FileInputStream(getFile(""bla.dump""))) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,170,byte[] expected = IOUtils.toByteArray(e);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,171,byte[] actual = IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,172,"assertArrayEquals(expected, actual);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,375,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,376,public void skipsOverSkippableFrames() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,377,byte[] input = new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,378,"4, 0x22, 0x4d, 0x18, // signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,379,"0x60, // flag - Version 01, block independent, no block checksum, no content size, no content checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,380,"0x70, // block size 4MB"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,381,"115, // checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,382,"13, 0, 0, (byte) 0x80, // 13 bytes length and uncompressed bit set"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,383,"'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', // content"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,384,"0, 0, 0, 0, // empty block marker"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,385,"0x5f, 0x2a, 0x4d, 0x18, // skippable frame signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,386,"2, 0, 0, 0, // skippable frame has length 2"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,387,"1, 2, // content of skippable frame"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,388,"4, 0x22, 0x4d, 0x18, // signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,389,"0x60, // flag - Version 01, block independent, no block checksum, no content size, no content checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,390,"0x70, // block size 4MB"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,391,"115, // checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,392,"1, 0, 0, (byte) 0x80, // 1 bytes length and uncompressed bit set"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,393,"'!', // content"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,394,"0, 0, 0, 0, // empty block marker"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,396,"try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input), true)) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,397,byte[] actual = IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,398,assertArrayEquals(new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,399,"'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', '!'"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,400,"}, actual);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,404,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,405,public void skipsOverTrailingSkippableFrames() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,406,byte[] input = new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,407,"4, 0x22, 0x4d, 0x18, // signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,408,"0x60, // flag - Version 01, block independent, no block checksum, no content size, no content checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,409,"0x70, // block size 4MB"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,410,"115, // checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,411,"13, 0, 0, (byte) 0x80, // 13 bytes length and uncompressed bit set"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,412,"'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', // content"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,413,"0, 0, 0, 0, // empty block marker"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,414,"0x51, 0x2a, 0x4d, 0x18, // skippable frame signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,415,"2, 0, 0, 0, // skippable frame has length 2"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,416,"1, 2, // content of skippable frame"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,418,"try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input), true)) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,419,byte[] actual = IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,420,assertArrayEquals(new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,421,"'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!'"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,422,"}, actual);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,426,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,427,public void rejectsSkippableFrameFollowedByJunk() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,428,byte[] input = new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,429,"4, 0x22, 0x4d, 0x18, // signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,430,"0x60, // flag - Version 01, block independent, no block checksum, no content size, no content checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,431,"0x70, // block size 4MB"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,432,"115, // checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,433,"13, 0, 0, (byte) 0x80, // 13 bytes length and uncompressed bit set"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,434,"'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', // content"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,435,"0, 0, 0, 0, // empty block marker"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,436,"0x50, 0x2a, 0x4d, 0x18, // skippable frame signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,437,"2, 0, 0, 0, // skippable frame has length 2"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,438,"1, 2, // content of skippable frame"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,439,"1, 0x22, 0x4d, 0x18, // bad signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,441,try {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,442,"try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input), true)) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,443,IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,444,"fail(""expected exception"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,446,} catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,447,"assertThat(ex.getMessage(), containsString(""garbage""));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,451,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,452,public void rejectsSkippableFrameFollowedByTooFewBytes() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,453,byte[] input = new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,454,"4, 0x22, 0x4d, 0x18, // signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,455,"0x60, // flag - Version 01, block independent, no block checksum, no content size, no content checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,456,"0x70, // block size 4MB"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,457,"115, // checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,458,"13, 0, 0, (byte) 0x80, // 13 bytes length and uncompressed bit set"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,459,"'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', // content"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,460,"0, 0, 0, 0, // empty block marker"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,461,"0x52, 0x2a, 0x4d, 0x18, // skippable frame signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,462,"2, 0, 0, 0, // skippable frame has length 2"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,463,"1, 2, // content of skippable frame"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,464,"4, // too short for signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,466,try {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,467,"try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input), true)) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,468,IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,469,"fail(""expected exception"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,471,} catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,472,"assertThat(ex.getMessage(), containsString(""garbage""));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,476,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,477,public void rejectsSkippableFrameWithPrematureEnd() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,478,byte[] input = new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,479,"4, 0x22, 0x4d, 0x18, // signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,480,"0x60, // flag - Version 01, block independent, no block checksum, no content size, no content checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,481,"0x70, // block size 4MB"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,482,"115, // checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,483,"13, 0, 0, (byte) 0x80, // 13 bytes length and uncompressed bit set"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,484,"'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', // content"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,485,"0, 0, 0, 0, // empty block marker"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,486,"0x50, 0x2a, 0x4d, 0x18, // skippable frame signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,487,"2, 0, 0, 0, // skippable frame has length 2"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,488,"1, // content of skippable frame (should be two bytes)"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,490,try {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,491,"try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input), true)) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,492,IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,493,"fail(""expected exception"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,495,} catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,496,"assertThat(ex.getMessage(), containsString(""Premature end of stream while skipping frame""));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,500,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,501,public void rejectsSkippableFrameWithPrematureEndInLengthBytes() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,502,byte[] input = new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,503,"4, 0x22, 0x4d, 0x18, // signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,504,"0x60, // flag - Version 01, block independent, no block checksum, no content size, no content checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,505,"0x70, // block size 4MB"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,506,"115, // checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,507,"13, 0, 0, (byte) 0x80, // 13 bytes length and uncompressed bit set"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,508,"'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', // content"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,509,"0, 0, 0, 0, // empty block marker"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,510,"0x55, 0x2a, 0x4d, 0x18, // skippable frame signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,511,"2, 0, 0, // should be four byte length"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,513,try {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,514,"try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input), true)) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,515,IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,516,"fail(""expected exception"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,518,} catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,519,"assertThat(ex.getMessage(), containsString(""premature end of data""));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,523,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,524,public void rejectsSkippableFrameWithBadSignatureTrailer() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,525,byte[] input = new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,526,"4, 0x22, 0x4d, 0x18, // signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,527,"0x60, // flag - Version 01, block independent, no block checksum, no content size, no content checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,528,"0x70, // block size 4MB"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,529,"115, // checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,530,"13, 0, 0, (byte) 0x80, // 13 bytes length and uncompressed bit set"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,531,"'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', // content"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,532,"0, 0, 0, 0, // empty block marker"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,533,"0x51, 0x2a, 0x4d, 0x17, // broken skippable frame signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,535,try {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,536,"try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input), true)) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,537,IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,538,"fail(""expected exception"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,540,} catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,541,"assertThat(ex.getMessage(), containsString(""garbage""));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,545,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,546,public void rejectsSkippableFrameWithBadSignaturePrefix() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,547,byte[] input = new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,548,"4, 0x22, 0x4d, 0x18, // signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,549,"0x60, // flag - Version 01, block independent, no block checksum, no content size, no content checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,550,"0x70, // block size 4MB"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,551,"115, // checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,552,"13, 0, 0, (byte) 0x80, // 13 bytes length and uncompressed bit set"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,553,"'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', // content"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,554,"0, 0, 0, 0, // empty block marker"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,555,"0x60, 0x2a, 0x4d, 0x18, // broken skippable frame signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,557,try {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,558,"try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input), true)) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,559,IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,560,"fail(""expected exception"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,562,} catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,563,"assertThat(ex.getMessage(), containsString(""garbage""));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,567,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,568,public void rejectsTrailingBytesAfterValidFrame() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,569,byte[] input = new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,570,"4, 0x22, 0x4d, 0x18, // signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,571,"0x60, // flag - Version 01, block independent, no block checksum, no content size, no content checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,572,"0x70, // block size 4MB"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,573,"115, // checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,574,"13, 0, 0, (byte) 0x80, // 13 bytes length and uncompressed bit set"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,575,"'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', // content"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,576,"0, 0, 0, 0, // empty block marker"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,577,"0x56, 0x2a, 0x4d, // too short for any signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,579,try {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,580,"try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input), true)) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,581,IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,582,"fail(""expected exception"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,584,} catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,585,"assertThat(ex.getMessage(), containsString(""garbage""));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,589,interface StreamWrapper {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,590,InputStream wrap(InputStream in) throws Exception;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,593,"private void readDoubledBlaLz4(StreamWrapper wrapper, boolean expectDuplicateOutput) throws Exception {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,594,byte[] singleInput;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,595,"try (InputStream i = new FileInputStream(getFile(""bla.tar.lz4""))) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,596,singleInput = IOUtils.toByteArray(i);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,598,byte[] input = duplicate(singleInput);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,599,try (InputStream a = wrapper.wrap(new ByteArrayInputStream(input));
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,600,"FileInputStream e = new FileInputStream(getFile(""bla.tar""))) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,601,byte[] expected = IOUtils.toByteArray(e);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,602,byte[] actual = IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,603,"assertArrayEquals(expectDuplicateOutput ? duplicate(expected) : expected, actual);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,607,private static byte[] duplicate(byte[] from) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,608,"byte[] to = Arrays.copyOf(from, 2 * from.length);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,609,"System.arraycopy(from, 0, to, from.length, from.length);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,610,return to;
False,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,47,"ew Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4, false, false) },"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,47,"new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4,"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,48,"false, false, false) },"
False,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,49,"ew Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4, true, true) },"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,50,"new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4,"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,51,"true, true, false) },"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,52,"// small blocksize (so we get enough blocks) and enabled block dependency, otherwise defaults"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,53,"new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K64,"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java,54,"true, false, true) },"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,19,package org.apache.commons.compress.compressors.lz77support;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,21,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,22,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,23,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,27,import static org.junit.Assert.assertArrayEquals;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,28,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,30,public class AbstractLZ77CompressorInputStreamTest {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,32,private static class TestStream extends AbstractLZ77CompressorInputStream {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,33,private boolean literal;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,34,TestStream(InputStream in) throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,35,"super(in, 1024);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,37,@Override
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,38,"public int read(final byte[] b, final int off, final int len) throws IOException {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,39,if (literal) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,40,"return readLiteral(b, off, len);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,42,"return readBackReference(b, off, len);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,44,void literal(int len) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,45,startLiteral(len);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,46,literal = true;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,50,@Test(expected = IllegalStateException.class)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,51,public void cantPrefillAfterDataHasBeenRead() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,52,"byte[] data = new byte[] { 1, 2, 3, 4 };"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,53,try (TestStream s = new TestStream(new ByteArrayInputStream(data))) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,54,s.literal(3);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,55,"assertEquals(1, s.read());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,56,"s.prefill(new byte[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,60,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,61,public void prefillCanBeUsedForBackReferences() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,62,"byte[] data = new byte[] { 1, 2, 3, 4 };"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,63,try (TestStream s = new TestStream(new ByteArrayInputStream(new byte[0]))) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,64,s.prefill(data);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,65,"s.startBackReference(2, 4);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,66,byte[] r = new byte[4];
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,67,"assertEquals(4, s.read(r));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,68,"assertArrayEquals(new byte[] { 3, 4, 3, 4 }, r);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,72,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,73,public void ifPrefillExceedsWindowSizeTheLastBytesAreUsed() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,74,byte[] data = new byte[2048];
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,75,data[2046] = 3;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,76,data[2047] = 4;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,77,try (TestStream s = new TestStream(new ByteArrayInputStream(new byte[0]))) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,78,s.prefill(data);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,79,"s.startBackReference(2, 4);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,80,byte[] r = new byte[4];
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,81,"assertEquals(4, s.read(r));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java,82,"assertArrayEquals(new byte[] { 3, 4, 3, 4 }, r);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,199,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,200,public void blaExampleWithPrefill() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,201,final List<LZ77Compressor.Block> blocks = new ArrayList<>();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,202,"LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,203,@Override
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,204,public void accept(LZ77Compressor.Block block) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,205,//System.err.println(block);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,206,if (block instanceof LZ77Compressor.LiteralBlock) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,207,// replace with a real copy of data so tests
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,208,// can see the results as they've been when
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,209,// the callback has been called
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,210,LZ77Compressor.LiteralBlock b = (LZ77Compressor.LiteralBlock) block;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,211,int len = b.getLength();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,212,block = new LZ77Compressor.LiteralBlock(
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,213,"Arrays.copyOfRange(b.getData(), b.getOffset(), b.getOffset() + len),"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,214,"0, len);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,216,blocks.add(block);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,219,"c.prefill(Arrays.copyOfRange(BLA, 0, 6));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,220,"c.compress(Arrays.copyOfRange(BLA, 6, BLA.length));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,221,c.finish();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,222,"assertSize(3, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,223,"assertBackReference(5, 18, blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,224,"assertLiteralBlock(""!"", blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,227,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,228,public void blaExampleWithShortPrefill() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,229,final List<LZ77Compressor.Block> blocks = new ArrayList<>();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,230,"LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,231,@Override
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,232,public void accept(LZ77Compressor.Block block) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,233,//System.err.println(block);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,234,if (block instanceof LZ77Compressor.LiteralBlock) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,235,// replace with a real copy of data so tests
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,236,// can see the results as they've been when
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,237,// the callback has been called
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,238,LZ77Compressor.LiteralBlock b = (LZ77Compressor.LiteralBlock) block;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,239,int len = b.getLength();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,240,block = new LZ77Compressor.LiteralBlock(
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,241,"Arrays.copyOfRange(b.getData(), b.getOffset(), b.getOffset() + len),"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,242,"0, len);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,244,blocks.add(block);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,247,"c.prefill(Arrays.copyOfRange(BLA, 0, 2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,248,"c.compress(Arrays.copyOfRange(BLA, 2, BLA.length));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,249,c.finish();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,250,"assertSize(4, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,251,"assertLiteralBlock(""ah b"", blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,252,"assertBackReference(5, 18, blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,253,"assertLiteralBlock(""!"", blocks.get(2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,256,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,257,public void blaExampleWithPrefillBiggerThanWindowSize() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,258,final List<LZ77Compressor.Block> blocks = new ArrayList<>();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,259,"LZ77Compressor c = new LZ77Compressor(new Parameters(4), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,260,@Override
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,261,public void accept(LZ77Compressor.Block block) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,262,//System.err.println(block);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,263,if (block instanceof LZ77Compressor.LiteralBlock) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,264,// replace with a real copy of data so tests
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,265,// can see the results as they've been when
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,266,// the callback has been called
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,267,LZ77Compressor.LiteralBlock b = (LZ77Compressor.LiteralBlock) block;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,268,int len = b.getLength();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,269,block = new LZ77Compressor.LiteralBlock(
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,270,"Arrays.copyOfRange(b.getData(), b.getOffset(), b.getOffset() + len),"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,271,"0, len);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,273,blocks.add(block);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,276,"c.prefill(Arrays.copyOfRange(BLA, 0, 6));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,277,"c.compress(Arrays.copyOfRange(BLA, 6, BLA.length));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,278,c.finish();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,279,"assertSize(6, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,280,"assertLiteralBlock(""lah "", blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,281,"assertLiteralBlock(""blah"", blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,282,"assertLiteralBlock("" bla"", blocks.get(2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,283,"assertLiteralBlock(""h bl"", blocks.get(3));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,284,"assertLiteralBlock(""ah!"", blocks.get(4));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,287,@Test(expected = IllegalStateException.class)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,288,public void cantPrefillTwice() {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,289,"LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,290,@Override
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,291,public void accept(LZ77Compressor.Block block) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,294,"c.prefill(Arrays.copyOfRange(BLA, 0, 2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,295,"c.prefill(Arrays.copyOfRange(BLA, 2, 4));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,298,@Test(expected = IllegalStateException.class)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,299,public void cantPrefillAfterCompress() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,300,"LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,301,@Override
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,302,public void accept(LZ77Compressor.Block block) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,305,"c.compress(Arrays.copyOfRange(BLA, 0, 2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,306,"c.prefill(Arrays.copyOfRange(BLA, 2, 4));"

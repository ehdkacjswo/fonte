is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,289,eturn num == -1 ? -1 : ((int) oneBuf[0]) & BYTE_MASK;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,289,return num == -1 ? -1 : oneBuf[0] & BYTE_MASK;
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,68,"eturn ""0x"" + Integer.toHexString(0xffff & (int) unicode)"
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,69," ""->0x"" + Integer.toHexString(0xff & (int) code);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,68,"return ""0x"" + Integer.toHexString(0xffff & unicode)"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,69,"+ ""->0x"" + Integer.toHexString(0xff & code);"
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,117,eturn this.highChars[128 + (int) b];
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,117,return this.highChars[128 + b];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1044, = ((int) block[zptr[unLo] + d + 1]) - med;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1044,n = block[zptr[unLo] + d + 1] - med;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1063, = ((int) block[zptr[unHi] + d + 1]) - med;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1063,n = block[zptr[unHi] + d + 1] - med;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStreamTest.java,69,"ssertEquals((long) Integer.MAX_VALUE,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStreamTest.java,69,"assertEquals(Integer.MAX_VALUE,"

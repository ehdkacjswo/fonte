is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,72,f (length > 8) {
False,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,73,"hrow new IllegalArgumentException(""can't read more than eight bytes into a long value"");"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,72,checkReadLength(length);
False,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,91,"eturn fromLittleEndian(new InputStreamByteSupplier(in), length);"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,89,// somewhat duplicates the ByteSupplier version in order to save othe creation of a wrapper object
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,90,checkReadLength(length);
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,91,long l = 0;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,92,for (int i = 0; i < length; i++) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,93,int b = in.read();
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,94,if (b == -1) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,95,"throw new IOException(""premature end of data"");"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,97,l |= (b << (i * 8));
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,99,return l;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,105,* <p>Typically used by our InputStreams that need to count the
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,106,* bytes read as well.</p>
False,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,103,f (length > 8) {
False,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,104,"hrow new IllegalArgumentException(""can't read more than eight bytes into a long value"");"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,115,checkReadLength(length);
False,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,127,"oLittleEndian(new OutputStreamByteConsumer(out), value, length);"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,137,// somewhat duplicates the ByteConsumer version in order to save othe creation of a wrapper object
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,138,long num = value;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,139,for (int i = 0; i < length; i++) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,140,out.write((int) (num & 0xff));
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,141,num >>= 8;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,192,private static final void checkReadLength(int length) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,193,if (length > 8) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,194,"throw new IllegalArgumentException(""can't read more than eight bytes into a long value"");"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,9,*   http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,19,package org.apache.commons.compress.utils;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,21,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,22,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,23,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,27,import static org.apache.commons.compress.utils.ByteUtils.*;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,28,import static org.junit.Assert.assertArrayEquals;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,29,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,31,public class ByteUtilsTest {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,33,@Test
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,34,public void fromLittleEndianFromArrayOneArg() {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,35,"byte[] b = new byte[] { 2, 3, 4 };"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,36,"assertEquals(2 + 3 * 256 + 4 * 256 * 256, fromLittleEndian(b));"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,39,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,40,public void fromLittleEndianFromArrayOneArgThrowsForLengthTooBig() {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,41,"fromLittleEndian(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,44,@Test
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,45,public void fromLittleEndianFromArray() {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,46,"byte[] b = new byte[] { 1, 2, 3, 4, 5 };"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,47,"assertEquals(2 + 3 * 256 + 4 * 256 * 256, fromLittleEndian(b, 1, 3));"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,50,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,51,public void fromLittleEndianFromArrayThrowsForLengthTooBig() {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,52,"fromLittleEndian(new byte[0], 0, 9);"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,55,@Test
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,56,public void fromLittleEndianFromStream() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,57,"ByteArrayInputStream bin = new ByteArrayInputStream(new byte[] { 2, 3, 4, 5 });"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,58,"assertEquals(2 + 3 * 256 + 4 * 256 * 256, fromLittleEndian(bin, 3));"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,61,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,62,public void fromLittleEndianFromStreamThrowsForLengthTooBig() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,63,"fromLittleEndian(new ByteArrayInputStream(new byte[0]), 9);"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,66,@Test(expected = IOException.class)
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,67,public void fromLittleEndianFromStreamThrowsForPrematureEnd() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,68,"ByteArrayInputStream bin = new ByteArrayInputStream(new byte[] { 2, 3 });"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,69,"fromLittleEndian(bin, 3);"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,72,@Test
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,73,public void fromLittleEndianFromSupplier() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,74,"ByteArrayInputStream bin = new ByteArrayInputStream(new byte[] { 2, 3, 4, 5 });"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,75,"assertEquals(2 + 3 * 256 + 4 * 256 * 256, fromLittleEndian(new InputStreamByteSupplier(bin), 3));"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,78,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,79,public void fromLittleEndianFromSupplierThrowsForLengthTooBig() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,80,"fromLittleEndian(new InputStreamByteSupplier(new ByteArrayInputStream(new byte[0])), 9);"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,83,@Test(expected = IOException.class)
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,84,public void fromLittleEndianFromSupplierThrowsForPrematureEnd() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,85,"ByteArrayInputStream bin = new ByteArrayInputStream(new byte[] { 2, 3 });"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,86,"fromLittleEndian(new InputStreamByteSupplier(bin), 3);"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,89,@Test
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,90,public void toLittleEndianToStream() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,91,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,92,"toLittleEndian(bos, 2 + 3 * 256 + 4 * 256 * 256, 3);"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,93,bos.close();
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,94,"assertArrayEquals(new byte[] { 2, 3, 4 }, bos.toByteArray());"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,97,@Test
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,98,public void toLittleEndianToConsumer() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,99,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,100,"toLittleEndian(new OutputStreamByteConsumer(bos), 2 + 3 * 256 + 4 * 256 * 256, 3);"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,101,bos.close();
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,102,"assertArrayEquals(new byte[] { 2, 3, 4 }, bos.toByteArray());"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,39,etClearCode(codeSize);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,39,setClearCode(DEFAULT_CODE_SIZE);
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,41,sUsed = new boolean[prefixes.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,41,isUsed = new boolean[getPrefixesLength()];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,45,ableSize = clearCode + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,45,setTableSize(getClearCode() + 1);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,50,int tableSize = getTableSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,54,setTableSize(tableSize);
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,63,f (isUsed[i] && prefixes[i] != -1) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,64,sParent[prefixes[i]] = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,65,if (isUsed[i] && getPrefix(i) != UNUSED_PREFIX) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,66,isParent[getPrefix(i)] = true;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,67,or (int i = clearCode + 1; i < isParent.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,69,for (int i = getClearCode() + 1; i < isParent.length; i++) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,70,refixes[i] = -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,72,"setPrefix(i, UNUSED_PREFIX);"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,92, else if (code == clearCode) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,94,} else if (code == getClearCode()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,97,f (codeSize < MAX_CODE_SIZE) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,98,odeSize++;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,99,if (getCodeSize() < MAX_CODE_SIZE) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,100,incrementCodeSize();
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,104,ableSize = clearCode + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,106,setTableSize(getClearCode() + 1);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1246,nt commentStart = extraStart + commentLen;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1246,int commentStart = extraStart + extra.length;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,37,protected static final int DEFAULT_CODE_SIZE = 9;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,38,protected static final int UNUSED_PREFIX = -1;
False,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,40,rotected int clearCode = -1;
False,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,41,rotected int codeSize = 9;
False,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,42,rotected byte previousCodeFirstChar;
False,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,43,rotected int previousCode = -1;
False,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,44,rotected int tableSize = 0;
False,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,45,rotected int[] prefixes;
False,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,46,rotected byte[] characters;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,43,private int clearCode = -1;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,44,private int codeSize = DEFAULT_CODE_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,45,private byte previousCodeFirstChar;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,46,private int previousCode = UNUSED_PREFIX;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,47,private int tableSize;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,48,private int[] prefixes;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,49,private byte[] characters;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,185,protected int getCodeSize() {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,186,return codeSize;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,189,protected void resetCodeSize() {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,190,this.codeSize = DEFAULT_CODE_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,193,protected void incrementCodeSize() {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,194,codeSize++;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,197,protected int getPreviousCode() {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,198,return previousCode;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,201,protected byte getPreviousCodeFirstChar() {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,202,return previousCodeFirstChar;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,205,protected void resetPreviousCode() {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,206,this.previousCode = -1;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,209,protected int getPrefix(int offset) {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,210,return prefixes[offset];
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,213,"protected void setPrefix(int offset, int value) {"
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,214,prefixes[offset] = value;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,217,protected int getPrefixesLength() {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,218,return prefixes.length;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,221,protected int getClearCode() {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,222,return clearCode;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,225,protected int getTableSize() {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,226,return tableSize;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,229,protected void setTableSize(int newSize) {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,230,tableSize = newSize;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,233,"protected void setCharacter(int offset, byte value) {"
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,234,characters[offset] = value;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,237,protected byte getCharacter(int offset) {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,238,return characters[offset];
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,52,etClearCode(codeSize);
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,52,setClearCode(DEFAULT_CODE_SIZE);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,59,ableSize = 1 << 8;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,60,f (blockMode) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,61,ableSize++;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,59,setTableSize((1 << 8) + (blockMode ? 1 : 0));
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,103,inal int maxTableSize = 1 << codeSize;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,100,final int maxTableSize = 1 << getCodeSize();
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,105,f (tableSize == maxTableSize && codeSize < maxCodeSize) {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,102,if (getTableSize() == maxTableSize && getCodeSize() < maxCodeSize) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,107,odeSize++;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,104,incrementCodeSize();
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,135, else if (blockMode && code == clearCode) {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,132,} else if (blockMode && code == getClearCode()) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,138,odeSize = 9;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,139,reviousCode = -1;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,135,resetCodeSize();
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,136,resetPreviousCode();
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,143,f (code == tableSize) {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,140,if (code == getTableSize()) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,146, else if (code > tableSize) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,147,"hrow new IOException(String.format(""Invalid %d bit code 0x%x"", codeSize, code));"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,143,} else if (code > getTableSize()) {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,144,"throw new IOException(String.format(""Invalid %d bit code 0x%x"", getCodeSize(), code));"

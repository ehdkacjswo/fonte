is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,26,** Serial */
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,26,/** Serial */
False,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,37,uper(message);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,37,super(message);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,48,"ublic ArchiveException(String message, Exception cause) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,49,uper(message);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,50,his.initCause(cause);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,48,"public ArchiveException(String message, Exception cause) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,49,super(message);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,50,this.initCause(cause);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,98,"hrow new IllegalArgumentException(""InputStream must not be null."");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,98,"throw new IllegalArgumentException(""InputStream must not be null."");"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,136,"hrow new IllegalArgumentException(""OutputStream must not be null."");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,136,"throw new IllegalArgumentException(""OutputStream must not be null."");"
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,36,rivate Attributes manifestAttributes = null;
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,37,rivate Certificate[] certificates = null;
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,39,ublic JarArchiveEntry(ZipEntry entry) throws ZipException {
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,40,uper(entry);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,36,private Attributes manifestAttributes = null;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,37,private Certificate[] certificates = null;
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,43,ublic JarArchiveEntry(String name) {
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,44,uper(name);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,39,public JarArchiveEntry(ZipEntry entry) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,40,super(entry);
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,47,ublic JarArchiveEntry(ZipArchiveEntry entry) throws ZipException {
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,48,uper(entry);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,43,public JarArchiveEntry(String name) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,44,super(name);
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,51,ublic JarArchiveEntry(JarEntry entry) throws ZipException {
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,52,uper(entry);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,47,public JarArchiveEntry(ZipArchiveEntry entry) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,48,super(entry);
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,56,ublic Attributes getManifestAttributes() {
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,57,eturn manifestAttributes;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,51,public JarArchiveEntry(JarEntry entry) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,52,super(entry);
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,60,ublic Certificate[] getCertificates() {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,56,public Attributes getManifestAttributes() {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,57,return manifestAttributes;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,60,public Certificate[] getCertificates() {
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,31,rivate final String targetFile; // entry name to delete
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,32,rivate final ArchiveEntry entry; // new entry to add
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,33,rivate final InputStream input; // source for new entry
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,34,rivate final boolean replaceMode; // change should replaceMode existing entries
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,36,/ Type of change
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,37,rivate final int type;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,38,/ Possible type values
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,39,tatic final int TYPE_DELETE = 1;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,40,tatic final int TYPE_ADD = 2;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,41,tatic final int TYPE_MOVE = 3; // NOT USED
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,42,tatic final int TYPE_DELETE_DIR = 4;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,45, Constructor. Takes the filename of the file to be deleted
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,46, from the stream as argument.
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,47, @param pFilename the filename of the file to delete
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,49,"hange(final String pFilename, int type) {"
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,50,f(pFilename == null) {
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,51,hrow new NullPointerException();
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,53,his.targetFile = pFilename;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,54,his.type = type;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,55,his.input = null;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,56,his.entry = null;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,57,his.replaceMode = true;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,61, Construct a change which adds an entry.
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,63, @param pEntry the entry details
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,64, @param pInput the InputStream for the entry data
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,66,"hange(final ArchiveEntry pEntry, final InputStream pInput, boolean replace) {"
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,67,f(pEntry == null || pInput == null) {
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,68,hrow new NullPointerException();
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,70,his.entry = pEntry;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,71,his.input = pInput;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,72,ype = TYPE_ADD;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,73,argetFile = null;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,74,his.replaceMode = replace;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,77,rchiveEntry getEntry() {
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,78,eturn entry;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,31,private final String targetFile; // entry name to delete
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,32,private final ArchiveEntry entry; // new entry to add
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,33,private final InputStream input; // source for new entry
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,34,private final boolean replaceMode; // change should replaceMode existing entries
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,81,nputStream getInput() {
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,82,eturn input;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,36,// Type of change
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,37,private final int type;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,38,// Possible type values
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,39,static final int TYPE_DELETE = 1;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,40,static final int TYPE_ADD = 2;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,41,static final int TYPE_MOVE = 3; // NOT USED
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,42,static final int TYPE_DELETE_DIR = 4;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,85,tring targetFile() {
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,86,eturn targetFile;
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,89,nt type() {
False,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,90,eturn type;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,45,* Constructor. Takes the filename of the file to be deleted
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,46,* from the stream as argument.
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,47,* @param pFilename the filename of the file to delete
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,49,"Change(final String pFilename, int type) {"
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,50,if(pFilename == null) {
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,51,throw new NullPointerException();
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,53,this.targetFile = pFilename;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,54,this.type = type;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,55,this.input = null;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,56,this.entry = null;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,57,this.replaceMode = true;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,61,* Construct a change which adds an entry.
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,63,* @param pEntry the entry details
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,64,* @param pInput the InputStream for the entry data
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,66,"Change(final ArchiveEntry pEntry, final InputStream pInput, boolean replace) {"
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,67,if(pEntry == null || pInput == null) {
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,68,throw new NullPointerException();
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,70,this.entry = pEntry;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,71,this.input = pInput;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,72,type = TYPE_ADD;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,73,targetFile = null;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,74,this.replaceMode = replace;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,77,ArchiveEntry getEntry() {
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,78,return entry;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,81,InputStream getInput() {
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,82,return input;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,85,String targetFile() {
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,86,return targetFile;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,89,int type() {
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,90,return type;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,28,"x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,29,"x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,30,"x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,31,"x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,32,"x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,33,"x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,34,"x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,35,"x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,36,"x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,37,"x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,38,"xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,39,"xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,40,"xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,41,"xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,42,"xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,43,"xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,44,"x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,45,"x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,46,"x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,47,"x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,48,"x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,49,"x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,50,"x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,51,"x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,52,"xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,53,"xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,54,"x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,55,"x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,56,"xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,57,"xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,58,"xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,59,"xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,60,"x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,61,"x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,62,"x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,63,"x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,64,"x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,65,"x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,66,"x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,67,"x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,68,"xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,69,"xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,70,"xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,71,"xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,72,"xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,73,"xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,74,"x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,75,"x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,76,"x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,77,"x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,78,"x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,79,"x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,80,"x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,81,"x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,82,"x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,83,"x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,84,"xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,85,"xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,86,"xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,87,"xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,88,"x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,89,"x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,90,"xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,91,"xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,28,"0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,29,"0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,30,"0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,31,"0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,32,"0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,33,"0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,34,"0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,35,"0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,36,"0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,37,"0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,38,"0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,39,"0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,40,"0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,41,"0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,42,"0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,43,"0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,44,"0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,45,"0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,46,"0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,47,"0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,48,"0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,49,"0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,50,"0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,51,"0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,52,"0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,53,"0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,54,"0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,55,"0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,56,"0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,57,"0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,58,"0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,59,"0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,60,"0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,61,"0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,62,"0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,63,"0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,64,"0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,65,"0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,66,"0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,67,"0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,68,"0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,69,"0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,70,"0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,71,"0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,72,"0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,73,"0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,74,"0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,75,"0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,76,"0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,77,"0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,78,"0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,79,"0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,80,"0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,81,"0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,82,"0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,83,"0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,84,"0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,85,"0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,86,"0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,87,"0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,88,"0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,89,"0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,90,"0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,91,"0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,94,RC() {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,95,nitialiseCRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,94,CRC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,95,initialiseCRC();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,98,oid initialiseCRC() {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,99,lobalCrc = 0xffffffff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,98,void initialiseCRC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,99,globalCrc = 0xffffffff;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,102,nt getFinalCRC() {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,103,eturn ~globalCrc;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,102,int getFinalCRC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,103,return ~globalCrc;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,106,nt getGlobalCRC() {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,107,eturn globalCrc;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,106,int getGlobalCRC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,107,return globalCrc;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,110,oid setGlobalCRC(int newCrc) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,111,lobalCrc = newCrc;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,110,void setGlobalCRC(int newCrc) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,111,globalCrc = newCrc;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,114,oid updateCRC(int inCh) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,115,nt temp = (globalCrc >> 24) ^ inCh;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,116,f (temp < 0) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,117,emp = 256 + temp;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,119,lobalCrc = (globalCrc << 8) ^ CRC.crc32Table[temp];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,114,void updateCRC(int inCh) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,115,int temp = (globalCrc >> 24) ^ inCh;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,116,if (temp < 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,117,temp = 256 + temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,119,globalCrc = (globalCrc << 8) ^ CRC.crc32Table[temp];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,122,"oid updateCRC(int inCh, int repeat) {"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,123,nt globalCrcShadow = this.globalCrc;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,124,hile (repeat-- > 0) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,125,nt temp = (globalCrcShadow >> 24) ^ inCh;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,126,lobalCrcShadow = (globalCrcShadow << 8) ^ crc32Table[(temp >= 0)
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,127, temp
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,128, (temp + 256)];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,130,his.globalCrc = globalCrcShadow;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,122,"void updateCRC(int inCh, int repeat) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,123,int globalCrcShadow = this.globalCrc;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,124,while (repeat-- > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,125,int temp = (globalCrcShadow >> 24) ^ inCh;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,126,globalCrcShadow = (globalCrcShadow << 8) ^ crc32Table[(temp >= 0)
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,127,? temp
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,128,: (temp + 256)];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,130,this.globalCrc = globalCrcShadow;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,133,rivate int globalCrc;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,133,private int globalCrc;
False,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,32,rivate IOUtils(){
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,32,private IOUtils(){
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,8,"rivate static final String ARCHIVER_NULL_MESSAGE = ""Archivername must not be null."";"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,10,"rivate static final String INPUTSTREAM_NULL_MESSAGE = ""InputStream must not be null."";"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,12,"rivate static final String OUTPUTSTREAM_NULL_MESSAGE = ""OutputStream must not be null."";"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,16,ublic void testMessageWhenArchiverNameIsNull_1(){
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,17,ry{
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,18,"ew ArchiveStreamFactory().createArchiveInputStream(null, System.in);"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,19,"ail(""Should raise an IllegalArgumentException."");"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,20,catch (IllegalArgumentException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,21,"ssert.assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,22, catch (ArchiveException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,23,"ail(""ArchiveException not expected"");"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,27,ublic void testMessageWhenInputStreamIsNull(){
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,28,ry{
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,29,"ew ArchiveStreamFactory().createArchiveInputStream(""zip"", null);"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,30,"ail(""Should raise an IllegalArgumentException."");"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,31,catch (IllegalArgumentException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,32,"ssert.assertEquals(INPUTSTREAM_NULL_MESSAGE, e.getMessage());"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,33, catch (ArchiveException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,34,"ail(""ArchiveException not expected"");"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,38,ublic void testMessageWhenArchiverNameIsNull_2(){
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,39,ry{
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,40,"ew ArchiveStreamFactory().createArchiveOutputStream(null, System.out);"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,41,"ail(""Should raise an IllegalArgumentException."");"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,42, catch (IllegalArgumentException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,43,"ssert.assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,44, catch (ArchiveException e){
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,45,"ail(""ArchiveException not expected"");"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,49,ublic void testMessageWhenOutputStreamIsNull(){
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,50,ry{
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,51,"ew ArchiveStreamFactory().createArchiveOutputStream(""zip"", null);"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,52,"ail(""Should raise an IllegalArgumentException."");"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,53, catch (IllegalArgumentException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,54,"ssert.assertEquals(OUTPUTSTREAM_NULL_MESSAGE, e.getMessage());"
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,55, catch (ArchiveException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,56,"ail(""ArchiveException not expected"");"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,8,"private static final String ARCHIVER_NULL_MESSAGE = ""Archivername must not be null."";"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,10,"private static final String INPUTSTREAM_NULL_MESSAGE = ""InputStream must not be null."";"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,12,"private static final String OUTPUTSTREAM_NULL_MESSAGE = ""OutputStream must not be null."";"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,15,public void testMessageWhenArchiverNameIsNull_1(){
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,16,try{
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,17,"new ArchiveStreamFactory().createArchiveInputStream(null, System.in);"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,18,"fail(""Should raise an IllegalArgumentException."");"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,19,}catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,20,"Assert.assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,21,} catch (ArchiveException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,22,"fail(""ArchiveException not expected"");"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,26,public void testMessageWhenInputStreamIsNull(){
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,27,try{
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,28,"new ArchiveStreamFactory().createArchiveInputStream(""zip"", null);"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,29,"fail(""Should raise an IllegalArgumentException."");"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,30,}catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,31,"Assert.assertEquals(INPUTSTREAM_NULL_MESSAGE, e.getMessage());"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,32,} catch (ArchiveException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,33,"fail(""ArchiveException not expected"");"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,37,public void testMessageWhenArchiverNameIsNull_2(){
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,38,try{
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,39,"new ArchiveStreamFactory().createArchiveOutputStream(null, System.out);"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,40,"fail(""Should raise an IllegalArgumentException."");"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,41,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,42,"Assert.assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,43,} catch (ArchiveException e){
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,44,"fail(""ArchiveException not expected"");"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,48,public void testMessageWhenOutputStreamIsNull(){
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,49,try{
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,50,"new ArchiveStreamFactory().createArchiveOutputStream(""zip"", null);"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,51,"fail(""Should raise an IllegalArgumentException."");"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,52,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,53,"Assert.assertEquals(OUTPUTSTREAM_NULL_MESSAGE, e.getMessage());"
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,54,} catch (ArchiveException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,55,"fail(""ArchiveException not expected"");"
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,33,ublic void testJarArchiveCreation() throws Exception {
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,34,"inal File output = new File(dir, ""bla.jar"");"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,33,public void testJarArchiveCreation() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,34,"final File output = new File(dir, ""bla.jar"");"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,36,"final File file1 = getFile(""test1.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,37,"final File file2 = getFile(""test2.xml"");"
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,36,"inal File file1 = getFile(""test1.xml"");"
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,37,"inal File file2 = getFile(""test2.xml"");"
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,55,ublic void testJarUnarchive() throws Exception {
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,56,"inal File input = getFile(""bla.jar"");"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,55,public void testJarUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,56,"final File input = getFile(""bla.jar"");"
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,85,ublic void testJarUnarchiveAll() throws Exception {
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,86,"inal File input = getFile(""bla.jar"");"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,85,public void testJarUnarchiveAll() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,86,"final File input = getFile(""bla.jar"");"
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,91,hile (entry != null) {
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,92,"ile archiveEntry = new File(dir, entry.getName());"
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,93,rchiveEntry.getParentFile().mkdirs();
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,94,f(entry.isDirectory()){
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,95,rchiveEntry.mkdir();
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,96,ntry = in.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,97,ontinue;
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,99,utputStream out = new FileOutputStream(archiveEntry);
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,100,"OUtils.copy(in, out);"
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,101,ut.close();
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,102,ntry = in.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,105,n.close();
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,106,s.close();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,91,while (entry != null) {
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,92,"File archiveEntry = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,93,archiveEntry.getParentFile().mkdirs();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,94,if(entry.isDirectory()){
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,95,archiveEntry.mkdir();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,96,entry = in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,97,continue;
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,99,OutputStream out = new FileOutputStream(archiveEntry);
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,100,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,101,out.close();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,102,entry = in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,105,in.close();
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,106,is.close();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,36,"inal File output = new File(dir, ""bla.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,37,"inal File file1 = getFile(""test1.xml"");"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,38,inal OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,36,"final File output = new File(dir, ""bla.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,37,"final File file1 = getFile(""test1.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,38,final OutputStream out = new FileOutputStream(output);
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,55,"tring name = ""testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml"";"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,56,yte[] bytes = name.getBytes();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,57,"ssertEquals(bytes.length, 99);"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,59,"inal File output = new File(dir, ""bla.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,60,"inal File file1 = getFile(""test1.xml"");"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,61,inal OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,55,"String name = ""testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml"";"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,56,byte[] bytes = name.getBytes();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,57,"assertEquals(bytes.length, 99);"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,59,"final File output = new File(dir, ""bla.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,60,"final File file1 = getFile(""test1.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,61,final OutputStream out = new FileOutputStream(output);
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,82,"tring toLongName = ""testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml"";"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,83,"inal File output2 = new File(dir, ""bla.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,84,inal OutputStream out2 = new FileOutputStream(output2);
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,85,"s2 = new ArchiveStreamFactory().createArchiveOutputStream(""tar"", out2);"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,86,inal TarArchiveEntry entry2 = new TarArchiveEntry(toLongName);
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,87,ntry2.setModTime(0);
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,88,ntry2.setSize(file1.length());
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,89,ntry2.setUserId(0);
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,90,ntry2.setGroupId(0);
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,91,"ntry2.setUserName(""avalon"");"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,92,"ntry2.setGroupName(""excalibur"");"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,93,ntry2.setMode(0100000);
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,94,s2.putArchiveEntry(entry);
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,95,"OUtils.copy(new FileInputStream(file1), os2);"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,82,"String toLongName = ""testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml"";"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,83,"final File output2 = new File(dir, ""bla.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,84,final OutputStream out2 = new FileOutputStream(output2);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,85,"os2 = new ArchiveStreamFactory().createArchiveOutputStream(""tar"", out2);"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,86,final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,87,entry2.setModTime(0);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,88,entry2.setSize(file1.length());
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,89,entry2.setUserId(0);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,90,entry2.setGroupId(0);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,91,"entry2.setUserName(""avalon"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,92,"entry2.setGroupName(""excalibur"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,93,entry2.setMode(0100000);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,94,os2.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,95,"IOUtils.copy(new FileInputStream(file1), os2);"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,98,ssertTrue(true);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,98,assertTrue(true);
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,100,f (os2 != null){
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,101,s2.close();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,100,if (os2 != null){
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,101,os2.close();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,107,"inal File input = getFile(""bla.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,108,inal InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,107,"final File input = getFile(""bla.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,108,final InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,28,rivate final String[] filenames;
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,29,rivate final String[] content;
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,30,rivate int p;
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,32,ublic MemoryArchiveInputStream( final String[][] pFiles ) {
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,33,ilenames = new String[pFiles.length];
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,34,ontent = new String[pFiles.length];
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,36,or (int i = 0; i < pFiles.length; i++) {
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,37,tring[] nameAndContent = pFiles[i];
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,38,ilenames[i] = nameAndContent[0];
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,39,ontent[i] = nameAndContent[1];
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,41, = 0;
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,44,ublic ArchiveEntry getNextEntry() throws IOException {
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,45,f (p >= filenames.length) {
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,46,eturn null;
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,49,eturn new MemoryArchiveEntry(filenames[p]);
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,52,ublic String readString() {
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,53,eturn content[p++];
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,56,ublic int read() throws IOException {
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,57,eturn 0;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,28,private final String[] filenames;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,29,private final String[] content;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,30,private int p;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,32,public MemoryArchiveInputStream( final String[][] pFiles ) {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,33,filenames = new String[pFiles.length];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,34,content = new String[pFiles.length];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,36,for (int i = 0; i < pFiles.length; i++) {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,37,String[] nameAndContent = pFiles[i];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,38,filenames[i] = nameAndContent[0];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,39,content[i] = nameAndContent[1];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,41,p = 0;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,44,public ArchiveEntry getNextEntry() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,45,if (p >= filenames.length) {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,46,return null;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,49,return new MemoryArchiveEntry(filenames[p]);
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,52,public String readString() {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,53,return content[p++];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,56,public int read() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,57,return 0;
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,29,ublic void testReading() throws IOException {
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,31,inal MemoryArchiveInputStream is = new MemoryArchiveInputStream(new String[][] {
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,32," ""test1"",     ""content1"" },"
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,33," ""test2"",     ""content2"" },"
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,36,inal ArchiveEntry entry1 = is.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,37,ssertNotNull(entry1);
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,38,"ssertEquals(""test1"", entry1.getName());"
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,39,inal String content1 = is.readString();
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,40,"ssertEquals(""content1"", content1);"
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,42,inal ArchiveEntry entry2 = is.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,43,ssertNotNull(entry2);
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,44,"ssertEquals(""test2"", entry2.getName());"
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,45,inal String content2 = is.readString();
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,46,"ssertEquals(""content2"", content2);"
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,48,inal ArchiveEntry entry3 = is.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,49,ssertNull(entry3);
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,29,public void testReading() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,31,final MemoryArchiveInputStream is = new MemoryArchiveInputStream(new String[][] {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,32,"{ ""test1"",     ""content1"" },"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,33,"{ ""test2"",     ""content2"" },"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,36,final ArchiveEntry entry1 = is.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,37,assertNotNull(entry1);
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,38,"assertEquals(""test1"", entry1.getName());"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,39,final String content1 = is.readString();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,40,"assertEquals(""content1"", content1);"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,42,final ArchiveEntry entry2 = is.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,43,assertNotNull(entry2);
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,44,"assertEquals(""test2"", entry2.getName());"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,45,final String content2 = is.readString();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,46,"assertEquals(""content2"", content2);"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,48,final ArchiveEntry entry3 = is.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,49,assertNull(entry3);
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,33,"RL zip = getClass().getResource(""/password-encrypted.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,33,"URL zip = getClass().getResource(""/password-encrypted.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,55,"RL zip = getClass().getResource(""/password-encrypted.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,55,"URL zip = getClass().getResource(""/password-encrypted.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,46,	      (cal.get(Calendar.DAY_OF_MONTH) << 16)
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,46,|         (cal.get(Calendar.DAY_OF_MONTH) << 16)
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,32,ublic void testBzipCreation()  throws Exception {
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,33,ile output = null;
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,34,"inal File input = getFile(""test.txt"");"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,36,"utput = new File(dir, ""test.txt.bz2"");"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,37,inal OutputStream out = new FileOutputStream(output);
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,38,"inal CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(""bzip2"", out);"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,39,ileInputStream in = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,40,"OUtils.copy(in, cos);"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,41,os.close();
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,42,n.close();
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,45,"inal File decompressed = new File(dir, ""decompressed.txt"");"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,47,inal File toDecompress = output;
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,48,inal InputStream is = new FileInputStream(toDecompress);
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,49,inal CompressorInputStream in =
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,50,"ew CompressorStreamFactory().createCompressorInputStream(""bzip2"", is);"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,51,ileOutputStream os = new FileOutputStream(decompressed);
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,52,"OUtils.copy(in, os);"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,53,s.close();
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,54,s.close();
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,57,"ssertEquals(input.length(),decompressed.length());"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,60,ublic void testBzip2Unarchive() throws Exception {
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,61,"inal File input = getFile(""bla.txt.bz2"");"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,62,"inal File output = new File(dir, ""bla.txt"");"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,32,public void testBzipCreation()  throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,33,File output = null;
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,34,"final File input = getFile(""test.txt"");"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,36,"output = new File(dir, ""test.txt.bz2"");"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,37,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,38,"final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(""bzip2"", out);"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,39,FileInputStream in = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,40,"IOUtils.copy(in, cos);"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,41,cos.close();
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,42,in.close();
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,45,"final File decompressed = new File(dir, ""decompressed.txt"");"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,47,final File toDecompress = output;
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,48,final InputStream is = new FileInputStream(toDecompress);
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,49,final CompressorInputStream in =
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,50,"new CompressorStreamFactory().createCompressorInputStream(""bzip2"", is);"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,51,FileOutputStream os = new FileOutputStream(decompressed);
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,52,"IOUtils.copy(in, os);"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,53,is.close();
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,54,os.close();
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,57,"assertEquals(input.length(),decompressed.length());"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,60,public void testBzip2Unarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,61,"final File input = getFile(""bla.txt.bz2"");"
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,62,"final File output = new File(dir, ""bla.txt"");"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,67,s.close();
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,68,s.close();
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,67,is.close();
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,68,os.close();

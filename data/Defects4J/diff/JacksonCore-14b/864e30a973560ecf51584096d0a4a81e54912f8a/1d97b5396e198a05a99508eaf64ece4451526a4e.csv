is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,358,/* UTF-8 related helper method(s)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,363,* @since 2.5
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,365,"protected final int _decodeSurrogate(int surr1, int surr2) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,367,"// First is known to be valid, but how about the other?"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,368,if (surr2 < SURR2_FIRST || surr2 > SURR2_LAST) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,369,"String msg = ""Incomplete surrogate pair: first char 0x""+Integer.toHexString(surr1)+"", second 0x""+Integer.toHexString(surr2);"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,370,_reportError(msg);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,372,int c = 0x10000 + ((surr1 - SURR1_FIRST) << 10) + (surr2 - SURR2_FIRST);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,373,return c;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1787,"rivate final int _outputMultiByteChar(int ch, int outputPtr)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1788,hrows IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1787,"private final int _outputMultiByteChar(int ch, int outputPtr) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1807,"rotected final int _decodeSurrogate(int surr1, int surr2) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1809,"/ First is known to be valid, but how about the other?"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1810,f (surr2 < SURR2_FIRST || surr2 > SURR2_LAST) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1811,"tring msg = ""Incomplete surrogate pair: first char 0x""+Integer.toHexString(surr1)+"", second 0x""+Integer.toHexString(surr2);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1812,reportError(msg);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1814,nt c = 0x10000 + ((surr1 - SURR1_FIRST) << 10) + (surr2 - SURR2_FIRST);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1815,eturn c;

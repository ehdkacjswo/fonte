is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,4,* Marker interface that is to be implemented by data format - specific features.
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,5,"* Interface used since Java Enums can not extend classes or other Enums, but"
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,6,* they can implement interfaces; and as such we may be able to use limited
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,7,* amount of generic functionality.
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,8,*<p>
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,9,* Note that this type is only implemented by non-JSON formats:
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,10,* types {@link JsonParser.Feature} and {@link JsonGenerator.Feature} do NOT
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,11,* implement it. This is to make it easier to avoid ambiguity with method
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,12,* calls.
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,14,* @since 2.6 (to be fully used in 2.7 and beyond)
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,16,public interface FormatFeature
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,19,* Accessor for checking whether this feature is enabled by default.
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,21,public boolean enabledByDefault();
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,24,"* Returns bit mask for this feature instance; must be a single bit,"
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,25,* that is of form <code>(1 &lt;&lt; N)</code>
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,27,public int getMask();
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,30,* Convenience method for checking whether feature is enabled in given bitmask
True,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,src/main/java/com/fasterxml/jackson/core/FormatFeature.java,32,public boolean enabledIn(int flags);
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,15,mport com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,15,import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,46, Computed for Jackson 2.4.0 release
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,48,rivate static final long serialVersionUID = 3306684576057132431L;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,45,private static final long serialVersionUID = 1; // since 2.6.0
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,105,* Feature that determines whether we will use {@link BufferRecycler} with
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,106,"* {@link ThreadLocal} and {@link SoftReference}, for efficient reuse of"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,107,* underlying input/output buffers.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,108,* This usually makes sense on normal J2SE/J2EE server-side processing;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,109,* but may not make sense on platforms where {@link SoftReference} handling
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,110,"* is broken (like Android), or if there are retention issues due to"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,111,* {@link ThreadLocal} (see
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,112,"* <a href=""https://github.com/FasterXML/jackson-core/issues/189"">Issue #189</a>"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,113,* for a possible case)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,115,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,117,USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING(true)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,204,* @since 2.6.0
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,192,rotected final transient BytesToNameCanonicalizer _rootByteSymbols = BytesToNameCanonicalizer.createRoot();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,206,protected final transient ByteQuadsCanonicalizer _byteSymbolCanonicalizer = ByteQuadsCanonicalizer.createRoot();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,209,* Earlier byte-based symbol table; replaced with 2.6 with a new implementation.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,210,* Left in for version 2.6.0: will be removed in 2.7 or later.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,212,"* @deprecated Since 2.6.0, only use {@link #_byteSymbolCanonicalizer}"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,214,@Deprecated
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,215,protected final transient com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer _rootByteSymbols
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,216,= com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.createRoot();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,418,* Method for accessing kind of {@link FormatFeature} that a parser
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,419,"* {@link JsonParser} produced by this factory would accept, if any;"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,420,* <code>null</code> returned if none.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,422,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,424,public Class<? extends FormatFeature> getFormatReadFeatureType() {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,425,return null;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,429,* Method for accessing kind of {@link FormatFeature} that a parser
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,430,"* {@link JsonGenerator} produced by this factory would accept, if any;"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,431,* <code>null</code> returned if none.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,433,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,435,public Class<? extends FormatFeature> getFormatWriteFeatureType() {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,436,return null;
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,395,* Format detection functionality (since 1.8)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,440,/* Format detection functionality
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,479,* Convenience method for trying to determine whether input via given accessor
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,480,* is of format type supported by this factory.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1192,"objectCodec, _rootByteSymbols, _rootCharSymbols, _factoryFeatures);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1241,"_objectCodec, _byteSymbolCanonicalizer, _rootCharSymbols, _factoryFeatures);"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1239,"objectCodec, _rootByteSymbols, _rootCharSymbols, _factoryFeatures);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1288,"_objectCodec, _byteSymbolCanonicalizer, _rootCharSymbols, _factoryFeatures);"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1378,oftReference<BufferRecycler> ref = _recyclerRef.get();
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1379,ufferRecycler br = (ref == null) ? null : ref.get();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1427,BufferRecycler br;
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1381,f (br == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1429,"/* 23-Apr-2015, tatu: Let's allow disabling of buffer recycling"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1430,"*   scheme, for cases where it is considered harmful (possibly"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1431,"*   on Android, for example)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1433,if (isEnabled(Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING)) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1434,SoftReference<BufferRecycler> ref = _recyclerRef.get();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1435,br = (ref == null) ? null : ref.get();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1437,if (br == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1438,br = new BufferRecycler();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1439,_recyclerRef.set(new SoftReference<BufferRecycler>(br));
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1441,} else {
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1383,recyclerRef.set(new SoftReference<BufferRecycler>(br));
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,7,mport static com.fasterxml.jackson.core.JsonTokenId.ID_EMBEDDED_OBJECT;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,8,mport static com.fasterxml.jackson.core.JsonTokenId.ID_END_ARRAY;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,9,mport static com.fasterxml.jackson.core.JsonTokenId.ID_END_OBJECT;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,10,mport static com.fasterxml.jackson.core.JsonTokenId.ID_FALSE;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,11,mport static com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,12,mport static com.fasterxml.jackson.core.JsonTokenId.ID_NOT_AVAILABLE;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,13,mport static com.fasterxml.jackson.core.JsonTokenId.ID_NULL;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,14,mport static com.fasterxml.jackson.core.JsonTokenId.ID_NUMBER_FLOAT;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,15,mport static com.fasterxml.jackson.core.JsonTokenId.ID_NUMBER_INT;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,16,mport static com.fasterxml.jackson.core.JsonTokenId.ID_START_ARRAY;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,17,mport static com.fasterxml.jackson.core.JsonTokenId.ID_START_OBJECT;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,18,mport static com.fasterxml.jackson.core.JsonTokenId.ID_STRING;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,19,mport static com.fasterxml.jackson.core.JsonTokenId.ID_TRUE;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,7,import static com.fasterxml.jackson.core.JsonTokenId.*;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,34,// // Low-level I/O / content features
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,64,* Feature that specifies that calls to {@link #flush} will cause
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,65,* matching <code>flush()</code> to underlying {@link OutputStream}
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,66,* or {@link Writer}; if disabled this will not be done.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,67,* Main reason to disable this feature is to prevent flushing at
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,68,"* generator level, if it is not possible to prevent method being"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,69,* called by other code (like <code>ObjectMapper</code> or third
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,70,* party libraries).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,71,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,72,* Feature is enabled by default.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,74,"FLUSH_PASSED_TO_STREAM(true),"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,76,// // Quoting-related features
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,128, Feature that specifies that calls to {@link #flush} will cause
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,129, matching <code>flush()</code> to underlying {@link OutputStream}
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,130, or {@link Writer}; if disabled this will not be done.
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,131, Main reason to disable this feature is to prevent flushing at
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,132," generator level, if it is not possible to prevent method being"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,133, called by other code (like <code>ObjectMapper</code> or third
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,134, party libraries).
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,135,<p>
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,136, Feature is enabled by default.
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,138,"LUSH_PASSED_TO_STREAM(true),"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,149,// // Schema/Validity support features
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,274, Method that can be used to get access to object that is used
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,275, as target for generated output; this is usually either
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,276," {@link OutputStream} or {@link Writer}, depending on what"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,277, generator was constructed with.
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,278, Note that returned value may be null in some cases; including
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,279, case where implementation does not want to exposed raw
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,280, source to caller.
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,281," In cases where output has been decorated, object returned here"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,282, is the decorated version; this allows some level of interaction
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,283, between users of generator and decorator object.
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,284,<p>
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,285, In general use of this accessor should be considered as
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,286," ""last effort"", i.e. only used if no other mechanism is applicable."
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,288,ublic Object getOutputTarget() {
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,289,eturn null;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,293," Helper method, usually equivalent to:"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,294,<code>
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,295,   getOutputContext().getCurrentValue();
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,296,</code>
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,298, @since 2.5
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,300,ublic Object getCurrentValue() {
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,301,sonStreamContext ctxt = getOutputContext();
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,302,eturn (ctxt == null) ? null : ctxt.getCurrentValue();
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,306," Helper method, usually equivalent to:"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,307,<code>
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,308,   getOutputContext().setCurrentValue(v);
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,309,</code>
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,311, @since 2.5
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,313,ublic void setCurrentValue(Object v) {
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,314,sonStreamContext ctxt = getOutputContext();
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,315,f (ctxt != null) {
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,316,txt.setCurrentValue(v);
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,361, Bulk access method for getting state of all standard {@link Feature}s.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,308,* Bulk access method for getting state of all standard (non-dataformat-specific)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,309,* {@link JsonGenerator.Feature}s.
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,363, @return Bit mask that defines current states of all standard {@link Feature}s.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,311,* @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,330,* Bulk set method for (re)setting states of features specified by <code>mask</code>.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,331,* Functionally equivalent to
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,332,*<code>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,333,*    int oldState = getFeatureMask();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,334,*    int newState = (oldState &amp; ~mask) | (values &amp; mask);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,335,*    setFeatureMask(newState);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,336,*</code>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,338,* @param values Bit mask of set/clear state for features to change
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,339,* @param mask Bit mask of features to change
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,341,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,343,"public JsonGenerator overrideStdFeatures(int values, int mask) {"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,344,int oldState = getFeatureMask();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,345,int newState = (oldState & ~mask) | (values & mask);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,346,return setFeatureMask(newState);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,350,"* Bulk access method for getting state of all {@link FormatFeature}s, format-specific"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,351,* on/off configuration settings.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,353,* @return Bit mask that defines current states of all standard {@link FormatFeature}s.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,355,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,357,public int getFormatFeatures() {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,358,return 0;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,362,"* Bulk set method for (re)setting states of {@link FormatFeature}s,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,363,"* by specifying values (set / clear) along with a mask, to determine"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,364,"* which features to change, if any."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,365,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,366,* Default implementation will simply throw an exception to indicate that
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,367,* the generator implementation does not support any {@link FormatFeature}s.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,369,* @param values Bit mask of set/clear state for features to change
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,370,* @param mask Bit mask of features to change
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,372,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,374,"public JsonGenerator overrideFormatFeatures(int values, int mask) {"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,375,"throw new IllegalArgumentException(""No FormatFeatures defined for generator of type ""+getClass().getName());"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,377,int oldState = getFeatureMask();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,378,int newState = (oldState & ~mask) | (values & mask);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,379,return setFeatureMask(newState);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,526,"/* Public API, output state access"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,531,* Method that can be used to get access to object that is used
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,532,* as target for generated output; this is usually either
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,533,"* {@link OutputStream} or {@link Writer}, depending on what"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,534,* generator was constructed with.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,535,* Note that returned value may be null in some cases; including
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,536,* case where implementation does not want to exposed raw
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,537,* source to caller.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,538,"* In cases where output has been decorated, object returned here"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,539,* is the decorated version; this allows some level of interaction
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,540,* between users of generator and decorator object.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,541,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,542,* In general use of this accessor should be considered as
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,543,"* ""last effort"", i.e. only used if no other mechanism is applicable."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,545,public Object getOutputTarget() {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,546,return null;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,550,* Method for verifying amount of content that is buffered by generator
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,551,"* but not yet flushed to the underlying target (stream, writer),"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,552,"* in units (byte, char) that the generator implementation uses for buffering;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,553,* or -1 if this information is not available.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,554,"* Unit used is often the same as the unit of underlying target (that is,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,555,"* `byte` for {@link java.io.OutputStream}, `char` for {@link java.io.Writer}),"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,556,* but may differ if buffering is done before encoding.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,557,* Default JSON-backed implementations do use matching units.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,558,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,559,* Note: non-JSON implementations will be retrofitted for 2.6 and beyond;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,560,* please report if you see -1 (missing override)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,562,"* @return Amount of content buffered in internal units, if amount known and"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,563,*    accessible; -1 if not accessible.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,565,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,567,public int getOutputBuffered() {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,568,return -1;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,572,"* Helper method, usually equivalent to:"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,573,*<code>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,574,*   getOutputContext().getCurrentValue();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,575,*</code>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,576,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,577,"* Note that ""current value"" is NOT populated (or used) by Streaming parser;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,578,* it is only used by higher-level data-binding functionality.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,579,"* The reason it is included here is that it can be stored and accessed hierarchically,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,580,* and gets passed through data-binding.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,582,* @since 2.5
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,584,public Object getCurrentValue() {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,585,JsonStreamContext ctxt = getOutputContext();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,586,return (ctxt == null) ? null : ctxt.getCurrentValue();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,590,"* Helper method, usually equivalent to:"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,591,*<code>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,592,*   getOutputContext().setCurrentValue(v);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,593,*</code>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,595,* @since 2.5
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,597,public void setCurrentValue(Object v) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,598,JsonStreamContext ctxt = getOutputContext();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,599,if (ctxt != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,600,ctxt.setCurrentValue(v);
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,647,ublic abstract void writeStartObject()
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,648,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,729,public abstract void writeStartObject() throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,660,ublic abstract void writeEndObject()
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,661,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,741,public abstract void writeEndObject() throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,672,ublic abstract void writeFieldName(String name)
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,673,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,752,public abstract void writeFieldName(String name) throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,686,ublic abstract void writeFieldName(SerializableString name)
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,687,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,765,public abstract void writeFieldName(SerializableString name) throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,702,ublic abstract void writeString(String text)
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,703,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,780,public abstract void writeString(String text) throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,712,"ublic abstract void writeString(char[] text, int offset, int len)"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,713,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,789,"public abstract void writeString(char[] text, int offset, int len) throws IOException;"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,725,ublic abstract void writeString(SerializableString text)
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,726,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,801,public abstract void writeString(SerializableString text) throws IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,190,* Feature that determines what to do if the underlying data format requires knowledge
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,191,"* of all properties to decode (usually via a Schema), and if no definition is"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,192,* found for a property that input content contains.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,193,* Typically most textual data formats do NOT require schema information (although
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,194,"* some do, such as CSV), whereas many binary data formats do require definitions"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,195,"* (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not)."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,196,* Further note that some formats that do require schema information will not be able
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,197,"* to ignore undefined properties: for example, Avro is fully positional and there is"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,198,* no possibility of undefined data. This leaves formats like Protobuf that have identifiers
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,199,* that may or may not map; and as such Protobuf format does make use of this feature.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,200,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,201,* Note that support for this feature is implemented by individual data format
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,202,"* module, if (and only if) it makes sense for the format in question. For JSON,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,203,"* for example, this feature has no effect as properties need not be pre-defined."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,204,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,205,"* Feature is disabled by default, meaning that if the underlying data format"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,206,"* requires knowledge of all properties to output, attempts to read an unknown"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,207,* property will result in a {@link JsonProcessingException}
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,209,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,211,IGNORE_UNDEFINED(false)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,309,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,310,"* Note that ""current value"" is NOT populated (or used) by Streaming parser;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,311,* it is only used by higher-level data-binding functionality.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,312,"* The reason it is included here is that it can be stored and accessed hierarchically,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,313,* and gets passed through data-binding.
False,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,500, @since 2.3
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,531,* @since 2.3
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,539,* Bulk set method for (re)setting states of features specified by <code>mask</code>.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,540,* Functionally equivalent to
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,541,*<code>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,542,*    int oldState = getFeatureMask();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,543,*    int newState = (oldState &amp; ~mask) | (values &amp; mask);
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,544,*    setFeatureMask(newState);
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,545,*</code>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,547,* @param values Bit mask of set/clear state for features to change
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,548,* @param mask Bit mask of features to change
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,550,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,552,"public JsonParser overrideStdFeatures(int values, int mask) {"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,553,_features = (_features & ~mask) | (values & mask);
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,554,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,558,"* Bulk access method for getting state of all {@link FormatFeature}s, format-specific"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,559,* on/off configuration settings.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,561,* @return Bit mask that defines current states of all standard {@link FormatFeature}s.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,563,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,565,public int getFormatFeatures() {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,566,return 0;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,570,"* Bulk set method for (re)setting states of {@link FormatFeature}s,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,571,"* by specifying values (set / clear) along with a mask, to determine"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,572,"* which features to change, if any."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,573,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,574,* Default implementation will simply throw an exception to indicate that
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,575,* the generator implementation does not support any {@link FormatFeature}s.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,577,* @param values Bit mask of set/clear state for features to change
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,578,* @param mask Bit mask of features to change
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,580,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,582,"public JsonParser overrideFormatFeatures(int values, int mask) {"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,583,"throw new IllegalArgumentException(""No FormatFeatures defined for parser of type ""+getClass().getName());"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,585,_formatFeatures = (_formatFeatures & ~mask) | (values & mask);
False,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,571,eturn (nextToken() == JsonToken.FIELD_NAME)
False,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,572, getCurrentName() : null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,651,return (nextToken() == JsonToken.FIELD_NAME) ? getCurrentName() : null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,809,* Method that is functionally equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,810,*<code>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,811,*  return getCurrentTokenId() == id
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,812,*</code>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,813,* but may be more efficiently implemented.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,814,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,815,* Note that no traversal or conversion is performed; so in some
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,816,* cases calling method like {@link #isExpectedStartArrayToken()}
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,817,* is necessary instead.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,819,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,821,public abstract boolean hasToken(JsonToken t);
False,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,211,f (_nextSegment == null || !_matchingPropertyName.equals(name)) {
False,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,212,eturn null;
True,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,211,if ((_nextSegment != null) && _matchingPropertyName.equals(name)) {
True,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,212,return _nextSegment;
False,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,214,eturn _nextSegment;
True,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,214,return null;
True,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,228,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,230,public JsonPointer matchElement(int index) {
True,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,231,if ((index != _matchingElementIndex) || (index < 0)) {
True,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,232,return null;
True,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,234,return _nextSegment;
False,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,111, The value may not exist or be available due to various limitations (at
False,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,112," least during reading of data, as target value object may not have yet"
False,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,113, been constructed).
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,111,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,112,"* Note that ""current value"" is NOT populated (or used) by Streaming parser or generator;"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,113,* it is only used by higher-level data-binding functionality.
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,114,"* The reason it is included here is that it can be stored and accessed hierarchically,"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,115,* and gets passed through data-binding.
False,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,60,oid writeStartObject(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,60,void writeStartObject(JsonGenerator gen)
False,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,76,"oid writeEndObject(JsonGenerator jg, int nrOfEntries)"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,76,"void writeEndObject(JsonGenerator gen, int nrOfEntries)"
False,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,88,oid writeObjectEntrySeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,88,void writeObjectEntrySeparator(JsonGenerator gen)
False,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,100,oid writeObjectFieldValueSeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,100,void writeObjectFieldValueSeparator(JsonGenerator gen)
False,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,115,oid writeStartArray(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,115,void writeStartArray(JsonGenerator gen)
False,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,131,"oid writeEndArray(JsonGenerator jg, int nrOfValues)"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,131,"void writeEndArray(JsonGenerator gen, int nrOfValues)"
False,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,143,oid writeArrayValueSeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,143,void writeArrayValueSeparator(JsonGenerator gen)
False,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,162,oid beforeArrayValues(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,162,void beforeArrayValues(JsonGenerator gen)
False,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,174,oid beforeObjectEntries(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,174,void beforeObjectEntries(JsonGenerator gen)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,34,// // // Constants for validation messages (since 2.6)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,36,"protected final String WRITE_BINARY = ""write a binary value"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,37,"protected final String WRITE_BOOLEAN = ""write a boolean value"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,38,"protected final String WRITE_NULL = ""write a null"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,39,"protected final String WRITE_NUMBER = ""write a number"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,40,"protected final String WRITE_RAW = ""write a raw (unencoded) value"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,41,"protected final String WRITE_STRING = ""write a string"";"
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,103," Implemented with detection that tries to find ""VERSION.txt"" in same"
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,104, package as the implementation class.
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,112,"* Implemented with standard version number detection algorithm, typically using"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,113,"* a simple generated class, with information extracted from Maven project file"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,114,* during build.
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,196,eturn setPrettyPrinter(new DefaultPrettyPrinter());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,206,return setPrettyPrinter(_constructDefaultPrettyPrinter());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,377,* Overridable factory method called to instantiate an appropriate {@link PrettyPrinter}
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,378,"* for case of ""just use the default one"", when {@link #useDefaultPrettyPrinter()} is called."
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,380,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,382,protected PrettyPrinter _constructDefaultPrettyPrinter() {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,383,return new DefaultPrettyPrinter();
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,284,uper();
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,285,features = features;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,284,super(features);
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,657,parseNumericValue(NR_INT); // will also check event type
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,656,return _parseIntValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,803,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,805,protected int _parseIntValue() throws IOException
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,807,// Inlined variant of: _parseNumericValue(NR_INT)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,809,if (_currToken == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,810,char[] buf = _textBuffer.getTextBuffer();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,811,int offset = _textBuffer.getTextOffset();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,812,int len = _intLength;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,813,if (_numberNegative) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,814,++offset;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,816,if (len <= 9) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,817,"int i = NumberInput.parseInt(buf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,818,if (_numberNegative) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,819,i = -i;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,821,_numberInt = i;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,822,_numTypesValid = NR_INT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,823,return i;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,826,_parseNumericValue(NR_INT);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,827,if ((_numTypesValid & NR_INT) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,828,convertNumberToInt();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,830,return _numberInt;
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,100,Override public final int getCurrentTokenId() {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,100,@Override public int getCurrentTokenId() {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,114,@Override public boolean hasToken(JsonToken t) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,115,return (_currToken == t);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,264,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,265,public int getValueAsInt() throws IOException
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,267,JsonToken t = _currToken;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,268,if (t == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,269,return getIntValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,271,if (t == JsonToken.VALUE_NUMBER_FLOAT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,272,return getIntValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,274,return getValueAsInt(0);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,281,if (t == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,282,return getIntValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,284,if (t == JsonToken.VALUE_NUMBER_FLOAT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,285,return getIntValue();
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,272,ase ID_NUMBER_INT:
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,273,ase ID_NUMBER_FLOAT:
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,274,eturn getIntValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,311,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,312,public long getValueAsLong() throws IOException
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,314,JsonToken t = _currToken;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,315,if (t == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,316,return getLongValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,318,if (t == JsonToken.VALUE_NUMBER_FLOAT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,319,return getLongValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,321,return getValueAsLong(0L);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,328,if (t == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,329,return getLongValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,331,if (t == JsonToken.VALUE_NUMBER_FLOAT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,332,return getLongValue();
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,303,ase ID_NUMBER_INT:
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,304,ase ID_NUMBER_FLOAT:
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,305,eturn getLongValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,387,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,388,public String getValueAsString() throws IOException {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,389,if (_currToken == JsonToken.VALUE_STRING) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,390,return getText();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,392,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,393,return getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,395,return getValueAsString(null);
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,353,f (_currToken != JsonToken.VALUE_STRING) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,354,f (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,355,eturn defaultValue;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,400,if (_currToken == JsonToken.VALUE_STRING) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,401,return getText();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,403,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,404,return getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,406,if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,407,return defaultValue;
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,382, @param bindex Relative index within base64 character unit; between 0
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,383,   and 3 (as unit has exactly 4 characters)
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,385, @deprecated in 2.2.3; should migrate away
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,387,Deprecated
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,388,"rotected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg)"
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,389,hrows JsonParseException
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,391,tring base;
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,392,f (ch <= INT_SPACE) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,393,"ase = ""Illegal white space character (code 0x""+Integer.toHexString(ch)+"") as character #""+(bindex+1)+"" of 4-char base64 unit: can only used between units"";"
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,394, else if (b64variant.usesPaddingChar(ch)) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,395,"ase = ""Unexpected padding character ('""+b64variant.getPaddingChar()+""') as character #""+(bindex+1)+"" of 4-char base64 unit: padding only legal as 3rd or 4th character"";"
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,396, else if (!Character.isDefined(ch) || Character.isISOControl(ch)) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,397,/ Not sure if we can really get here... ? (most illegal xml chars are caught at lower level)
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,398,"ase = ""Illegal character (code 0x""+Integer.toHexString(ch)+"") in base64 content"";"
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,399, else {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,400,"ase = ""Illegal character '""+ch+""' (code 0x""+Integer.toHexString(ch)+"") in base64 content"";"
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,402,f (msg != null) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,403,"ase = base + "": "" + msg;"
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,405,hrow _constructError(base);
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,410, @deprecated in 2.2.3; should migrate away
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,412,Deprecated
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,413,rotected void _reportBase64EOF() throws JsonParseException {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,414,"hrow _constructError(""Unexpected end-of-String in base64 content"");"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,1,package com.fasterxml.jackson.core.filter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,4,import java.io.InputStream;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,5,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,6,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,8,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,9,import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,12,* Specialized {@link JsonGeneratorDelegate} that allows use of
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,13,* {@link TokenFilter} for outputting a subset of content that
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,14,* caller tries to generate.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,16,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,18,public class FilteringGeneratorDelegate extends JsonGeneratorDelegate
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,22,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,27,* Object consulted to determine whether to write parts of content generator
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,28,* is asked to write or not.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,30,protected TokenFilter rootFilter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,33,* Flag that determines whether filtering will continue after the first
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,34,"* match is indicated or not: if `false`, output is based on just the first"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,35,* full match (returning {@link TokenFilter#INCLUDE_ALL}) and no more
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,36,* checks are made; if `true` then filtering will be applied as necessary
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,37,* until end of content.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,39,protected boolean _allowMultipleMatches;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,42,* Flag that determines whether path leading up to included content should
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,43,"* also be automatically included or not. If `false`, no path inclusion is"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,44,* done and only explicitly included entries are output; if `true` then
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,45,* path from main level down to match is also included as necessary.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,47,protected boolean _includePath;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,49,"/* NOTE: this feature is included in the first version (2.6), but"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,50,"* there is no public API to enable it, yet, since there isn't an"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,51,"* actual use case. But it seemed possible need could arise, which"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,52,* is feature has not yet been removed. If no use is found within
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,53,"* first version or two, just remove."
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,55,* Marked as deprecated since its status is uncertain.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,57,@Deprecated
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,58,protected boolean _includeImmediateParent = false;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,62,/* Additional state
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,67,* Although delegate has its own output context it is not sufficient since we actually
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,68,* have to keep track of excluded (filtered out) structures as well as ones delegate
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,69,* actually outputs.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,71,protected TokenFilterContext _filterContext;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,74,"* State that applies to the item within container, used where applicable."
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,75,* Specifically used to pass inclusion state between property name and
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,76,"* property, and also used for array elements."
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,78,protected TokenFilter _itemFilter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,81,* Number of tokens for which {@link TokenFilter#INCLUDE_ALL}
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,82,* has been returned
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,84,protected int _matchCount;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,88,"/* Construction, initialization"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,92,"public FilteringGeneratorDelegate(JsonGenerator d, TokenFilter f,"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,93,"boolean includePath, boolean allowMultipleMatches)"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,95,"// By default, do NOT delegate copy methods"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,96,"super(d, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,97,rootFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,98,// and this is the currently active filter for root values
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,99,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,100,_filterContext = TokenFilterContext.createRootContext(f);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,101,_includePath = includePath;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,102,_allowMultipleMatches = allowMultipleMatches;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,107,/* Extended API
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,111,public TokenFilter getFilter() { return rootFilter; }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,113,public JsonStreamContext getFilterContext() {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,114,return _filterContext;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,118,"* Accessor for finding number of matches, where specific token and sub-tree"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,119,* starting (if structured type) are passed.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,121,public int getMatchCount() {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,122,return _matchCount;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,127,"/* Public API, accessors"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,131,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,132,public JsonStreamContext getOutputContext() {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,133,"/* 11-Apr-2015, tatu: Choice is between pre- and post-filter context;"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,134,*   let's expose post-filter context that correlates with the view
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,135,*   of caller.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,137,return _filterContext;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,142,"/* Public API, write methods, structural"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,146,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,147,public void writeStartArray() throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,149,// First things first: whole-sale skipping easy
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,150,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,151,"_filterContext = _filterContext.createChildArrayContext(null, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,152,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,154,if (_itemFilter == TokenFilter.INCLUDE_ALL) { // include the whole sub-tree?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,155,"_filterContext = _filterContext.createChildArrayContext(_itemFilter, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,156,delegate.writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,157,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,159,// Ok; regular checking state then
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,160,_itemFilter = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,161,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,162,"_filterContext = _filterContext.createChildArrayContext(null, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,163,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,165,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,166,_itemFilter = _itemFilter.filterStartArray();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,168,if (_itemFilter == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,169,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,170,"_filterContext = _filterContext.createChildArrayContext(_itemFilter, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,171,delegate.writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,172,} else {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,173,"_filterContext = _filterContext.createChildArrayContext(_itemFilter, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,177,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,178,public void writeStartArray(int size) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,180,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,181,"_filterContext = _filterContext.createChildArrayContext(null, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,182,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,184,if (_itemFilter == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,185,"_filterContext = _filterContext.createChildArrayContext(_itemFilter, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,186,delegate.writeStartArray(size);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,187,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,189,_itemFilter = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,190,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,191,"_filterContext = _filterContext.createChildArrayContext(null, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,192,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,194,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,195,_itemFilter = _itemFilter.filterStartArray();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,197,if (_itemFilter == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,198,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,199,"_filterContext = _filterContext.createChildArrayContext(_itemFilter, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,200,delegate.writeStartArray(size);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,201,} else {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,202,"_filterContext = _filterContext.createChildArrayContext(_itemFilter, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,206,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,207,public void writeEndArray() throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,209,_filterContext = _filterContext.closeArray(delegate);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,211,if (_filterContext != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,212,_itemFilter = _filterContext.getFilter();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,216,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,217,public void writeStartObject() throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,219,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,220,"_filterContext = _filterContext.createChildObjectContext(_itemFilter, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,221,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,223,if (_itemFilter == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,224,"_filterContext = _filterContext.createChildObjectContext(_itemFilter, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,225,delegate.writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,226,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,229,TokenFilter f = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,230,if (f == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,231,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,234,if (f != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,235,f = f.filterStartObject();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,237,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,238,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,239,"_filterContext = _filterContext.createChildObjectContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,240,delegate.writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,241,} else { // filter out
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,242,"_filterContext = _filterContext.createChildObjectContext(f, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,246,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,247,public void writeEndObject() throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,249,_filterContext = _filterContext.closeObject(delegate);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,250,if (_filterContext != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,251,_itemFilter = _filterContext.getFilter();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,255,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,256,public void writeFieldName(String name) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,258,TokenFilter state = _filterContext.setFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,259,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,260,_itemFilter = null;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,261,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,263,if (state == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,264,_itemFilter = state;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,265,delegate.writeFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,266,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,268,state = state.includeProperty(name);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,269,_itemFilter = state;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,270,if (state == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,271,_checkPropertyParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,275,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,276,public void writeFieldName(SerializableString name) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,278,TokenFilter state = _filterContext.setFieldName(name.getValue());
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,279,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,280,_itemFilter = null;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,281,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,283,if (state == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,284,_itemFilter = state;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,285,delegate.writeFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,286,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,288,state = state.includeProperty(name.getValue());
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,289,_itemFilter = state;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,290,if (state == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,291,_checkPropertyParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,297,"/* Public API, write methods, text/String values"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,301,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,302,public void writeString(String value) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,304,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,305,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,307,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,308,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,309,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,310,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,312,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,313,if (!state.includeString(value)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,314,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,317,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,319,delegate.writeString(value);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,322,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,323,"public void writeString(char[] text, int offset, int len) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,325,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,326,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,328,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,329,"String value = new String(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,330,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,331,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,332,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,334,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,335,if (!state.includeString(value)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,336,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,339,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,341,"delegate.writeString(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,344,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,345,public void writeString(SerializableString value) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,347,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,348,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,350,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,351,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,352,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,353,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,355,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,356,if (!state.includeString(value.getValue())) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,357,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,360,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,362,delegate.writeString(value);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,365,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,366,"public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,368,if (_checkRawValueWrite()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,369,"delegate.writeRawUTF8String(text, offset, length);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,373,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,374,"public void writeUTF8String(byte[] text, int offset, int length) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,376,"// not exact match, but best we can do"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,377,if (_checkRawValueWrite()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,378,"delegate.writeRawUTF8String(text, offset, length);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,384,"/* Public API, write methods, binary/raw content"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,388,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,389,public void writeRaw(String text) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,391,if (_checkRawValueWrite()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,392,delegate.writeRaw(text);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,396,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,397,"public void writeRaw(String text, int offset, int len) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,399,if (_checkRawValueWrite()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,400,delegate.writeRaw(text);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,404,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,405,public void writeRaw(SerializableString text) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,407,if (_checkRawValueWrite()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,408,delegate.writeRaw(text);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,412,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,413,"public void writeRaw(char[] text, int offset, int len) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,415,if (_checkRawValueWrite()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,416,"delegate.writeRaw(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,420,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,421,public void writeRaw(char c) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,423,if (_checkRawValueWrite()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,424,delegate.writeRaw(c);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,428,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,429,public void writeRawValue(String text) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,431,if (_checkRawValueWrite()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,432,delegate.writeRaw(text);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,436,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,437,"public void writeRawValue(String text, int offset, int len) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,439,if (_checkRawValueWrite()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,440,"delegate.writeRaw(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,444,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,445,"public void writeRawValue(char[] text, int offset, int len) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,447,if (_checkRawValueWrite()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,448,"delegate.writeRaw(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,452,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,453,"public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,455,if (_checkBinaryWrite()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,456,"delegate.writeBinary(b64variant, data, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,460,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,461,"public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,463,if (_checkBinaryWrite()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,464,"return delegate.writeBinary(b64variant, data, dataLength);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,466,return -1;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,471,"/* Public API, write methods, other value types"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,475,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,476,public void writeNumber(short v) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,478,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,479,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,481,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,482,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,483,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,484,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,486,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,487,if (!state.includeNumber(v)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,488,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,491,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,493,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,496,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,497,public void writeNumber(int v) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,499,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,500,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,502,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,503,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,504,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,505,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,507,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,508,if (!state.includeNumber(v)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,509,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,512,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,514,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,517,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,518,public void writeNumber(long v) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,520,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,521,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,523,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,524,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,525,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,526,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,528,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,529,if (!state.includeNumber(v)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,530,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,533,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,535,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,538,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,539,public void writeNumber(BigInteger v) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,541,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,542,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,544,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,545,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,546,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,547,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,549,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,550,if (!state.includeNumber(v)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,551,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,554,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,556,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,559,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,560,public void writeNumber(double v) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,562,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,563,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,565,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,566,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,567,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,568,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,570,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,571,if (!state.includeNumber(v)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,572,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,575,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,577,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,580,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,581,public void writeNumber(float v) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,583,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,584,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,586,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,587,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,588,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,589,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,591,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,592,if (!state.includeNumber(v)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,593,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,596,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,598,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,601,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,602,public void writeNumber(BigDecimal v) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,604,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,605,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,607,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,608,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,609,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,610,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,612,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,613,if (!state.includeNumber(v)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,614,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,617,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,619,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,622,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,623,"public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,625,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,626,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,628,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,629,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,630,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,631,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,633,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,634,if (!state.includeRawValue()) { // close enough?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,635,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,638,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,640,delegate.writeNumber(encodedValue);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,643,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,644,public void writeBoolean(boolean v) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,646,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,647,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,649,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,650,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,651,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,652,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,654,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,655,if (!state.includeBoolean(v)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,656,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,659,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,661,delegate.writeBoolean(v);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,664,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,665,public void writeNull() throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,667,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,668,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,670,if (_itemFilter != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,671,TokenFilter state = _filterContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,672,if (state == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,673,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,675,if (state != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,676,if (!state.includeNull()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,677,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,680,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,682,delegate.writeNull();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,687,/* Overridden field methods
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,691,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,692,public void writeOmittedField(String fieldName) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,693,// Hmmh. Not sure how this would work but...
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,694,if (_itemFilter != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,695,delegate.writeOmittedField(fieldName);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,701,"/* Public API, write methods, Native Ids"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,705,"// 25-Mar-2015, tatu: These are tricky as they sort of predate actual filtering calls."
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,706,//   Let's try to use current state as a clue at least...
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,708,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,709,public void writeObjectId(Object id) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,710,if (_itemFilter != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,711,delegate.writeObjectId(id);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,715,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,716,public void writeObjectRef(Object id) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,717,if (_itemFilter != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,718,delegate.writeObjectRef(id);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,722,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,723,public void writeTypeId(Object id) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,724,if (_itemFilter != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,725,delegate.writeTypeId(id);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,731,"/* Public API, write methods, serializing Java objects"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,735,"// Base class definitions for these seems correct to me, iff not directly delegating:"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,738,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,739,"public void writeObject(Object pojo) throws IOException,JsonProcessingException {"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,740,if (delegateCopyMethods) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,741,delegate.writeObject(pojo);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,742,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,744,// NOTE: copied from
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,745,if (pojo == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,746,writeNull();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,747,} else {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,748,if (getCodec() != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,749,"getCodec().writeValue(this, pojo);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,750,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,752,_writeSimpleObject(pojo);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,756,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,757,public void writeTree(TreeNode rootNode) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,758,if (delegateCopyMethods) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,759,delegate.writeTree(rootNode);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,760,return;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,762,"// As with 'writeObject()', we are not check if write would work"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,763,if (rootNode == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,764,writeNull();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,765,} else {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,766,if (getCodec() == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,767,"throw new IllegalStateException(""No ObjectCodec defined"");"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,769,"getCodec().writeValue(this, rootNode);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,776,"/* Public API, copy-through methods"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,780,"// Base class definitions for these seems correct to me, iff not directly delegating:"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,783,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,784,public void copyCurrentEvent(JsonParser jp) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,785,if (delegateCopyMethods) delegate.copyCurrentEvent(jp);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,786,else super.copyCurrentEvent(jp);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,789,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,790,public void copyCurrentStructure(JsonParser jp) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,791,if (delegateCopyMethods) delegate.copyCurrentStructure(jp);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,792,else super.copyCurrentStructure(jp);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,798,/* Helper methods
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,802,protected void _checkParentPath() throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,804,++_matchCount;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,805,// only need to construct path if parent wasn't written
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,806,if (_includePath) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,807,_filterContext.writePath(delegate);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,809,"// also: if no multiple matches desired, short-cut checks"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,810,if (!_allowMultipleMatches) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,811,"// Mark parents as ""skip"" so that further check calls are not made"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,812,_filterContext.skipParentChecks();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,817,* Specialized variant of {@link #_checkParentPath} used when checking
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,818,* parent for a property name to be included with value: rules are slightly
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,819,* different.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,821,protected void _checkPropertyParentPath() throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,823,++_matchCount;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,824,if (_includePath) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,825,_filterContext.writePath(delegate);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,826,} else if (_includeImmediateParent) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,827,"// 21-Apr-2015, tatu: Note that there is no API to enable this currently..."
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,828,//    retained for speculative future use
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,829,_filterContext.writeImmediatePath(delegate);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,832,"// also: if no multiple matches desired, short-cut checks"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,833,if (!_allowMultipleMatches) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,834,"// Mark parents as ""skip"" so that further check calls are not made"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,835,_filterContext.skipParentChecks();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,839,protected boolean _checkBinaryWrite() throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,841,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,842,return false;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,844,if (_itemFilter == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,845,return true;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,847,if (_itemFilter.includeBinary()) { // close enough?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,848,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,849,return true;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,851,return false;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,854,protected boolean _checkRawValueWrite() throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,856,if (_itemFilter == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,857,return false;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,859,if (_itemFilter == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,860,return true;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,862,if (_itemFilter.includeRawValue()) { // close enough?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,863,_checkParentPath();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,864,return true;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,866,return false;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,1,package com.fasterxml.jackson.core.filter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,4,import java.io.OutputStream;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,5,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,6,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,8,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,9,import com.fasterxml.jackson.core.util.JsonParserDelegate;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,11,import static com.fasterxml.jackson.core.JsonTokenId.*;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,14,* Specialized {@link JsonParserDelegate} that allows use of
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,15,* {@link TokenFilter} for outputting a subset of content that
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,16,* is visible to caller
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,18,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,20,public class FilteringParserDelegate extends JsonParserDelegate
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,24,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,29,* Object consulted to determine whether to write parts of content generator
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,30,* is asked to write or not.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,32,protected TokenFilter rootFilter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,35,* Flag that determines whether filtering will continue after the first
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,36,"* match is indicated or not: if `false`, output is based on just the first"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,37,* full match (returning {@link TokenFilter#INCLUDE_ALL}) and no more
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,38,* checks are made; if `true` then filtering will be applied as necessary
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,39,* until end of content.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,41,protected boolean _allowMultipleMatches;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,44,* Flag that determines whether path leading up to included content should
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,45,"* also be automatically included or not. If `false`, no path inclusion is"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,46,* done and only explicitly included entries are output; if `true` then
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,47,* path from main level down to match is also included as necessary.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,49,protected boolean _includePath;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,51,"/* NOTE: this feature is included in the first version (2.6), but"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,52,"* there is no public API to enable it, yet, since there isn't an"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,53,"* actual use case. But it seemed possible need could arise, which"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,54,* is feature has not yet been removed. If no use is found within
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,55,"* first version or two, just remove."
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,57,* Marked as deprecated since its status is uncertain.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,59,@Deprecated
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,60,protected boolean _includeImmediateParent = false;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,64,/* State
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,69,"* Last token retrieved via {@link #nextToken}, if any."
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,70,"* Null before the first call to <code>nextToken()</code>,"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,71,* as well as if token has been explicitly cleared
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,73,protected JsonToken _currToken;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,76,"* Last cleared token, if any: that is, value that was in"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,77,* effect when {@link #clearCurrentToken} was called.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,79,protected JsonToken _lastClearedToken;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,82,"* During traversal this is the actual ""open"" parse tree, which sometimes"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,83,"* is the same as {@link #_exposedContext}, and at other times is ahead"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,84,* of it. Note that this context is never null.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,86,protected TokenFilterContext _headContext;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,89,"* In cases where {@link #_headContext} is ""ahead"" of context exposed to"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,90,"* caller, this context points to what is currently exposed to caller."
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,91,"* When the two are in sync, this context reference will be <code>null</code>."
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,93,protected TokenFilterContext _exposedContext;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,96,"* State that applies to the item within container, used where applicable."
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,97,* Specifically used to pass inclusion state between property name and
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,98,"* property, and also used for array elements."
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,100,protected TokenFilter _itemFilter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,103,* Number of tokens for which {@link TokenFilter#INCLUDE_ALL}
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,104,* has been returned.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,106,protected int _matchCount;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,110,"/* Construction, initialization"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,114,"public FilteringParserDelegate(JsonParser p, TokenFilter f,"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,115,"boolean includePath, boolean allowMultipleMatches)"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,117,super(p);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,118,rootFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,119,// and this is the currently active filter for root values
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,120,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,121,_headContext = TokenFilterContext.createRootContext(f);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,122,_includePath = includePath;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,123,_allowMultipleMatches = allowMultipleMatches;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,128,/* Extended API
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,132,public TokenFilter getFilter() { return rootFilter; }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,135,"* Accessor for finding number of matches, where specific token and sub-tree"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,136,* starting (if structured type) are passed.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,138,public int getMatchCount() {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,139,return _matchCount;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,144,"/* Public API, token accessors"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,148,@Override public JsonToken getCurrentToken() { return _currToken; }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,150,@Override public final int getCurrentTokenId() {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,151,final JsonToken t = _currToken;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,152,return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,155,@Override public boolean hasCurrentToken() { return _currToken != null; }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,156,@Override public boolean hasTokenId(int id) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,157,final JsonToken t = _currToken;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,158,if (t == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,159,return (JsonTokenId.ID_NO_TOKEN == id);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,161,return t.id() == id;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,164,@Override public final boolean hasToken(JsonToken t) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,165,return (_currToken == t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,168,@Override public boolean isExpectedStartArrayToken() { return _currToken == JsonToken.START_ARRAY; }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,169,@Override public boolean isExpectedStartObjectToken() { return _currToken == JsonToken.START_OBJECT; }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,171,@Override public JsonLocation getCurrentLocation() { return delegate.getCurrentLocation(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,173,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,174,public JsonStreamContext getParsingContext() {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,175,return _filterContext();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,178,// !!! TODO: Verify it works as expected: copied from standard JSON parser impl
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,179,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,180,public String getCurrentName() throws IOException {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,181,JsonStreamContext ctxt = _filterContext();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,182,if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,183,JsonStreamContext parent = ctxt.getParent();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,184,return (parent == null) ? null : parent.getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,186,return ctxt.getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,191,"/* Public API, token state overrides"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,195,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,196,public void clearCurrentToken() {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,197,if (_currToken != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,198,_lastClearedToken = _currToken;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,199,_currToken = null;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,203,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,204,public JsonToken getLastClearedToken() { return _lastClearedToken; }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,206,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,207,public void overrideCurrentName(String name) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,208,"/* 14-Apr-2015, tatu: Not sure whether this can be supported, and if so,"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,209,"*    what to do with it... Delegation won't work for sure, so let's for"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,210,*    now throw an exception
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,212,"throw new UnsupportedOperationException(""Can not currently override name during filtering read"");"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,217,"/* Public API, traversal"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,221,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,222,public JsonToken nextToken() throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,224,// Anything buffered?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,225,TokenFilterContext ctxt = _exposedContext;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,227,if (ctxt != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,228,while (true) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,229,JsonToken t = ctxt.nextTokenToRead();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,230,if (t != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,231,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,232,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,234,// all done with buffered stuff?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,235,if (ctxt == _headContext) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,236,_exposedContext = null;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,237,if (ctxt.inArray()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,238,t = delegate.getCurrentToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,239,// Is this guaranteed to work without further checks?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,240,//                        if (t != JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,241,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,242,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,245,// Almost! Most likely still have the current token;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,246,// with the sole exception of
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,248,t = delegate.getCurrentToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,249,if (t != JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,250,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,251,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,254,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,256,"// If not, traverse down the context chain"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,257,ctxt = _headContext.findChildOf(ctxt);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,258,_exposedContext = ctxt;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,259,if (ctxt == null) { // should never occur
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,260,"throw _constructError(""Unexpected problem: chain of filtered context broken"");"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,265,"// If not, need to read more. If we got any:"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,266,JsonToken t = delegate.nextToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,267,if (t == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,268,"// no strict need to close, since we have no state here"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,269,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,272,// otherwise... to include or not?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,273,TokenFilter f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,275,switch (t.id()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,276,case ID_START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,277,f = _itemFilter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,278,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,279,"_headContext = _headContext.createChildArrayContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,280,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,282,if (f == null) { // does this occur?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,283,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,284,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,286,"// Otherwise still iffy, need to check"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,287,f = _headContext.checkValue(f);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,288,if (f == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,289,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,290,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,292,if (f != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,293,f = f.filterStartArray();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,295,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,296,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,297,"_headContext = _headContext.createChildArrayContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,298,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,300,"_headContext = _headContext.createChildArrayContext(f, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,302,// Also: only need buffering if parent path to be included
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,303,if (_includePath) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,304,t = _nextTokenWithBuffering(_headContext);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,305,if (t != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,306,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,307,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,310,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,312,case ID_START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,313,f = _itemFilter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,314,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,315,"_headContext = _headContext.createChildObjectContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,316,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,318,if (f == null) { // does this occur?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,319,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,320,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,322,"// Otherwise still iffy, need to check"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,323,f = _headContext.checkValue(f);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,324,if (f == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,325,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,326,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,328,if (f != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,329,f = f.filterStartObject();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,331,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,332,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,333,"_headContext = _headContext.createChildObjectContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,334,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,336,"_headContext = _headContext.createChildObjectContext(f, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,337,// Also: only need buffering if parent path to be included
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,338,if (_includePath) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,339,t = _nextTokenWithBuffering(_headContext);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,340,if (t != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,341,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,342,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,345,// note: inclusion of surrounding Object handled separately via
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,346,// FIELD_NAME
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,347,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,349,case ID_END_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,350,case ID_END_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,352,boolean returnEnd = _headContext.isStartHandled();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,353,f = _headContext.getFilter();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,354,if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,355,f.filterFinishArray();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,357,_headContext = _headContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,358,_itemFilter = _headContext.getFilter();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,359,if (returnEnd) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,360,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,363,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,365,case ID_FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,367,final String name = delegate.getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,368,// note: this will also set 'needToHandleName'
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,369,f = _headContext.setFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,370,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,371,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,372,if (!_includePath) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,373,"// Minor twist here: if parent NOT included, may need to induce output of"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,374,// surrounding START_OBJECT/END_OBJECT
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,375,if (_includeImmediateParent && !_headContext.isStartHandled()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,376,t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,377,_exposedContext = _headContext;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,380,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,382,if (f == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,383,delegate.nextToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,384,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,385,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,387,f = f.includeProperty(name);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,388,if (f == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,389,delegate.nextToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,390,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,391,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,393,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,394,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,395,if (_includePath) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,396,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,399,if (_includePath) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,400,t = _nextTokenWithBuffering(_headContext);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,401,if (t != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,402,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,403,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,406,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,409,default: // scalar value
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,410,f = _itemFilter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,411,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,412,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,414,if (f != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,415,f = _headContext.checkValue(f);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,416,if ((f == TokenFilter.INCLUDE_ALL)
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,417,|| ((f != null) && f.includeValue(delegate))) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,418,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,421,// Otherwise not included (leaves must be explicitly included)
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,422,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,425,// We get here if token was not yet found; offlined handling
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,426,return _nextToken2();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,430,* Offlined handling for cases where there was no buffered token to
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,431,"* return, and the token read next could not be returned as-is,"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,432,"* at least not yet, but where we have not yet established that"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,433,* buffering is needed.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,435,protected final JsonToken _nextToken2() throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,437,main_loop:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,438,while (true) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,439,JsonToken t = delegate.nextToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,440,if (t == null) { // is this even legal?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,441,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,443,TokenFilter f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,445,switch (t.id()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,446,case ID_START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,447,f = _itemFilter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,448,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,449,"_headContext = _headContext.createChildArrayContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,450,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,452,if (f == null) { // does this occur?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,453,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,454,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,456,"// Otherwise still iffy, need to check"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,457,f = _headContext.checkValue(f);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,458,if (f == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,459,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,460,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,462,if (f != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,463,f = f.filterStartArray();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,465,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,466,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,467,"_headContext = _headContext.createChildArrayContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,468,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,470,"_headContext = _headContext.createChildArrayContext(f, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,471,"// but if we didn't figure it out yet, need to buffer possible events"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,472,if (_includePath) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,473,t = _nextTokenWithBuffering(_headContext);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,474,if (t != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,475,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,476,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,479,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,481,case ID_START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,482,f = _itemFilter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,483,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,484,"_headContext = _headContext.createChildObjectContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,485,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,487,if (f == null) { // does this occur?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,488,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,489,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,491,"// Otherwise still iffy, need to check"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,492,f = _headContext.checkValue(f);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,493,if (f == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,494,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,495,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,497,if (f != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,498,f = f.filterStartObject();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,500,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,501,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,502,"_headContext = _headContext.createChildObjectContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,503,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,505,"_headContext = _headContext.createChildObjectContext(f, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,506,if (_includePath) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,507,t = _nextTokenWithBuffering(_headContext);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,508,if (t != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,509,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,510,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,513,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,515,case ID_END_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,516,case ID_END_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,518,boolean returnEnd = _headContext.isStartHandled();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,519,f = _headContext.getFilter();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,520,if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,521,f.filterFinishArray();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,523,_headContext = _headContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,524,_itemFilter = _headContext.getFilter();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,525,if (returnEnd) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,526,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,529,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,531,case ID_FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,533,final String name = delegate.getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,534,f = _headContext.setFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,535,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,536,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,537,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,539,if (f == null) { // filter out the value
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,540,delegate.nextToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,541,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,542,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,544,f = f.includeProperty(name);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,545,if (f == null) { // filter out the value
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,546,delegate.nextToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,547,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,548,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,550,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,551,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,552,if (_includePath) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,553,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,555,//                        if (_includeImmediateParent) { ...
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,556,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,558,if (_includePath) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,559,t = _nextTokenWithBuffering(_headContext);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,560,if (t != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,561,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,562,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,566,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,568,default: // scalar value
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,569,f = _itemFilter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,570,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,571,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,573,if (f != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,574,f = _headContext.checkValue(f);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,575,if ((f == TokenFilter.INCLUDE_ALL)
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,576,|| ((f != null) && f.includeValue(delegate))) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,577,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,580,// Otherwise not included (leaves must be explicitly included)
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,581,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,587,* Method called when a new potentially included context is found.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,589,protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,590,throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,592,main_loop:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,593,while (true) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,594,JsonToken t = delegate.nextToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,595,if (t == null) { // is this even legal?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,596,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,598,TokenFilter f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,600,// One simplification here: we know for a fact that the item filter is
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,601,"// neither null nor 'include all', for most cases; the only exception"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,602,// being FIELD_NAME handling
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,604,switch (t.id()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,605,case ID_START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,606,f = _headContext.checkValue(_itemFilter);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,607,if (f == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,608,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,609,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,611,if (f != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,612,f = f.filterStartArray();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,614,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,615,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,616,"_headContext = _headContext.createChildArrayContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,617,return _nextBuffered(buffRoot);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,619,"_headContext = _headContext.createChildArrayContext(f, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,620,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,622,case ID_START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,623,f = _itemFilter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,624,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,625,"_headContext = _headContext.createChildObjectContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,626,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,628,if (f == null) { // does this occur?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,629,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,630,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,632,"// Otherwise still iffy, need to check"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,633,f = _headContext.checkValue(f);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,634,if (f == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,635,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,636,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,638,if (f != TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,639,f = f.filterStartObject();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,641,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,642,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,643,"_headContext = _headContext.createChildObjectContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,644,return _nextBuffered(buffRoot);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,646,"_headContext = _headContext.createChildObjectContext(f, false);"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,647,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,649,case ID_END_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,650,case ID_END_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,652,"// Unlike with other loops, here we know that content was NOT"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,653,// included (won't get this far otherwise)
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,654,f = _headContext.getFilter();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,655,if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,656,f.filterFinishArray();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,658,boolean gotEnd = (_headContext == buffRoot);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,659,boolean returnEnd = gotEnd && _headContext.isStartHandled();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,661,_headContext = _headContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,662,_itemFilter = _headContext.getFilter();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,664,if (returnEnd) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,665,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,667,"// Hmmh. Do we need both checks, or should above suffice?"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,668,if (gotEnd || (_headContext == buffRoot)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,669,return null;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,672,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,674,case ID_FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,676,final String name = delegate.getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,677,f = _headContext.setFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,678,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,679,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,680,return _nextBuffered(buffRoot);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,682,if (f == null) { // filter out the value
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,683,delegate.nextToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,684,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,685,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,687,f = f.includeProperty(name);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,688,if (f == null) { // filter out the value
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,689,delegate.nextToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,690,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,691,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,693,_itemFilter = f;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,694,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,695,return _nextBuffered(buffRoot);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,698,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,700,default: // scalar value
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,701,f = _itemFilter;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,702,if (f == TokenFilter.INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,703,return _nextBuffered(buffRoot);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,705,if (f != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,706,f = _headContext.checkValue(f);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,707,if ((f == TokenFilter.INCLUDE_ALL)
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,708,|| ((f != null) && f.includeValue(delegate))) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,709,return _nextBuffered(buffRoot);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,712,// Otherwise not included (leaves must be explicitly included)
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,713,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,718,private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,720,_exposedContext = buffRoot;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,721,TokenFilterContext ctxt = buffRoot;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,722,JsonToken t = ctxt.nextTokenToRead();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,723,if (t != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,724,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,726,while (true) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,727,// all done with buffered stuff?
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,728,if (ctxt == _headContext) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,729,"throw _constructError(""Internal error: failed to locate expected buffered tokens"");"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,731,_exposedContext = null;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,732,break;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,735,"// If not, traverse down the context chain"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,736,ctxt = _exposedContext.findChildOf(ctxt);
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,737,_exposedContext = ctxt;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,738,if (ctxt == null) { // should never occur
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,739,"throw _constructError(""Unexpected problem: chain of filtered context broken"");"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,741,t = _exposedContext.nextTokenToRead();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,742,if (t != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,743,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,748,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,749,public JsonToken nextValue() throws IOException {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,750,// Re-implemented same as ParserMinimalBase:
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,751,JsonToken t = nextToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,752,if (t == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,753,t = nextToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,755,return t;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,759,"* Need to override, re-implement similar to how method defined in"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,760,"* {@link com.fasterxml.jackson.core.base.ParserMinimalBase}, to keep"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,761,* state correct here.
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,763,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,764,public JsonParser skipChildren() throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,766,if ((_currToken != JsonToken.START_OBJECT)
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,767,&& (_currToken != JsonToken.START_ARRAY)) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,768,return this;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,770,int open = 1;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,772,// Since proper matching of start/end markers is handled
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,773,"// by nextToken(), we'll just count nesting levels here"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,774,while (true) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,775,JsonToken t = nextToken();
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,776,"if (t == null) { // not ideal but for now, just return"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,777,return this;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,779,if (t.isStructStart()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,780,++open;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,781,} else if (t.isStructEnd()) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,782,if (--open == 0) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,783,return this;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,791,"/* Public API, access to token information, text"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,795,@Override public String getText() throws IOException { return delegate.getText();  }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,796,@Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,797,@Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,798,@Override public int getTextLength() throws IOException { return delegate.getTextLength(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,799,@Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,803,"/* Public API, access to token information, numeric"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,807,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,808,public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,810,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,811,public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,813,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,814,public byte getByteValue() throws IOException { return delegate.getByteValue(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,816,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,817,public short getShortValue() throws IOException { return delegate.getShortValue(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,819,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,820,public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,822,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,823,public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,825,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,826,public float getFloatValue() throws IOException { return delegate.getFloatValue(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,828,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,829,public int getIntValue() throws IOException { return delegate.getIntValue(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,831,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,832,public long getLongValue() throws IOException { return delegate.getLongValue(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,834,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,835,public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,837,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,838,public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,842,"/* Public API, access to token information, coercion/conversion"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,846,@Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,847,@Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,848,@Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,849,@Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,850,@Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,851,@Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,852,@Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,853,@Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,854,@Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,855,@Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,859,"/* Public API, access to token values, other"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,863,@Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,864,@Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,865,"@Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }"
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,866,@Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); }
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,870,/* Internal helper methods
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,874,protected JsonStreamContext _filterContext() {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,875,if (_exposedContext != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,876,return _exposedContext;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,878,return _headContext;
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,1,package com.fasterxml.jackson.core.filter;
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,3,import com.fasterxml.jackson.core.JsonPointer;
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,6,* Simple {@link TokenFilter} implementation that takes a single
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,7,* {@link JsonPointer} and matches a single value accordingly.
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,8,"* Instances are immutable and fully thread-safe, shareable,"
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,9,* and efficient to use.
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,11,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,13,public class JsonPointerBasedFilter extends TokenFilter
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,15,protected final JsonPointer _pathToMatch;
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,17,public JsonPointerBasedFilter(String ptrExpr) {
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,18,this(JsonPointer.compile(ptrExpr));
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,21,public JsonPointerBasedFilter(JsonPointer match) {
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,22,_pathToMatch = match;
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,25,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,26,public TokenFilter includeElement(int index) {
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,27,JsonPointer next = _pathToMatch.matchElement(index);
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,28,if (next == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,29,return null;
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,31,if (next.matches()) {
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,32,return TokenFilter.INCLUDE_ALL;
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,34,return new JsonPointerBasedFilter(next);
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,37,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,38,public TokenFilter includeProperty(String name) {
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,39,JsonPointer next = _pathToMatch.matchProperty(name);
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,40,if (next == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,41,return null;
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,43,if (next.matches()) {
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,44,return TokenFilter.INCLUDE_ALL;
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,46,return new JsonPointerBasedFilter(next);
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,49,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,50,public TokenFilter filterStartArray() {
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,51,return this;
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,54,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,55,public TokenFilter filterStartObject() {
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,56,return this;
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,59,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,60,protected boolean _includeScalar() {
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,61,"// should only occur for root-level scalars, path ""/"""
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,62,return _pathToMatch.matches();
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,65,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,66,public String toString() {
True,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java,67,"return ""[JsonPointerFilter at: ""+_pathToMatch+""]"";"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,1,package com.fasterxml.jackson.core.filter;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,4,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,5,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,7,import com.fasterxml.jackson.core.JsonGenerator;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,8,import com.fasterxml.jackson.core.JsonParser;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,11,* Strategy class that can be implemented to specify actual inclusion/exclusion
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,12,"* criteria for filtering, used by {@link FilteringGeneratorDelegate}."
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,14,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,16,public class TokenFilter
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,19,// // Marker values
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,22,* Marker value that should be used to indicate inclusion of a structured
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,23,"* value (sub-tree representing Object or Array), or value of a named"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,24,* property (regardless of type).
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,25,"* Note that if this instance is returned, it will used as a marker, and"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,26,"* no actual callbacks need to be made. For this reason, it is more efficient"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,27,"* to return this instance if the whole sub-tree is to be included, instead"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,28,* of implementing similar filter functionality explicitly.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,30,public final static TokenFilter INCLUDE_ALL = new TokenFilter();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,32,// Life-cycle
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,34,protected TokenFilter() { }
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,38,"/* API, structured values"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,43,* Method called to check whether Object value at current output
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,44,* location should be included in output.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,45,* Three kinds of return values may be used as follows:
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,46,*<ul>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,47,* <li><code>null</code> to indicate that the Object should be skipped
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,48,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,49,* <li>{@link #INCLUDE_ALL} to indicate that the Object should be included
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,50,* completely in output
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,51,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,52,* <li>Any other {@link TokenFilter} implementation (possibly this one) to mean
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,53,*  that further inclusion calls on return filter object need to be made
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,54,"*  on contained properties, as necessary. {@link #filterFinishObject()} will"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,55,*  also be called on returned filter object
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,56,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,57,* </ul>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,58,*<p>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,59,"* Default implementation returns <code>this</code>, which means that checks"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,60,* are made recursively for properties of the Object to determine possible inclusion.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,62,"* @return TokenFilter to use for further calls within Array, unless return value"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,63,*   is <code>null</code> or {@link #INCLUDE_ALL} (which have simpler semantics)
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,65,public TokenFilter filterStartObject() {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,66,return this;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,70,* Method called to check whether Array value at current output
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,71,* location should be included in output.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,72,* Three kinds of return values may be used as follows:
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,73,*<ul>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,74,* <li><code>null</code> to indicate that the Array should be skipped
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,75,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,76,* <li>{@link #INCLUDE_ALL} to indicate that the Array should be included
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,77,* completely in output
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,78,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,79,* <li>Any other {@link TokenFilter} implementation (possibly this one) to mean
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,80,*  that further inclusion calls on return filter object need to be made
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,81,"*  on contained element values, as necessary. {@link #filterFinishArray()} will"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,82,*  also be called on returned filter object
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,83,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,84,* </ul>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,85,*<p>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,86,"* Default implementation returns <code>this</code>, which means that checks"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,87,* are made recursively for elements of the array to determine possible inclusion.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,89,"* @return TokenFilter to use for further calls within Array, unless return value"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,90,*   is <code>null</code> or {@link #INCLUDE_ALL} (which have simpler semantics)
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,92,public TokenFilter filterStartArray() {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,93,return this;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,97,* Method called to indicate that output of non-filtered Object (one that may
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,98,"* have been included either completely, or in part) is completed,"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,99,* in cases where filter other that {@link #INCLUDE_ALL} was returned.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,100,* This occurs when {@link JsonGenerator#writeEndObject()} is called.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,102,public void filterFinishObject() { }
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,105,* Method called to indicate that output of non-filtered Array (one that may
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,106,"* have been included either completely, or in part) is completed,"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,107,* in cases where filter other that {@link #INCLUDE_ALL} was returned.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,108,* This occurs when {@link JsonGenerator#writeEndArray()} is called.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,110,public void filterFinishArray() { }
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,114,"/* API, properties/elements"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,119,"* Method called to check whether property value with specified name,"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,120,"* at current output location, should be included in output."
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,121,* Three kinds of return values may be used as follows:
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,122,*<ul>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,123,* <li><code>null</code> to indicate that the property and its value should be skipped
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,124,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,125,* <li>{@link #INCLUDE_ALL} to indicate that the property and its value should be included
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,126,* completely in output
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,127,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,128,* <li>Any other {@link TokenFilter} implementation (possibly this one) to mean
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,129,*  that further inclusion calls on returned filter object need to be made
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,130,"*  as necessary, to determine inclusion."
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,131,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,132,* </ul>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,133,*<p>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,134,* The default implementation simply returns <code>this</code> to continue calling
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,135,"* methods on this filter object, without full inclusion or exclusion."
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,137,"* @return TokenFilter to use for further calls within property value, unless return value"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,138,*   is <code>null</code> or {@link #INCLUDE_ALL} (which have simpler semantics)
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,140,public TokenFilter includeProperty(String name) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,141,return this;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,145,"* Method called to check whether array element with specified index (zero-based),"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,146,"* at current output location, should be included in output."
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,147,* Three kinds of return values may be used as follows:
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,148,*<ul>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,149,* <li><code>null</code> to indicate that the Array element should be skipped
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,150,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,151,* <li>{@link #INCLUDE_ALL} to indicate that the Array element should be included
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,152,* completely in output
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,153,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,154,* <li>Any other {@link TokenFilter} implementation (possibly this one) to mean
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,155,*  that further inclusion calls on returned filter object need to be made
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,156,"*  as necessary, to determine inclusion."
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,157,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,158,* </ul>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,159,*<p>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,160,* The default implementation simply returns <code>this</code> to continue calling
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,161,"* methods on this filter object, without full inclusion or exclusion."
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,163,"* @return TokenFilter to use for further calls within element value, unless return value"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,164,*   is <code>null</code> or {@link #INCLUDE_ALL} (which have simpler semantics)
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,166,public TokenFilter includeElement(int index) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,167,return this;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,171,"* Method called to check whether root-level value,"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,172,"* at current output location, should be included in output."
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,173,* Three kinds of return values may be used as follows:
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,174,*<ul>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,175,* <li><code>null</code> to indicate that the root value should be skipped
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,176,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,177,* <li>{@link #INCLUDE_ALL} to indicate that the root value should be included
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,178,* completely in output
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,179,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,180,* <li>Any other {@link TokenFilter} implementation (possibly this one) to mean
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,181,*  that further inclusion calls on returned filter object need to be made
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,182,"*  as necessary, to determine inclusion."
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,183,*   </li>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,184,* </ul>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,185,*<p>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,186,* The default implementation simply returns <code>this</code> to continue calling
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,187,"* methods on this filter object, without full inclusion or exclusion."
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,189,"* @return TokenFilter to use for further calls within root value, unless return value"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,190,*   is <code>null</code> or {@link #INCLUDE_ALL} (which have simpler semantics)
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,192,public TokenFilter includeRootValue(int index) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,193,return this;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,198,"/* API, scalar values (being read)"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,203,* Call made when verifying whether a scaler value is being
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,204,* read from a parser.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,205,*<p>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,206,* Default action is to call <code>_includeScalar()</code> and return
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,207,* whatever it indicates.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,209,public boolean includeValue(JsonParser p) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,210,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,215,"/* API, scalar values (being written)"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,220,* Call made to verify whether leaf-level
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,221,* boolean value
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,222,* should be included in output or not.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,224,public boolean includeBoolean(boolean value) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,225,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,229,* Call made to verify whether leaf-level
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,230,* null value
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,231,* should be included in output or not.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,233,public boolean includeNull() {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,234,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,238,* Call made to verify whether leaf-level
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,239,* String value
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,240,* should be included in output or not.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,242,public boolean includeString(String value) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,243,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,247,* Call made to verify whether leaf-level
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,248,* <code>int</code> value
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,249,* should be included in output or not.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,251,"* NOTE: also called for `short`, `byte`"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,253,public boolean includeNumber(int v) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,254,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,258,* Call made to verify whether leaf-level
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,259,* <code>long</code> value
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,260,* should be included in output or not.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,262,public boolean includeNumber(long v) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,263,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,267,* Call made to verify whether leaf-level
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,268,* <code>float</code> value
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,269,* should be included in output or not.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,271,public boolean includeNumber(float v) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,272,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,276,* Call made to verify whether leaf-level
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,277,* <code>double</code> value
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,278,* should be included in output or not.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,280,public boolean includeNumber(double v) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,281,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,285,* Call made to verify whether leaf-level
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,286,* {@link BigDecimal} value
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,287,* should be included in output or not.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,289,public boolean includeNumber(BigDecimal v) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,290,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,294,* Call made to verify whether leaf-level
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,295,* {@link BigInteger} value
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,296,* should be included in output or not.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,298,public boolean includeNumber(BigInteger v) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,299,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,303,* Call made to verify whether leaf-level
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,304,* Binary value
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,305,* should be included in output or not.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,306,*<p>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,307,* NOTE: no binary payload passed; assumption is this won't be of much use.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,309,public boolean includeBinary() {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,310,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,314,* Call made to verify whether leaf-level
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,315,"* raw (pre-encoded, not quoted by generator) value"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,316,* should be included in output or not.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,317,*<p>
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,318,* NOTE: value itself not passed since it may come on multiple forms
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,319,* and is unlikely to be of much use in determining inclusion
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,320,* criteria.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,322,public boolean includeRawValue() {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,323,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,327,* Call made to verify whether leaf-level
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,328,* embedded (Opaque) value
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,329,* should be included in output or not.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,331,public boolean includeEmbeddedValue(Object ob) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,332,return _includeScalar();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,337,/* Overrides
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,341,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,342,public String toString() {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,343,if (this == INCLUDE_ALL) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,344,"return ""TokenFilter.INCLUDE_ALL"";"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,346,return super.toString();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,351,/* Other methods
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,356,* Overridable default implementation delegated to all scalar value
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,357,* inclusion check methods.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,358,* The default implementation simply includes all leaf values.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,360,protected boolean _includeScalar() {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java,361,return true;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,1,package com.fasterxml.jackson.core.filter;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,5,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,8,"* Alternative variant of {@link JsonStreamContext}, used when filtering"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,9,* content being read or written (based on {@link TokenFilter}).
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,11,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,13,public class TokenFilterContext extends JsonStreamContext
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,16,* Parent context for this context; null for root context.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,18,protected final TokenFilterContext _parent;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,22,/* Simple instance reuse slots; speed up things
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,23,/* a bit (10-15%) for docs with lots of small
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,24,/* arrays/objects
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,28,protected TokenFilterContext _child = null;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,32,/* Location/state information
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,37,* Name of the field of which value is to be parsed; only
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,38,* used for OBJECT contexts
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,40,protected String _currentName;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,43,"* Filter to use for items in this state (for properties of Objects,"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,44,"* elements of Arrays, and root-level values of root context)"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,46,protected TokenFilter _filter;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,49,"* Flag that indicates that start token has been read/written,"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,50,* so that matching close token needs to be read/written as well
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,51,* when context is getting closed.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,53,protected boolean _startHandled;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,56,* Flag that indicates that the current name of this context
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,57,"* still needs to be read/written, if path from root down to"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,58,* included leaf is to be exposed.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,60,protected boolean _needToHandleName;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,64,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,68,"protected TokenFilterContext(int type, TokenFilterContext parent,"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,69,"TokenFilter filter, boolean startHandled)"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,71,super();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,72,_type = type;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,73,_parent = parent;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,74,_filter = filter;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,75,_index = -1;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,76,_startHandled = startHandled;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,77,_needToHandleName = false;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,80,"protected TokenFilterContext reset(int type,"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,81,"TokenFilter filter, boolean startWritten)"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,83,_type = type;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,84,_filter = filter;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,85,_index = -1;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,86,_currentName = null;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,87,_startHandled = startWritten;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,88,_needToHandleName = false;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,89,return this;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,94,/* Factory methods
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,98,public static TokenFilterContext createRootContext(TokenFilter filter) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,99,"// true -> since we have no start/end marker, consider start handled"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,100,"return new TokenFilterContext(TYPE_ROOT, null, filter, true);"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,103,"public TokenFilterContext createChildArrayContext(TokenFilter filter, boolean writeStart) {"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,104,TokenFilterContext ctxt = _child;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,105,if (ctxt == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,106,"_child = ctxt = new TokenFilterContext(TYPE_ARRAY, this, filter, writeStart);"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,107,return ctxt;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,109,"return ctxt.reset(TYPE_ARRAY, filter, writeStart);"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,112,"public TokenFilterContext createChildObjectContext(TokenFilter filter, boolean writeStart) {"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,113,TokenFilterContext ctxt = _child;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,114,if (ctxt == null) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,115,"_child = ctxt = new TokenFilterContext(TYPE_OBJECT, this, filter, writeStart);"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,116,return ctxt;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,118,"return ctxt.reset(TYPE_OBJECT, filter, writeStart);"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,123,/* State changes
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,127,public TokenFilter setFieldName(String name) throws JsonProcessingException {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,128,_currentName = name;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,129,_needToHandleName = true;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,130,return _filter;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,134,* Method called to check whether value is to be included at current output
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,135,"* position, either as Object property, Array element, or root value."
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,137,public TokenFilter checkValue(TokenFilter filter) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,138,"// First, checks for Object properties have been made earlier:"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,139,if (_type == TYPE_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,140,return filter;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,142,"// We increase it first because at the beginning of array, value is -1"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,143,int ix = ++_index;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,144,if (_type == TYPE_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,145,return filter.includeElement(ix);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,147,return filter.includeRootValue(ix);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,151,* Method called to ensure that parent path from root is written up to
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,152,* and including this node.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,154,public void writePath(JsonGenerator gen) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,156,if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,157,return;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,159,if (_parent != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,160,_parent._writePath(gen);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,162,if (_startHandled) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,163,"// even if Object started, need to start leaf-level name"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,164,if (_needToHandleName) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,165,gen.writeFieldName(_currentName);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,167,} else {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,168,_startHandled = true;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,169,if (_type == TYPE_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,170,gen.writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,171,gen.writeFieldName(_currentName); // we know name must be written
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,172,} else if (_type == TYPE_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,173,gen.writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,179,* Variant of {@link #writePath(JsonGenerator)} called when all we
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,180,* need is immediately surrounding Object. Method typically called
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,181,* when including a single property but not including full path
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,182,* to root.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,184,public void writeImmediatePath(JsonGenerator gen) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,186,if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,187,return;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,189,if (_startHandled) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,190,"// even if Object started, need to start leaf-level name"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,191,if (_needToHandleName) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,192,gen.writeFieldName(_currentName);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,194,} else {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,195,_startHandled = true;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,196,if (_type == TYPE_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,197,gen.writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,198,if (_needToHandleName) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,199,gen.writeFieldName(_currentName);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,201,} else if (_type == TYPE_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,202,gen.writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,207,private void _writePath(JsonGenerator gen) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,209,if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,210,return;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,212,if (_parent != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,213,_parent._writePath(gen);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,215,if (_startHandled) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,216,"// even if Object started, need to start leaf-level name"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,217,if (_needToHandleName) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,218,_needToHandleName = false; // at parent must explicitly clear
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,219,gen.writeFieldName(_currentName);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,221,} else {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,222,_startHandled = true;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,223,if (_type == TYPE_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,224,gen.writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,225,if (_needToHandleName) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,226,_needToHandleName = false; // at parent must explicitly clear
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,227,gen.writeFieldName(_currentName);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,229,} else if (_type == TYPE_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,230,gen.writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,235,public TokenFilterContext closeArray(JsonGenerator gen) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,237,if (_startHandled) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,238,gen.writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,240,if ((_filter != null) && (_filter != TokenFilter.INCLUDE_ALL)) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,241,_filter.filterFinishArray();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,243,return _parent;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,246,public TokenFilterContext closeObject(JsonGenerator gen) throws IOException
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,248,if (_startHandled) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,249,gen.writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,251,if ((_filter != null) && (_filter != TokenFilter.INCLUDE_ALL)) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,252,_filter.filterFinishObject();
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,254,return _parent;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,257,public void skipParentChecks() {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,258,_filter = null;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,259,for (TokenFilterContext ctxt = _parent; ctxt != null; ctxt = ctxt._parent) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,260,_parent._filter = null;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,266,"/* Accessors, mutators"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,270,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,271,public Object getCurrentValue() { return null; }
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,273,@Override
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,274,public void setCurrentValue(Object v) { }
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,276,@Override public final TokenFilterContext getParent() { return _parent; }
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,277,@Override public final String getCurrentName() { return _currentName; }
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,279,public TokenFilter getFilter() { return _filter; }
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,280,public boolean isStartHandled() { return _startHandled; }
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,282,public JsonToken nextTokenToRead() {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,283,if (!_startHandled) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,284,_startHandled = true;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,285,if (_type == TYPE_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,286,return JsonToken.START_OBJECT;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,288,// Note: root should never be unhandled
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,289,return JsonToken.START_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,291,// But otherwise at most might have FIELD_NAME
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,292,if (_needToHandleName && (_type == TYPE_OBJECT)) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,293,_needToHandleName = false;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,294,return JsonToken.FIELD_NAME;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,296,return null;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,299,public TokenFilterContext findChildOf(TokenFilterContext parent) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,300,if (_parent == parent) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,301,return this;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,303,TokenFilterContext curr = _parent;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,304,while (curr != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,305,TokenFilterContext p = curr._parent;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,306,if (p == parent) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,307,return curr;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,309,curr = p;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,311,// should never occur but...
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,312,return null;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,315,// // // Internally used abstract methods
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,317,protected void appendDesc(StringBuilder sb) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,318,if (_parent != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,319,_parent.appendDesc(sb);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,321,if (_type == TYPE_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,322,sb.append('{');
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,323,if (_currentName != null) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,324,"sb.append('""');"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,325,// !!! TODO: Name chars should be escaped?
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,326,sb.append(_currentName);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,327,"sb.append('""');"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,328,} else {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,329,sb.append('?');
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,331,sb.append('}');
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,332,} else if (_type == TYPE_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,333,sb.append('[');
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,334,sb.append(getCurrentIndex());
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,335,sb.append(']');
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,336,} else {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,337,"// nah, ROOT:"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,338,"sb.append(""/"");"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,342,// // // Overridden standard methods
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,345,"* Overridden to provide developer writeable ""JsonPath"" representation"
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,346,* of the context.
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,348,@Override public String toString() {
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,349,StringBuilder sb = new StringBuilder(64);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,350,appendDesc(sb);
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,351,return sb.toString();
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,113,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,115,public IOContext withEncoding(JsonEncoding enc) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,116,_encoding = enc;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,117,return this;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,320,* @since 2.6.0
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,322,public static String toString(float v) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,323,return Float.toString(v);
False,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,9,mport com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,9,import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
False,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,212,"ytesToNameCanonicalizer rootByteSymbols, CharsToNameCanonicalizer rootCharSymbols,"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,212,"ByteQuadsCanonicalizer rootByteSymbols, CharsToNameCanonicalizer rootCharSymbols,"
False,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,222,ytesToNameCanonicalizer can = rootByteSymbols.makeChild(factoryFeatures);
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,222,ByteQuadsCanonicalizer can = rootByteSymbols.makeChild(factoryFeatures);
False,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,166,"ublic final void writeStringField(String fieldName, String value)"
False,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,167,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,166,"public final void writeStringField(String fieldName, String value) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,136,/ // // Shared API
False,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,145,/ // // API sub-classes are to implement
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,165,if (!_gotName) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,166,return STATUS_EXPECT_NAME;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,253,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,254,return getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,269,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,270,return getCurrentName();
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,548,"* Public API, traversal"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,554,"/* Public API, traversal"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,717,"/* Public API, nextXxx() overrides"
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,712,hrows IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,724,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,730,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,731,public String nextFieldName() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,733,// // // Note: this is almost a verbatim copy of nextToken() (minus comments)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,735,_numTypesValid = NR_UNKNOWN;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,736,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,737,_nextAfterName();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,738,return null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,740,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,741,_skipString();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,743,int i = _skipWSOrEnd();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,744,if (i < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,745,close();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,746,_currToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,747,return null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,749,_tokenInputTotal = _currInputProcessed + _inputPtr - 1;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,750,_tokenInputRow = _currInputRow;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,751,_tokenInputCol = _inputPtr - _currInputRowStart - 1;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,752,_binaryValue = null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,753,if (i == INT_RBRACKET) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,754,if (!_parsingContext.inArray()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,755,"_reportMismatchedEndMarker(i, '}');"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,757,_parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,758,_currToken = JsonToken.END_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,759,return null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,761,if (i == INT_RCURLY) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,762,if (!_parsingContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,763,"_reportMismatchedEndMarker(i, ']');"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,765,_parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,766,_currToken = JsonToken.END_OBJECT;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,767,return null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,769,if (_parsingContext.expectComma()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,770,i = _skipComma(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,773,if (!_parsingContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,774,_nextTokenNotInObject(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,775,return null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,778,String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,779,_parsingContext.setCurrentName(name);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,780,_currToken = JsonToken.FIELD_NAME;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,781,i = _skipColon();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,783,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,784,_tokenIncomplete = true;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,785,_nextToken = JsonToken.VALUE_STRING;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,786,return name;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,789,// Ok: we must have a value... what is it?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,791,JsonToken t;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,793,switch (i) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,794,case '-':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,795,t = _parseNegNumber();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,796,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,797,case '0':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,798,case '1':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,799,case '2':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,800,case '3':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,801,case '4':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,802,case '5':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,803,case '6':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,804,case '7':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,805,case '8':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,806,case '9':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,807,t = _parsePosNumber(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,808,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,809,case 'f':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,810,_matchFalse();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,811,t = JsonToken.VALUE_FALSE;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,812,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,813,case 'n':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,814,_matchNull();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,815,t = JsonToken.VALUE_NULL;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,816,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,817,case 't':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,818,_matchTrue();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,819,t = JsonToken.VALUE_TRUE;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,820,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,821,case '[':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,822,t = JsonToken.START_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,823,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,824,case '{':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,825,t = JsonToken.START_OBJECT;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,826,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,827,default:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,828,t = _handleOddValue(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,829,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,831,_nextToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,832,return name;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,835,private final JsonToken _nextTokenNotInObject(int i) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,837,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,838,_tokenIncomplete = true;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,839,return (_currToken = JsonToken.VALUE_STRING);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,841,switch (i) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,842,case '[':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,843,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,844,return (_currToken = JsonToken.START_ARRAY);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,845,case '{':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,846,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,847,return (_currToken = JsonToken.START_OBJECT);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,848,case 't':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,849,"_matchToken(""true"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,850,return (_currToken = JsonToken.VALUE_TRUE);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,851,case 'f':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,852,"_matchToken(""false"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,853,return (_currToken = JsonToken.VALUE_FALSE);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,854,case 'n':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,855,"_matchToken(""null"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,856,return (_currToken = JsonToken.VALUE_NULL);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,857,case '-':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,858,return (_currToken = _parseNegNumber());
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,859,/* Should we have separate handling for plus? Although
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,860,"* it is not allowed per se, it may be erroneously used,"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,861,* and could be indicated by a more specific error message.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,863,case '0':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,864,case '1':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,865,case '2':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,866,case '3':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,867,case '4':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,868,case '5':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,869,case '6':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,870,case '7':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,871,case '8':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,872,case '9':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,873,return (_currToken = _parsePosNumber(i));
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,875,return (_currToken = _handleOddValue(i));
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,148,outputMaxContiguous = _outputEnd >> 3;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,148,_outputMaxContiguous = (_outputEnd >> 3);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,165,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,166,public int getOutputBuffered() {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,167,"// Assuming tail is always valid, set to 0 on close"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,168,return _outputTail;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,205,"ame.getChars(0, len, _charBuffer, 0);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,211,"writeStringSegment(_charBuffer, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,216,"_writeStringSegment(name, 0, len);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,213,"writeStringSegments(_charBuffer, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,218,"_writeStringSegments(name, 0, len);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,419,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,424,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,424,/ First: can we make a local copy of chars that make up text?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,429,"// First: if we can't guarantee it all fits, quoted, within output, offline"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,426,f (len > _charBufferLength) { // nope: off-line handling
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,431,if (len > _outputMaxContiguous) { // nope: off-line handling
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,430,/ yes: good.
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,431,"ext.getChars(0, len, _charBuffer, 0);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,432,"/ Output: if we can't guarantee it fits in output buffer, off-line as well:"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,433,f (len > _outputMaxContiguous) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,434,"writeLongString(_charBuffer, 0, len);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,435,eturn;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,441,"writeStringSegment(_charBuffer, 0, len); // we checked space already above"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,442,* [JACKSON-462] But that method may have had to expand multi-byte Unicode
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,443,"   chars, so we must check again"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,445,f (_outputTail >= _outputEnd) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,446,flushBuffer();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,448,outputBuffer[_outputTail++] = BYTE_QUOTE;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,451,"rivate void _writeLongString(char[] text, int offset, int len) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,453,f (_outputTail >= _outputEnd) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,454,flushBuffer();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,456,outputBuffer[_outputTail++] = BYTE_QUOTE;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,457,"writeStringSegments(text, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,439,"_writeStringSegment(text, 0, len); // we checked space already above"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,467,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,449,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,491,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,473,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,511,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,493,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,526,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,508,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,593,"verifyValueWrite(""write raw value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,575,_verifyValueWrite(WRITE_RAW);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,713,"verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,695,_verifyValueWrite(WRITE_BINARY);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,732,"verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,714,_verifyValueWrite(WRITE_BINARY);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,771,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,753,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,796,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,778,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,822,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,804,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,848,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,830,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,871,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,853,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,887,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,869,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,896,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,878,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,913,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,895,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,938,"verifyValueWrite(""write boolean value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,920,_verifyValueWrite(WRITE_BOOLEAN);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,952,"verifyValueWrite(""write null value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,934,_verifyValueWrite(WRITE_NULL);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,963,rotected final void _verifyValueWrite(String typeMsg)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,964,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,945,protected final void _verifyValueWrite(String typeMsg) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1002,"rotected final void _verifyPrettyValueWrite(String typeMsg, int status)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1003,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,983,"protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1037,ublic void flush()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1038,hrows IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1017,public void flush() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1049,ublic void close()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1050,hrows IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1028,public void close() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1058,f (_outputBuffer != null
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1036,if ((_outputBuffer != null)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1050,_outputTail = 0; // just to ensure we don't think there's anything buffered
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1165,inal char[] cbuf = _charBuffer;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1169,"ext.getChars(offset, offset+len, cbuf, 0);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1173,"writeStringSegment(cbuf, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1150,"_writeStringSegment(text, offset, len);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1192,"rivate final void _writeStringSegments(char[] cbuf, int offset, int totalLen)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1193,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1169,"private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1182,"private final void _writeStringSegments(String text, int offset, int totalLen) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1184,do {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1185,"int len = Math.min(_outputMaxContiguous, totalLen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1186,if ((_outputTail + len) > _outputEnd) { // caller must ensure enough space
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1187,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1189,"_writeStringSegment(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1190,offset += len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1191,totalLen -= len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1192,} while (totalLen > 0);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1221,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1210,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1245,"private final void _writeStringSegment(String text, int offset, int len) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1247,// note: caller MUST ensure (via flushing) there's room for ASCII only
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1248,"// Fast+tight loop for ASCII-only, no-escaping-needed output"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1249,"len += offset; // becomes end marker, then"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1251,int outputPtr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1252,final byte[] outputBuffer = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1253,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1255,while (offset < len) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1256,int ch = text.charAt(offset);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1257,// note: here we know that (ch > 0x7F) will cover case of escaping non-ASCII too:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1258,if (ch > 0x7F || escCodes[ch] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1259,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1261,outputBuffer[outputPtr++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1262,++offset;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1264,_outputTail = outputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1265,if (offset < len) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1266,if (_characterEscapes != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1267,"_writeCustomStringSegment2(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1268,} else if (_maximumNonEscapedChar == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1269,"_writeStringSegment2(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1270,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1271,"_writeStringSegmentASCII2(text, offset, len);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1260,"rivate final void _writeStringSegment2(final char[] cbuf, int offset, final int end)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1261,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1280,"private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1319,"private final void _writeStringSegment2(final String text, int offset, final int end) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1321,if ((_outputTail +  6 * (end - offset)) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1322,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1325,int outputPtr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1327,final byte[] outputBuffer = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1328,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1330,while (offset < end) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1331,int ch = text.charAt(offset++);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1332,if (ch <= 0x7F) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1333,if (escCodes[ch] == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1334,outputBuffer[outputPtr++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1335,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1337,int escape = escCodes[ch];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1338,"if (escape > 0) { // 2-char escape, fine"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1339,outputBuffer[outputPtr++] = BYTE_BACKSLASH;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1340,outputBuffer[outputPtr++] = (byte) escape;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1341,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1342,"// ctrl-char, 6-byte escape..."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1343,"outputPtr = _writeGenericEscape(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1345,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1347,"if (ch <= 0x7FF) { // fine, just needs 2 byte output"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1348,outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1349,outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1350,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1351,"outputPtr = _outputMultiByteChar(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1354,_outputTail = outputPtr;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1311,"rivate final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1312,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1368,"private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1412,"private final void _writeStringSegmentASCII2(final String text, int offset, final int end) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1414,// Ok: caller guarantees buffer can have room; but that may require flushing:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1415,if ((_outputTail +  6 * (end - offset)) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1416,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1419,int outputPtr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1421,final byte[] outputBuffer = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1422,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1423,final int maxUnescaped = _maximumNonEscapedChar;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1425,while (offset < end) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1426,int ch = text.charAt(offset++);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1427,if (ch <= 0x7F) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1428,if (escCodes[ch] == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1429,outputBuffer[outputPtr++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1430,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1432,int escape = escCodes[ch];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1433,"if (escape > 0) { // 2-char escape, fine"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1434,outputBuffer[outputPtr++] = BYTE_BACKSLASH;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1435,outputBuffer[outputPtr++] = (byte) escape;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1436,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1437,"// ctrl-char, 6-byte escape..."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1438,"outputPtr = _writeGenericEscape(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1440,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1442,if (ch > maxUnescaped) { // [JACKSON-102] Allow forced escaping if non-ASCII (etc) chars:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1443,"outputPtr = _writeGenericEscape(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1444,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1446,"if (ch <= 0x7FF) { // fine, just needs 2 byte output"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1447,outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1448,outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1449,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1450,"outputPtr = _outputMultiByteChar(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1453,_outputTail = outputPtr;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1367,"rivate final void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1368,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1467,"private final void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1524,"private final void _writeCustomStringSegment2(final String text, int offset, final int end) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1526,// Ok: caller guarantees buffer can have room; but that may require flushing:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1527,if ((_outputTail +  6 * (end - offset)) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1528,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1530,int outputPtr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1532,final byte[] outputBuffer = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1533,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1534,// may or may not have this limit
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1535,final int maxUnescaped = (_maximumNonEscapedChar <= 0) ? 0xFFFF : _maximumNonEscapedChar;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1536,final CharacterEscapes customEscapes = _characterEscapes; // non-null
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1538,while (offset < end) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1539,int ch = text.charAt(offset++);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1540,if (ch <= 0x7F) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1541,if (escCodes[ch] == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1542,outputBuffer[outputPtr++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1543,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1545,int escape = escCodes[ch];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1546,"if (escape > 0) { // 2-char escape, fine"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1547,outputBuffer[outputPtr++] = BYTE_BACKSLASH;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1548,outputBuffer[outputPtr++] = (byte) escape;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1549,} else if (escape == CharacterEscapes.ESCAPE_CUSTOM) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1550,SerializableString esc = customEscapes.getEscapeSequence(ch);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1551,if (esc == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1552,"_reportError(""Invalid custom escape definitions; custom escape not found for character code 0x"""
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1553,"+Integer.toHexString(ch)+"", although was supposed to have one"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1555,"outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end-offset);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1556,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1557,"// ctrl-char, 6-byte escape..."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1558,"outputPtr = _writeGenericEscape(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1560,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1562,if (ch > maxUnescaped) { // [JACKSON-102] Allow forced escaping if non-ASCII (etc) chars:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1563,"outputPtr = _writeGenericEscape(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1564,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1566,SerializableString esc = customEscapes.getEscapeSequence(ch);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1567,if (esc != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1568,"outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end-offset);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1569,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1571,"if (ch <= 0x7FF) { // fine, just needs 2 byte output"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1572,outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1573,outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1574,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1575,"outputPtr = _outputMultiByteChar(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1578,_outputTail = outputPtr;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,10,mport com.fasterxml.jackson.core.sym.*;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,10,import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,49,inal protected BytesToNameCanonicalizer _symbols;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,49,final protected ByteQuadsCanonicalizer _symbols;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,111,"bjectCodec codec, BytesToNameCanonicalizer sym,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,111,"ObjectCodec codec, ByteQuadsCanonicalizer sym,"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,280,ublic String getText()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,281,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,280,public String getText() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,286,finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,285,return _finishAndReturnString(); // only strings can be incomplete
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,297,"ublic String getValueAsString() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,296,public String getValueAsString() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,302,finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,301,return _finishAndReturnString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,305,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,306,return getCurrentName();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,311,"ublic String getValueAsString(String defValue) throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,313,public String getValueAsString(String defValue) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,316,finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,318,return _finishAndReturnString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,322,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,323,return getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,328,// since 2.6
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,329,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,330,public int getValueAsInt() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,332,JsonToken t = _currToken;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,333,if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,334,// inlined 'getIntValue()'
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,335,if ((_numTypesValid & NR_INT) == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,336,if (_numTypesValid == NR_UNKNOWN) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,337,return _parseIntValue();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,339,if ((_numTypesValid & NR_INT) == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,340,convertNumberToInt();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,343,return _numberInt;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,345,return super.getValueAsInt(0);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,348,// since 2.6
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,349,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,350,public int getValueAsInt(int defValue) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,352,JsonToken t = _currToken;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,353,if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,354,// inlined 'getIntValue()'
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,355,if ((_numTypesValid & NR_INT) == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,356,if (_numTypesValid == NR_UNKNOWN) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,357,return _parseIntValue();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,359,if ((_numTypesValid & NR_INT) == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,360,convertNumberToInt();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,363,return _numberInt;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,365,return super.getValueAsInt(defValue);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,343,ublic char[] getTextCharacters()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,344,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,388,public char[] getTextCharacters() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,381,ublic int getTextLength()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,382,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,425,public int getTextLength() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,407,"ublic int getTextOffset() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,450,public int getTextOffset() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,430,ublic byte[] getBinaryValue(Base64Variant b64variant)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,431,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,473,public byte[] getBinaryValue(Base64Variant b64variant) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,462,"ublic int readBinaryValue(Base64Variant b64variant, OutputStream out)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,463,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,504,"public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,481,yte[] buffer)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,482,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,522,byte[] buffer) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,700,ame n = _parseName(i);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,701,parsingContext.setCurrentName(n.getName());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,740,String n = _parseName(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,741,_parsingContext.setCurrentName(n);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,897,isNextTokenNameYes(_skipColonFast(ptr+1));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,937,i = _skipColonFast(ptr+1);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,938,_isNextTokenNameYes(i);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,967,ame n = _parseName(i);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,968,inal String nameStr = n.getName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1008,final String nameStr = _parseName(i);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,984,* Should we have separate handling for plus? Although
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,985," it is not allowed per se, it may be erroneously used,"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,986, and could be indicate by a more specific error message.
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1126,ame n = _parseName(i);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1127,inal boolean match;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1129,tring nameStr = n.getName();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1130,parsingContext.setCurrentName(nameStr);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1131,atch = nameStr.equals(str.getValue());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1161,String n = _parseName(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1162,_parsingContext.setCurrentName(n);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1163,final boolean match = n.equals(str.getValue());
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1197,finishString();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1228,return _finishAndReturnString();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1281,witch (nextToken().id()) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1282,ase ID_TRUE:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1312,JsonToken t = nextToken();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1313,if (t == JsonToken.VALUE_TRUE) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1284,ase ID_FALSE:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1316,if (t == JsonToken.VALUE_FALSE) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1286,efault:
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1287,eturn null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1319,return null;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1616,rotected final Name _parseName(int i) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1647,protected final String _parseName(int i) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1622,"f ((_inputPtr + 9) > _inputEnd) { // Need 8 chars, plus one trailing (quote)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1653,"if ((_inputPtr + 13) > _inputEnd) { // Need up to 12 chars, plus one trailing (quote)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1673,eturn BytesToNameCanonicalizer.getEmptyName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1704,"return """";"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1678,rotected final Name parseMediumName(int q2) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1709,protected final String parseMediumName(int q2) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1715,"eturn parseLongName(i, q2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1746,"return parseMediumName2(i, q2);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1718,"rotected final Name parseLongName(int q, final int q2) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1750,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1752,"protected final String parseMediumName2(int q3, final int q2) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1754,final byte[] input = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1755,final int[] codes = _icLatin1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1757,// Got 9 name bytes so far
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1758,int i = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1759,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1760,if (i == INT_QUOTE) { // 9 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1761,"return findName(_quad1, q2, q3, 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1763,"return parseName(_quad1, q2, q3, i, 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1765,q3 = (q3 << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1766,i = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1767,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1768,if (i == INT_QUOTE) { // 10 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1769,"return findName(_quad1, q2, q3, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1771,"return parseName(_quad1, q2, q3, i, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1773,q3 = (q3 << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1774,i = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1775,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1776,if (i == INT_QUOTE) { // 11 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1777,"return findName(_quad1, q2, q3, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1779,"return parseName(_quad1, q2, q3, i, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1781,q3 = (q3 << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1782,i = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1783,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1784,if (i == INT_QUOTE) { // 12 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1785,"return findName(_quad1, q2, q3, 4);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1787,"return parseName(_quad1, q2, q3, i, 4);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1789,"return parseLongName(i, q2, q3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1792,"protected final String parseLongName(int q, final int q2, int q3) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1796,_quadBuffer[2] = q3;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1726,nt qlen = 2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1801,int qlen = 3;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1781," to come consecutively. Happens rarely, so this is off-lined;"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1856,"* to come consequtively. Happens rarely, so this is offlined;"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1784,rotected Name slowParseName() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1859,protected String slowParseName() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1793,eturn BytesToNameCanonicalizer.getEmptyName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1868,"return """";"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1798,"rivate final Name parseName(int q1, int ch, int lastQuadBytes) throws IOException {"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1873,"private final String parseName(int q1, int ch, int lastQuadBytes) throws IOException {"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1802,"rivate final Name parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException {"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1877,"private final String parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException {"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1882,"private final String parseName(int q1, int q2, int q3, int ch, int lastQuadBytes) throws IOException {"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1883,_quadBuffer[0] = q1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1884,_quadBuffer[1] = q2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1885,"return parseEscapedName(_quadBuffer, 2, q3, ch, lastQuadBytes);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1810," names, or ones crossing input buffer boundary). In any case,"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1811," needs to be able to handle more exceptional cases, gets"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1812," slower, and hance is offlined to a separate method."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1891,"* names, one crossing input buffer boundary)."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1892,"* Needs to be able to handle more exceptional cases, gets slower,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1893,* and hance is offlined to a separate method.
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1814,"rotected final Name parseEscapedName(int[] quads, int qlen, int currQuad, int ch,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1895,"protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch,"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1899,"ame name = _symbols.findName(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1981,"String name = _symbols.findName(quads, qlen);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1912,rotected Name _handleOddName(int ch) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1994,protected String _handleOddName(int ch) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1973,"ame name = _symbols.findName(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2055,"String name = _symbols.findName(quads, qlen);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1985,rotected Name _parseAposName() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2067,protected String _parseAposName() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1994,eturn BytesToNameCanonicalizer.getEmptyName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2076,"return """";"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2083,"ame name = _symbols.findName(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2165,"String name = _symbols.findName(quads, qlen);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2096,"rivate final Name findName(int q1, int lastQuadBytes)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2097,hrows JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2178,"private final String findName(int q1, int lastQuadBytes) throws JsonParseException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2101,ame name = _symbols.findName(q1);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2182,String name = _symbols.findName(q1);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2110,"rivate final Name findName(int q1, int q2, int lastQuadBytes)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2111,hrows JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2191,"private final String findName(int q1, int q2, int lastQuadBytes) throws JsonParseException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2115,"ame name = _symbols.findName(q1, q2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2195,"String name = _symbols.findName(q1, q2);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2125,"rivate final Name findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2126,hrows JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2205,"private final String findName(int q1, int q2, int q3, int lastQuadBytes) throws JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2207,"q3 = pad(q3, lastQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2208,"String name = _symbols.findName(q1, q2, q3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2209,if (name != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2210,return name;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2212,int[] quads = _quadBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2213,quads[0] = q1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2214,quads[1] = q2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2215,"quads[2] = pad(q3, lastQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2216,"return addName(quads, 3, lastQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2219,"private final String findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes) throws JsonParseException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2132,"ame name = _symbols.findName(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2225,"String name = _symbols.findName(quads, qlen);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2145,"rivate final Name addName(int[] quads, int qlen, int lastQuadBytes)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2146,hrows JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2238,"private final String addName(int[] quads, int qlen, int lastQuadBytes) throws JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2385,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2387,protected String _finishAndReturnString() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2389,"// First, single tight loop for ASCII content, not split across input buffer boundary:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2390,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2391,if (ptr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2392,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2393,ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2395,int outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2396,char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2397,final int[] codes = _icUTF8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2399,"final int max = Math.min(_inputEnd, (ptr + outBuf.length));"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2400,final byte[] inputBuffer = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2401,while (ptr < max) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2402,int c = (int) inputBuffer[ptr] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2403,if (codes[c] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2404,if (c == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2405,_inputPtr = ptr+1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2406,return _textBuffer.setCurrentAndReturn(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2408,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2410,++ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2411,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2413,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2414,"_finishString2(outBuf, outPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2415,return _textBuffer.contentsAsString();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,91,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,92,public int getOutputBuffered() {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,93,// Assuming tail and head are kept but... trust and verify:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,94,int len = _outputTail - _outputHead;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,95,"return Math.max(0, len);"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,322,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,329,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,342,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,349,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,358,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,365,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,510,"verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,517,_verifyValueWrite(WRITE_BINARY);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,529,"verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,536,_verifyValueWrite(WRITE_BINARY);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,567,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,574,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,591,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,598,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,615,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,622,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,641,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,648,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,662,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,669,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,676,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,683,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,684,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,691,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,700,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,707,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,724,"verifyValueWrite(""write boolean value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,731,_verifyValueWrite(WRITE_BOOLEAN);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,747,"verifyValueWrite(""write null value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,754,_verifyValueWrite(WRITE_NULL);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,843,ublic void close()
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,844,hrows IOException
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,850,public void close() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,872,_outputHead = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,873,_outputTail = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1,package com.fasterxml.jackson.core.sym;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,3,import java.util.Arrays;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,4,import java.util.concurrent.atomic.AtomicReference;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,6,import com.fasterxml.jackson.core.JsonFactory;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,7,import com.fasterxml.jackson.core.util.InternCache;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,10,* Replacement for <code>BytesToNameCanonicalizer</code> which aims at more localized
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,11,* memory access due to flattening of name quad data.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,12,"* Performance improvement modest for simple JSON document data binding (maybe 3%),"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,13,"* but should help more for larger symbol tables, or for binary formats like Smile."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,15,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,17,public final class ByteQuadsCanonicalizer
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,20,"* Initial size of the primary hash area. Each entry consumes 4 ints (16 bytes),"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,21,* and secondary area is same as primary; so default size will use 2kB of memory_tertiaryStart
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,22,"* (plus 64x4 or 64x8 (256/512 bytes) for references to Strings, and Strings"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,23,* themselves).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,25,private static final int DEFAULT_T_SIZE = 64;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,26,//    private static final int DEFAULT_T_SIZE = 256;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,29,* Let's not expand symbol tables past some maximum size;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,30,* this should protected against OOMEs caused by large documents
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,31,* with unique (~= random) names.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,32,* Size is in
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,34,private static final int MAX_T_SIZE = 0x10000; // 64k entries == 2M mem hash area
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,37,"* No point in trying to construct tiny tables, just need to resize soon."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,39,final static int MIN_HASH_SIZE = 16;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,42,* Let's only share reasonably sized symbol tables. Max size set to 3/4 of 8k;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,43,* this corresponds to 256k main hash index. This should allow for enough distinct
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,44,"* names for almost any case, while preventing ballooning for cases where names"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,45,* are unique (or close thereof).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,47,final static int MAX_ENTRIES_FOR_REUSE = 6000;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,51,"/* Linkage, needed for merging symbol tables"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,56,"* Reference to the root symbol table, for child tables, so"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,57,* that they can merge table information back as necessary.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,59,final protected ByteQuadsCanonicalizer _parent;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,62,* Member that is only used by the root table instance: root
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,63,"* passes immutable state into child instances, and children"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,64,* may return new state if they add entries to the table.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,65,* Child tables do NOT use the reference.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,67,final protected AtomicReference<TableInfo> _tableInfo;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,70,* Seed value we use as the base to make hash codes non-static between
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,71,"* different runs, but still stable for lifetime of a single symbol table"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,72,* instance.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,73,"* This is done for security reasons, to avoid potential DoS attack via"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,74,* hash collisions.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,76,final private int _seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,80,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,85,* Whether canonical symbol Strings are to be intern()ed before added
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,86,* to the table or not.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,87,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,88,* NOTE: non-final to allow disabling intern()ing in case of excessive
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,89,* collisions.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,91,protected boolean _intern;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,94,* Flag that indicates whether we should throw an exception if enough
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,95,* hash collisions are detected (true); or just worked around (false).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,97,* @since 2.4
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,99,protected final boolean _failOnDoS;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,103,"/* First, main hash area info"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,108,* Primary hash information area: consists of <code>2 * _hashSize</code>
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,109,"* entries of 16 bytes (4 ints), arranged in a cascading lookup"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,110,* structure (details of which may be tweaked depending on expected rates
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,111,* of collisions).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,113,protected int[] _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,116,* Number of slots for primary entries within {@link #_hashArea}; which is
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,117,"* at most <code>1/8</code> of actual size of the underlying array (4-int slots,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,118,"* primary covers only half of the area; plus, additional area for longer"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,119,* symbols after hash area).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,121,protected int _hashSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,124,* Offset within {@link #_hashArea} where secondary entries start
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,126,protected int _secondaryStart;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,129,* Offset within {@link #_hashArea} where tertiary entries start
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,131,protected int _tertiaryStart;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,134,* Constant that determines size of buckets for tertiary entries:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,135,"* <code>1 &lt;&lt; _tertiaryShift</code> is the size, and shift value"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,136,* is also used for translating from primary offset into
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,137,* tertiary bucket (shift right by <code>4 + _tertiaryShift</code>).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,138,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,139,"* Default value is 2, for buckets of 4 slots; grows bigger with"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,140,* bigger table sizes.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,142,protected int _tertiaryShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,145,* Total number of Strings in the symbol table; only used for child tables.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,147,protected int _count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,150,* Array that contains <code>String</code> instances matching
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,151,* entries in {@link #_hashArea}.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,152,* Contains nulls for unused entries. Note that this size is twice
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,153,* that of {@link #_hashArea}
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,155,protected String[] _names;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,159,/* Then information on collisions etc
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,164,* Pointer to the offset within spill-over area where there is room
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,165,* for more spilled over entries (if any).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,166,* Spill over area is within fixed-size portion of {@link #_hashArea}.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,168,protected int _spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,171,* Offset within {@link #_hashArea} that follows main slots and contains
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,172,"* quads for longer names (13 bytes or longers), and points to the"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,173,* first available int that may be used for appending quads of the next
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,174,* long name.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,175,* Note that long name area follows immediately after the fixed-size
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,176,* main hash area ({@link #_hashArea}).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,178,protected int _longNameOffset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,181,"* This flag is set if, after adding a new entry, it is deemed"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,182,* that a rehash is warranted if any more entries are to be added.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,184,private transient boolean _needRehash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,188,"/* Sharing, versioning"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,192,// // // Which of the buffers may be shared (and are copy-on-write)?
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,195,* Flag that indicates whether underlying data structures for
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,196,"* the main hash area are shared or not. If they are, then they"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,197,"* need to be handled in copy-on-write way, i.e. if they need"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,198,"* to be modified, a copy needs to be made first; at this point"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,199,"* it will not be shared any more, and can be modified."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,200,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,201,"* This flag needs to be checked both when adding new main entries,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,202,* and when adding new collision list queues (i.e. creating a new
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,203,* collision list head entry)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,205,private boolean _hashShared;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,209,/* Life-cycle: constructors
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,214,"* Constructor used for creating per-<code>JsonFactory</code> ""root"""
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,215,* symbol tables: ones used for merging and sharing common symbols
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,217,* @param sz Initial primary hash area size
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,218,* @param intern Whether Strings contained should be {@link String#intern}ed
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,219,* @param seed Random seed valued used to make it more difficult to cause
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,220,*   collisions (used for collision-based DoS attacks).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,222,"private ByteQuadsCanonicalizer(int sz, boolean intern, int seed, boolean failOnDoS) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,223,_parent = null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,224,_seed = seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,225,_intern = intern;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,226,_failOnDoS = failOnDoS;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,227,// Sanity check: let's now allow hash sizes below certain minimum value
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,228,if (sz < MIN_HASH_SIZE) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,229,sz = MIN_HASH_SIZE;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,230,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,231,// Also; size must be 2^N; otherwise hash algorithm won't
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,232,"// work... so let's just pad it up, if so"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,233,if ((sz & (sz - 1)) != 0) { // only true if it's 2^N
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,234,int curr = MIN_HASH_SIZE;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,235,while (curr < sz) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,236,curr += curr;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,238,sz = curr;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,241,_tableInfo = new AtomicReference<TableInfo>(TableInfo.createInitial(sz));
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,245,* Constructor used when creating a child instance
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,247,"private ByteQuadsCanonicalizer(ByteQuadsCanonicalizer parent, boolean intern,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,248,"int seed, boolean failOnDoS, TableInfo state)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,250,_parent = parent;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,251,_seed = seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,252,_intern = intern;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,253,_failOnDoS = failOnDoS;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,254,_tableInfo = null; // not used by child tables
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,256,// Then copy shared state
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,257,_count = state.count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,258,_hashSize = state.size;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,259,_secondaryStart = _hashSize << 2; // right after primary area
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,260,_tertiaryStart = _secondaryStart + (_secondaryStart >> 1); // right after secondary
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,261,_tertiaryShift = state.tertiaryShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,263,_hashArea = state.mainHash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,264,_names = state.names;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,266,_spilloverEnd = state.spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,267,_longNameOffset = state.longNameOffset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,269,// and then set other state to reflect sharing status
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,270,_needRehash = false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,271,_hashShared = true;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,276,"/* Life-cycle: factory methods, merging"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,281,* Factory method to call to create a symbol table instance with a
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,282,* randomized seed value.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,284,public static ByteQuadsCanonicalizer createRoot() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,285,"/* [Issue-21]: Need to use a variable seed, to thwart hash-collision"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,286,* based attacks.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,288,long now = System.currentTimeMillis();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,289,// ensure it's not 0; and might as well require to be odd so:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,290,int seed = (((int) now) + ((int) (now >>> 32))) | 1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,291,return createRoot(seed);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,295,"* Factory method that should only be called from unit tests, where seed"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,296,* value should remain the same.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,298,protected static ByteQuadsCanonicalizer createRoot(int seed) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,299,"return new ByteQuadsCanonicalizer(DEFAULT_T_SIZE, true, seed, true);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,303,* Factory method used to create actual symbol table instance to
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,304,* use for parsing.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,306,public ByteQuadsCanonicalizer makeChild(int flags) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,307,"return new ByteQuadsCanonicalizer(this,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,308,"JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,309,"_seed,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,310,"JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags),"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,311,_tableInfo.get());
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,315,* Method called by the using code to indicate it is done
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,316,* with this instance. This lets instance merge accumulated
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,317,"* changes into parent (if need be), safely and efficiently,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,318,* and without calling code having to know about parent
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,319,* information
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,321,public void release()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,323,// we will try to merge if child table has new entries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,324,if (_parent != null && maybeDirty()) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,325,_parent.mergeChild(new TableInfo(this));
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,326,"/* Let's also mark this instance as dirty, so that just in"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,327,"* case release was too early, there's no corruption of possibly shared data."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,329,_hashShared = true;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,333,private void mergeChild(TableInfo childState)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,335,final int childCount = childState.count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,336,TableInfo currState = _tableInfo.get();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,338,// Should usually grow; but occasionally could also shrink if (but only if)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,339,// collision list overflow ends up clearing some collision lists.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,340,if (childCount == currState.count) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,341,return;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,344,// One caveat: let's try to avoid problems with degenerate cases of documents with
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,345,"// generated ""random"" names: for these, symbol tables would bloat indefinitely."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,346,// One way to do this is to just purge tables if they grow
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,347,"// too large, and that's what we'll do here."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,348,if (childCount > MAX_ENTRIES_FOR_REUSE) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,349,"// At any rate, need to clean up the tables"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,350,childState = TableInfo.createInitial(DEFAULT_T_SIZE);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,352,"_tableInfo.compareAndSet(currState, childState);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,357,"/* API, accessors"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,361,public int size()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,363,if (_tableInfo != null) { // root table
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,364,return _tableInfo.get().count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,366,"// nope, child table"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,367,return _count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,371,* Returns number of primary slots table has currently
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,373,public int bucketCount() { return _hashSize; }
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,376,* Method called to check to quickly see if a child symbol table
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,377,* may have gotten additional entries. Used for checking to see
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,378,* if a child table should be merged into shared table.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,380,public boolean maybeDirty() { return !_hashShared; }
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,382,public int hashSeed() { return _seed; }
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,385,* Method mostly needed by unit tests; calculates number of
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,386,* entries that are in the primary slot set. These are
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,387,"* ""perfect"" entries, accessible with a single lookup"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,389,public int primaryCount()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,391,int count = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,392,"for (int offset = 3, end = _secondaryStart; offset < end; offset += 4) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,393,if (_hashArea[offset] != 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,394,++count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,397,return count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,401,* Method mostly needed by unit tests; calculates number of entries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,402,* in secondary buckets
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,404,public int secondaryCount() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,405,int count = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,406,int offset = _secondaryStart + 3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,407,for (int end = _tertiaryStart; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,408,if (_hashArea[offset] != 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,409,++count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,412,return count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,416,* Method mostly needed by unit tests; calculates number of entries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,417,* in tertiary buckets
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,419,public int tertiaryCount() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,420,int count = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,421,"int offset = _tertiaryStart + 3; // to 1.5x, starting point of tertiary"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,422,for (int end = offset + _hashSize; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,423,if (_hashArea[offset] != 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,424,++count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,427,return count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,431,* Method mostly needed by unit tests; calculates number of entries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,432,* in shared spillover area
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,434,public int spilloverCount() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,435,"// difference between spillover end, start, divided by 4 (four ints per slot)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,436,return (_spilloverEnd - _spilloverStart()) >> 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,439,public int totalCount()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,441,int count = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,442,"for (int offset = 3, end = (_hashSize << 3); offset < end; offset += 4) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,443,if (_hashArea[offset] != 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,444,++count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,447,return count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,450,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,451,public String toString() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,452,int pri = primaryCount();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,453,int sec = secondaryCount();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,454,int tert = tertiaryCount();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,455,int spill = spilloverCount();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,456,int total = totalCount();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,457,"return String.format(""[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]"","
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,458,"getClass().getName(), _count, _hashSize,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,459,"pri, sec, tert, spill, total, (pri+sec+tert+spill), total);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,464,"/* Public API, accessing symbols"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,468,public String findName(int q1)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,470,int offset = _calcOffset(calcHash(q1));
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,471,// first: primary match?
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,472,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,474,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,476,if (len == 1) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,477,if (hashArea[offset] == q1) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,478,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,480,} else if (len == 0) { // empty slot; unlikely but avoid further lookups if so
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,481,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,483,// secondary? single slot shared by N/2 primaries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,484,int offset2 = _secondaryStart + ((offset >> 3) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,486,len = hashArea[offset2+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,488,if (len == 1) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,489,if (hashArea[offset2] == q1) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,490,return _names[offset2 >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,492,} else if (len == 0) { // empty slot; unlikely but avoid further lookups if so
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,493,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,496,// tertiary lookup & spillovers best to offline
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,497,"return _findSecondary(offset, q1);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,500,"public String findName(int q1, int q2)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,502,"int offset = _calcOffset(calcHash(q1, q2));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,504,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,506,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,508,if (len == 2) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,509,if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1])) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,510,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,512,} else if (len == 0) { // empty slot; unlikely but avoid further lookups if so
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,513,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,515,// secondary?
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,516,int offset2 = _secondaryStart + ((offset >> 3) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,518,len = hashArea[offset2+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,520,if (len == 2) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,521,if ((q1 == hashArea[offset2]) && (q2 == hashArea[offset2+1])) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,522,return _names[offset2 >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,524,} else if (len == 0) { // empty slot? Short-circuit if no more spillovers
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,525,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,527,"return _findSecondary(offset, q1, q2);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,530,"public String findName(int q1, int q2, int q3)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,532,"int offset = _calcOffset(calcHash(q1, q2, q3));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,533,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,534,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,536,if (len == 3) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,537,if ((q1 == hashArea[offset]) && (hashArea[offset+1] == q2) && (hashArea[offset+2] == q3)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,538,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,540,} else if (len == 0) { // empty slot; unlikely but avoid further lookups if so
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,541,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,543,// secondary?
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,544,int offset2 = _secondaryStart + ((offset >> 3) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,546,len = hashArea[offset2+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,548,if (len == 3) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,549,if ((q1 == hashArea[offset2]) && (hashArea[offset2+1] == q2) && (hashArea[offset2+2] == q3)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,550,return _names[offset2 >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,552,} else if (len == 0) { // empty slot? Short-circuit if no more spillovers
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,553,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,555,"return _findSecondary(offset, q1, q2, q3);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,558,"public String findName(int[] q, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,560,"/* This version differs significantly, because longer names do not fit within cell."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,561,"* Rather, they contain hash in main slot, and offset+length to extension area"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,562,* that contains actual quads.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,564,if (qlen < 4) { // another sanity check
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,565,if (qlen == 3) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,566,"return findName(q[0], q[1], q[2]);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,568,if (qlen == 2) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,569,"return findName(q[0], q[1]);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,571,return findName(q[0]);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,573,"final int hash = calcHash(q, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,574,int offset = _calcOffset(hash);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,576,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,578,final int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,580,if ((hash == hashArea[offset]) && (len == qlen)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,581,// probable but not guaranteed: verify
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,582,"if (_verifyLongName(q, qlen, hashArea[offset+1])) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,583,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,586,if (len == 0) { // empty slot; unlikely but avoid further lookups if so
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,587,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,589,// secondary?
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,590,int offset2 = _secondaryStart + ((offset >> 3) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,592,final int len2 = hashArea[offset2+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,593,if ((hash == hashArea[offset2]) && (len2 == qlen)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,594,"if (_verifyLongName(q, qlen, hashArea[offset2+1])) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,595,return _names[offset2 >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,598,if (len == 0) { // empty slot? Short-circuit if no more spillovers
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,599,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,601,"return _findSecondary(offset, hash, q, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,604,private final int _calcOffset(int hash)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,606,"// NOTE: simple for initial impl, but we may want to interleave it a bit"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,607,// in near future
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,608,"// So: first, hash into primary hash index"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,609,int ix = hash & (_hashSize-1);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,610,// keeping in mind we have 4 ints per entry
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,611,return (ix << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,616,/* Access from spill-over areas
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,620,"private String _findSecondary(int origOffset, int q1)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,622,// tertiary area division is dynamic. First; its size is N/4 compared to
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,623,// primary hash size; and offsets are for 4 int slots. So to get to logical
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,624,"// index would shift by 4. But! Tertiary area is further split into buckets,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,625,"// determined by shift value. And finally, from bucket back into physical offsets"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,626,int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,627,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,628,final int bucketSize = (1 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,629,for (int end = offset + bucketSize; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,630,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,631,if ((q1 == hashArea[offset]) && (1 == len)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,632,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,634,if (len == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,635,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,638,"// but if tertiary full, check out spill-over area as last resort"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,639,// shared spillover starts at 7/8 of the main hash area
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,640,"// (which is sized at 2 * _hashSize), so:"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,641,for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,642,if ((q1 == hashArea[offset]) && (1 == hashArea[offset+3])) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,643,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,646,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,649,"private String _findSecondary(int origOffset, int q1, int q2)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,651,int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,652,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,654,final int bucketSize = (1 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,655,for (int end = offset + bucketSize; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,656,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,657,if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (2 == len)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,658,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,660,if (len == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,661,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,664,for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,665,if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (2 == hashArea[offset+3])) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,666,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,669,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,672,"private String _findSecondary(int origOffset, int q1, int q2, int q3)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,674,int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,675,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,677,final int bucketSize = (1 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,678,for (int end = offset + bucketSize; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,679,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,680,if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (q3 == hashArea[offset+2]) && (3 == len)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,681,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,683,if (len == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,684,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,687,for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,688,if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (q3 == hashArea[offset+2])
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,689,&& (3 == hashArea[offset+3])) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,690,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,693,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,696,"private String _findSecondary(int origOffset, int hash, int[] q, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,698,int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,699,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,701,final int bucketSize = (1 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,702,for (int end = offset + bucketSize; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,703,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,704,if ((hash == hashArea[offset]) && (qlen == len)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,705,"if (_verifyLongName(q, qlen, hashArea[offset+1])) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,706,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,709,if (len == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,710,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,713,for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,714,if ((hash == hashArea[offset]) && (qlen == hashArea[offset+3])) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,715,"if (_verifyLongName(q, qlen, hashArea[offset+1])) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,716,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,720,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,723,"private boolean _verifyLongName(int[] q, int qlen, int spillOffset)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,725,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,726,// spillOffset assumed to be physical index right into quad string
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,727,int ix = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,729,switch (qlen) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,730,default:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,731,"return _verifyLongName2(q, qlen, spillOffset);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,732,case 8:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,733,if (q[ix++] != hashArea[spillOffset++]) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,734,case 7:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,735,if (q[ix++] != hashArea[spillOffset++]) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,736,case 6:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,737,if (q[ix++] != hashArea[spillOffset++]) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,738,case 5:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,739,if (q[ix++] != hashArea[spillOffset++]) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,740,case 4: // always at least 4
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,741,if (q[ix++] != hashArea[spillOffset++]) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,742,if (q[ix++] != hashArea[spillOffset++]) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,743,if (q[ix++] != hashArea[spillOffset++]) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,744,if (q[ix++] != hashArea[spillOffset++]) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,746,return true;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,749,"private boolean _verifyLongName2(int[] q, int qlen, int spillOffset)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,751,int ix = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,752,do {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,753,if (q[ix++] != _hashArea[spillOffset++]) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,754,return false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,756,} while (ix < qlen);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,757,return true;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,762,"/* API, mutators"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,766,"public String addName(String name, int q1) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,767,_verifySharing();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,768,if (_intern) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,769,name = InternCache.instance.intern(name);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,771,int offset = _findOffsetForAdd(calcHash(q1));
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,772,_hashArea[offset] = q1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,773,_hashArea[offset+3] = 1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,774,_names[offset >> 2] = name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,775,++_count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,776,_verifyNeedForRehash();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,777,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,780,"public String addName(String name, int q1, int q2) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,781,_verifySharing();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,782,if (_intern) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,783,name = InternCache.instance.intern(name);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,785,"int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,786,int offset = _findOffsetForAdd(hash);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,787,_hashArea[offset] = q1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,788,_hashArea[offset+1] = q2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,789,_hashArea[offset+3] = 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,790,_names[offset >> 2] = name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,791,++_count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,792,_verifyNeedForRehash();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,793,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,796,"public String addName(String name, int q1, int q2, int q3) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,797,_verifySharing();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,798,if (_intern) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,799,name = InternCache.instance.intern(name);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,801,"int offset = _findOffsetForAdd(calcHash(q1, q2, q3));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,802,_hashArea[offset] = q1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,803,_hashArea[offset+1] = q2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,804,_hashArea[offset+2] = q3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,805,_hashArea[offset+3] = 3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,806,_names[offset >> 2] = name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,807,++_count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,808,_verifyNeedForRehash();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,809,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,812,"public String addName(String name, int[] q, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,814,_verifySharing();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,815,if (_intern) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,816,name = InternCache.instance.intern(name);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,818,int offset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,820,switch (qlen) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,821,case 1:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,823,offset = _findOffsetForAdd(calcHash(q[0]));
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,824,_hashArea[offset] = q[0];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,825,_hashArea[offset+3] = 1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,827,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,828,case 2:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,830,"offset = _findOffsetForAdd(calcHash(q[0], q[1]));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,831,_hashArea[offset] = q[0];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,832,_hashArea[offset+1] = q[1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,833,_hashArea[offset+3] = 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,835,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,836,case 3:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,838,"offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,839,_hashArea[offset] = q[0];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,840,_hashArea[offset+1] = q[1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,841,_hashArea[offset+2] = q[2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,842,_hashArea[offset+3] = 3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,844,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,845,default:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,846,"final int hash = calcHash(q, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,847,offset = _findOffsetForAdd(hash);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,849,_hashArea[offset] = hash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,850,"int longStart = _appendLongName(q, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,851,_hashArea[offset+1] = longStart;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,852,_hashArea[offset+3] = qlen;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,854,// plus add the actual String
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,855,_names[offset >> 2] = name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,857,// and finally; see if we really should rehash.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,858,++_count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,859,_verifyNeedForRehash();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,860,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,863,private void _verifyNeedForRehash() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,864,"// Yes if above 80%, or above 50% AND have ~1% spill-overs"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,865,if (_count > (_hashSize >> 1)) { // over 50%
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,866,int spillCount = (_spilloverEnd - _spilloverStart()) >> 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,867,if ((spillCount > (1 + _count >> 7))
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,868,|| (_count > (_hashSize * 0.80))) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,869,_needRehash = true;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,874,private void _verifySharing()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,876,if (_hashShared) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,877,"_hashArea = Arrays.copyOf(_hashArea, _hashArea.length);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,878,"_names = Arrays.copyOf(_names, _names.length);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,879,_hashShared = false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,880,"// 09-Sep-2015, tatu: As per [jackson-core#216], also need to ensure"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,881,"//    we rehash as needed, as need-rehash flag is not copied from parent"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,882,_verifyNeedForRehash();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,884,if (_needRehash) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,885,rehash();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,890,* Method called to find the location within hash table to add a new symbol in.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,892,private int _findOffsetForAdd(int hash)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,894,"// first, check the primary:"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,895,int offset = _calcOffset(hash);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,896,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,897,if (hashArea[offset+3] == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,898,"//System.err.printf("" PRImary slot #%d, hash %X\n"", (offset>>2), hash & 0x7F);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,899,return offset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,901,// then secondary
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,902,int offset2 = _secondaryStart + ((offset >> 3) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,903,if (hashArea[offset2+3] == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,904,"//System.err.printf("" SECondary slot #%d (start x%X), hash %X\n"",(offset >> 3), _secondaryStart, (hash & 0x7F));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,905,return offset2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,907,"// if not, tertiary?"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,909,offset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 2)) << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,910,final int bucketSize = (1 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,911,for (int end = offset2 + bucketSize; offset2 < end; offset2 += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,912,if (hashArea[offset2+3] == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,913,"//System.err.printf("" TERtiary slot x%X (from x%X, start x%X), hash %X.\n"", offset2, ((offset >> (_tertiaryShift + 2)) << _tertiaryShift), _tertiaryStart, (hash & 0x7F));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,914,return offset2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,918,"// and if even tertiary full, append at the end of spill area"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,919,offset = _spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,920,_spilloverEnd += 4;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,922,"//System.err.printf("" SPIll-over at x%X; start x%X; end x%X, hash %X\n"", offset, _spilloverStart(), _hashArea.length, (hash & 0x7F));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,924,"// one caveat: in the unlikely event if spill-over filling up,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,925,// check if that could be considered a DoS attack; handle appropriately
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,926,// (NOTE: approximate for now; we could verify details if that becomes necessary)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,927,"/* 31-Jul-2015, tatu: Note that spillover area does NOT end at end of array,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,928,"*   since ""long names"" area follows. Instead, need to calculate from hash size."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,930,final int end = (_hashSize << 3);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,931,if (_spilloverEnd >= end) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,932,if (_failOnDoS) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,933,_reportTooManyCollisions();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,935,"// and if we didn't fail, we'll simply force rehash for next add"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,936,"// (which, in turn, may double up or nuke contents, depending on size etc)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,937,_needRehash = true;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,939,return offset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,942,"private int _appendLongName(int[] quads, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,944,int start = _longNameOffset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,946,// note: at this point we must already be shared. But may not have enough space
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,947,if ((start + qlen) > _hashArea.length) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,948,// try to increment in reasonable chunks; at least space that we need
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,949,int toAdd = (start + qlen) - _hashArea.length;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,950,// but at least 1/8 of regular hash area size or 16kB (whichever smaller)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,951,"int minAdd = Math.min(4096, _hashSize);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,953,"int newSize = _hashArea.length + Math.max(toAdd, minAdd);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,954,"_hashArea = Arrays.copyOf(_hashArea, newSize);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,956,"System.arraycopy(quads, 0, _hashArea, start, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,957,_longNameOffset += qlen;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,958,return start;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,963,/* Hash calculation
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,967,/* Note on hash calculation: we try to make it more difficult to
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,968,* generate collisions automatically; part of this is to avoid
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,969,"* simple ""multiply-add"" algorithm (like JDK String.hashCode()),"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,970,* and add bit of shifting. And other part is to make this
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,971,"* non-linear, at least for shorter symbols."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,974,"// JDK uses 31; other fine choices are 33 and 65599, let's use 33"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,975,// as it seems to give fewest collisions for us
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,976,// (see [http://www.cse.yorku.ca/~oz/hash.html] for details)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,977,private final static int MULT = 33;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,978,private final static int MULT2 = 65599;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,979,private final static int MULT3 = 31;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,981,public int calcHash(int q1)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,983,int hash = q1 ^ _seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,984,"/* 29-Mar-2015, tatu: Earlier used 15 + 9 right shifts, which worked ok"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,985,*    except for one specific problem case: numbers. So needed to make sure
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,986,*    that all 4 least-significant bits participate in hash. Couple of ways
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,987,"*    to work it out, but this is the simplest, fast and seems to do ok."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,989,hash += (hash >>> 16); // to xor hi- and low- 16-bits
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,990,hash ^= (hash << 3); // shuffle back a bit
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,991,hash += (hash >>> 12); // and bit more
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,992,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,995,"public int calcHash(int q1, int q2)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,997,"// For two quads, let's change algorithm a bit, to spice"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,998,// things up (can do bit more processing anyway)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,999,int hash = q1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1001,hash += (hash >>> 15); // try mixing first and second byte pairs first
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1002,hash ^= (hash >>> 9); // as well as lowest 2 bytes
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1003,hash += (q2 * MULT); // then add second quad
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1004,hash ^= _seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1005,hash += (hash >>> 16); // and shuffle some more
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1006,hash ^= (hash >>> 4);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1007,hash += (hash << 3);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1009,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1012,"public int calcHash(int q1, int q2, int q3)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1013,"{ // use same algorithm as multi-byte, tested to work well"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1014,int hash = q1 ^ _seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1015,hash += (hash >>> 9);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1016,hash *= MULT3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1017,hash += q2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1018,hash *= MULT;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1019,hash += (hash >>> 15);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1020,hash ^= q3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1021,"// 26-Mar-2015, tatu: As per two-quad case, a short shift seems to help more here"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1022,hash += (hash >>> 4);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1024,hash += (hash >>> 15);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1025,hash ^= (hash << 9);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1027,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1030,"public int calcHash(int[] q, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1032,if (qlen < 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1033,throw new IllegalArgumentException();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1035,"/* And then change handling again for ""multi-quad"" case; mostly"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1036,"* to make calculation of collisions less fun. For example,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1037,"* add seed bit later in the game, and switch plus/xor around,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1038,* use different shift lengths.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1040,int hash = q[0] ^ _seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1041,hash += (hash >>> 9);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1042,hash += q[1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1043,hash += (hash >>> 15);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1044,hash *= MULT;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1045,hash ^= q[2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1046,hash += (hash >>> 4);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1048,for (int i = 3; i < qlen; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1049,int next = q[i];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1050,next = next ^ (next >> 21);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1051,hash += next;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1053,hash *= MULT2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1055,// and finally shuffle some more once done
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1056,hash += (hash >>> 19);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1057,hash ^= (hash << 5);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1058,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1063,/* Rehashing
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1067,private void rehash()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1069,_needRehash = false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1070,"// Note: since we'll make copies, no need to unshare, can just mark as such:"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1071,_hashShared = false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1073,// And then we can first deal with the main hash area. Since we are expanding
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1074,"// linearly (double up), we know there'll be no collisions during this phase."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1075,final int[] oldHashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1076,final String[] oldNames = _names;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1077,final int oldSize = _hashSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1078,final int oldCount = _count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1079,final int newSize = oldSize + oldSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1080,final int oldEnd = _spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1082,"/* 13-Mar-2010, tatu: Let's guard against OOME that could be caused by"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1083,*    large documents with unique (or mostly so) names
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1085,if (newSize > MAX_T_SIZE) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1086,nukeSymbols(true);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1087,return;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1089,"// double up main hash area, but do not expand long-name area:"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1090,_hashArea = new int[oldHashArea.length + (oldSize<<3)];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1091,_hashSize = newSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1092,_secondaryStart = (newSize << 2); // 4 ints per entry
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1093,_tertiaryStart = _secondaryStart + (_secondaryStart >> 1); // right after secondary
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1094,_tertiaryShift = _calcTertiaryShift(newSize);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1096,// and simply double up name array
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1097,_names = new String[oldNames.length << 1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1098,nukeSymbols(false);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1100,"// Plus we can scan only through the primary hash area, looking for non-empty"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1101,"// slots, without worrying about ordering. This should never reduce priority"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1102,"// of existing entries: primaries remain primaries; however, due to increased"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1103,"// space, secondaries may become primaries etc"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1105,int copyCount = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1106,int[] q = new int[16];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1107,"for (int offset = 0, end = oldEnd; offset < end; offset += 4) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1108,int len = oldHashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1109,"if (len == 0) { // empty slot, skip"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1110,continue;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1112,++copyCount;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1113,String name = oldNames[offset>>2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1114,switch (len) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1115,case 1:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1116,q[0] = oldHashArea[offset];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1117,"addName(name, q, 1);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1118,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1119,case 2:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1120,q[0] = oldHashArea[offset];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1121,q[1] = oldHashArea[offset+1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1122,"addName(name, q, 2);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1123,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1124,case 3:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1125,q[0] = oldHashArea[offset];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1126,q[1] = oldHashArea[offset+1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1127,q[2] = oldHashArea[offset+2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1128,"addName(name, q, 3);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1129,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1130,default:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1131,if (len > q.length) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1132,q = new int[len];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1134,"// #0 is hash, #1 offset"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1135,int qoff = oldHashArea[offset+1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1136,"System.arraycopy(oldHashArea, qoff, q, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1137,"addName(name, q, len);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1138,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1142,"// Sanity checks: since corruption difficult to detect, assert explicitly"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1143,// with production code
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1144,if (copyCount != oldCount) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1145,"throw new IllegalStateException(""Failed rehash(): old count=""+oldCount+"", copyCount=""+copyCount);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1150,"* Helper method called to empty all shared symbols, but to leave"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1151,* arrays allocated
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1153,private void nukeSymbols(boolean fill) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1154,_count = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1155,// reset spill-over to empty (starting at 7/8 of hash area)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1156,_spilloverEnd = _spilloverStart();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1157,"// and long name area to empty, starting immediately after hash area"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1158,_longNameOffset = _hashSize << 3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1159,if (fill) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1160,"Arrays.fill(_hashArea, 0);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1161,"Arrays.fill(_names, null);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1167,/* Helper methods
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1172,* Helper method that calculates start of the spillover area
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1174,private final int _spilloverStart() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1175,"// we'll need slot at 1.75x of hashSize, but with 4-ints per slot."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1176,// So basically multiply by 7
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1177,int offset = _hashSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1178,return (offset << 3) - offset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1181,protected void _reportTooManyCollisions()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1183,// First: do not fuzz about small symbol tables; may get balanced by doubling up
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1184,if (_hashSize <= 1024) { // would have spill-over area of 128 entries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1185,return;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1187,"throw new IllegalStateException(""Spill-over slots in symbol table with ""+_count"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1188,"+"" entries, hash area of ""+_hashSize+"" slots is now full (all """
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1189,"+(_hashSize >> 3)+"" slots -- suspect a DoS attack based on hash collisions."""
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1190,"+"" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`"");"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1193,static int _calcTertiaryShift(int primarySlots)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1195,"// first: we only get 1/4 of slots of primary, to divide"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1196,int tertSlots = (primarySlots) >> 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1198,"// default is for buckets of 4 slots (each 4 ints, i.e. 1 << 4)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1199,if (tertSlots < 64) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1200,return 4;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1202,if (tertSlots <= 256) { // buckets of 8 slots (up to 256 == 32 x 8)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1203,return 5;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1205,if (tertSlots <= 1024) { // buckets of 16 slots (up to 1024 == 64 x 16)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1206,return 6;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1208,// and biggest buckets have 32 slots
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1209,return 7;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1214,/* Helper classes
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1219,* Immutable value class used for sharing information as efficiently
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1220,"* as possible, by only require synchronization of reference manipulation"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1221,* but not access to contents.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1223,* @since 2.1
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1225,private final static class TableInfo
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1227,public final int size;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1228,public final int count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1229,public final int tertiaryShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1230,public final int[] mainHash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1231,public final String[] names;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1232,public final int spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1233,public final int longNameOffset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1235,"public TableInfo(int size, int count, int tertiaryShift,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1236,"int[] mainHash, String[] names, int spilloverEnd, int longNameOffset)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1238,this.size = size;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1239,this.count = count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1240,this.tertiaryShift = tertiaryShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1241,this.mainHash = mainHash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1242,this.names = names;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1243,this.spilloverEnd = spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1244,this.longNameOffset = longNameOffset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1247,public TableInfo(ByteQuadsCanonicalizer src)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1249,size = src._hashSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1250,count = src._count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1251,tertiaryShift = src._tertiaryShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1252,mainHash = src._hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1253,names = src._names;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1254,spilloverEnd = src._spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1255,longNameOffset = src._longNameOffset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1258,public static TableInfo createInitial(int sz) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1259,int hashAreaSize = sz << 3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1260,int tertShift = _calcTertiaryShift(sz);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1262,"return new TableInfo(sz, // hashSize"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1263,"0, // count"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1264,"tertShift,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1265,"new int[hashAreaSize], // mainHash, 2x slots, 4 ints per slot"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1266,"new String[sz << 1], // names == 2x slots"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1267,"hashAreaSize - sz, // at 7/8 of the total area"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1268,"hashAreaSize // longNameOffset, immediately after main hashes"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,18, @author Tatu Saloranta
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,18,"* @deprecated Since 2.6, replaced by {@link ByteQuadsCanonicalizer}"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,20,@Deprecated
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,36,rivate final static int MAX_ENTRIES_FOR_REUSE = 6000;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,37,final static int MAX_ENTRIES_FOR_REUSE = 6000;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,596,"public Name findName(int q1, int q2, int q3)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,598,"int hash = calcHash(q1, q2, q3);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,599,int ix = (hash & _hashMask);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,600,int val = _hash[ix];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,602,if ((((val >> 8) ^ hash) << 8) == 0) { // match
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,603,"// Ok, but do we have an actual match?"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,604,Name name = _mainNames[ix];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,605,if (name == null) { // main slot empty; can't find
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,606,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,608,"if (name.equals(q1, q2, q3)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,609,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,611,} else if (val == 0) { // empty slot? no match
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,612,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,614,// Maybe a spill-over?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,615,val &= 0xFF;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,616,if (val > 0) { // 0 means 'empty'
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,617,val -= 1; // to convert from 1-based to 0...
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,618,Bucket bucket = _collList[val];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,619,if (bucket != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,620,"return bucket.find(hash, q1, q2, q3);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,623,"// Nope, no match whatsoever"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,624,return null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,614,f (qlen < 3) { // another sanity check
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,646,if (qlen < 4) { // another sanity check
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,647,if (qlen == 3) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,648,"return findName(q[0], q[1], q[2]);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,664,f (qlen < 3) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,665,"ash = (qlen == 1) ? calcHash(q[0]) : calcHash(q[0], q[1]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,699,if (qlen < 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,700,if (qlen == 1) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,701,hash = calcHash(q[0]);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,702,} else if (qlen == 2) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,703,"hash = calcHash(q[0], q[1]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,704,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,705,"hash = calcHash(q[0], q[1], q[2]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,759,"public int calcHash(int q1, int q2, int q3)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,761,"// use same algorithm as multi-byte, tested to work well"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,762,int hash = q1 ^ _seed;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,763,hash += (hash >>> 9);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,764,hash *= MULT;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,765,hash += q2;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,766,hash *= MULT2;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,767,hash += (hash >>> 15);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,768,hash ^= q3;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,769,hash += (hash >>> 17);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,771,// and finally shuffle some more once done
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,772,hash += (hash >>> 15); // to get high-order bits to mix more
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,773,hash ^= (hash << 9); // as well as lowest 2 bytes
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,775,return hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,720,/ Note: may be called for qlen < 3; but has at least one int
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,721,f (qlen < 3) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,780,if (qlen < 4) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1126,"eturn new Name3(name, hash, quads[0], quads[1], quads[2]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1186,"return new Name3(name, hash, quads[0], quads[1], quads[2]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1288,"public Name find(int h, int q1, int q2, int q3) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1289,if (hash == h) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1290,"if (name.equals(q1, q2, q3)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1291,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1294,for (Bucket curr = next; curr != null; curr = curr.next) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1295,if (curr.hash == h) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1296,Name currName = curr.name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1297,"if (currName.equals(q1, q2, q3)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1298,return currName;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1302,return null;
False,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,557,"awHash += (rawHash >>> 15); // this seems to help quite a bit, at least for our tests"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,557,// doing these seems to help a bit
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,558,rawHash += (rawHash >>> 15);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,559,rawHash ^= (rawHash << 7);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,560,rawHash += (rawHash >>> 3);
False,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,29,ublic abstract boolean equals(int quad1);
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,29,public abstract boolean equals(int q1);
False,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,31,"ublic abstract boolean equals(int quad1, int quad2);"
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,31,"public abstract boolean equals(int q1, int q2);"
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,34,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,36,"public abstract boolean equals(int q1, int q2, int q3);"
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,26,"@Override public boolean equals(int q1, int q2, int q3) { return false; }"
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,28,"@Override public boolean equals(int quad1, int quad2, int q3) { return false; }"
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,27,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,28,"public boolean equals(int quad1, int quad2, int quad3) {"
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,29,return (q1 == quad1) && (q2 == quad2) && (q3 == quad3);
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,60,"// Implies quad length == 3, never matches"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,61,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,62,"public boolean equals(int quad1, int quad2, int quad3) { return false; }"
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,50,"* Whether this type is a referential type, meaning that values are"
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,51,"* basically pointers to ""real"" values (or null) and not regular"
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,52,* values themselves. Typical examples include things like
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,53,"* {@link java.util.concurrent.atomic.AtomicReference}, and various"
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,54,"* <code>Optional</code> types (in JDK8, Guava)."
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,56,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,58,public boolean isReferenceType() {
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,59,return getReferencedType() != null;
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,110,* Method for accessing type of value that instances of this
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,111,"* type references, if any."
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,113,"* @return Referenced type, if any; null if not."
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,115,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,117,public abstract ResolvedType getReferencedType();
False,src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java,40,** Indent with two spaces and the system's default line feed */
True,src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java,41,* Indent with two spaces and the system's default line feed
False,src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java,45,** Create an indenter which uses the <code>indent</code> string to indent one level
True,src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java,48,* Create an indenter which uses the <code>indent</code> string to indent one level
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,149,eturn withRootSeparator(new SerializedString(rootSeparator));
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,149,return withRootSeparator((rootSeparator == null) ? null : new SerializedString(rootSeparator));
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,352,ublic void writeArrayValueSeparator(JsonGenerator jg)
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,353,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,352,public void writeArrayValueSeparator(JsonGenerator gen) throws IOException
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,355,"g.writeRaw(',');"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,356,"arrayIndenter.writeIndentation(jg, _nesting);"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,354,"gen.writeRaw(',');"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,355,"_arrayIndenter.writeIndentation(gen, _nesting);"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,360,"ublic void writeEndArray(JsonGenerator jg, int nrOfValues)"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,361,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,359,"public void writeEndArray(JsonGenerator gen, int nrOfValues) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,367,"arrayIndenter.writeIndentation(jg, _nesting);"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,365,"_arrayIndenter.writeIndentation(gen, _nesting);"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,369,g.writeRaw(' ');
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,367,gen.writeRaw(' ');
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,371,g.writeRaw(']');
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,369,gen.writeRaw(']');
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,396, This is a very simple indenter that only every adds a
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,394,* This is a very simple indenter that only adds a
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,406,"ublic void writeIndentation(JsonGenerator jg, int level)"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,407,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,404,"public void writeIndentation(JsonGenerator jg, int level) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,80,@Override public int getOutputBuffered() { return delegate.getOutputBuffered(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,102,"Override public String getCurrentName() throws IOException, JsonParseException { return delegate.getCurrentName(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,101,@Override public boolean hasToken(JsonToken t) { return delegate.hasToken(t); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,103,@Override public String getCurrentName() throws IOException { return delegate.getCurrentName(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,124,"Override public String getText() throws IOException, JsonParseException { return delegate.getText();  }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,125,@Override public String getText() throws IOException { return delegate.getText();  }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,126,"Override public char[] getTextCharacters() throws IOException, JsonParseException { return delegate.getTextCharacters(); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,127,"Override public int getTextLength() throws IOException, JsonParseException { return delegate.getTextLength(); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,128,"Override public int getTextOffset() throws IOException, JsonParseException { return delegate.getTextOffset(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,127,@Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,128,@Override public int getTextLength() throws IOException { return delegate.getTextLength(); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,129,@Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,137,"ublic BigInteger getBigIntegerValue() throws IOException,JsonParseException { return delegate.getBigIntegerValue(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,138,public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,140,"ublic boolean getBooleanValue() throws IOException, JsonParseException { return delegate.getBooleanValue(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,141,public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,143,"ublic byte getByteValue() throws IOException, JsonParseException { return delegate.getByteValue(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,144,public byte getByteValue() throws IOException { return delegate.getByteValue(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,146,"ublic short getShortValue() throws IOException, JsonParseException { return delegate.getShortValue(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,147,public short getShortValue() throws IOException { return delegate.getShortValue(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,149,"ublic BigDecimal getDecimalValue() throws IOException, JsonParseException { return delegate.getDecimalValue(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,150,public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,152,"ublic double getDoubleValue() throws IOException, JsonParseException { return delegate.getDoubleValue(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,153,public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,155,"ublic float getFloatValue() throws IOException, JsonParseException { return delegate.getFloatValue(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,156,public float getFloatValue() throws IOException { return delegate.getFloatValue(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,158,"ublic int getIntValue() throws IOException, JsonParseException { return delegate.getIntValue(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,159,public int getIntValue() throws IOException { return delegate.getIntValue(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,161,"ublic long getLongValue() throws IOException, JsonParseException { return delegate.getLongValue(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,162,public long getLongValue() throws IOException { return delegate.getLongValue(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,164,"ublic NumberType getNumberType() throws IOException, JsonParseException { return delegate.getNumberType(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,165,public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,167,"ublic Number getNumberValue() throws IOException, JsonParseException { return delegate.getNumberValue(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,168,public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,175,"Override public int getValueAsInt() throws IOException, JsonParseException { return delegate.getValueAsInt(); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,176,"Override public int getValueAsInt(int defaultValue) throws IOException, JsonParseException { return delegate.getValueAsInt(defaultValue); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,177,"Override public long getValueAsLong() throws IOException, JsonParseException { return delegate.getValueAsLong(); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,178,"Override public long getValueAsLong(long defaultValue) throws IOException, JsonParseException { return delegate.getValueAsLong(defaultValue); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,179,"Override public double getValueAsDouble() throws IOException, JsonParseException { return delegate.getValueAsDouble(); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,180,"Override public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException { return delegate.getValueAsDouble(defaultValue); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,181,"Override public boolean getValueAsBoolean() throws IOException, JsonParseException { return delegate.getValueAsBoolean(); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,182,"Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException { return delegate.getValueAsBoolean(defaultValue); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,183,"Override public String getValueAsString() throws IOException, JsonParseException { return delegate.getValueAsString(); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,184,"Override public String getValueAsString(String defaultValue) throws IOException, JsonParseException { return delegate.getValueAsString(defaultValue); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,176,@Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,177,@Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,178,@Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,179,@Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,180,@Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,181,@Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,182,@Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,183,@Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,184,@Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,185,@Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,192,"Override public Object getEmbeddedObject() throws IOException, JsonParseException { return delegate.getEmbeddedObject(); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,193,"Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException { return delegate.getBinaryValue(b64variant); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,194,"Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException, JsonParseException { return delegate.readBinaryValue(b64variant, out); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,193,@Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,194,@Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,195,"@Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,196,"Override public JsonToken nextToken() throws IOException, JsonParseException { return delegate.nextToken(); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,197,"Override public JsonToken nextValue() throws IOException, JsonParseException { return delegate.nextValue(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,197,@Override public JsonToken nextToken() throws IOException { return delegate.nextToken(); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,198,@Override public JsonToken nextValue() throws IOException { return delegate.nextValue(); }
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,200,"ublic JsonParser skipChildren() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,201,public JsonParser skipChildren() throws IOException {
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,214,"Override public Object getObjectId() throws IOException, JsonGenerationException { return delegate.getObjectId(); }"
False,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,215,"Override public Object getTypeId() throws IOException, JsonGenerationException { return delegate.getTypeId(); }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,215,@Override public Object getObjectId() throws IOException { return delegate.getObjectId(); }
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,216,@Override public Object getTypeId() throws IOException { return delegate.getTypeId(); }
False,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,29,rivate static final long serialVersionUID = -562765100295218442L;
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,29,private static final long serialVersionUID = 1L;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,299,* Accessor that may be used to get the contents of this buffer in a single
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,300,* <code>char</code> array regardless of whether they were collected in a segmented
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,301,* fashion or not.
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,307,f (!_hasSegments)  return _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,312,if (!_hasSegments) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,313,return (_currentSegment == null) ? NO_CHARS : _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,22,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,23,"* Note that functionality for reading ""VERSION.txt"" was removed completely"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,24,* from Jackson 2.6.
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,67," Next, if that fails, class loader that loaded specified class is"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,68," asked to load resource with name ""VERSION"" from same location"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,69, (package) as class itself had.
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,73,"SuppressWarnings(""resource"")"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,76,ersion packageVersion = packageVersionFor(cls);
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,77,f (packageVersion != null) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,78,eturn packageVersion;
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,80,"inal InputStream in = cls.getResourceAsStream(""VERSION.txt"");"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,81,f (in == null) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,82,eturn Version.unknownVersion();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,84,ry {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,85,"nputStreamReader reader = new InputStreamReader(in, ""UTF-8"");"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,86,eturn doReadVersion(reader);
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,87, catch (UnsupportedEncodingException e) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,88,eturn Version.unknownVersion();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,89, finally {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,90,close(in);
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,74,return packageVersionFor(cls);
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,112," catch (Exception e) { // ok to be missing (not good, acceptable)"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,95,} catch (Exception e) { // ok to be missing (not good but acceptable)
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,117,rivate static Version doReadVersion(final Reader r)
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,119,"tring version = null, group = null, artifact = null;"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,121,inal BufferedReader br = new BufferedReader(r);
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,122,ry {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,123,ersion = br.readLine();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,124,f (version != null) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,125,roup = br.readLine();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,126,f (group != null) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,127,rtifact = br.readLine();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,130, catch (IOException ignored) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,131, finally {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,132,close(br);
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,134,/ We don't trim() version: parseVersion() takes care ot that
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,135,f (group != null) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,136,roup = group.trim();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,138,f (artifact != null) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,139,rtifact = artifact.trim();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,141,"eturn parseVersion(version, group, artifact);"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,111,"* @deprecated Since 2.6: functionality not used by any official Jackson component, should be"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,112,*   moved out if anyone needs it
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,115,@Deprecated // since 2.6
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,138,* Method used by <code>PackageVersion</code> classes to decode version injected by Maven build.
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,314,/* Helper read/write methods
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,318,"protected void writeJsonDoc(JsonFactory f, String doc, Writer w) throws IOException"
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,320,"writeJsonDoc(f, doc, f.createGenerator(w));"
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,323,"protected void writeJsonDoc(JsonFactory f, String doc, JsonGenerator g) throws IOException"
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,325,JsonParser p = f.createParser(aposToQuotes(doc));
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,327,while (p.nextToken() != null) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,328,g.copyCurrentStructure(p);
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,330,p.close();
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,331,g.close();
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,334,"protected String readAndWrite(JsonFactory f, JsonParser p) throws IOException"
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,336,StringWriter sw = new StringWriter(100);
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,337,JsonGenerator g = f.createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,338,try {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,339,while (p.nextToken() != null) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,340,g.copyCurrentEvent(p);
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,342,} catch (IOException e) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,343,g.flush();
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,344,"fail(""Unexpected problem during `readAndWrite`. Output so far: '""+sw+""'; problem: ""+e);"
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,346,p.close();
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,347,g.close();
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,348,return sw.toString();
False,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,359,rotected String getAndVerifyText(JsonParser jp)
False,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,360,"hrows IOException, JsonParseException"
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,398,protected String getAndVerifyText(JsonParser jp) throws IOException
False,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,396,ublic String quote(String str) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,434,protected String quote(String str) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,438,protected String aposToQuotes(String json) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,439,"return json.replace(""'"", ""\"""");"
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,470,protected int[] calcQuads(byte[] wordBytes) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,471,int blen = wordBytes.length;
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,472,int[] result = new int[(blen + 3) / 4];
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,473,for (int i = 0; i < blen; ++i) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,474,int x = wordBytes[i] & 0xFF;
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,476,if (++i < blen) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,477,x = (x << 8) | (wordBytes[i] & 0xFF);
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,478,if (++i < blen) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,479,x = (x << 8) | (wordBytes[i] & 0xFF);
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,480,if (++i < blen) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,481,x = (x << 8) | (wordBytes[i] & 0xFF);
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,485,result[i >> 2] = x;
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,487,return result;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,1,package com.fasterxml.jackson.core.filter;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,4,import java.math.BigDecimal;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,5,import java.math.BigInteger;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,6,import java.util.*;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,8,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,9,import com.fasterxml.jackson.core.io.SerializedString;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,12,"* Low-level tests for explicit, hand-written tests for generator-side"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,13,* filtering.
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,15,"@SuppressWarnings(""resource"")"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,16,public class BasicGeneratorFilteringTest extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,18,static class NameMatchFilter extends TokenFilter
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,20,private final Set<String> _names;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,22,public NameMatchFilter(String... names) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,23,_names = new HashSet<String>(Arrays.asList(names));
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,26,@Override
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,27,public TokenFilter includeElement(int index) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,28,return this;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,31,@Override
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,32,public TokenFilter includeProperty(String name) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,33,if (_names.contains(name)) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,34,return TokenFilter.INCLUDE_ALL;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,36,return this;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,39,@Override
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,40,protected boolean _includeScalar() { return false; }
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,43,static class IndexMatchFilter extends TokenFilter
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,45,private final BitSet _indices;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,47,public IndexMatchFilter(int... ixs) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,48,_indices = new BitSet();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,49,for (int ix : ixs) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,50,_indices.set(ix);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,54,@Override
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,55,public TokenFilter includeProperty(String name) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,56,return this;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,59,@Override
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,60,public TokenFilter includeElement(int index) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,61,if (_indices.get(index)) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,62,return TokenFilter.INCLUDE_ALL;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,64,return null;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,67,@Override
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,68,protected boolean _includeScalar() { return false; }
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,73,/* Test methods
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,77,private final JsonFactory JSON_F = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,79,public void testNonFiltering() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,81,"// First, verify non-filtering"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,82,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,83,JsonGenerator gen = JSON_F.createGenerator(w);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,84,"final String JSON = ""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,85,"writeJsonDoc(JSON_F, JSON, gen);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,86,assertEquals(aposToQuotes(
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,87,"""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,88,w.toString());
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,91,public void testSingleMatchFilteringWithoutPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,93,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,94,"JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,95,"new NameMatchFilter(""value""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,96,"false, // includePath"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,97,false // multipleMatches
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,99,"final String JSON = ""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,100,"writeJsonDoc(JSON_F, JSON, gen);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,102,"// 21-Apr-2015, tatu: note that there were plans to actually"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,103,"//     allow ""immediate parent inclusion"" for matches on property"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,104,"//    names. This behavior was NOT included in release however, so:"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,105,"//        assertEquals(aposToQuotes(""{'value':3}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,107,"assertEquals(aposToQuotes(""3""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,110,public void testSingleMatchFilteringWithPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,112,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,113,JsonGenerator origGen = JSON_F.createGenerator(w);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,114,"NameMatchFilter filter = new NameMatchFilter(""value"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,115,"FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(origGen,"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,116,"filter,"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,117,"true, // includePath"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,118,false // multipleMatches
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,121,// Hmmh. Should we get access to eventual target?
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,122,"assertSame(w, gen.getOutputTarget());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,123,assertNotNull(gen.getFilterContext());
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,124,"assertSame(filter, gen.getFilter());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,126,"final String JSON = ""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,127,"writeJsonDoc(JSON_F, JSON, gen);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,128,"assertEquals(aposToQuotes(""{'ob':{'value':3}}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,130,"assertEquals(1, gen.getMatchCount());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,133,public void testSingleMatchFilteringWithPathSkippedArray() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,135,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,136,JsonGenerator origGen = JSON_F.createGenerator(w);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,137,"NameMatchFilter filter = new NameMatchFilter(""value"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,138,"FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(origGen,"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,139,"filter,"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,140,"true, // includePath"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,141,false // multipleMatches
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,144,// Hmmh. Should we get access to eventual target?
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,145,"assertSame(w, gen.getOutputTarget());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,146,assertNotNull(gen.getFilterContext());
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,147,"assertSame(filter, gen.getFilter());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,149,"final String JSON = ""{'array':[1,[2,3]],'ob':[{'value':'bar'}],'b':{'foo':[1,'foo']}}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,150,"writeJsonDoc(JSON_F, JSON, gen);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,151,"assertEquals(aposToQuotes(""{'ob':[{'value':'bar'}]}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,152,"assertEquals(1, gen.getMatchCount());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,155,"// Alternative take, using slightly different calls for FIELD_NAME, START_ARRAY"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,156,public void testSingleMatchFilteringWithPathAlternate1() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,158,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,159,"FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,160,"new NameMatchFilter(""value""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,161,"true, // includePath"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,162,false // multipleMatches
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,164,"//final String JSON = ""{'a':123,'array':[1,2],'ob':{'value0':2,'value':[3],'value2':'foo'},'b':true}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,166,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,167,"gen.writeFieldName(new SerializedString(""a""));"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,168,gen.writeNumber(123);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,170,"gen.writeFieldName(""array"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,171,gen.writeStartArray(2);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,172,"gen.writeNumber(""1"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,173,gen.writeNumber((short) 2);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,174,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,176,"gen.writeFieldName(new SerializedString(""ob""));"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,177,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,178,"gen.writeNumberField(""value0"", 2);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,179,"gen.writeFieldName(new SerializedString(""value""));"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,180,gen.writeStartArray(1);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,181,"gen.writeString(new SerializedString(""x"")); // just to vary generation method"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,182,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,183,"gen.writeStringField(""value2"", ""foo"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,185,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,187,"gen.writeBooleanField(""b"", true);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,189,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,190,gen.close();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,192,"assertEquals(aposToQuotes(""{'ob':{'value':['x']}}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,195,public void testSingleMatchFilteringWithPathRawBinary() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,197,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,198,"FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,199,"new NameMatchFilter(""array""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,200,"true, // includePath"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,201,false // multipleMatches
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,203,"//final String JSON = ""{'header':['ENCODED',raw],'array':['base64stuff',1,2,3,4,5,6.25,7.5],'extra':[1,2,3,4,5,6.25,7.5]}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,205,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,207,"gen.writeFieldName(""header"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,208,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,209,gen.writeBinary(new byte[] { 1 });
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,210,"gen.writeRawValue(new SerializedString(""1""));"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,211,"gen.writeRawValue(""2"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,212,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,214,"gen.writeFieldName(""array"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,216,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,217,gen.writeBinary(new byte[] { 1 });
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,218,gen.writeNumber((short) 1);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,219,gen.writeNumber((int) 2);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,220,gen.writeNumber((long) 3);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,221,gen.writeNumber(BigInteger.valueOf(4));
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,222,"gen.writeRaw("" "");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,223,"gen.writeNumber(new BigDecimal(""5.0""));"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,224,"gen.writeRaw(new SerializedString("" /*x*/""));"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,225,gen.writeNumber(6.25f);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,226,gen.writeNumber(7.5);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,227,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,229,"gen.writeArrayFieldStart(""extra"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,230,gen.writeNumber((short) 1);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,231,gen.writeNumber((int) 2);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,232,gen.writeNumber((long) 3);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,233,gen.writeNumber(BigInteger.valueOf(4));
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,234,"gen.writeNumber(new BigDecimal(""5.0""));"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,235,gen.writeNumber(6.25f);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,236,gen.writeNumber(7.5);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,237,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,239,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,240,gen.close();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,242,"assertEquals(aposToQuotes(""{'array':['AQ==',1,2,3,4 ,5.0 /*x*/,6.25,7.5]}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,245,public void testMultipleMatchFilteringWithPath1() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,247,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,248,"JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,249,"new NameMatchFilter(""value0"", ""value2""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,250,"true, /* includePath */ true /* multipleMatches */ );"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,251,"final String JSON = ""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,252,"writeJsonDoc(JSON_F, JSON, gen);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,253,"assertEquals(aposToQuotes(""{'ob':{'value0':2,'value2':4}}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,256,public void testMultipleMatchFilteringWithPath2() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,258,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,260,"JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,261,"new NameMatchFilter(""array"", ""b"", ""value""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,262,"true, true);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,263,"final String JSON = ""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,264,"writeJsonDoc(JSON_F, JSON, gen);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,265,"assertEquals(aposToQuotes(""{'array':[1,2],'ob':{'value':3},'b':true}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,268,public void testMultipleMatchFilteringWithPath3() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,270,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,272,"JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,273,"new NameMatchFilter(""value""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,274,"true, true);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,275,"final String JSON = ""{'root':{'a0':true,'a':{'value':3},'b':{'value':4}},'b0':false}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,276,"writeJsonDoc(JSON_F, JSON, gen);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,277,"assertEquals(aposToQuotes(""{'root':{'a':{'value':3},'b':{'value':4}}}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,280,public void testIndexMatchWithPath1() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,282,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,283,"JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,284,"new IndexMatchFilter(1),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,285,"true, true);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,286,"final String JSON = ""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,287,"writeJsonDoc(JSON_F, JSON, gen);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,288,"assertEquals(aposToQuotes(""{'array':[2]}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,290,w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,291,"gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,292,"new IndexMatchFilter(0),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,293,"true, true);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,294,"writeJsonDoc(JSON_F, JSON, gen);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,295,"assertEquals(aposToQuotes(""{'array':[1]}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,298,public void testIndexMatchWithPath2() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,300,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,301,"JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,302,"new IndexMatchFilter(0,1),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,303,"true, true);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,304,"final String JSON = ""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,305,"writeJsonDoc(JSON_F, JSON, gen);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,306,"assertEquals(aposToQuotes(""{'array':[1,2]}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,1,package com.fasterxml.jackson.core.filter;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,3,import java.util.*;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,7,public class BasicParserFilteringTest extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,9,static class NameMatchFilter extends TokenFilter
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,11,private final Set<String> _names;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,13,public NameMatchFilter(String... names) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,14,_names = new HashSet<String>(Arrays.asList(names));
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,17,@Override
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,18,public TokenFilter includeElement(int index) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,19,return this;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,22,@Override
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,23,public TokenFilter includeProperty(String name) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,24,if (_names.contains(name)) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,25,return TokenFilter.INCLUDE_ALL;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,27,return this;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,30,@Override
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,31,protected boolean _includeScalar() { return false; }
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,34,static class IndexMatchFilter extends TokenFilter
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,36,private final BitSet _indices;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,38,public IndexMatchFilter(int... ixs) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,39,_indices = new BitSet();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,40,for (int ix : ixs) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,41,_indices.set(ix);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,45,@Override
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,46,public TokenFilter includeProperty(String name) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,47,return this;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,50,@Override
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,51,public TokenFilter includeElement(int index) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,52,if (_indices.get(index)) {
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,53,return TokenFilter.INCLUDE_ALL;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,55,return null;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,58,@Override
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,59,protected boolean _includeScalar() { return false; }
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,64,/* Test methods
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,68,private final JsonFactory JSON_F = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,70,"private final String SIMPLE = aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,72,"@SuppressWarnings(""resource"")"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,73,public void testNonFiltering() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,75,JsonParser p = JSON_F.createParser(SIMPLE);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,76,"String result = readAndWrite(JSON_F, p);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,77,"assertEquals(SIMPLE, result);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,80,"@SuppressWarnings(""resource"")"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,81,public void testSingleMatchFilteringWithoutPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,83,JsonParser p0 = JSON_F.createParser(SIMPLE);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,84,"JsonParser p = new FilteringParserDelegate(p0,"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,85,"new NameMatchFilter(""value""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,86,"false, // includePath"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,87,false // multipleMatches
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,89,"String result = readAndWrite(JSON_F, p);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,90,"assertEquals(aposToQuotes(""3""), result);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,93,"@SuppressWarnings(""resource"")"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,94,public void testSingleMatchFilteringWithPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,96,JsonParser p0 = JSON_F.createParser(SIMPLE);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,97,"JsonParser p = new FilteringParserDelegate(p0,"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,98,"new NameMatchFilter(""value""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,99,"true, // includePath"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,100,false // multipleMatches
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,102,"String result = readAndWrite(JSON_F, p);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,103,"assertEquals(aposToQuotes(""{'ob':{'value':3}}""), result);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,106,"@SuppressWarnings(""resource"")"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,107,public void testMultipleMatchFilteringWithPath1() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,109,JsonParser p0 = JSON_F.createParser(SIMPLE);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,110,"JsonParser p = new FilteringParserDelegate(p0,"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,111,"new NameMatchFilter(""value0"", ""value2""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,112,"true, /* includePath */ true /* multipleMatches */ );"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,113,"String result = readAndWrite(JSON_F, p);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,114,"assertEquals(aposToQuotes(""{'ob':{'value0':2,'value2':4}}""), result);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,117,"@SuppressWarnings(""resource"")"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,118,public void testMultipleMatchFilteringWithPath2() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,120,"String INPUT = aposToQuotes(""{'a':123,'ob':{'value0':2,'value':3,'value2':4},'b':true}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,121,JsonParser p0 = JSON_F.createParser(INPUT);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,122,"JsonParser p = new FilteringParserDelegate(p0,"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,123,"new NameMatchFilter(""b"", ""value""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,124,"true, true);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,126,"String result = readAndWrite(JSON_F, p);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,127,"assertEquals(aposToQuotes(""{'ob':{'value':3},'b':true}""), result);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,130,"@SuppressWarnings(""resource"")"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,131,public void testMultipleMatchFilteringWithPath3() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,133,"final String JSON = aposToQuotes(""{'root':{'a0':true,'a':{'value':3},'b':{'value':4}},'b0':false}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,134,JsonParser p0 = JSON_F.createParser(JSON);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,135,"JsonParser p = new FilteringParserDelegate(p0,"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,136,"new NameMatchFilter(""value""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,137,"true, true);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,138,"String result = readAndWrite(JSON_F, p);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,139,"assertEquals(aposToQuotes(""{'root':{'a':{'value':3},'b':{'value':4}}}""), result);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,142,"@SuppressWarnings(""resource"")"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,143,public void testIndexMatchWithPath1() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,145,"JsonParser p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,146,"new IndexMatchFilter(1), true, true);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,147,"String result = readAndWrite(JSON_F, p);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,148,"assertEquals(aposToQuotes(""{'array':[2]}""), result);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,150,"p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,151,"new IndexMatchFilter(0), true, true);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,152,"result = readAndWrite(JSON_F, p);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,153,"assertEquals(aposToQuotes(""{'array':[1]}""), result);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,156,"@SuppressWarnings(""resource"")"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,157,public void testIndexMatchWithPath2() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,159,"JsonParser p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,160,"new IndexMatchFilter(0, 1), true, true);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,161,"assertEquals(aposToQuotes(""{'array':[1,2]}""), readAndWrite(JSON_F, p));"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,163,"String JSON = aposToQuotes(""{'a':123,'array':[1,2,3,4,5],'b':[1,2,3]}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,164,"p = new FilteringParserDelegate(JSON_F.createParser(JSON),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,165,"new IndexMatchFilter(1, 3), true, true);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,166,"assertEquals(aposToQuotes(""{'array':[2,4],'b':[2]}""), readAndWrite(JSON_F, p));"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,1,package com.fasterxml.jackson.core.filter;
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,7,"@SuppressWarnings(""resource"")"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,8,public class JsonPointerGeneratorFilteringTest extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,10,private final JsonFactory JSON_F = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,12,"final String SIMPLE_INPUT = aposToQuotes(""{'a':1,'b':[1,2,3],'c':{'d':{'a':true}},'d':null}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,14,public void testSimplePropertyWithPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,16,"_assert(SIMPLE_INPUT, ""/c"", true, ""{'c':{'d':{'a':true}}}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,17,"_assert(SIMPLE_INPUT, ""/c/d"", true, ""{'c':{'d':{'a':true}}}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,18,"_assert(SIMPLE_INPUT, ""/c/d/a"", true, ""{'c':{'d':{'a':true}}}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,20,"_assert(SIMPLE_INPUT, ""/c/d/a"", true, ""{'c':{'d':{'a':true}}}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,22,"_assert(SIMPLE_INPUT, ""/a"", true, ""{'a':1}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,23,"_assert(SIMPLE_INPUT, ""/d"", true, ""{'d':null}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,25,// and then non-match
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,26,"_assert(SIMPLE_INPUT, ""/x"", true, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,29,public void testSimplePropertyWithoutPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,31,"_assert(SIMPLE_INPUT, ""/c"", false, ""{'d':{'a':true}}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,32,"_assert(SIMPLE_INPUT, ""/c/d"", false, ""{'a':true}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,33,"_assert(SIMPLE_INPUT, ""/c/d/a"", false, ""true"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,35,"_assert(SIMPLE_INPUT, ""/a"", false, ""1"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,36,"_assert(SIMPLE_INPUT, ""/d"", false, ""null"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,38,// and then non-match
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,39,"_assert(SIMPLE_INPUT, ""/x"", false, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,42,public void testArrayElementWithPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,44,"_assert(SIMPLE_INPUT, ""/b"", true, ""{'b':[1,2,3]}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,45,"_assert(SIMPLE_INPUT, ""/b/1"", true, ""{'b':[2]}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,46,"_assert(SIMPLE_INPUT, ""/b/2"", true, ""{'b':[3]}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,48,// and then non-match
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,49,"_assert(SIMPLE_INPUT, ""/b/8"", true, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,52,public void testArrayNestedWithPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,54,"_assert(""{'a':[true,{'b':3,'d':2},false]}"", ""/a/1/b"", true, ""{'a':[{'b':3}]}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,55,"_assert(""[true,[1]]"", ""/0"", true, ""[true]"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,56,"_assert(""[true,[1]]"", ""/1"", true, ""[[1]]"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,57,"_assert(""[true,[1,2,[true],3],0]"", ""/0"", true, ""[true]"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,58,"_assert(""[true,[1,2,[true],3],0]"", ""/1"", true, ""[[1,2,[true],3]]"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,60,"_assert(""[true,[1,2,[true],3],0]"", ""/1/2"", true, ""[[[true]]]"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,61,"_assert(""[true,[1,2,[true],3],0]"", ""/1/2/0"", true, ""[[[true]]]"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,62,"_assert(""[true,[1,2,[true],3],0]"", ""/1/3/0"", true, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,65,public void testArrayNestedWithoutPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,67,"_assert(""{'a':[true,{'b':3,'d':2},false]}"", ""/a/1/b"", false, ""3"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,68,"_assert(""[true,[1,2,[true],3],0]"", ""/0"", false, ""true"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,69,"_assert(""[true,[1,2,[true],3],0]"", ""/1"", false,"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,70,"""[1,2,[true],3]"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,72,"_assert(""[true,[1,2,[true],3],0]"", ""/1/2"", false, ""[true]"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,73,"_assert(""[true,[1,2,[true],3],0]"", ""/1/2/0"", false, ""true"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,74,"_assert(""[true,[1,2,[true],3],0]"", ""/1/3/0"", false, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,77,"//    final String SIMPLE_INPUT = aposToQuotes(""{'a':1,'b':[1,2,3],'c':{'d':{'a':true}},'d':null}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,79,public void testArrayElementWithoutPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,81,"_assert(SIMPLE_INPUT, ""/b"", false, ""[1,2,3]"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,82,"_assert(SIMPLE_INPUT, ""/b/1"", false, ""2"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,83,"_assert(SIMPLE_INPUT, ""/b/2"", false, ""3"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,85,"_assert(SIMPLE_INPUT, ""/b/8"", false, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,87,// and then non-match
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,88,"_assert(SIMPLE_INPUT, ""/x"", false, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,91,"private void _assert(String input, String pathExpr, boolean includeParent, String exp)"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,92,throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,94,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,96,JsonGenerator g0 = JSON_F.createGenerator(w);
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,97,"FilteringGeneratorDelegate g = new FilteringGeneratorDelegate(g0,"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,98,"new JsonPointerBasedFilter(pathExpr),"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,99,"includeParent, false);"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,101,try {
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,102,"writeJsonDoc(JSON_F, input, g);"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,103,} catch (Exception e) {
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,104,g0.flush();
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,105,"System.err.println(""With input '""+input+""', output at point of failure: <""+w+"">"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,106,throw e;
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java,109,"assertEquals(aposToQuotes(exp), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,1,package com.fasterxml.jackson.core.filter;
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,3,import java.io.StringWriter;
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,7,public class JsonPointerParserFilteringTest extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,9,private final JsonFactory JSON_F = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,11,"final String SIMPLEST_INPUT = aposToQuotes(""{'a':1,'b':2,'c':3}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,13,"final String SIMPLE_INPUT = aposToQuotes(""{'a':1,'b':[1,2,3],'c':{'d':{'a':true}},'d':null}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,15,public void testSimplestWithPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,17,"_assert(SIMPLEST_INPUT, ""/a"", true, ""{'a':1}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,18,"_assert(SIMPLEST_INPUT, ""/b"", true, ""{'b':2}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,19,"_assert(SIMPLEST_INPUT, ""/c"", true, ""{'c':3}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,20,"_assert(SIMPLEST_INPUT, ""/c/0"", true, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,21,"_assert(SIMPLEST_INPUT, ""/d"", true, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,24,public void testSimplestNoPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,26,"_assert(SIMPLEST_INPUT, ""/a"", false, ""1"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,27,"_assert(SIMPLEST_INPUT, ""/b"", false, ""2"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,28,"_assert(SIMPLEST_INPUT, ""/b/2"", false, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,29,"_assert(SIMPLEST_INPUT, ""/c"", false, ""3"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,30,"_assert(SIMPLEST_INPUT, ""/d"", false, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,33,public void testSimpleWithPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,35,"_assert(SIMPLE_INPUT, ""/c"", true, ""{'c':{'d':{'a':true}}}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,36,"_assert(SIMPLE_INPUT, ""/c/d"", true, ""{'c':{'d':{'a':true}}}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,37,"_assert(SIMPLE_INPUT, ""/a"", true, ""{'a':1}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,38,"_assert(SIMPLE_INPUT, ""/b"", true, ""{'b':[1,2,3]}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,39,"_assert(SIMPLE_INPUT, ""/b/0"", true, ""{'b':[1]}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,40,"_assert(SIMPLE_INPUT, ""/b/1"", true, ""{'b':[2]}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,41,"_assert(SIMPLE_INPUT, ""/b/2"", true, ""{'b':[3]}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,42,"_assert(SIMPLE_INPUT, ""/b/3"", true, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,45,public void testSimpleNoPath() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,47,"_assert(SIMPLE_INPUT, ""/c"", false, ""{'d':{'a':true}}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,49,"_assert(SIMPLE_INPUT, ""/c/d"", false, ""{'a':true}"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,50,"_assert(SIMPLE_INPUT, ""/a"", false, ""1"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,51,"_assert(SIMPLE_INPUT, ""/b"", false, ""[1,2,3]"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,52,"_assert(SIMPLE_INPUT, ""/b/0"", false, ""1"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,53,"_assert(SIMPLE_INPUT, ""/b/1"", false, ""2"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,54,"_assert(SIMPLE_INPUT, ""/b/2"", false, ""3"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,55,"_assert(SIMPLE_INPUT, ""/b/3"", false, """");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,58,"@SuppressWarnings(""resource"")"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,59,"void _assert(String input, String pathExpr, boolean includeParent, String exp)"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,60,throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,62,JsonParser p0 = JSON_F.createParser(input);
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,63,"FilteringParserDelegate p = new FilteringParserDelegate(p0,"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,64,"new JsonPointerBasedFilter(pathExpr),"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,65,"includeParent, false);"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,66,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,67,JsonGenerator g = JSON_F.createGenerator(w);
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,69,try {
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,70,while (p.nextToken() != null) {
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,71,g.copyCurrentEvent(p);
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,73,p.close();
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,74,g.close();
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,75,} catch (Exception e) {
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,76,g.flush();
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,77,"System.err.println(""With input '""+input+""', output at point of failure: <""+w+"">"");"
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,78,throw e;
True,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java,81,"assertEquals(aposToQuotes(exp), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,1,package com.fasterxml.jackson.core.io;
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,3,import com.fasterxml.jackson.core.io.SegmentedStringWriter;
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,4,import com.fasterxml.jackson.core.util.BufferRecycler;
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,6,public class SegmentedStringWriterTest
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,7,extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,9,public void testSimple() throws Exception
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,11,BufferRecycler br = new BufferRecycler();
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,12,SegmentedStringWriter w = new SegmentedStringWriter(br);
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,14,StringBuilder exp = new StringBuilder();
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,16,for (int i = 0; exp.length() < 100; ++i) {
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,17,String nr = String.valueOf(i);
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,18,exp.append(' ').append(nr);
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,19,w.append(' ');
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,20,switch (i % 4) {
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,21,case 0:
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,22,w.append(nr);
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,23,break;
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,24,case 1:
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,26,"String str = ""  ""+nr;"
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,27,"w.append(str, 2, str.length());"
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,29,break;
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,30,case 2:
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,31,w.write(nr.toCharArray());
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,32,break;
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,33,default:
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,35,"char[] ch = ("" ""+nr+"" "").toCharArray();"
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,36,"w.write(ch, 1, nr.length());"
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,38,break;
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,41,"// flush, close are nops but trigger just for fun"
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,42,w.flush();
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,43,w.close();
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,45,String act = w.getAndClear();
True,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java,46,"assertEquals(exp.toString(), act);"
False,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,9,ublic class TestUTF8Writer
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,9,public class UTF8WriterTest
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,28,w.flush();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,43,public void testSimpleAscii() throws Exception
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,45,BufferRecycler rec = new BufferRecycler();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,46,"IOContext ctxt = new IOContext(rec, null, false);"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,47,ByteArrayOutputStream out = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,48,"UTF8Writer w = new UTF8Writer(ctxt, out);"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,50,"String str = ""abcdefghijklmnopqrst\u00A0"";"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,51,char[] ch = str.toCharArray();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,53,"w.write(ch, 0, ch.length);"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,54,w.close();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,56,byte[] data = out.toByteArray();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,57,// one 2-byte encoded char
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,58,"assertEquals(ch.length+1, data.length);"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,59,"String act = out.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java,60,"assertEquals(str, act);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,11,ublic class TestJsonGenerator
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,11,public class GeneratorBasicTest
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,14,private final JsonFactory JSON_F = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,18,sonFactory jf = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,27,"en = jf.createGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,28,"gen = JSON_F.createGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,29,"en = jf.createGenerator(bout, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,30,"gen = JSON_F.createGenerator(bout, JsonEncoding.UTF8);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,42,sonParser jp = jf.createParser(new ByteArrayInputStream(bout.toByteArray()));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,43,JsonParser jp = JSON_F.createParser(new ByteArrayInputStream(bout.toByteArray()));
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,55,ublic void testIntWrite() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,56,public void testIntValueWrite() throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,57,oTestIntWrite(false);
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,58,oTestIntWrite(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,58,doTestIntValueWrite(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,59,doTestIntValueWrite(true);
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,61,ublic void testLongWrite() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,62,public void testLongValueWrite() throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,63,oTestLongWrite(false);
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,64,oTestLongWrite(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,64,doTestLongValueWrite(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,65,doTestLongValueWrite(true);
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,73,sonGenerator gen = new JsonFactory().createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,74,JsonGenerator gen = JSON_F.createGenerator(sw);
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,98,sonGenerator gen = new JsonFactory().createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,99,JsonGenerator gen = JSON_F.createGenerator(sw);
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,123,sonGenerator gen = new JsonFactory().createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,124,JsonGenerator gen = JSON_F.createGenerator(sw);
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,147,sonGenerator gen = new JsonFactory().createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,148,JsonGenerator gen = JSON_F.createGenerator(sw);
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,164,sonGenerator gen = new JsonFactory().createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,165,JsonGenerator gen = JSON_F.createGenerator(sw);
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,229,/ [core#167]: no error for writing field name twice
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,230,ublic void testDupFieldNameWrites() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,230,public void testGetOutputTarget() throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,232,sonFactory f = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,233,"testDupFieldNameWrites(f, false);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,234,"testDupFieldNameWrites(f, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,232,OutputStream out = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,233,JsonGenerator gen = JSON_F.createGenerator(out);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,234,"assertSame(out, gen.getOutputTarget());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,235,gen.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,237,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,238,gen = JSON_F.createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,239,"assertSame(sw, gen.getOutputTarget());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,240,gen.close();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,237,"rivate void _testDupFieldNameWrites(JsonFactory f, boolean useReader) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,243,// for [core#195]
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,244,public void testGetOutputBufferd() throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,239,sonGenerator gen;
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,240,yteArrayOutputStream bout = new ByteArrayOutputStream();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,241,f (useReader) {
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,242,"en = f.createGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,243, else {
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,244,"en = f.createGenerator(bout, JsonEncoding.UTF8);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,246,en.writeStartObject();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,247,"en.writeFieldName(""a"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,249,ry {
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,250,"en.writeFieldName(""b"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,251,en.flush();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,252,"tring json = bout.toString(""UTF-8"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,253,"ail(""Should not have let two consequtive field name writes succeed: output = ""+json);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,254, catch (JsonProcessingException e) {
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,255,"erifyException(e, ""can not write a field name, expecting a value"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,246,OutputStream out = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,247,JsonGenerator gen = JSON_F.createGenerator(out);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,248,_testOutputBuffered(gen);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,251,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,252,gen = JSON_F.createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,253,_testOutputBuffered(gen);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,254,gen.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,257,private void _testOutputBuffered(JsonGenerator gen) throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,259,gen.writeStartArray(); // 1 byte
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,260,gen.writeNumber(1234); // 4 bytes
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,261,"assertEquals(5, gen.getOutputBuffered());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,262,gen.flush();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,263,"assertEquals(0, gen.getOutputBuffered());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,264,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,265,"assertEquals(1, gen.getOutputBuffered());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,266,gen.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,267,"assertEquals(0, gen.getOutputBuffered());"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,266,rivate void doTestIntWrite(boolean pad)
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,267,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,276,private void doTestIntValueWrite(boolean pad) throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,276,sonGenerator gen = new JsonFactory().createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,285,JsonGenerator gen = JSON_F.createGenerator(sw);
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,298,rivate void doTestLongWrite(boolean pad)
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,299,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,307,private void doTestLongValueWrite(boolean pad) throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,307,sonGenerator gen = new JsonFactory().createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,315,JsonGenerator gen = JSON_F.createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,3,import java.io.ByteArrayOutputStream;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,4,import java.io.OutputStreamWriter;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,6,import com.fasterxml.jackson.core.JsonEncoding;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,7,import com.fasterxml.jackson.core.JsonFactory;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,8,import com.fasterxml.jackson.core.JsonGenerator;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,9,import com.fasterxml.jackson.core.JsonProcessingException;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,11,public class GeneratorFailTest
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,12,extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,14,private final JsonFactory F = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,16,// [core#167]: no error for writing field name twice
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,17,public void testDupFieldNameWrites() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,19,"_testDupFieldNameWrites(F, false);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,20,"_testDupFieldNameWrites(F, true);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,23,// [core#177]
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,24,// Also: should not try writing JSON String if field name expected
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,25,// (in future maybe take one as alias... but not yet)
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,26,public void testFailOnWritingStringNotFieldNameBytes() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,27,"_testFailOnWritingStringNotFieldName(F, false);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,30,// [core#177]
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,31,public void testFailOnWritingStringNotFieldNameChars() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,32,"_testFailOnWritingStringNotFieldName(F, true);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,37,/* Internal methods
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,41,"private void _testDupFieldNameWrites(JsonFactory f, boolean useReader) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,43,JsonGenerator gen;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,44,ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,45,if (useReader) {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,46,"gen = f.createGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,47,} else {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,48,"gen = f.createGenerator(bout, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,50,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,51,"gen.writeFieldName(""a"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,53,try {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,54,"gen.writeFieldName(""b"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,55,gen.flush();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,56,"String json = bout.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,57,"fail(""Should not have let two consecutive field name writes succeed: output = ""+json);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,58,} catch (JsonProcessingException e) {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,59,"verifyException(e, ""can not write a field name, expecting a value"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,61,gen.close();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,64,"private void _testFailOnWritingStringNotFieldName(JsonFactory f, boolean useReader) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,66,JsonGenerator gen;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,67,ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,68,if (useReader) {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,69,"gen = f.createGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,70,} else {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,71,"gen = f.createGenerator(bout, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,73,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,75,try {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,76,"gen.writeString(""a"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,77,gen.flush();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,78,"String json = bout.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,79,"fail(""Should not have let ""+gen.getClass().getName()+"".writeString() be used in place of 'writeFieldName()': output = ""+json);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,80,} catch (JsonProcessingException e) {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,81,"verifyException(e, ""can not write a String"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,83,gen.close();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,7,ublic class TestJsonFactory
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,7,public class JsonFactoryTest
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,21,ublic void testParserFeatures() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,21,public void testFactoryFeatures() throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,24,ssertNull(f.getCodec());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,30,"// by default, should be enabled"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,31,assertTrue(f.isEnabled(JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,32,"f.configure(JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING, false);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,33,assertFalse(f.isEnabled(JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,36,// for [core#189]: verify that it's ok to disable recycling
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,37,"// Basically simply exercises basic functionality, to ensure"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,38,// there are no obvious problems; needed since testing never
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,39,// disables this handling otherwise
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,40,public void testDisablingBufferRecycling() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,42,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,44,f.disable(JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,46,"// First, generation"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,47,for (int i = 0; i < 3; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,48,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,49,JsonGenerator gen = f.createGenerator(w);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,50,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,51,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,52,gen.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,53,"assertEquals(""{}"", w.toString());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,56,for (int i = 0; i < 3; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,57,ByteArrayOutputStream bytes = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,58,JsonGenerator gen = f.createGenerator(bytes);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,59,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,60,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,61,gen.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,62,"assertEquals(""[]"", bytes.toString(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,65,// Then parsing:
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,66,for (int i = 0; i < 3; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,67,"JsonParser p = f.createParser(""{}"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,68,"assertToken(JsonToken.START_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,69,"assertToken(JsonToken.END_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,70,assertNull(p.nextToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,71,p.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,73,"p = f.createParser(""{}"".getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,74,"assertToken(JsonToken.START_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,75,"assertToken(JsonToken.END_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,76,assertNull(p.nextToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java,77,p.close();
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,3,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,4,import com.fasterxml.jackson.core.util.JsonParserSequence;
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,6,public class ParserSequenceTest
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,7,extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,9,private final JsonFactory JSON_FACTORY = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,11,public void testSimple() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,13,"JsonParser p1 = JSON_FACTORY.createParser(""[ 1 ]"");"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,14,"JsonParser p2 = JSON_FACTORY.createParser(""[ 2 ]"");"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,15,"JsonParserSequence seq = JsonParserSequence.createFlattened(p1, p2);"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,16,"assertEquals(2, seq.containedParsersCount());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,18,assertFalse(p1.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,19,assertFalse(p2.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,20,assertFalse(seq.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,21,"assertToken(JsonToken.START_ARRAY, seq.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,22,"assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,23,"assertEquals(1, seq.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,24,"assertToken(JsonToken.END_ARRAY, seq.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,25,assertFalse(p1.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,26,assertFalse(p2.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,27,assertFalse(seq.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,28,"assertToken(JsonToken.START_ARRAY, seq.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,30,// first parser ought to be closed now
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,31,assertTrue(p1.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,32,assertFalse(p2.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,33,assertFalse(seq.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,35,"assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,36,"assertEquals(2, seq.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,37,"assertToken(JsonToken.END_ARRAY, seq.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,38,assertTrue(p1.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,39,assertFalse(p2.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,40,assertFalse(seq.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,42,assertNull(seq.nextToken());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,43,assertTrue(p1.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,44,assertTrue(p2.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,45,assertTrue(seq.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,47,seq.close();
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,48,"// redundant, but call to remove IDE warnings"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,49,p1.close();
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,50,p2.close();
False,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,1,ackage com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,1,package com.fasterxml.jackson.core.json;
False,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,13,ublic class TestStringGeneration
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,13,public class StringGenerationTest
False,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,26,ublic void testBasicEscaping()
False,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,27,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,26,public void testBasicEscaping() throws Exception
False,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,33,ublic void testLongerRandomSingleChunk()
False,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,34,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,32,// for [core#194]
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,33,public void testMediumStringsBytes() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,35,"_testMediumStrings(true, 1100);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,36,"_testMediumStrings(true, 2300);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,37,"_testMediumStrings(true, 3800);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,38,"_testMediumStrings(true, 7500);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,39,"_testMediumStrings(true, 19000);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,42,// for [core#194]
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,43,public void testMediumStringsChars() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,45,"_testMediumStrings(false, 1100);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,46,"_testMediumStrings(false, 2300);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,47,"_testMediumStrings(false, 3800);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,48,"_testMediumStrings(false, 7500);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,49,"_testMediumStrings(false, 19000);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,52,public void testLongerRandomSingleChunk() throws Exception
False,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,46,ublic void testLongerRandomMultiChunk()
False,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,47,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,64,public void testLongerRandomMultiChunk() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,82,private String _generareMediumText(int minLen)
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,84,StringBuilder sb = new StringBuilder(minLen + 1000);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,85,Random rnd = new Random(minLen);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,86,do {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,87,switch (rnd.nextInt() % 4) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,88,case 0:
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,89,"sb.append("" foo"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,90,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,91,case 1:
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,92,"sb.append("" bar"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,93,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,94,case 2:
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,95,sb.append(String.valueOf(sb.length()));
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,96,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,97,default:
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,98,"sb.append("" \""stuff\"""");"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,99,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,101,} while (sb.length() < minLen);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,102,return sb.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,129,"private void _testMediumStrings(boolean useBinary, int length) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,131,String text = _generareMediumText(length);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,132,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,133,ByteArrayOutputStream bytes = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,135,JsonGenerator gen = useBinary ? FACTORY.createGenerator(bytes)
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,136,: FACTORY.createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,137,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,138,gen.writeString(text);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,139,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,140,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,142,String json;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,143,if (useBinary) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,144,"json = bytes.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,145,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,146,json = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,149,JsonParser p = FACTORY.createParser(json);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,150,"assertToken(JsonToken.START_ARRAY, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,151,"assertToken(JsonToken.VALUE_STRING, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,152,"assertEquals(text, p.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,153,"assertToken(JsonToken.END_ARRAY, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java,154,p.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,4,import com.fasterxml.jackson.core.util.JsonParserDelegate;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,515,public void testGetValueAsTextBytes() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,517,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,518,"_testGetValueAsText(f, true, false);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,519,"_testGetValueAsText(f, true, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,522,public void testGetValueAsTextChars() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,524,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,525,"_testGetValueAsText(f, false, false);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,526,"_testGetValueAsText(f, false, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,529,"@SuppressWarnings(""resource"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,530,"private void _testGetValueAsText(JsonFactory f,"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,531,"boolean useBytes, boolean delegate) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,533,"String JSON = ""{\""a\"":1,\""b\"":true,\""c\"":null,\""d\"":\""foo\""}"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,534,"JsonParser p = useBytes ? f.createParser(JSON.getBytes(""UTF-8""))"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,535,: f.createParser(JSON);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,537,if (delegate) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,538,p = new JsonParserDelegate(p);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,541,"assertToken(JsonToken.START_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,542,assertNull(p.getValueAsString());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,544,"assertToken(JsonToken.FIELD_NAME, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,545,"assertEquals(""a"", p.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,546,"assertEquals(""a"", p.getValueAsString());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,547,"assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,548,"assertEquals(""1"", p.getValueAsString());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,550,"assertToken(JsonToken.FIELD_NAME, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,551,"assertEquals(""b"", p.getValueAsString());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,552,"assertToken(JsonToken.VALUE_TRUE, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,553,"assertEquals(""true"", p.getValueAsString());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,555,"assertToken(JsonToken.FIELD_NAME, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,556,"assertEquals(""c"", p.getValueAsString());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,557,"assertToken(JsonToken.VALUE_NULL, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,558,"// null token returned as Java null, as per javadoc"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,559,assertNull(p.getValueAsString());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,561,"assertToken(JsonToken.FIELD_NAME, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,562,"assertEquals(""d"", p.getValueAsString());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,563,"assertToken(JsonToken.VALUE_STRING, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,564,"assertEquals(""foo"", p.getValueAsString());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,566,"assertToken(JsonToken.END_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,567,assertNull(p.getValueAsString());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,569,assertNull(p.nextToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,570,p.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,22,private final JsonFactory JSON_F = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,32,"/ for [core#220]: problem with `nextFieldName(str)`, indented content"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,33,ublic void testNextNameWithIndentation() throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,35,testNextFieldNameIndent(false);
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,36,testNextFieldNameIndent(true);
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,39,/ [core#34]
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,34,// [jackson-core#34]
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,46,/ [core#38] with nextFieldName
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,41,// [jackson-core#38] with nextFieldName
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,55,inal JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,50,_testNextNameWithLong(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,51,_testNextNameWithLong(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,54,"// for [core#220]: problem with `nextFieldName(str)`, indented content"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,55,public void testNextNameWithIndentation() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,57,_testNextFieldNameIndent(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,58,_testNextFieldNameIndent(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,61,public void testNextTextValue() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,63,_textNextText(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,64,_textNextText(true);
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,57,"testLong(jf, false);"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,58,"testLong(jf, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,67,public void testNextIntValue() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,69,_textNextInt(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,70,_textNextInt(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,73,public void testNextLongValue() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,75,_textNextLong(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,76,_textNextLong(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,79,public void testNextBooleanValue() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,81,_textNextBoolean(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,82,_textNextBoolean(true);
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,141,sonFactory jf = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,143,"f.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,144, jf.createParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,166,"JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,167,: JSON_F.createParser(new StringReader(DOC));
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,180,sonFactory jf = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,181,sonParser jp = useStream ?
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,182,"f.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,183, jf.createParser(new StringReader(DOC));
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,184,ssertNull(jp.nextFieldName());
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,185,"ssertToken(JsonToken.START_OBJECT, jp.getCurrentToken());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,186,"ssertEquals(""name"", jp.nextFieldName());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,187,"ssertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,188,"ssertEquals(""name"", jp.getCurrentName());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,189,"ssertEquals(""name"", jp.getText());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,190,ssertNull(jp.nextFieldName());
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,191,"ssertToken(JsonToken.VALUE_NUMBER_INT, jp.getCurrentToken());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,192,"ssertEquals(123, jp.getIntValue());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,194,"ssertEquals(""name2"", jp.nextFieldName());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,195,"ssertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,196,"ssertEquals(""name2"", jp.getCurrentName());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,197,"ssertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,199,"ssertEquals(""x"", jp.nextFieldName());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,200,"ssertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,201,"ssertEquals(""x"", jp.getCurrentName());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,203,ssertNull(jp.nextFieldName());
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,204,"ssertToken(JsonToken.VALUE_STRING, jp.getCurrentToken());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,206,ssertNull(jp.nextFieldName());
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,207,"ssertToken(JsonToken.END_OBJECT, jp.getCurrentToken());"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,209,ssertNull(jp.nextFieldName());
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,210,ssertNull(jp.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,203,JsonParser p = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,204,"JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,205,: JSON_F.createParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,206,assertNull(p.nextFieldName());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,207,"assertToken(JsonToken.START_OBJECT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,208,"assertEquals(""name"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,209,"assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,210,"assertEquals(""name"", p.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,211,"assertEquals(""name"", p.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,212,assertNull(p.nextFieldName());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,213,"assertToken(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,214,"assertEquals(123, p.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,216,"assertEquals(""name2"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,217,"assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,218,"assertEquals(""name2"", p.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,219,"assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,221,"assertEquals(""x"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,222,"assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,223,"assertEquals(""x"", p.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,225,assertNull(p.nextFieldName());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,226,"assertToken(JsonToken.VALUE_STRING, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,228,assertNull(p.nextFieldName());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,229,"assertToken(JsonToken.END_OBJECT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,231,assertNull(p.nextFieldName());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,232,assertNull(p.getCurrentToken());
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,212,p.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,234,p.close();
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,218,sonFactory f = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,220,".createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,221, f.createParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,241,"JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,242,: JSON_F.createParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,255,private void _textNextText(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,257,"final String DOC = aposToQuotes(""{'a':'123','b':5,'c':[false,'foo']}"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,258,JsonParser p = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,259,"JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,260,: JSON_F.createParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,261,assertNull(p.nextTextValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,262,"assertToken(JsonToken.START_OBJECT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,263,assertNull(p.nextTextValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,264,"assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,265,"assertEquals(""a"", p.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,267,"assertEquals(""123"", p.nextTextValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,268,"assertToken(JsonToken.FIELD_NAME, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,269,"assertEquals(""b"", p.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,270,assertNull(p.nextFieldName());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,271,"assertToken(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,273,"assertEquals(""c"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,275,assertNull(p.nextTextValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,276,"assertToken(JsonToken.START_ARRAY, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,277,assertNull(p.nextTextValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,278,"assertToken(JsonToken.VALUE_FALSE, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,279,"assertEquals(""foo"", p.nextTextValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,281,assertNull(p.nextTextValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,282,"assertToken(JsonToken.END_ARRAY, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,283,assertNull(p.nextTextValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,284,"assertToken(JsonToken.END_OBJECT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,285,assertNull(p.nextTextValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,286,assertNull(p.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,288,p.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,291,private void _textNextInt(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,293,"final String DOC = aposToQuotes(""{'a':'123','b':5,'c':[false,456]}"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,294,JsonParser p = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,295,"JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,296,: JSON_F.createParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,297,"assertEquals(0, p.nextIntValue(0));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,298,"assertToken(JsonToken.START_OBJECT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,299,"assertEquals(0, p.nextIntValue(0));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,300,"assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,301,"assertEquals(""a"", p.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,303,"assertEquals(0, p.nextIntValue(0));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,304,"assertToken(JsonToken.VALUE_STRING, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,305,"assertEquals(""123"", p.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,306,"assertToken(JsonToken.FIELD_NAME, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,307,"assertEquals(""b"", p.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,308,"assertEquals(5, p.nextIntValue(0));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,310,"assertEquals(""c"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,312,"assertEquals(0, p.nextIntValue(0));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,313,"assertToken(JsonToken.START_ARRAY, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,314,"assertEquals(0, p.nextIntValue(0));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,315,"assertToken(JsonToken.VALUE_FALSE, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,316,"assertEquals(456, p.nextIntValue(0));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,318,"assertEquals(0, p.nextIntValue(0));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,319,"assertToken(JsonToken.END_ARRAY, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,320,"assertEquals(0, p.nextIntValue(0));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,321,"assertToken(JsonToken.END_OBJECT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,322,"assertEquals(0, p.nextIntValue(0));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,323,assertNull(p.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,325,p.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,328,private void _textNextLong(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,330,"final String DOC = aposToQuotes(""{'a':'xyz','b':-59,'c':[false,-1]}"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,331,JsonParser p = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,332,"JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,333,: JSON_F.createParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,334,"assertEquals(0L, p.nextLongValue(0L));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,335,"assertToken(JsonToken.START_OBJECT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,336,"assertEquals(0L, p.nextLongValue(0L));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,337,"assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,338,"assertEquals(""a"", p.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,340,"assertEquals(0L, p.nextLongValue(0L));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,341,"assertToken(JsonToken.VALUE_STRING, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,342,"assertEquals(""xyz"", p.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,343,"assertToken(JsonToken.FIELD_NAME, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,344,"assertEquals(""b"", p.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,345,"assertEquals(-59L, p.nextLongValue(0L));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,347,"assertEquals(""c"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,349,"assertEquals(0L, p.nextLongValue(0L));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,350,"assertToken(JsonToken.START_ARRAY, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,351,"assertEquals(0L, p.nextLongValue(0L));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,352,"assertToken(JsonToken.VALUE_FALSE, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,353,"assertEquals(-1L, p.nextLongValue(0L));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,355,"assertEquals(0L, p.nextLongValue(0L));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,356,"assertToken(JsonToken.END_ARRAY, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,357,"assertEquals(0L, p.nextLongValue(0L));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,358,"assertToken(JsonToken.END_OBJECT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,359,"assertEquals(0L, p.nextLongValue(0L));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,360,assertNull(p.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,362,p.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,365,private void _textNextBoolean(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,367,"final String DOC = aposToQuotes(""{'a':'xyz','b':true,'c':[false,0]}"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,368,JsonParser p = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,369,"JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,370,: JSON_F.createParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,371,assertNull(p.nextBooleanValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,372,"assertToken(JsonToken.START_OBJECT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,373,assertNull(p.nextBooleanValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,374,"assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,375,"assertEquals(""a"", p.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,377,assertNull(p.nextBooleanValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,378,"assertToken(JsonToken.VALUE_STRING, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,379,"assertEquals(""xyz"", p.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,380,"assertToken(JsonToken.FIELD_NAME, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,381,"assertEquals(""b"", p.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,382,"assertEquals(Boolean.TRUE, p.nextBooleanValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,384,"assertEquals(""c"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,386,assertNull(p.nextBooleanValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,387,"assertToken(JsonToken.START_ARRAY, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,388,"assertEquals(Boolean.FALSE, p.nextBooleanValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,389,assertNull(p.nextBooleanValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,390,"assertToken(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,391,"assertEquals(0, p.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,393,assertNull(p.nextBooleanValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,394,"assertToken(JsonToken.END_ARRAY, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,395,assertNull(p.nextBooleanValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,396,"assertToken(JsonToken.END_OBJECT, p.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,397,assertNull(p.nextBooleanValue());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,398,assertNull(p.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,400,p.close();
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,286,"rivate void _testLong(JsonFactory f, boolean useStream) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,455,private void _testNextNameWithLong(boolean useStream) throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,310,".createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
False,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,311, f.createParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,479,"JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,480,: JSON_F.createParser(new StringReader(DOC));
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,10,testSymbolsWithNull(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,10,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,11,"_testSymbolsWithNull(f, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,12,"// and repeat with same factory, just for fun, and to ensure symbol table is fine"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,13,"_testSymbolsWithNull(f, true);"
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,15,testSymbolsWithNull(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,18,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,19,"_testSymbolsWithNull(f, false);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,20,"_testSymbolsWithNull(f, false);"
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,18,rivate void _testSymbolsWithNull(boolean useBytes) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,23,"private void _testSymbolsWithNull(JsonFactory f, boolean useBytes) throws Exception"
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,20,inal JsonFactory f = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,28,"ssertEquals(""\u0000abc"", parser.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,32,String currName = parser.getCurrentName();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,33,"if (!""\u0000abc"".equals(currName)) {"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,34,"fail(""Expected \\0abc (4 bytes), '""+currName+""' (""+currName.length()+"")"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,33,"ssertEquals(""abc"", parser.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,40,currName = parser.getCurrentName();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,41,"if (!""abc"".equals(currName)) {"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,43,for (int i = 0; i < currName.length(); ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,44,"System.out.println(""#""+i+"" -> 0x""+Integer.toHexString(currName.charAt(i)));"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,47,"fail(""Expected 'abc' (3 bytes), '""+currName+""' (""+currName.length()+"")"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,3,mport java.io.ByteArrayOutputStream;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,3,import java.io.*;
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,9,ublic class TestUtf8Generator
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,10,xtends BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,9,public class TestUtf8Generator extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,11,private final JsonFactory JSON_F = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,28,sonFactory f = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,29,sonParser p = f.createParser(bytes.toByteArray());
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,29,JsonParser p = JSON_F.createParser(bytes.toByteArray());
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,44,sonFactory f = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,46,sonGenerator jgen = f.createGenerator(out);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,45,JsonGenerator jgen = JSON_F.createGenerator(out);
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,54,sonParser jp = f.createParser(JSON);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,53,JsonParser jp = JSON_F.createParser(JSON);
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,49,ublic void testUtf8Name2Bytes()
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,50,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,49,public void testUtf8Name2Bytes() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,61,assertTrue(jp.hasToken(JsonToken.FIELD_NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,62,assertTrue(jp.hasTokenId(JsonTokenId.ID_FIELD_NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,66,assertTrue(jp.hasToken(JsonToken.VALUE_NUMBER_INT));
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,67,assertTrue(jp.hasTokenId(JsonTokenId.ID_NUMBER_INT));
False,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolTableMergingTest.java,14,ublic class TestJsonParserSymbols
True,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolTableMergingTest.java,14,public class SymbolTableMergingTest
False,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolTableMergingTest.java,24,ublic int byteSymbolCount() { return _rootByteSymbols.size(); }
True,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolTableMergingTest.java,24,public int byteSymbolCount() { return _byteSymbolCanonicalizer.size(); }
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,1,package com.fasterxml.jackson.core.sym;
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,3,import java.io.IOException;
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,4,import java.util.HashSet;
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,6,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,9,* Tests that use symbol table functionality through parser.
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,11,public class SymbolsViaParserTest
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,12,extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,14,// for [jackson-core#213]
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,15,public void test17CharSymbols() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,16,_test17Chars(false);
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,19,// for [jackson-core#213]
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,20,public void test17ByteSymbols() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,21,_test17Chars(true);
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,24,// for [jackson-core#216]
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,25,public void testSymbolTableExpansionChars() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,26,_testSymbolTableExpansion(false);
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,29,// for [jackson-core#216]
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,30,public void testSymbolTableExpansionBytes() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,31,_testSymbolTableExpansion(true);
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,36,/* Secondary test methods
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,40,private void _test17Chars(boolean useBytes) throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,42,String doc = _createDoc17();
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,43,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,45,JsonParser p = useBytes
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,46,"? f.createParser(doc.getBytes(""UTF-8""))"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,47,: f.createParser(doc);
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,48,HashSet<String> syms = new HashSet<String>();
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,49,"assertToken(JsonToken.START_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,50,for (int i = 0; i < 50; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,51,"assertToken(JsonToken.FIELD_NAME, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,52,syms.add(p.getCurrentName());
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,53,"assertToken(JsonToken.VALUE_TRUE, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,55,"assertToken(JsonToken.END_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,56,"assertEquals(50, syms.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,57,p.close();
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,60,private String _createDoc17() {
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,61,StringBuilder sb = new StringBuilder(1000);
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,62,"sb.append(""{\n"");"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,63,for (int i = 1; i <= 50; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,64,if (i > 1) {
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,65,"sb.append("",\n"");"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,67,"sb.append(""\""lengthmatters"")"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,68,.append(1000 + i)
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,69,".append(""\"": true"");"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,71,"sb.append(""\n}"");"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,72,return sb.toString();
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,75,public void _testSymbolTableExpansion(boolean useBytes) throws Exception
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,77,JsonFactory jsonFactory = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,78,// Important: must create separate documents to gradually build up symbol table
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,79,for (int i = 0; i < 200; i++) {
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,80,String field = Integer.toString(i);
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,81,"final String doc = ""{ \"""" + field + ""\"" : \""test\"" }"";"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,82,JsonParser parser = useBytes
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,83,"? jsonFactory.createParser(doc.getBytes(""UTF-8""))"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,84,: jsonFactory.createParser(doc);
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,85,"assertToken(JsonToken.START_OBJECT, parser.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,86,"assertToken(JsonToken.FIELD_NAME, parser.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,87,"assertEquals(field, parser.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,88,"assertToken(JsonToken.VALUE_STRING, parser.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,89,"assertToken(JsonToken.END_OBJECT, parser.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,90,assertNull(parser.nextToken());
True,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,91,parser.close();
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,4,import java.lang.reflect.Field;
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,6,mport com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,7,mport com.fasterxml.jackson.core.sym.Name;
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,11, is working. Created to verify fix to [JACKSON-5] (although not very
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,12, good at catching it...).
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,10,* is working.
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,79,ublic void testAuxMethods()
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,80,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,77,public void testAuxMethodsWithNewSymboTable() throws Exception
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,85,ytesToNameCanonicalizer nc = BytesToNameCanonicalizer.createRoot()
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,82,ByteQuadsCanonicalizer nc = ByteQuadsCanonicalizer.createRoot()
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,91,ame n1 = nc.findName(A_BYTES);
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,92,ssertNotNull(n1);
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,93,"ssertEquals(""AAAA"", n1.getName());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,88,String n1 = nc.findName(A_BYTES);
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,89,"assertEquals(""AAAA"", n1);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,95,"ame n2 = nc.findName(A_BYTES, B_BYTES);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,96,"ssertEquals(""AAAABBBB"", n2.getName());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,91,"String n2 = nc.findName(A_BYTES, B_BYTES);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,92,"assertEquals(""AAAABBBB"", n2);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,101,"// as per name, for [core#207]"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,102,public void testIssue207() throws Exception
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,104,ByteQuadsCanonicalizer nc = ByteQuadsCanonicalizer.createRoot(-523743345);
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,105,"Field byteSymbolCanonicalizerField = JsonFactory.class.getDeclaredField(""_byteSymbolCanonicalizer"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,106,byteSymbolCanonicalizerField.setAccessible(true);
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,107,JsonFactory jsonF = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,108,"byteSymbolCanonicalizerField.set(jsonF, nc);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,110,StringBuilder stringBuilder = new StringBuilder();
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,111,"stringBuilder.append(""{\n"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,112,"stringBuilder.append(""    \""expectedGCperPosition\"": null"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,113,for (int i = 0; i < 60; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,114,"stringBuilder.append("",\n    \"""").append(i + 1).append(""\"": null"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,116,"stringBuilder.append(""\n}"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,118,"JsonParser p = jsonF.createParser(stringBuilder.toString().getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,119,while (p.nextToken() != null) { }
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,120,p.close();
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,111,"rotected JsonParser createParser(JsonFactory jf, String input)"
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,112,"hrows IOException, JsonParseException"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,129,"protected JsonParser createParser(JsonFactory jf, String input) throws IOException"
True,src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java,src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java,11,*<p>
True,src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java,src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java,12,* Note that the problem does not necessarily affect code at or
True,src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java,src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java,13,"* after Jackson 2.6, since hash calculation algorithm has been"
True,src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java,src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java,14,* completely changed. It may still be relevant for character-backed
True,src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java,src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java,15,"* sources, however."
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,4,import java.lang.reflect.Field;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,10,* Tests that directly modify/access underlying low-level symbol tables
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,11,* (instead of indirectly using them via JsonParser).
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,16,inal int COUNT = 6000;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,21,final int COUNT = 12000;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,23,"ssertEquals(8192, symbols.bucketCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,28,"assertEquals(16384, symbols.bucketCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,36,"assertEquals(3431, symbols.collisionCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,31,"ssertEquals(1401, symbols.collisionCount()); // with 33"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,32,"/        assertEquals(1858, symbols.collisionCount()); // with 31"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,34,/ esp. with collisions; first got about 30;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,35,"/ with fixes 4 (for 33), 5 (for 31)"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,37,"ssertEquals(4, symbols.maxCollisionLength()); // 33"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,38,"/        assertEquals(5, symbols.maxCollisionLength()); // 31"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,38,"assertEquals(6, symbols.maxCollisionLength());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,43,ublic void testSyntheticWithBytes() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,43,"@SuppressWarnings(""deprecation"")"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,44,public void testSyntheticWithBytesOld() throws IOException
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,49,inal int COUNT = 6000;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,51,final int COUNT = 12000;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,52,"nt[] quads = BytesToNameCanonicalizer.calcQuads(id.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,54,"int[] quads = calcQuads(id.getBytes(""UTF-8""));"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,56,"ssertEquals(8192, symbols.bucketCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,58,"assertEquals(16384, symbols.bucketCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,60,"ssertEquals(1733, symbols.collisionCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,61,/ but not super long collision chains:
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,62,"ssertEquals(9, symbols.maxCollisionLength());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,61,"assertEquals(3476, symbols.collisionCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,62,// longest collision chain not optimal but ok:
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,63,"assertEquals(15, symbols.maxCollisionLength());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,65,// But also verify entries are actually found?
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,68,public void testSyntheticWithBytesNew() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,70,"// pass seed, to keep results consistent:"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,71,final int SEED = 33333;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,72,ByteQuadsCanonicalizer symbols =
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,73,ByteQuadsCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,75,final int COUNT = 12000;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,76,for (int i = 0; i < COUNT; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,77,String id = fieldNameFor(i);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,78,"int[] quads = calcQuads(id.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,79,"symbols.addName(id, quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,81,"assertEquals(COUNT, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,82,"assertEquals(16384, symbols.bucketCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,84,"// fragile, but essential to verify low collision counts;"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,85,// anywhere between 70-80% primary matches
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,86,"assertEquals(8534, symbols.primaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,87,// secondary between 10-20%
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,88,"assertEquals(2534, symbols.secondaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,89,// and most of remaining in tertiary
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,90,"assertEquals(932, symbols.tertiaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,91,// so that spill-over is empty or close to
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,92,"assertEquals(0, symbols.spilloverCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,66,ublic void testThousandsOfSymbols() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,96,public void testThousandsOfSymbolsWithChars() throws IOException
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,70,ytesToNameCanonicalizer symbolsBRoot = BytesToNameCanonicalizer.createRoot(SEED);
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,72,"inal Charset utf8 = Charset.forName(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,101,int exp = 0;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,106,for (int i = 0; i < 250; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,107,"String name = ""f_""+doc+""_""+i;"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,108,char[] ch = name.toCharArray();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,109,"String str = symbolsC.findSymbol(ch, 0, ch.length,"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,110,symbolsC.calcHash(name));
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,111,assertNotNull(str);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,113,symbolsC.release();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,114,exp += 250;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,115,if (exp > CharsToNameCanonicalizer.MAX_ENTRIES_FOR_REUSE) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,116,exp = 0;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,118,"assertEquals(exp, symbolsCRoot.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,122,"@SuppressWarnings(""deprecation"")"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,123,public void testThousandsOfSymbolsWithOldBytes() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,125,final int SEED = 33333;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,127,BytesToNameCanonicalizer symbolsBRoot = BytesToNameCanonicalizer.createRoot(SEED);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,128,"final Charset utf8 = Charset.forName(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,129,int exp = 0;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,131,for (int doc = 0; doc < 100; ++doc) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,139,"Name n = symbolsB.findName(quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,140,"assertEquals(name, n.getName());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,142,symbolsB.release();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,143,exp += 250;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,144,if (exp > BytesToNameCanonicalizer.MAX_ENTRIES_FOR_REUSE) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,145,exp = 0;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,147,"assertEquals(exp, symbolsBRoot.size());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,85,har[] ch = name.toCharArray();
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,86,"tring str = symbolsC.findSymbol(ch, 0, ch.length,"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,87,ymbolsC.calcHash(name));
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,88,ssertNotNull(str);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,151,// Since 2.6
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,152,public void testThousandsOfSymbolsWithNew() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,154,final int SEED = 33333;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,156,ByteQuadsCanonicalizer symbolsBRoot = ByteQuadsCanonicalizer.createRoot(SEED);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,157,"final Charset utf8 = Charset.forName(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,158,int exp = 0;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,159,ByteQuadsCanonicalizer symbolsB = null;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,161,// loop to get
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,162,for (int doc = 0; doc < 100; ++doc) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,163,symbolsB = symbolsBRoot.makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,164,for (int i = 0; i < 250; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,165,"String name = ""f_""+doc+""_""+i;"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,167,int[] quads = calcQuads(name.getBytes(utf8));
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,169,"symbolsB.addName(name, quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,170,"String n = symbolsB.findName(quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,171,"assertEquals(name, n);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,91,ymbolsC.release();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,175,exp += 250;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,176,if (exp > ByteQuadsCanonicalizer.MAX_ENTRIES_FOR_REUSE) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,177,exp = 0;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,179,"assertEquals(exp, symbolsBRoot.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,181,"/* 05-Feb-2015, tatu: Fragile, but it is important to ensure that collision"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,182,*   rates are not accidentally increased...
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,184,"assertEquals(6250, symbolsB.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,185,"assertEquals(4761, symbolsB.primaryCount()); // 80% primary hit rate"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,186,"assertEquals(1190, symbolsB.secondaryCount()); // 13% secondary"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,187,"assertEquals(299, symbolsB.tertiaryCount()); // 7% tertiary"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,188,"assertEquals(0, symbolsB.spilloverCount()); // and couple of leftovers"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,191,// And then one more test just for Bytes-based symbol table
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,192,public void testByteBasedSymbolTable() throws Exception
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,194,"// combination of short, medium1/2, long names..."
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,195,"final String JSON = aposToQuotes(""{'abc':1, 'abc\\u0000':2, '\\u0000abc':3, """
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,196,// then some medium
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,197,"+""'abc123':4,'abcd1234':5,"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,198,"+""'abcd1234a':6,'abcd1234abcd':7,"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,199,"+""'abcd1234abcd1':8"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,202,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,203,"JsonParser p = f.createParser(JSON.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,204,ByteQuadsCanonicalizer symbols = _findSymbols(p);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,205,"assertEquals(0, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,206,_streamThrough(p);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,207,"assertEquals(8, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,208,p.close();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,210,"// and, for fun, try again"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,211,"p = f.createParser(JSON.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,212,_streamThrough(p);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,213,symbols = _findSymbols(p);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,214,"assertEquals(8, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,215,p.close();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,217,"p = f.createParser(JSON.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,218,_streamThrough(p);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,219,symbols = _findSymbols(p);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,220,"assertEquals(8, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,221,p.close();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,224,private void _streamThrough(JsonParser p) throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,226,while (p.nextToken() != null) { }
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,229,private ByteQuadsCanonicalizer _findSymbols(JsonParser p) throws Exception
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,231,"Field syms = p.getClass().getDeclaredField(""_symbols"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,232,syms.setAccessible(true);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,233,return ((ByteQuadsCanonicalizer) syms.get(p));
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,237,"@SuppressWarnings(""deprecation"")"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,132,"ssertEquals(14408, symbols.collisionCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,274,"assertEquals(7127, symbols.collisionCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,134,"ssertEquals(10, symbols.maxCollisionLength());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,276,"assertEquals(4, symbols.maxCollisionLength());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,279,// [core#187]: unexpectedly high number of collisions for straight numbers
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,280,public void testCollisionsWithBytesNew187a() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,282,ByteQuadsCanonicalizer symbols =
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,283,ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,285,final int COUNT = 43000;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,286,for (int i = 0; i < COUNT; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,287,String id = String.valueOf(10000 + i);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,288,"int[] quads = calcQuads(id.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,289,"symbols.addName(id, quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,292,"assertEquals(COUNT, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,293,"assertEquals(65536, symbols.bucketCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,295,"/* 29-Mar-2015, tatu: To get collision counts down for this"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,296,*    test took quite a bit of tweaking...
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,298,"assertEquals(32342, symbols.primaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,299,"assertEquals(8863, symbols.secondaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,300,"assertEquals(1795, symbols.tertiaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,302,// finally managed to get this to 0; other variants produced thousands
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,303,"assertEquals(0, symbols.spilloverCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,306,"// Another variant, but with 1-quad names"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,307,public void testCollisionsWithBytesNew187b() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,309,ByteQuadsCanonicalizer symbols =
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,310,ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,312,final int COUNT = 10000;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,313,for (int i = 0; i < COUNT; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,314,String id = String.valueOf(i);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,315,"int[] quads = calcQuads(id.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,316,"symbols.addName(id, quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,318,"assertEquals(COUNT, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,320,"assertEquals(16384, symbols.bucketCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,322,"// fragile, but essential to verify low collision counts;"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,323,"// here bit low primary, 55%"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,324,"assertEquals(5402, symbols.primaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,325,"// secondary higher than usual, above 25%"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,326,"assertEquals(2744, symbols.secondaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,327,// and most of remaining in tertiary
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,328,"assertEquals(1834, symbols.tertiaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,329,// with a bit of spillover
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,330,"assertEquals(20, symbols.spilloverCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,351,private String _shortDoc191() {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,352,StringBuilder sb = new StringBuilder();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,353,"sb.append(""{\n"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,354,for (int i = 0; i < 400; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,355,if (i > 0) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,356,"sb.append("",\n"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,358,"sb.append('""');"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,359,char c = (char) i;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,360,if (Character.isLetterOrDigit(c)) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,361,sb.append((char) i);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,362,} else {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,363,"sb.append(String.format(""\\u%04x"", i));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,365,"sb.append(""\"" : ""+i);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,367,"sb.append(""}\n"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,368,return sb.toString();
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,169,"ssertEquals(112, symbols.collisionCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,385,"assertEquals(50, symbols.collisionCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,173,ublic void testShortQuotedDirectBytes() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,389,"@SuppressWarnings(""deprecation"")"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,390,public void testShortQuotedDirectBytesOld() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,407,public void testShortQuotedDirectBytes() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,409,final int COUNT = 400;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,410,ByteQuadsCanonicalizer symbols =
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,411,ByteQuadsCanonicalizer.createRoot(123).makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,412,for (int i = 0; i < COUNT; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,413,"String id = String.format(""\\u%04x"", i);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,414,"int[] quads = calcQuads(id.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,415,"symbols.addName(id, quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,417,"assertEquals(COUNT, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,418,"assertEquals(512, symbols.bucketCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,420,"assertEquals(285, symbols.primaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,421,"assertEquals(90, symbols.secondaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,422,"assertEquals(25, symbols.tertiaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,423,"assertEquals(0, symbols.spilloverCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,427,"@SuppressWarnings(""deprecation"")"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,193,inal int COUNT = 400;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,430,final int COUNT = 600;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,206,"ssertEquals(0, symbols.collisionCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,207,"ssertEquals(0, symbols.maxCollisionLength());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,443,"assertEquals(16, symbols.collisionCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,444,"assertEquals(1, symbols.maxCollisionLength());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,216,"nt[] quads = BytesToNameCanonicalizer.calcQuads(id.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,453,"int[] quads = calcQuads(id.getBytes(""UTF-8""));"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,222,"ssertEquals(15, symbols.collisionCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,459,"assertEquals(209, symbols.collisionCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,227,rivate String _shortDoc191() {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,228,tringBuilder sb = new StringBuilder();
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,229,"b.append(""{\n"");"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,230,or (int i = 0; i < 400; ++i) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,231,f (i > 0) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,232,"b.append("",\n"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,464,public void testShortNameCollisionsDirectNew() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,466,final int COUNT = 700;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,468,ByteQuadsCanonicalizer symbols =
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,469,ByteQuadsCanonicalizer.createRoot(333).makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,470,for (int i = 0; i < COUNT; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,471,String id = String.valueOf((char) i);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,472,"int[] quads = calcQuads(id.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,473,"symbols.addName(id, quads, quads.length);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,234,"b.append(String.format(""\""\\u%04x\"" : %d"", i, i));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,475,"assertEquals(COUNT, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,477,"assertEquals(1024, symbols.bucketCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,479,"// Primary is good, but secondary spills cluster in nasty way..."
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,480,"assertEquals(564, symbols.primaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,481,"assertEquals(122, symbols.secondaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,482,"assertEquals(14, symbols.tertiaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,483,"assertEquals(0, symbols.spilloverCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,485,"assertEquals(COUNT,"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,486,symbols.primaryCount() + symbols.secondaryCount() + symbols.tertiaryCount() + symbols.spilloverCount());
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,236,"b.append(""}\n"");"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,237,eturn sb.toString();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,490,"// to verify [jackson-core#213] -- did not fail, but ruled out low-level bug"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,492,public void testLongSymbols17Bytes() throws Exception
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,494,ByteQuadsCanonicalizer symbolsB =
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,495,ByteQuadsCanonicalizer.createRoot(3).makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,496,CharsToNameCanonicalizer symbolsC = CharsToNameCanonicalizer.createRoot(3);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,498,for (int i = 1001; i <= 1050; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,499,"String id = ""lengthmatters""+i;"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,500,"int[] quads = calcQuads(id.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,501,"symbolsB.addName(id, quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,502,char[] idChars = id.toCharArray();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,503,"symbolsC.findSymbol(idChars, 0, idChars.length, symbolsC.calcHash(id));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,505,"assertEquals(50, symbolsB.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,506,"assertEquals(50, symbolsC.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,1,package com.fasterxml.jackson.core.sym;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,3,import java.io.IOException;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,7,public class TestSymbolsWithMediaItem extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,9,private final String JSON = aposToQuotes(
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,10,"""{'media' : {\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,11,"+""      'uri' : 'http://foo.com',"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,12,"+""      'title' : 'Test title 1',"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,13,"+""      'width' : 640, 'height' : 480,"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,14,"+""      'format' : 'video/mpeg4',"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,15,"+""      'duration' : 18000000,"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,16,"+""      'size' : 58982400,"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,17,"+""      'bitrate' : 262144,"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,18,"+""      'persons' : [ ],"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,19,"+""      'player' : 'native',"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,20,"+""      'copyright' : 'None'"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,21,"+""   },\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,22,"+""   'images' : [ {\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,23,"+""      'uri' : 'http://bar.com',\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,24,"+""      'title' : 'Test title 1',\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,25,"+""      'width' : 1024,'height' : 768,\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,26,"+""      'size' : 'LARGE'\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,27,"+""    }, {\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,28,"+""      'uri' : 'http://foobar.org',\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,29,"+""      'title' : 'Javaone Keynote',\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,30,"+""      'width' : 320, 'height' : 240,\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,31,"+""      'size' : 'SMALL'\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,32,"+""    } ]\n"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,33,"+""}\n"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,35,public void testSmallSymbolSetWithBytes() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,37,final int SEED = 33333;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,39,ByteQuadsCanonicalizer symbolsRoot = ByteQuadsCanonicalizer.createRoot(SEED);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,40,ByteQuadsCanonicalizer symbols = symbolsRoot.makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,41,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,42,"JsonParser p = f.createParser(JSON.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,44,JsonToken t;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,45,while ((t = p.nextToken()) != null) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,46,if (t != JsonToken.FIELD_NAME) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,47,continue;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,49,String name = p.getCurrentName();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,50,"int[] quads = calcQuads(name.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,52,"if (symbols.findName(quads, quads.length) != null) {"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,53,continue;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,55,"symbols.addName(name, quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,57,p.close();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,59,"assertEquals(13, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,60,"assertEquals(12, symbols.primaryCount()); // 80% primary hit rate"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,61,"assertEquals(1, symbols.secondaryCount()); // 13% secondary"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,62,"assertEquals(0, symbols.tertiaryCount()); // 7% tertiary"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,63,"assertEquals(0, symbols.spilloverCount()); // and couple of leftovers"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,66,public void testSmallSymbolSetWithChars() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,68,final int SEED = 33333;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,70,CharsToNameCanonicalizer symbols = CharsToNameCanonicalizer.createRoot(SEED);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,71,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,72,JsonParser p = f.createParser(JSON);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,74,JsonToken t;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,75,while ((t = p.nextToken()) != null) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,76,if (t != JsonToken.FIELD_NAME) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,77,continue;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,79,String name = p.getCurrentName();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,80,char[] ch = name.toCharArray();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,81,"symbols.findSymbol(ch, 0, ch.length, symbols.calcHash(name));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,83,p.close();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,85,"assertEquals(13, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,86,"assertEquals(13, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,87,"assertEquals(64, symbols.bucketCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,89,"// usually get 1 collision, but sometimes get lucky with 0; other times less so with 2"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,90,// (with differing shifting for hash etc)
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,91,"assertEquals(0, symbols.collisionCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java,92,"assertEquals(0, symbols.maxCollisionLength());"
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,1,package com.fasterxml.jackson.core.type;
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,3,import java.util.List;
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,5,import com.fasterxml.jackson.core.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,7,"// Not much to test, but exercise to prevent code coverage tool from showing all red for package"
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,8,public class TypeReferenceTest extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,10,public void testSimple()
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,12,TypeReference<?> ref = new TypeReference<List<String>>() { };
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,13,assertNotNull(ref);
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,14,ref.equals(null);
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,17,"@SuppressWarnings(""rawtypes"")"
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,18,public void testInvalid()
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,20,try {
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,21,Object ob = new TypeReference() { };
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,22,"fail(""Should not pass, got: ""+ob);"
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,23,} catch (IllegalArgumentException e) {
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,24,"verifyException(e, ""without actual type information"");"
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,1,package com.fasterxml.jackson.core.util;
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,3,import org.junit.Assert;
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,5,public class ByteArrayBuilderTest extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,7,public void testSimple() throws Exception
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,9,"ByteArrayBuilder b = new ByteArrayBuilder(null, 20);"
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,10,"Assert.assertArrayEquals(new byte[0], b.toByteArray());"
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,12,b.write((byte) 0);
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,13,b.append(1);
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,15,byte[] foo = new byte[98];
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,16,for (int i = 0; i < foo.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,17,foo[i] = (byte) (2 + i);
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,19,b.write(foo);
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,21,byte[] result = b.toByteArray();
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,22,"assertEquals(100, result.length);"
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,23,for (int i = 0; i < 100; ++i) {
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,24,"assertEquals(i, (int) result[i]);"
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,27,b.release();
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,28,b.close();
False,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,40,"withObjectIndenter(new DefaultIndenter().withIndent("" ""));"
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,40,".withObjectIndenter(new DefaultIndenter().withLinefeed(""\n"").withIndent("" ""));"
False,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,87,rettyPrinter pp = new DefaultPrettyPrinter()
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,87,DefaultPrettyPrinter pp = new DefaultPrettyPrinter()
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,111,// Also: let's try removing separator altogether
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,112,pp = pp.withRootSeparator((String) null)
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,113,.withArrayIndenter(null)
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,114,.withObjectIndenter(null)
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,115,.withoutSpacesInObjectEntries();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,116,sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,117,gen = JSON_F.createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,118,gen.setPrettyPrinter(pp);
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,120,gen.writeNumber(1);
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,121,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,122,gen.writeNumber(2);
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,123,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,124,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,125,"gen.writeFieldName(""a"");"
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,126,gen.writeNumber(3);
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,127,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,128,gen.close();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,129,"// no root separator, nor array, object"
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,130,"assertEquals(""1[2]{\""a\"":3}"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,9,private final JsonFactory JSON_F = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,14,"sonParser jp = new JsonFactory().createParser(""[ 1, true ]"");"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,15,ssertNull(jp.getCurrentToken());
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,16,"ssertToken(JsonToken.START_ARRAY, jp.nextToken());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,17,"ssertEquals(""["", jp.getText());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,18,"ssertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,19,"ssertEquals(1, jp.getIntValue());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,20,"ssertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,21,ssertTrue(jp.getBooleanValue());
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,22,"ssertToken(JsonToken.END_ARRAY, jp.nextToken());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,23,p.close();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,24,ssertTrue(jp.isClosed());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,16,"final String TOKEN =""foo"";"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,18,"JsonParser parser = JSON_F.createParser(""[ 1, true, null, { } ]"");"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,19,JsonParserDelegate del = new JsonParserDelegate(parser);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,21,assertNull(del.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,22,"assertToken(JsonToken.START_ARRAY, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,23,"assertEquals(""["", del.getText());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,24,"assertToken(JsonToken.VALUE_NUMBER_INT, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,25,"assertEquals(1, del.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,27,"assertToken(JsonToken.VALUE_TRUE, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,28,assertTrue(del.getBooleanValue());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,30,"assertToken(JsonToken.VALUE_NULL, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,31,assertNull(del.getCurrentValue());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,32,del.setCurrentValue(TOKEN);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,34,"assertToken(JsonToken.START_OBJECT, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,35,assertNull(del.getCurrentValue());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,37,"assertToken(JsonToken.END_OBJECT, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,38,"assertEquals(TOKEN, del.getCurrentValue());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,40,"assertToken(JsonToken.END_ARRAY, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,42,del.close();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,43,assertTrue(del.isClosed());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,44,assertTrue(parser.isClosed());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,46,parser.close();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,54,"final String TOKEN =""foo"";"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,33,sonGenerator jg = new JsonFactory().createGenerator(sw);
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,34,g.writeStartArray();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,35,g.writeNumber(13);
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,36,g.writeNull();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,37,g.writeBoolean(false);
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,38,g.writeEndArray();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,39,g.close();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,40,ssertTrue(jg.isClosed());
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,41,"ssertEquals(""[13,null,false]"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,57,JsonGenerator g0 = JSON_F.createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,58,JsonGeneratorDelegate del = new JsonGeneratorDelegate(g0);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,59,del.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,61,"assertEquals(1, del.getOutputBuffered());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,63,del.writeNumber(13);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,64,del.writeNull();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,65,del.writeBoolean(false);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,66,"del.writeString(""foo"");"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,68,"// verify that we can actually set/get ""current value"" as expected, even with delegates"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,69,assertNull(del.getCurrentValue());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,70,del.setCurrentValue(TOKEN);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,72,del.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,73,assertNull(del.getCurrentValue());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,74,del.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,75,"assertEquals(TOKEN, del.getCurrentValue());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,77,del.writeStartArray(0);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,78,del.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,80,del.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,82,del.flush();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,83,del.close();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,84,assertTrue(del.isClosed());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,85,assertTrue(g0.isClosed());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,86,"assertEquals(""[13,null,false,\""foo\"",{},[]]"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,88,g0.close();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,46,"sonParser jp = new JsonFactory().createParser(""[{\""a\"":[1,2,{\""b\"":3}],\""c\"":\""d\""},{\""e\"":false},null]"");"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,93,"JsonParser jp = JSON_F.createParser(""[{\""a\"":[1,2,{\""b\"":3}],\""c\"":\""d\""},{\""e\"":false},null]"");"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,48,"sonGenerator jg = new JsonGeneratorDelegate(new JsonFactory().createGenerator(sw), false) {"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,95,"JsonGenerator jg = new JsonGeneratorDelegate(JSON_F.createGenerator(sw), false) {"
False,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,3,mport com.fasterxml.jackson.core.util.BufferRecycler;
False,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,4,mport com.fasterxml.jackson.core.util.TextBuffer;
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,78,// [Core#182]
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,79,public void testEmpty() {
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,80,TextBuffer tb = new TextBuffer(new BufferRecycler());
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,81,tb.resetWithEmpty();
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,83,assertTrue(tb.getTextBuffer().length == 0);
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,84,tb.contentsAsString();
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,85,assertTrue(tb.getTextBuffer().length == 0);
True,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,22,"@SuppressWarnings(""deprecation"")"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,1,package perf;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,3,import java.nio.charset.Charset;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,4,import java.util.Arrays;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,7,"* Trie container/wrapper, in this case implements Enum-value lookup."
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,8,"* Sample code to possibly use for streamlined-lookup by dictionary, using"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,9,* UTF-8 bytes of {@link Enum#name()} as the key.
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,11,public class EnumByBytesLookup<E extends Enum<E>>
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,13,"private final static Charset UTF8 = Charset.forName(""UTF-8"");"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,15,private final Trie<E> _root;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,16,private final int _size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,18,"private EnumByBytesLookup(Trie<E> root, int size) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,19,_root = root;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,20,_size = size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,23,public static <EIN extends Enum<EIN>> EnumByBytesLookup<EIN> buildFor(Class<EIN> enumClass)
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,25,Trie<EIN> root = new Trie<EIN>(null);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,26,int size = 0;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,27,for (EIN en : enumClass.getEnumConstants()) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,28,byte[] key = en.name().getBytes(UTF8);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,29,"root = root.with(en, key);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,30,++size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,32,"return new EnumByBytesLookup<EIN>(root, size);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,35,public E find(byte[] rawId) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,36,return _root.find(rawId);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,39,public int size() { return _size; }
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,43,* Trie nodes
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,45,class Trie<T> {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,46,private final static byte[] NO_BYTES = new byte[0];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,48,private final static Trie<?>[] NO_NODES = new Trie<?>[0];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,51,"* For leaves, value matched by sequence"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,53,private final T _match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,55,private final byte[] _nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,56,private final Trie<T>[] nextNodes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,58,private final int nextCount;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,60,"@SuppressWarnings(""unchecked"")"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,61,Trie(T match) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,62,"this(match, NO_BYTES, (Trie<T>[]) NO_NODES);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,65,"private Trie(T match, byte[] nextBytes, Trie<T>[] nextNodes) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,66,this._match = match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,67,this._nextBytes = nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,68,this.nextNodes = nextNodes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,69,nextCount = nextBytes.length;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,72,"private Trie(Trie<T> base, T match) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,73,"// should we allow duplicate calls with same match? For now, let's not"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,74,if (base._match != null) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,75,"throw new IllegalArgumentException(""Trying to add same match multiple times"");"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,77,this._match = match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,78,_nextBytes = base._nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,79,nextNodes = base.nextNodes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,80,nextCount = base.nextCount;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,83,"private Trie(Trie<T> base, byte nextByte, Trie<T> nextNode) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,84,"// should we allow duplicate calls with same match? For now, let's not"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,85,if (base._match != null) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,86,"throw new IllegalArgumentException(""Trying to add same match multiple times"");"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,88,_match = base._match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,89,int size = base._nextBytes.length + 1;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,90,"_nextBytes = Arrays.copyOf(base._nextBytes, size);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,91,_nextBytes[size-1] = nextByte;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,92,"nextNodes = Arrays.copyOf(base.nextNodes, size);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,93,nextNodes[size-1] = nextNode;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,94,nextCount = size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,98,* Constructor used when an existing branch needs to be replaced due to addition
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,100,"private Trie(Trie<T> base, int offset, Trie<T> newNode) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,101,_match = base._match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,102,"// can keep nextBytes, as they don't change"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,103,_nextBytes = base._nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,104,"// but must create a copy of next nodes, to modify one entry"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,105,"nextNodes = Arrays.copyOf(base.nextNodes, base.nextNodes.length);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,106,nextNodes[offset] = newNode;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,107,nextCount = base.nextCount;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,111,"* ""Mutant factory"" method: constructs a modified Trie, with specified raw id"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,112,* added.
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,114,"public Trie<T> with(T match, byte[] rawId) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,115,"return with(match, rawId, 0, rawId.length);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,118,"private Trie<T> with(T match, byte[] rawId, int start, int end) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,119,if (start == end) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,120,"return new Trie<T>(this, match);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,122,// Ok: two choices; either we follow existing branch; or need to create new one
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,123,final byte b = rawId[start++];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,124,for (int i = 0; i < nextCount; ++i) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,125,if (_nextBytes[i] == b) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,126,// existing branch: good day for delegation...
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,127,Trie<T> old = nextNodes[i];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,128,"// to keep things truly immutable, copy underlying arrays, then"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,129,"return new Trie<T>(this, i, old.with(match, rawId, start, end));"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,132,"// simplest recursively, but for fun let's convert to iteration. Start with tail"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,133,Trie<T> curr = new Trie<T>(match);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,135,for (int i = end-1; i >= start; --i) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,136,"curr = new Trie<T>(this, rawId[i], curr);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,138,"return new Trie<T>(this, b, curr);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,141,public T find(byte[] id) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,142,"return find(id, 0, id.length);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,145,"public T find(byte[] id, int offset, int length) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,146,Trie<T> t = this;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,147,final int end = offset+length;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,149,for (; offset < end; ++offset) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,150,byte b = id[offset];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,151,t = t.next(b);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,152,if (t == null) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,153,"// NOTE: if using null-padding, would trim here"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,155,if (b == (byte) 0) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,156,break;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,159,return null;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,162,return t._match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,165,private Trie<T> next(int b) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,166,for (int i = 0; i < nextCount; ++i) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,167,if (_nextBytes[i] == b) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,168,return nextNodes[i];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,171,return null;

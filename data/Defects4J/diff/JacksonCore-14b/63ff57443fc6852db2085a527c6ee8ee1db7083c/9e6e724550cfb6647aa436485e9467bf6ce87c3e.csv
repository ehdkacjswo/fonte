is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,691,    Will be closed after successful write operation
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,691,*    Will not be closed after successful write operation
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,710,    Will be closed after successful write operation
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,710,*    Will not be closed after successful write operation
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,712,    or -1 to be indicate it is not known. Note that implementations
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,712,*    or -1 to be indicate it is not known.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,713,"*    If a positive length is given, {@link data} MUST provide at least"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,714,"*    that many bytes: if not, an exception will be thrown."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,715,*    Note that implementations
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,715,    other formats may
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,718,*    other formats may.
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,11,"@SuppressWarnings(""hiding"")"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,165,@Override
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,841,"ytes = _writeBinary(b64variant, data, dataLength, encodingBuffer);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,841,if (dataLength < 0) { // length unknown
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,842,"bytes = _writeBinary(b64variant, data, encodingBuffer);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,843,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,844,"int missing = _writeBinary(b64variant, data, encodingBuffer, dataLength);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,845,if (missing > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,846,"_reportError(""Too few bytes available: missing ""+missing+"" bytes (out of ""+dataLength+"")"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,848,bytes = dataLength;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1440,"hrow new JsonGenerationException(""Invalid custom escape definitions; custom escape not found for character code 0x"""
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1448,"_reportError(""Invalid custom escape definitions; custom escape not found for character code 0x"""
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1641,// write-method called when length is definitely known
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1634,"nputStream data, int dataLength, byte[] encodingBuffer)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1643,"InputStream data, byte[] readBuffer, int bytesLeft)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1637,"/ Encoding is by chunks of 3 input, 4 output chars, so:"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1638,nt safeInputEnd = inputEnd - 3;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1646,int inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1647,int inputEnd = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1648,int lastFullOffset = -3;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1654,while (bytesLeft > 2) { // main loop for full triplets
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1655,if (inputPtr > lastFullOffset) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1656,"inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1657,inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1658,if (inputEnd < 3) { // required to try to read to have at least 3 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1659,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1661,lastFullOffset = inputEnd-3;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1663,if (_outputTail > safeOutputEnd) { // need to flush
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1664,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1666,int b24 = ((int) readBuffer[inputPtr++]) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1667,b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1668,b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1669,bytesLeft -= 3;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1670,"_outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1671,if (--chunksBeforeLF <= 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1672,_outputBuffer[_outputTail++] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1673,_outputBuffer[_outputTail++] = 'n';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1674,chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1678,// And then we may have 1 or 2 leftover bytes to encode
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1679,if (bytesLeft > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1680,"inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1681,inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1682,"if (inputEnd > 0) { // yes, but do we have room for output?"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1683,if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1684,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1686,int b24 = ((int) readBuffer[inputPtr++]) << 16;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1687,int amount;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1688,if (inputPtr < inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1689,b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1690,amount = 2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1691,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1692,amount = 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1694,"_outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1695,bytesLeft -= amount;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1698,return bytesLeft;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1701,// write method when length is unknown
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1702,"protected int _writeBinary(Base64Variant b64variant,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1703,"InputStream data, byte[] readBuffer)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1704,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1706,int inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1707,int inputEnd = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1708,int lastFullOffset = -3;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1709,int bytesDone = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1711,// Let's also reserve room for possible (and quoted) LF char each round
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1712,int safeOutputEnd = _outputEnd - 6;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1713,int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1644,hile (inputPtr <= safeInputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1716,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1717,if (inputPtr > lastFullOffset) { // need to load more
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1718,"inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, readBuffer.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1719,inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1720,if (inputEnd < 3) { // required to try to read to have at least 3 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1721,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1723,lastFullOffset = inputEnd-3;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1649,nt b24 = ((int) input[inputPtr++]) << 8;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1650,24 |= ((int) input[inputPtr++]) & 0xFF;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1651,24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1729,int b24 = ((int) readBuffer[inputPtr++]) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1730,b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1731,b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1732,bytesDone += 3;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1654,/ note: must quote in JSON value
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1662,"nt inputLeft = inputEnd - inputPtr; // 0, 1 or 2"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1663,"f (inputLeft > 0) { // yes, but do we have room for output?"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1742,"if (inputPtr < inputEnd) { // yes, but do we have room for output?"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1667,nt b24 = ((int) input[inputPtr++]) << 16;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1668,f (inputLeft == 2) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1669,24 |= (((int) input[inputPtr++]) & 0xFF) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1746,int b24 = ((int) readBuffer[inputPtr++]) << 16;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1747,int amount = 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1748,if (inputPtr < inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1749,b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1750,amount = 2;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1671,"outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1752,bytesDone += amount;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1753,"_outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1755,return bytesDone;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1758,"private int _readMore(InputStream in,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1759,"byte[] readBuffer, int inputPtr, int inputEnd,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1760,int maxRead) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1762,// anything to shift to front?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1763,int i = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1764,while (inputPtr < inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1765,readBuffer[i++]  = readBuffer[inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1767,inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1768,inputEnd = i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1769,"maxRead = Math.min(maxRead, readBuffer.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1771,do {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1772,"int count = in.read(readBuffer, inputEnd, maxRead - inputEnd);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1773,if (count < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1774,return inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1776,inputEnd += count;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1777,} while (inputEnd < 3);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1778,return inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,634,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,635,"public int writeBinary(Base64Variant b64variant,"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,636,"InputStream data, int dataLength)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,637,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,639,"_verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,640,// Starting quotes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,641,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,642,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,644,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,645,byte[] encodingBuffer = _ioContext.allocBase64Buffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,646,int bytes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,647,try {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,648,if (dataLength < 0) { // length unknown
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,649,"bytes = _writeBinary(b64variant, data, encodingBuffer);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,650,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,651,"int missing = _writeBinary(b64variant, data, encodingBuffer, dataLength);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,652,if (missing > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,653,"_reportError(""Too few bytes available: missing ""+missing+"" bytes (out of ""+dataLength+"")"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,655,bytes = dataLength;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,657,} finally {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,658,_ioContext.releaseBase64Buffer(encodingBuffer);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,660,// and closing quotes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,661,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,662,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,664,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,665,return bytes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1554,// write-method called when length is definitely known
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1555,"protected int _writeBinary(Base64Variant b64variant,"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1556,"InputStream data, byte[] readBuffer, int bytesLeft)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1557,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1559,int inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1560,int inputEnd = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1561,int lastFullOffset = -3;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1563,// Let's also reserve room for possible (and quoted) lf char each round
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1564,int safeOutputEnd = _outputEnd - 6;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1565,int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1567,while (bytesLeft > 2) { // main loop for full triplets
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1568,if (inputPtr > lastFullOffset) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1569,"inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1570,inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1571,if (inputEnd < 3) { // required to try to read to have at least 3 bytes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1572,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1574,lastFullOffset = inputEnd-3;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1576,if (_outputTail > safeOutputEnd) { // need to flush
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1577,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1579,int b24 = ((int) readBuffer[inputPtr++]) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1580,b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1581,b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1582,bytesLeft -= 3;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1583,"_outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1584,if (--chunksBeforeLF <= 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1585,_outputBuffer[_outputTail++] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1586,_outputBuffer[_outputTail++] = 'n';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1587,chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1591,// And then we may have 1 or 2 leftover bytes to encode
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1592,if (bytesLeft > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1593,"inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1594,inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1595,"if (inputEnd > 0) { // yes, but do we have room for output?"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1596,if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1597,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1599,int b24 = ((int) readBuffer[inputPtr++]) << 16;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1600,int amount;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1601,if (inputPtr < inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1602,b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1603,amount = 2;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1604,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1605,amount = 1;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1607,"_outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1608,bytesLeft -= amount;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1611,return bytesLeft;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1614,// write method when length is unknown
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1615,"protected int _writeBinary(Base64Variant b64variant,"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1616,"InputStream data, byte[] readBuffer)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1617,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1619,int inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1620,int inputEnd = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1621,int lastFullOffset = -3;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1622,int bytesDone = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1624,// Let's also reserve room for possible (and quoted) LF char each round
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1625,int safeOutputEnd = _outputEnd - 6;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1626,int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1628,"// Ok, first we loop through all full triplets of data:"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1629,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1630,if (inputPtr > lastFullOffset) { // need to load more
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1631,"inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, readBuffer.length);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1632,inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1633,if (inputEnd < 3) { // required to try to read to have at least 3 bytes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1634,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1636,lastFullOffset = inputEnd-3;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1638,if (_outputTail > safeOutputEnd) { // need to flush
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1639,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1641,"// First, mash 3 bytes into lsb of 32-bit int"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1642,int b24 = ((int) readBuffer[inputPtr++]) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1643,b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1644,b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1645,bytesDone += 3;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1646,"_outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1647,if (--chunksBeforeLF <= 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1648,_outputBuffer[_outputTail++] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1649,_outputBuffer[_outputTail++] = 'n';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1650,chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1654,// And then we may have 1 or 2 leftover bytes to encode
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1655,"if (inputPtr < inputEnd) { // yes, but do we have room for output?"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1656,if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1657,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1659,int b24 = ((int) readBuffer[inputPtr++]) << 16;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1660,int amount = 1;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1661,if (inputPtr < inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1662,b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1663,amount = 2;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1665,bytesDone += amount;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1666,"_outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1668,return bytesDone;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1671,"private int _readMore(InputStream in,"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1672,"byte[] readBuffer, int inputPtr, int inputEnd,"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1673,int maxRead) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1675,// anything to shift to front?
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1676,int i = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1677,while (inputPtr < inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1678,readBuffer[i++]  = readBuffer[inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1680,inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1681,inputEnd = i;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1682,"maxRead = Math.min(maxRead, readBuffer.length);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1684,do {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1685,"int count = in.read(readBuffer, inputEnd, maxRead - inputEnd);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1686,if (count < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1687,return inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1689,inputEnd += count;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1690,} while (inputEnd < 3);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1691,return inputEnd;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,111,"ublic int writeBinary(Base64Variant b64variant, InputStream data)"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,111,"public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength)"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,113,"eturn delegate.writeBinary(b64variant, data);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,113,"return delegate.writeBinary(b64variant, data, dataLength);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,7,public class TestBase64Generation
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,8,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,10,static class ThrottledInputStream extends FilterInputStream
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,12,protected final int _maxBytes;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,14,"public ThrottledInputStream(byte[] data, int maxBytes)"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,16,"this(new ByteArrayInputStream(data), maxBytes);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,19,"public ThrottledInputStream(InputStream in, int maxBytes)"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,21,super(in);
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,22,_maxBytes = maxBytes;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,25,@Override
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,26,public int read(byte[] buf) throws IOException {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,27,"return read(buf, 0, buf.length);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,30,@Override
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,31,"public int read(byte[] buf, int offset, int len) throws IOException {"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,32,"return in.read(buf, offset, Math.min(_maxBytes, len));"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,39,/* Test methods
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,43,public void testStreamingWrites() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,45,final JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,46,"//        _testStreamingWrites(f, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,47,"_testStreamingWrites(f, false);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,52,/* Helper methods
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,56,private final static Base64Variant[] VARIANTS = {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,57,"Base64Variants.MIME,"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,58,"Base64Variants.MIME_NO_LINEFEEDS,"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,59,"Base64Variants.MODIFIED_FOR_URL,"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,60,Base64Variants.PEM
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,63,"private final static String TEXT = ""Some content so that we can test encoding of base64 data; must"""
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,64,"+"" be long enough include a line wrap or two..."";"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,65,private final static String TEXT4 = TEXT + TEXT + TEXT + TEXT;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,67,"private void _testStreamingWrites(JsonFactory jf, boolean useBytes) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,69,"final byte[] INPUT = TEXT4.getBytes(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,70,for (Base64Variant variant : VARIANTS) {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,71,"final String EXP_OUTPUT = ""["" + quote(variant.encode(INPUT))+""]"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,72,"for (boolean passLength : new boolean[] { true, false }) {"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,73,"for (int chunkSize : new int[] { 1, 2, 3, 4, 7, 11, 29, 5000 }) {"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,74,"//System.err.println(""""+variant+"", length ""+passLength+"", chunk ""+chunkSize);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,76,JsonGenerator jgen;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,78,final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,79,if (useBytes) {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,80,jgen = jf.createJsonGenerator(bytes);
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,81,} else {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,82,"jgen = jf.createJsonGenerator(new OutputStreamWriter(bytes, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,84,jgen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,85,int length = passLength ? INPUT.length : -1;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,86,"InputStream data = new ThrottledInputStream(INPUT, chunkSize);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,87,"jgen.writeBinary(variant, data, length);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,88,jgen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,89,jgen.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,90,"String JSON = bytes.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java,91,"assertEquals(EXP_OUTPUT, JSON);"

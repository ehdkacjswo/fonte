is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,1,package com.fasterxml.jackson.core;
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,3,import com.fasterxml.jackson.core.json.*;
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,4,import com.fasterxml.jackson.core.io.IOContext;
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,5,import com.fasterxml.jackson.core.util.BufferRecycler;
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,8,* Tests to verify [JACKSON-278]
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,10,public class TestVersions extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,13,"* 18-Nov-2010, tatu: Not a good to do this, but has to do, for now..."
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,15,private final static int MAJOR_VERSION = 2;
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,16,private final static int MINOR_VERSION = 0;
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,18,public void testCoreVersions()
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,20,"/* 01-Sep-2010, tatu: Somewhat of a dirty hack; let's only run when specific system"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,21,*    property is set; and set that flag from Ant unit test. Why? To prevent running
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,22,"*    from Eclipse, where this would just fail"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,24,if (runsFromAnt()) {
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,25,"System.out.println(""Note: running version tests (FROM_ANT=true)"");"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,26,"assertVersion(new JsonFactory().version(), MAJOR_VERSION, MINOR_VERSION);"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,27,"assertVersion(new ReaderBasedJsonParser(getIOContext(), 0, null, null, null).version(),"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,28,"MAJOR_VERSION, MINOR_VERSION);"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,29,"assertVersion(new WriterBasedJsonGenerator(getIOContext(), 0, null, null).version(),"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,30,"MAJOR_VERSION, MINOR_VERSION);"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,31,} else {
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,32,"System.out.println(""Skipping version test (FROM_ANT=false)"");"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,38,/* Helper methods
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,42,"private void assertVersion(Version v, int major, int minor)"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,44,"assertFalse(""Should find version information (got ""+v+"")"", v.isUknownVersion());"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,45,"assertEquals(major, v.getMajorVersion());"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,46,"assertEquals(minor, v.getMinorVersion());"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,47,"// 07-Jan-2011, tatus: Check patch level initially, comment out for maint versions"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,49,"//assertEquals(0, v.getPatchLevel());"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,52,private IOContext getIOContext() {
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,53,"return new IOContext(new BufferRecycler(), null, false);"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,1,package com.fasterxml.jackson.core.format;
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,6,import com.fasterxml.jackson.core.format.DataFormatDetector;
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,7,import com.fasterxml.jackson.core.format.DataFormatMatcher;
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,8,import com.fasterxml.jackson.core.format.MatchStrength;
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,10,public class TestJsonFormatDetection extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,12,public void testSimpleValidArray() throws Exception
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,14,JsonFactory jsonF = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,15,DataFormatDetector detector = new DataFormatDetector(jsonF);
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,16,"final String ARRAY_JSON = ""[ 1, 2 ]"";"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,17,"DataFormatMatcher matcher = detector.findFormat(new ByteArrayInputStream(ARRAY_JSON.getBytes(""UTF-8"")));"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,18,// should have match
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,19,assertTrue(matcher.hasMatch());
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,20,"assertEquals(""JSON"", matcher.getMatchedFormatName());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,21,"assertSame(jsonF, matcher.getMatch());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,22,"// no ""certain"" match with JSON, but solid:"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,23,"assertEquals(MatchStrength.SOLID_MATCH, matcher.getMatchStrength());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,24,// and thus:
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,25,JsonParser jp = matcher.createParserWithMatch();
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,26,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,27,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,28,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,29,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,30,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,31,jp.close();
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,34,public void testSimpleValidObject() throws Exception
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,36,JsonFactory jsonF = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,37,DataFormatDetector detector = new DataFormatDetector(jsonF);
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,38,"final String JSON = ""{  \""field\"" : true }"";"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,39,"DataFormatMatcher matcher = detector.findFormat(new ByteArrayInputStream(JSON.getBytes(""UTF-8"")));"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,40,// should have match
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,41,assertTrue(matcher.hasMatch());
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,42,"assertEquals(""JSON"", matcher.getMatchedFormatName());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,43,"assertSame(jsonF, matcher.getMatch());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,44,"// no ""certain"" match with JSON, but solid:"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,45,"assertEquals(MatchStrength.SOLID_MATCH, matcher.getMatchStrength());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,46,// and thus:
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,47,JsonParser jp = matcher.createParserWithMatch();
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,48,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,49,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,50,"assertEquals(""field"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,51,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,52,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,53,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,54,jp.close();
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,58,"* While JSON String is not a strong match alone, it should"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,59,* be detected unless some better match is available
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,61,public void testSimpleValidString() throws Exception
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,63,JsonFactory jsonF = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,64,DataFormatDetector detector = new DataFormatDetector(jsonF);
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,65,"final String JSON = ""\""JSON!\"""";"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,66,"DataFormatMatcher matcher = detector.findFormat(new ByteArrayInputStream(JSON.getBytes(""UTF-8"")));"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,67,// should have match
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,68,assertTrue(matcher.hasMatch());
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,69,"assertEquals(""JSON"", matcher.getMatchedFormatName());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,70,"assertSame(jsonF, matcher.getMatch());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,71,"assertEquals(MatchStrength.WEAK_MATCH, matcher.getMatchStrength());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,72,JsonParser jp = matcher.createParserWithMatch();
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,73,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,74,"assertEquals(""JSON!"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,75,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,76,jp.close();
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,79,public void testSimpleInvalid() throws Exception
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,81,DataFormatDetector detector = new DataFormatDetector(new JsonFactory());
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,82,"final String NON_JSON = ""<root />"";"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,83,"DataFormatMatcher matcher = detector.findFormat(new ByteArrayInputStream(NON_JSON.getBytes(""UTF-8"")));"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,84,// should not have match
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,85,assertFalse(matcher.hasMatch());
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,86,// and thus:
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,87,"assertEquals(MatchStrength.INCONCLUSIVE, matcher.getMatchStrength());"
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,88,// also:
True,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java,89,assertNull(matcher.createParserWithMatch());
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,1,package com.fasterxml.jackson.core.io;
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,3,import com.fasterxml.jackson.core.io.IOContext;
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,4,import com.fasterxml.jackson.core.util.BufferRecycler;
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,6,public class TestIOContext
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,7,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,9,public void testAllocations() throws Exception
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,11,"IOContext ctxt = new IOContext(new BufferRecycler(), ""N/A"", true);"
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,13,/* I/O Read buffer */
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,15,// First succeeds:
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,16,assertNotNull(ctxt.allocReadIOBuffer());
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,17,// second fails
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,18,try {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,19,ctxt.allocReadIOBuffer();
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,20,} catch (IllegalStateException e) {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,21,"verifyException(e, ""second time"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,23,// Also: can't succeed with different buffer
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,24,try {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,25,ctxt.releaseReadIOBuffer(new byte[1]);
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,26,} catch (IllegalArgumentException e) {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,27,"verifyException(e, ""not owned"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,29,// but call with null is a NOP for convenience
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,30,ctxt.releaseReadIOBuffer(null);
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,32,/* I/O Write buffer */
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,34,assertNotNull(ctxt.allocWriteEncodingBuffer());
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,35,try {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,36,ctxt.allocWriteEncodingBuffer();
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,37,} catch (IllegalStateException e) {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,38,"verifyException(e, ""second time"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,40,try {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,41,ctxt.releaseWriteEncodingBuffer(new byte[1]);
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,42,} catch (IllegalArgumentException e) {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,43,"verifyException(e, ""not owned"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,45,ctxt.releaseWriteEncodingBuffer(null);
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,47,/* Token (read) buffer */
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,49,assertNotNull(ctxt.allocTokenBuffer());
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,50,try {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,51,ctxt.allocTokenBuffer();
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,52,} catch (IllegalStateException e) {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,53,"verifyException(e, ""second time"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,55,try {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,56,ctxt.releaseTokenBuffer(new char[1]);
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,57,} catch (IllegalArgumentException e) {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,58,"verifyException(e, ""not owned"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,60,ctxt.releaseTokenBuffer(null);
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,62,/* Concat (write?) buffer */
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,64,assertNotNull(ctxt.allocConcatBuffer());
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,65,try {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,66,ctxt.allocConcatBuffer();
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,67,} catch (IllegalStateException e) {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,68,"verifyException(e, ""second time"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,70,try {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,71,ctxt.releaseConcatBuffer(new char[1]);
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,72,} catch (IllegalArgumentException e) {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,73,"verifyException(e, ""not owned"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,75,ctxt.releaseConcatBuffer(null);
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,77,/* NameCopy (write?) buffer */
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,79,assertNotNull(ctxt.allocNameCopyBuffer(100));
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,80,try {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,81,ctxt.allocNameCopyBuffer(100);
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,82,} catch (IllegalStateException e) {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,83,"verifyException(e, ""second time"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,85,try {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,86,ctxt.releaseNameCopyBuffer(new char[1]);
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,87,} catch (IllegalArgumentException e) {
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,88,"verifyException(e, ""not owned"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,90,ctxt.releaseNameCopyBuffer(null);
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,1,package com.fasterxml.jackson.core.io;
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,3,import java.io.StringWriter;
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,4,import java.util.Random;
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,6,import static org.junit.Assert.*;
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,8,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,9,import com.fasterxml.jackson.core.io.JsonStringEncoder;
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,11,public class TestJsonStringEncoder
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,12,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,14,public void testQuoteAsString() throws Exception
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,16,JsonStringEncoder encoder = new JsonStringEncoder();
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,17,"char[] result = encoder.quoteAsString(""foobar"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,18,"assertArrayEquals(""foobar"".toCharArray(), result);"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,19,"result = encoder.quoteAsString(""\""x\"""");"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,20,"assertArrayEquals(""\\\""x\\\"""".toCharArray(), result);"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,23,public void testQuoteAsUTF8() throws Exception
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,25,"// In this case, let's actually use existing JsonGenerator to produce expected values"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,26,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,27,JsonStringEncoder encoder = new JsonStringEncoder();
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,28,int[] lengths = new int[] {
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,29,"5, 19, 200, 7000, 21000, 37000"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,31,for (int length : lengths) {
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,32,String str = generateRandom(length);
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,33,StringWriter sw = new StringWriter(length*2);
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,34,JsonGenerator jgen = f.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,35,jgen.writeString(str);
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,36,jgen.close();
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,37,String encoded = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,38,"// ok, except need to remove surrounding quotes"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,39,"encoded = encoded.substring(1, encoded.length() - 1);"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,40,"byte[] expected = encoded.getBytes(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,41,byte[] actual = encoder.quoteAsUTF8(str);
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,42,"assertArrayEquals(expected, actual);"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,46,public void testEncodeAsUTF8() throws Exception
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,48,JsonStringEncoder encoder = new JsonStringEncoder();
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,49,String[] strings = new String[] {
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,50,"""a"", ""foobar"", ""p\u00f6ll\u00f6"", ""\""foo\"""","
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,51,"generateRandom(200),"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,52,"generateRandom(5000),"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,53,generateRandom(39000)
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,55,for (String str : strings) {
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,56,"assertArrayEquals(str.getBytes(""UTF-8""), encoder.encodeAsUTF8(str));"
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,62,/* Helper methods
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,67,private String generateRandom(int length)
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,69,StringBuilder sb = new StringBuilder(length);
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,70,Random rnd = new Random(length);
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,71,for (int i = 0; i < length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,72,// let's limit it not to include surrogate pairs:
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,73,char ch = (char) rnd.nextInt(0xCFFF);
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,74,sb.append(ch);
True,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java,76,return sb.toString();
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,1,package com.fasterxml.jackson.core.io;
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,5,import com.fasterxml.jackson.core.JsonEncoding;
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,6,import com.fasterxml.jackson.core.io.IOContext;
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,7,import com.fasterxml.jackson.core.io.MergedStream;
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,8,import com.fasterxml.jackson.core.util.BufferRecycler;
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,10,public class TestMergedStream
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,11,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,13,public void testSimple() throws Exception
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,15,BufferRecycler rec = new BufferRecycler();
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,16,"IOContext ctxt = new IOContext(rec, null, false);"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,17,// bit complicated; must use recyclable buffer...
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,18,byte[] first = ctxt.allocReadIOBuffer();
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,19,"System.arraycopy(""ABCDE"".getBytes(""UTF-8""), 0, first, 99, 5);"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,20,"byte[] second = ""FGHIJ"".getBytes(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,22,assertNull(ctxt.getSourceReference());
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,23,assertFalse(ctxt.isResourceManaged());
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,24,ctxt.setEncoding(JsonEncoding.UTF8);
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,25,"MergedStream ms = new MergedStream(ctxt, new ByteArrayInputStream(second),"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,26,"first, 99, 99+5);"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,27,"// Ok, first, should have 5 bytes from first buffer:"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,28,"assertEquals(5, ms.available());"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,29,// not supported when there's buffered stuff...
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,30,assertFalse(ms.markSupported());
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,31,"// so this won't work, but shouldn't throw exception"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,32,ms.mark(1);
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,33,"assertEquals((byte) 'A', ms.read());"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,34,"assertEquals(3, ms.skip(3));"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,35,byte[] buffer = new byte[5];
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,36,"/* Ok, now, code is allowed to return anywhere between 1 and 3,"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,37,* but we now it will return 1...
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,39,"assertEquals(1, ms.read(buffer, 1, 3));"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,40,"assertEquals((byte) 'E', buffer[1]);"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,41,// So let's read bit more
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,42,"assertEquals(3, ms.read(buffer, 0, 3));"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,43,"assertEquals((byte) 'F', buffer[0]);"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,44,"assertEquals((byte) 'G', buffer[1]);"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,45,"assertEquals((byte) 'H', buffer[2]);"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,46,"assertEquals(2, ms.available());"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,47,// And then skip the reset
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,48,"assertEquals(2, ms.skip(200));"
True,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java,50,ms.close();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,1,package com.fasterxml.jackson.core.io;
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,5,import com.fasterxml.jackson.core.io.IOContext;
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,6,import com.fasterxml.jackson.core.io.UTF8Writer;
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,7,import com.fasterxml.jackson.core.util.BufferRecycler;
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,9,public class TestUTF8Writer
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,10,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,12,public void testSimple() throws Exception
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,14,BufferRecycler rec = new BufferRecycler();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,15,"IOContext ctxt = new IOContext(rec, null, false);"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,16,ByteArrayOutputStream out = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,17,"UTF8Writer w = new UTF8Writer(ctxt, out);"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,19,"String str = ""AB\u00A0\u1AE9\uFFFC"";"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,20,char[] ch = str.toCharArray();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,22,"// Let's write 3 times, using different methods"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,23,w.write(str);
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,25,w.append(ch[0]);
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,26,w.write(ch[1]);
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,27,"w.write(ch, 2, 3);"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,29,"w.write(str, 0, str.length());"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,30,w.close();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,32,// and thus should have 3 times contents
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,33,byte[] data = out.toByteArray();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,34,"assertEquals(3*10, data.length);"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,35,"String act = out.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,36,"assertEquals(15, act.length());"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,38,"assertEquals(3 * str.length(), act.length());"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,39,"assertEquals(str+str+str, act);"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,42,public void testFlushAfterClose() throws Exception
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,44,BufferRecycler rec = new BufferRecycler();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,45,"IOContext ctxt = new IOContext(rec, null, false);"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,46,ByteArrayOutputStream out = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,47,"UTF8Writer w = new UTF8Writer(ctxt, out);"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,49,w.write('X');
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,51,w.close();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,52,"assertEquals(1, out.size());"
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,54,// and this ought to be fine...
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,55,w.flush();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,56,// as well as some more...
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,57,w.close();
True,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,src/test/java/com/fasterxml/jackson/core/io/TestUTF8Writer.java,58,w.flush();
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,3,import org.junit.Assert;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,7,public class TestBase64Codec
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,8,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,10,public void testProps()
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,12,Base64Variant std = Base64Variants.MIME;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,13,// let's verify basic props of std cocec
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,14,"assertEquals(""MIME"", std.getName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,15,"assertEquals(""MIME"", std.toString());"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,16,assertTrue(std.usesPadding());
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,17,assertFalse(std.usesPaddingChar('X'));
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,18,"assertEquals('=', std.getPaddingChar());"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,19,assertTrue(std.usesPaddingChar('='));
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,20,"assertEquals((byte) '=', std.getPaddingByte());"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,21,"assertEquals(76, std.getMaxLineLength());"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,24,public void testCharEncoding() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,26,Base64Variant std = Base64Variants.MIME;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,27,"assertEquals(Base64Variant.BASE64_VALUE_INVALID, std.decodeBase64Char('?'));"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,28,"assertEquals(Base64Variant.BASE64_VALUE_INVALID, std.decodeBase64Char((int) '?'));"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,29,"assertEquals(Base64Variant.BASE64_VALUE_INVALID, std.decodeBase64Char((byte) '?'));"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,31,"assertEquals(0, std.decodeBase64Char('A'));"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,32,"assertEquals(1, std.decodeBase64Char((int) 'B'));"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,33,"assertEquals(2, std.decodeBase64Char((byte)'C'));"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,35,"assertEquals('/', std.encodeBase64BitsAsChar(63));"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,36,"assertEquals((byte) 'b', std.encodeBase64BitsAsByte(27));"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,38,"String EXP_STR = ""HwdJ"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,39,int TRIPLET = 0x1F0749;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,40,StringBuilder sb = new StringBuilder();
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,41,"std.encodeBase64Chunk(sb, TRIPLET);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,42,"assertEquals(EXP_STR, sb.toString());"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,44,"byte[] exp = EXP_STR.getBytes(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,45,byte[] act = new byte[exp.length];
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,46,"std.encodeBase64Chunk(TRIPLET, act, 0);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,47,"Assert.assertArrayEquals(exp, act);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,50,public void testErrors() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,52,try {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,53,"new Base64Variant(""foobar"", ""xyz"", false, '!', 24);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,54,} catch (IllegalArgumentException iae) {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java,55,"verifyException(iae, ""length must be exactly"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,3,import static org.junit.Assert.assertArrayEquals;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,5,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,7,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,9,public class TestBase64Parsing
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,10,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,12,public void testBase64UsingInputStream() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,14,_testBase64Text(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,17,public void testBase64UsingReader() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,19,_testBase64Text(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,24,/* Test helper methods
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,28,// Test for [JACKSON-631]
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,29,public void _testBase64Text(boolean useBytes) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,31,"// let's actually iterate over sets of encoding modes, lengths"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,33,"final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 };"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,34,final Base64Variant[] VARIANTS = {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,35,"Base64Variants.MIME,"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,36,"Base64Variants.MIME_NO_LINEFEEDS,"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,37,"Base64Variants.MODIFIED_FOR_URL,"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,38,Base64Variants.PEM
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,41,JsonFactory jsonFactory = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,42,final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,43,StringWriter chars = null;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,44,for (int len : LENS) {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,45,byte[] input = new byte[len];
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,46,for (int i = 0; i < input.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,47,input[i] = (byte) i;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,49,for (Base64Variant variant : VARIANTS) {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,50,JsonGenerator jgen;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,51,if (useBytes) {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,52,bytes.reset();
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,53,"jgen = jsonFactory.createJsonGenerator(bytes, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,54,} else {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,55,chars = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,56,jgen = jsonFactory.createJsonGenerator(chars);
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,58,"jgen.writeBinary(variant, input, 0, input.length);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,59,jgen.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,60,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,61,if (useBytes) {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,62,jp = jsonFactory.createJsonParser(bytes.toByteArray());
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,63,} else {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,64,jp = jsonFactory.createJsonParser(chars.toString());
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,66,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,67,byte[] data = null;
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,68,try {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,69,data = jp.getBinaryValue(variant);
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,70,} catch (Exception e) {
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,71,"throw new IOException(""Failed (variant ""+variant+"", data length ""+len+""): ""+e.getMessage(), e);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,73,assertNotNull(data);
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,74,"assertArrayEquals(data, input);"
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,75,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java,76,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,6,import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,7,import com.fasterxml.jackson.core.sym.Name;
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,10,* Unit test(s) to verify that handling of (byte-based) symbol tables
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,11,* is working. Created to verify fix to [JACKSON-5] (although not very
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,12,* good at catching it...).
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,14,public class TestByteBasedSymbols
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,15,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,17,final static String[] FIELD_NAMES = new String[] {
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,18,"""a"", ""b"", ""c"", ""x"", ""y"", ""b13"", ""abcdefg"", ""a123"","
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,19,"""a0"", ""b0"", ""c0"", ""d0"", ""e0"", ""f0"", ""g0"", ""h0"","
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,20,"""x2"", ""aa"", ""ba"", ""ab"", ""b31"", ""___x"", ""aX"", ""xxx"","
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,21,"""a2"", ""b2"", ""c2"", ""d2"", ""e2"", ""f2"", ""g2"", ""h2"","
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,22,"""a3"", ""b3"", ""c3"", ""d3"", ""e3"", ""f3"", ""g3"", ""h3"","
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,23,"""a1"", ""b1"", ""c1"", ""d1"", ""e1"", ""f1"", ""g1"", ""h1"","
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,27,"* This unit test checks that [JACKSON-5] is fixed; if not, a"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,28,* symbol table corruption should result in odd problems.
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,30,public void testSharedSymbols()
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,31,throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,33,// MUST share a single json factory
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,34,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,36,/* First things first: parse a dummy doc to populate
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,37,* shared symbol table with some stuff
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,39,"String DOC0 = ""{ \""a\"" : 1, \""x\"" : [ ] }"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,40,"JsonParser jp0 = createParser(jf, DOC0);"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,42,"/* Important: don't close, don't traverse past end."
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,43,* This is needed to create partial still-in-use symbol
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,44,* table...
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,46,while (jp0.nextToken() != JsonToken.START_ARRAY) { }
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,48,"String doc1 = createDoc(FIELD_NAMES, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,49,"String doc2 = createDoc(FIELD_NAMES, false);"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,51,// Let's run it twice... shouldn't matter
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,52,for (int x = 0; x < 2; ++x) {
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,53,"JsonParser jp1 = createParser(jf, doc1);"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,54,"JsonParser jp2 = createParser(jf, doc2);"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,56,"assertToken(JsonToken.START_OBJECT, jp1.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,57,"assertToken(JsonToken.START_OBJECT, jp2.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,59,int len = FIELD_NAMES.length;
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,60,for (int i = 0; i < len; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,61,"assertToken(JsonToken.FIELD_NAME, jp1.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,62,"assertToken(JsonToken.FIELD_NAME, jp2.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,63,"assertEquals(FIELD_NAMES[i], jp1.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,64,"assertEquals(FIELD_NAMES[len-(i+1)], jp2.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,65,"assertToken(JsonToken.VALUE_NUMBER_INT, jp1.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,66,"assertToken(JsonToken.VALUE_NUMBER_INT, jp2.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,67,"assertEquals(i, jp1.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,68,"assertEquals(i, jp2.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,71,"assertToken(JsonToken.END_OBJECT, jp1.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,72,"assertToken(JsonToken.END_OBJECT, jp2.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,74,jp1.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,75,jp2.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,79,public void testAuxMethods()
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,80,throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,82,"final int A_BYTES = 0x41414141; // ""AAAA"""
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,83,"final int B_BYTES = 0x42424242; // ""BBBB"""
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,85,BytesToNameCanonicalizer nc = BytesToNameCanonicalizer.createRoot();
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,86,assertNull(nc.findName(A_BYTES));
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,87,"assertNull(nc.findName(A_BYTES, B_BYTES));"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,89,"nc.addName(""AAAA"", new int[] { A_BYTES }, 1);"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,90,Name n1 = nc.findName(A_BYTES);
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,91,assertNotNull(n1);
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,92,"assertEquals(""AAAA"", n1.getName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,93,"nc.addName(""AAAABBBB"", new int[] { A_BYTES, B_BYTES }, 2);"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,94,"Name n2 = nc.findName(A_BYTES, B_BYTES);"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,95,"assertEquals(""AAAABBBB"", n2.getName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,96,assertNotNull(n2);
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,98,/* and let's then just exercise this method so it gets covered;
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,99,* it's only used for debugging.
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,101,assertNotNull(nc.toString());
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,106,// Helper methods
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,110,"protected JsonParser createParser(JsonFactory jf, String input)"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,111,"throws IOException, JsonParseException"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,113,"byte[] data = input.getBytes(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,114,InputStream is = new ByteArrayInputStream(data);
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,115,return jf.createJsonParser(is);
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,118,"private String createDoc(String[] fieldNames, boolean add)"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,120,StringBuilder sb = new StringBuilder();
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,121,"sb.append(""{ "");"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,123,int len = fieldNames.length;
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,124,for (int i = 0; i < len; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,125,if (i > 0) {
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,126,"sb.append("", "");"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,128,"sb.append('""');"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,129,sb.append(add ? fieldNames[i] : fieldNames[len - (i+1)]);
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,130,"sb.append(""\"" : "");"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,131,sb.append(i);
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,133,"sb.append("" }"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestByteBasedSymbols.java,134,return sb.toString();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,6,import com.fasterxml.jackson.core.io.CharacterEscapes;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,7,import com.fasterxml.jackson.core.io.SerializedString;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,9,public class TestCustomEscaping  extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,11,final static int TWO_BYTE_ESCAPED = 0x111;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,12,final static int THREE_BYTE_ESCAPED = 0x1111;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,14,"final static SerializedString TWO_BYTE_ESCAPED_STRING = new SerializedString(""&111;"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,15,"final static SerializedString THREE_BYTE_ESCAPED_STRING = new SerializedString(""&1111;"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,19,/* Helper types
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,24,* Trivial simple custom escape definition set.
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,26,static class MyEscapes extends CharacterEscapes
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,29,private final int[] _asciiEscapes;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,31,public MyEscapes() {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,32,_asciiEscapes = standardAsciiEscapesForJSON();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,33,"_asciiEscapes['a'] = 'A'; // to basically give us ""\A"""
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,34,"_asciiEscapes['b'] = CharacterEscapes.ESCAPE_STANDARD; // too force ""\u0062"""
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,35,_asciiEscapes['d'] = CharacterEscapes.ESCAPE_CUSTOM;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,38,@Override
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,39,public int[] getEscapeCodesForAscii() {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,40,return _asciiEscapes;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,43,@Override
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,44,public SerializableString getEscapeSequence(int ch)
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,46,if (ch == 'd') {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,47,"return new SerializedString(""[D]"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,49,if (ch == TWO_BYTE_ESCAPED) {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,50,return TWO_BYTE_ESCAPED_STRING;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,52,if (ch == THREE_BYTE_ESCAPED) {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,53,return THREE_BYTE_ESCAPED_STRING;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,55,return null;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,61,/* Unit tests
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,66,* Test to ensure that it is possible to force escaping
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,67,* of non-ASCII characters.
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,68,* Related to [JACKSON-102]
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,70,public void testAboveAsciiEscapeWithReader() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,72,_testEscapeAboveAscii(false); // reader
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,75,public void testAboveAsciiEscapeWithUTF8Stream() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,77,_testEscapeAboveAscii(true); // stream (utf-8)
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,80,// // // Tests for [JACKSON-106]
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,82,public void testEscapeCustomWithReader() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,84,_testEscapeCustom(false); // reader
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,87,public void testEscapeCustomWithUTF8Stream() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,89,_testEscapeCustom(true); // stream (utf-8)
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,94,/* Secondary test methods
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,98,private void _testEscapeAboveAscii(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,100,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,101,"final String VALUE = ""chars: [\u00A0]/[\u1234]"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,102,"final String KEY = ""fun:\u0088:\u3456"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,103,ByteArrayOutputStream bytes = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,104,JsonGenerator jgen;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,106,// First: output normally; should not add escaping
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,107,if (useStream) {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,108,"jgen = f.createJsonGenerator(bytes, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,109,} else {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,110,"jgen = f.createJsonGenerator(new OutputStreamWriter(bytes, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,112,jgen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,113,jgen.writeString(VALUE);
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,114,jgen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,115,jgen.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,116,"String json = bytes.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,118,"assertEquals(""[""+quote(VALUE)+""]"", json);"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,120,"// And then with forced ASCII; first, values"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,122,bytes = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,123,if (useStream) {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,124,"jgen = f.createJsonGenerator(bytes, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,125,} else {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,126,"jgen = f.createJsonGenerator(new OutputStreamWriter(bytes, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,128,jgen.enable(JsonGenerator.Feature.ESCAPE_NON_ASCII);
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,129,jgen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,130,jgen.writeString(VALUE);
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,131,jgen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,132,jgen.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,133,"json = bytes.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,134,"assertEquals(""[""+quote(""chars: [\\u00A0]/[\\u1234]"")+""]"", json);"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,136,// and then keys
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,137,bytes = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,138,if (useStream) {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,139,"jgen = f.createJsonGenerator(bytes, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,140,} else {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,141,"jgen = f.createJsonGenerator(new OutputStreamWriter(bytes, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,143,jgen.enable(JsonGenerator.Feature.ESCAPE_NON_ASCII);
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,144,jgen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,145,jgen.writeFieldName(KEY);
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,146,jgen.writeBoolean(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,147,jgen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,148,jgen.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,149,"json = bytes.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,150,"assertEquals(""{""+quote(""fun:\\u0088:\\u3456"")+"":true}"", json);"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,153,private void _testEscapeCustom(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,155,JsonFactory f = new JsonFactory().setCharacterEscapes(new MyEscapes());
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,156,"final String STR_IN = ""[abcd/""+((char) TWO_BYTE_ESCAPED)+""/""+((char) THREE_BYTE_ESCAPED)+""]"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,157,"final String STR_OUT = ""[\\A\\u0062c[D]/""+TWO_BYTE_ESCAPED_STRING+""/""+THREE_BYTE_ESCAPED_STRING+""]"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,158,ByteArrayOutputStream bytes = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,159,JsonGenerator jgen;
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,161,// First: output normally; should not add escaping
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,162,if (useStream) {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,163,"jgen = f.createJsonGenerator(bytes, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,164,} else {
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,165,"jgen = f.createJsonGenerator(new OutputStreamWriter(bytes, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,167,jgen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,168,"jgen.writeStringField(STR_IN, STR_IN);"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,169,jgen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,170,jgen.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,171,"String json = bytes.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java,172,"assertEquals(""{""+quote(STR_OUT)+"":""+quote(STR_OUT)+""}"", json);"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,6,import com.fasterxml.jackson.core.io.IOContext;
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,7,import com.fasterxml.jackson.core.io.InputDecorator;
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,8,import com.fasterxml.jackson.core.io.OutputDecorator;
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,11,* Unit tests to verify that input and output decorators work as
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,12,* expected
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,14,* @since 1.8
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,16,public class TestDecorators extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,20,/* Helper classes
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,24,static class SimpleInputDecorator extends InputDecorator
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,26,@Override
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,27,"public InputStream decorate(IOContext ctxt, InputStream in)"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,28,throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,30,"return new ByteArrayInputStream(""123"".getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,33,@Override
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,34,"public InputStream decorate(IOContext ctxt, byte[] src, int offset, int length)"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,35,throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,37,"return new ByteArrayInputStream(""456"".getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,40,@Override
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,41,"public Reader decorate(IOContext ctxt, Reader src) {"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,42,"return new StringReader(""789"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,46,static class SimpleOutputDecorator extends OutputDecorator
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,48,@Override
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,49,"public OutputStream decorate(IOContext ctxt, OutputStream out) throws IOException"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,51,"out.write(""123"".getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,52,out.flush();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,53,return new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,56,@Override
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,57,"public Writer decorate(IOContext ctxt, Writer w) throws IOException"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,59,"w.write(""567"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,60,w.flush();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,61,return new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,67,/* Unit tests
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,71,public void testInputDecoration() throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,73,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,74,f.setInputDecorator(new SimpleInputDecorator());
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,75,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,76,// first test with Reader
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,77,"jp = f.createJsonParser(new StringReader(""{ }""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,78,// should be overridden;
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,79,"assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,80,"assertEquals(789, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,81,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,83,// similarly with InputStream
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,84,"jp = f.createJsonParser(new ByteArrayInputStream(""[ ]"".getBytes(""UTF-8"")));"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,85,// should be overridden;
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,86,"assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,87,"assertEquals(123, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,88,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,90,// and with raw bytes
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,91,"jp = f.createJsonParser(""[ ]"".getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,92,// should be overridden;
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,93,"assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,94,"assertEquals(456, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,95,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,98,public void testOutputDecoration() throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,100,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,101,f.setOutputDecorator(new SimpleOutputDecorator());
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,102,JsonGenerator jg;
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,104,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,105,jg = f.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,106,jg.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,107,"assertEquals(""567"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,109,ByteArrayOutputStream out = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,110,"jg = f.createJsonGenerator(out, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,111,jg.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java,112,"assertEquals(""123"", out.toString(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,3,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,5,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,6,import java.util.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,9,* Set of basic unit tests for verifying that the basic parser
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,10,* functionality works as expected.
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,12,public class TestJsonParser
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,13,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,15,public void testConfig() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,17,"JsonParser jp = createParserUsingReader(""[ ]"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,18,jp.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,19,assertTrue(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,20,jp.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,21,assertFalse(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,23,"jp.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,24,assertTrue(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,25,"jp.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE, false);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,26,assertFalse(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,28,assertTrue(jp.isEnabled(JsonParser.Feature.INTERN_FIELD_NAMES));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,29,"jp.configure(JsonParser.Feature.INTERN_FIELD_NAMES, false);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,30,assertFalse(jp.isEnabled(JsonParser.Feature.INTERN_FIELD_NAMES));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,31,"jp.configure(JsonParser.Feature.INTERN_FIELD_NAMES, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,32,assertTrue(jp.isEnabled(JsonParser.Feature.INTERN_FIELD_NAMES));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,35,public void testConfigDeprecated() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,37,"JsonParser jp = createParserUsingReader(""[ ]"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,38,// and then deprecated methods
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,39,jp.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,40,assertTrue(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,41,jp.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,42,assertFalse(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,43,"jp.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,44,assertTrue(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,47,public void testInterningWithStreams() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,49,"_testIntern(true, true, ""a"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,50,"_testIntern(true, false, ""b"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,53,public void testInterningWithReaders() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,55,"_testIntern(false, true, ""c"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,56,"_testIntern(false, false, ""d"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,59,"private void _testIntern(boolean useStream, boolean enableIntern, String expName) throws IOException"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,61,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,62,"f.configure(JsonParser.Feature.INTERN_FIELD_NAMES, enableIntern);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,63,"assertEquals(enableIntern, f.isEnabled(JsonParser.Feature.INTERN_FIELD_NAMES));"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,64,"final String JSON = ""{ \""""+expName+""\"" : 1}"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,65,JsonParser jp = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,66,"createParserUsingStream(f, JSON, ""UTF-8"") : createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,68,"assertEquals(enableIntern, jp.isEnabled(JsonParser.Feature.INTERN_FIELD_NAMES));"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,70,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,71,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,72,// needs to be same of cours
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,73,String actName = jp.getCurrentName();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,74,"assertEquals(expName, actName);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,75,if (enableIntern) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,76,"assertSame(expName, actName);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,77,} else {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,78,"assertNotSame(expName, actName);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,80,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,83,public void testTokenAccess() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,85,"JsonParser jp = createParserUsingReader(""[ ]"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,86,assertNull(jp.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,87,jp.clearCurrentToken();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,88,assertNull(jp.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,89,assertNull(jp.getEmbeddedObject());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,90,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,91,"assertToken(JsonToken.START_ARRAY, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,92,jp.clearCurrentToken();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,93,assertNull(jp.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,96,// Also: no codec defined by default
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,97,try {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,98,jp.readValueAsTree();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,99,"fail(""Should get exception without codec"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,100,} catch (IllegalStateException e) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,101,"verifyException(e, ""No ObjectCodec defined"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,104,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,108,* This basic unit test verifies that example given in the Json
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,109,* specification (RFC-4627 or later) is properly parsed at
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,110,"* high-level, without verifying values."
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,112,public void testSpecExampleSkipping()
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,113,throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,115,doTestSpec(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,119,* Unit test that verifies that the spec example JSON is completely
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,120,"* parsed, and proper values are given for contents of all"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,121,* events/tokens.
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,123,public void testSpecExampleFully()
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,124,throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,126,doTestSpec(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,130,"* Unit test that verifies that 3 basic keywords (null, true, false)"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,131,* are properly parsed in various contexts.
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,133,public void testKeywords()
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,134,throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,136,"final String DOC = ""{\n"""
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,137,"+""\""key1\"" : null,\n"""
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,138,"+""\""key2\"" : true,\n"""
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,139,"+""\""key3\"" : false,\n"""
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,140,"+""\""key4\"" : [ false, null, true ]\n"""
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,144,"JsonParser jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,146,JsonStreamContext ctxt = jp.getParsingContext();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,147,assertTrue(ctxt.inRoot());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,148,assertFalse(ctxt.inArray());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,149,assertFalse(ctxt.inObject());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,150,"assertEquals(0, ctxt.getEntryCount());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,151,"assertEquals(0, ctxt.getCurrentIndex());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,153,"/* Before advancing to content, we should have following"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,154,* default state...
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,156,assertFalse(jp.hasCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,157,assertNull(jp.getText());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,158,assertNull(jp.getTextCharacters());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,159,"assertEquals(0, jp.getTextLength());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,160,// not sure if this is defined but:
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,161,"assertEquals(0, jp.getTextOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,163,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,165,assertTrue(jp.hasCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,166,JsonLocation loc = jp.getTokenLocation();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,167,assertNotNull(loc);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,168,"assertEquals(1, loc.getLineNr());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,169,"assertEquals(1, loc.getColumnNr());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,171,ctxt = jp.getParsingContext();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,172,assertFalse(ctxt.inRoot());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,173,assertFalse(ctxt.inArray());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,174,assertTrue(ctxt.inObject());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,175,"assertEquals(0, ctxt.getEntryCount());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,176,"assertEquals(0, ctxt.getCurrentIndex());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,178,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,179,"verifyFieldName(jp, ""key1"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,180,"assertEquals(2, jp.getTokenLocation().getLineNr());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,182,ctxt = jp.getParsingContext();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,183,assertFalse(ctxt.inRoot());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,184,assertFalse(ctxt.inArray());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,185,assertTrue(ctxt.inObject());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,186,"assertEquals(1, ctxt.getEntryCount());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,187,"assertEquals(0, ctxt.getCurrentIndex());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,189,"assertToken(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,191,ctxt = jp.getParsingContext();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,192,"assertEquals(1, ctxt.getEntryCount());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,193,"assertEquals(0, ctxt.getCurrentIndex());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,195,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,196,"verifyFieldName(jp, ""key2"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,197,ctxt = jp.getParsingContext();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,198,"assertEquals(2, ctxt.getEntryCount());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,199,"assertEquals(1, ctxt.getCurrentIndex());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,201,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,203,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,204,"verifyFieldName(jp, ""key3"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,205,"assertToken(JsonToken.VALUE_FALSE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,207,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,208,"verifyFieldName(jp, ""key4"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,209,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,210,"assertToken(JsonToken.VALUE_FALSE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,211,"assertToken(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,212,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,213,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,215,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,218,public void testInvalidKeywords() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,220,_testInvalidKeywords(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,221,_testInvalidKeywords(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,224,private void _testInvalidKeywords(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,226,"doTestInvalidKeyword1(useStream, ""nul"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,227,"doTestInvalidKeyword1(useStream, ""nulla"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,228,"doTestInvalidKeyword1(useStream, ""fal"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,229,"doTestInvalidKeyword3(useStream, ""False"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,230,"doTestInvalidKeyword1(useStream, ""falsett0"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,231,"doTestInvalidKeyword1(useStream, ""tr"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,232,"doTestInvalidKeyword1(useStream, ""truE"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,233,"doTestInvalidKeyword1(useStream, ""trueenough"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,236,public void testSkipping()
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,237,throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,239,String DOC =
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,240,"""[ 1, 3, [ true, null ], 3, { \""a\"":\""b\"" }, [ [ ] ], { } ]"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,242,"JsonParser jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,244,"// First, skipping of the whole thing"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,245,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,246,jp.skipChildren();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,247,"assertEquals(JsonToken.END_ARRAY, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,248,JsonToken t = jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,249,if (t != null) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,250,"fail(""Expected null at end of doc, got ""+t);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,252,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,254,// Then individual ones
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,255,"jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,256,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,258,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,259,jp.skipChildren();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,260,// shouldn't move
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,261,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,262,"assertEquals(1, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,264,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,265,// then skip array
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,266,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,267,jp.skipChildren();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,268,"assertToken(JsonToken.END_ARRAY, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,270,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,271,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,272,jp.skipChildren();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,273,"assertToken(JsonToken.END_OBJECT, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,275,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,276,jp.skipChildren();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,277,"assertToken(JsonToken.END_ARRAY, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,279,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,280,jp.skipChildren();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,281,"assertToken(JsonToken.END_OBJECT, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,283,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,285,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,288,public void testNameEscaping() throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,290,_testNameEscaping(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,291,_testNameEscaping(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,294,private void _testNameEscaping(boolean useStream) throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,296,"final Map<String,String> NAME_MAP = new LinkedHashMap<String,String>();"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,297,"NAME_MAP.put("""", """");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,298,"NAME_MAP.put(""\\\""funny\\\"""", ""\""funny\"""");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,299,"NAME_MAP.put(""\\\\"", ""\\"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,300,"NAME_MAP.put(""\\r"", ""\r"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,301,"NAME_MAP.put(""\\n"", ""\n"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,302,"NAME_MAP.put(""\\t"", ""\t"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,303,"NAME_MAP.put(""\\r\\n"", ""\r\n"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,304,"NAME_MAP.put(""\\\""\\\"""", ""\""\"""");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,305,"NAME_MAP.put(""Line\\nfeed"", ""Line\nfeed"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,306,"NAME_MAP.put(""Yet even longer \\\""name\\\""!"", ""Yet even longer \""name\""!"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,308,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,309,int entry = 0;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,310,"for (Map.Entry<String,String> en : NAME_MAP.entrySet()) {"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,311,++entry;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,312,String input = en.getKey();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,313,String expResult = en.getValue();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,314,"final String DOC = ""{ \""""+input+""\"":null}"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,315,JsonParser jp = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,316,"jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,317,: jf.createJsonParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,319,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,320,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,321,"// first, sanity check (field name == getText()"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,322,String act = jp.getCurrentName();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,323,"assertEquals(act, getAndVerifyText(jp));"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,324,if (!expResult.equals(act)) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,325,"String msg = ""Failed for name #""+entry+""/""+NAME_MAP.size();"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,326,if (expResult.length() != act.length()) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,327,"fail(msg+"": exp length ""+expResult.length()+"", actual ""+act.length());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,329,"assertEquals(msg, expResult, act);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,331,"assertToken(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,332,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,333,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,338,* Unit test that verifies that long text segments are handled
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,339,* correctly; mostly to stress-test underlying segment-based
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,340,* text buffer(s).
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,342,public void testLongText() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,344,final int LEN = 96000;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,345,StringBuilder sb = new StringBuilder(LEN + 100);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,346,Random r = new Random(99);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,347,while (sb.length() < LEN) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,348,sb.append(r.nextInt());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,349,"sb.append("" xyz foo"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,350,if (r.nextBoolean()) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,351,"sb.append("" and \""bar\"""");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,352,} else if (r.nextBoolean()) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,353,"sb.append("" [whatever].... "");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,354,} else {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,355,// Let's try some more 'exotic' chars
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,356,"sb.append("" UTF-8-fu: try this {\u00E2/\u0BF8/\uA123!} (look funny?)"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,358,if (r.nextBoolean()) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,359,if (r.nextBoolean()) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,360,sb.append('\n');
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,361,} else if (r.nextBoolean()) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,362,sb.append('\r');
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,363,} else {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,364,"sb.append(""\r\n"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,368,final String VALUE = sb.toString();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,370,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,372,// Let's use real generator to get json done right
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,373,StringWriter sw = new StringWriter(LEN + (LEN >> 2));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,374,JsonGenerator jg = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,375,jg.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,376,"jg.writeFieldName(""doc"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,377,jg.writeString(VALUE);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,378,jg.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,379,jg.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,381,final String DOC = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,383,for (int type = 0; type < 3; ++type) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,384,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,386,switch (type) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,387,default:
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,388,"jp = jf.createJsonParser(DOC.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,389,break;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,390,case 1:
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,391,jp = jf.createJsonParser(DOC);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,392,break;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,393,case 2: // NEW: let's also exercise UTF-32...
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,394,jp = jf.createJsonParser(encodeInUTF32BE(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,395,break;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,397,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,398,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,399,"assertEquals(""doc"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,400,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,402,String act = getAndVerifyText(jp);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,403,if (act.length() != VALUE.length()) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,404,"fail(""Expected length ""+VALUE.length()+"", got ""+act.length());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,406,if (!act.equals(VALUE)) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,407,"fail(""Long text differs"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,410,// should still know the field name
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,411,"assertEquals(""doc"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,412,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,413,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,418,* Simple unit test that verifies that passing in a byte array
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,419,* as source works as expected.
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,421,public void testBytesAsSource() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,423,"String JSON = ""[ 1, 2, 3, 4 ]"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,424,"byte[] b = JSON.getBytes(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,425,int offset = 50;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,426,int len = b.length;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,427,byte[] src = new byte[offset + len + offset];
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,429,"System.arraycopy(b, 0, src, offset, len);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,431,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,432,"JsonParser jp = jf.createJsonParser(src, offset, len);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,434,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,435,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,436,"assertEquals(1, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,437,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,438,"assertEquals(2, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,439,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,440,"assertEquals(3, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,441,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,442,"assertEquals(4, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,443,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,444,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,446,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,449,// [JACKSON-632]
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,450,public void testUtf8BOMHandling() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,452,ByteArrayOutputStream bytes = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,453,"// first, write BOM:"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,454,bytes.write(0xEF);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,455,bytes.write(0xBB);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,456,bytes.write(0xBF);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,457,"bytes.write(""[ 1 ]"".getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,458,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,459,JsonParser jp = jf.createJsonParser(bytes.toByteArray());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,460,"assertEquals(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,461,// should also have skipped first 3 bytes of BOM; but do we have offset available?
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,463,JsonLocation loc = jp.getTokenLocation();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,464,"assertEquals(3, loc.getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,465,"assertEquals(-1, loc.getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,471,/* Helper methods
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,475,private void doTestSpec(boolean verify)
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,476,throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,478,"// First, using a StringReader:"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,479,"doTestSpecIndividual(null, verify);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,481,// Then with streams using supported encodings:
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,482,"doTestSpecIndividual(""UTF-8"", verify);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,483,"doTestSpecIndividual(""UTF-16BE"", verify);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,484,"doTestSpecIndividual(""UTF-16LE"", verify);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,486,/* Hmmh. UTF-32 is harder only because JDK doesn't come with
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,487,* a codec for it. Can't test it yet using this method
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,489,"doTestSpecIndividual(""UTF-32"", verify);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,492,"private void doTestSpecIndividual(String enc, boolean verify)"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,493,throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,495,String doc = SAMPLE_DOC_JSON_SPEC;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,496,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,498,if (enc == null) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,499,jp = createParserUsingReader(doc);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,500,} else {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,501,"jp = createParserUsingStream(doc, enc);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,503,"verifyJsonSpecSampleDoc(jp, verify);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,504,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,507,"private void doTestInvalidKeyword1(boolean useStream, String value)"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,508,throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,510,"final String doc = ""{ \""key1\"" : ""+value+"" }"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,511,"JsonParser jp = useStream ? createParserUsingStream(doc, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,512,: this.createParserUsingReader(doc);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,513,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,514,"/* 24-Nov-2008, tatu: Note that depending on parser impl, we may"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,515,*   get the exception early or late...
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,517,try {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,518,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,519,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,520,"fail(""Expected an exception for malformed value keyword"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,521,} catch (JsonParseException jex) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,522,"verifyException(jex, ""Unrecognized token"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,526,"private void doTestInvalidKeyword3(boolean useStream, String value)"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,527,throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,529,"final String doc = ""{ \""key1\"" : ""+value+"" }"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,530,"JsonParser jp = useStream ? createParserUsingStream(doc, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,531,: this.createParserUsingReader(doc);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,532,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,533,"/* 24-Nov-2008, tatu: Note that depending on parser impl, we may"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,534,*   get the exception early or late...
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,536,try {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,537,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,538,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,539,"fail(""Expected an exception for malformed value keyword"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,540,} catch (JsonParseException jex) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,541,"verifyException(jex, ""expected a valid value"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,7,import static org.junit.Assert.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,10,* Tests for verifying that accessing base64 encoded content works ok.
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,12,public class TestJsonParserBinary
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,13,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,17,/* Unit tests
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,21,public void testSimple()
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,22,throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,24,"// let's test reader (char) based first, then stream (byte)"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,25,_testSimple(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,26,_testSimple(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,29,public void testInArray()
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,30,throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,32,"// let's test reader (char) based first, then stream (byte)"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,33,_testInArray(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,34,_testInArray(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,37,public void testWithEscaped() throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,39,"// let's test reader (char) based first, then stream (byte)"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,40,_testEscaped(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,41,_testEscaped(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,46,/* Actual test methods
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,50,private void _testSimple(boolean useStream)
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,51,throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,53,"/* The usual sample input string, from Thomas Hobbes's ""Leviathan"""
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,54,* (via Wikipedia)
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,56,"final String RESULT = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,57,"final byte[] RESULT_BYTES = RESULT.getBytes(""US-ASCII"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,59,// And here's what should produce it...
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,60,final String INPUT_STR =
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,61,"""TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz"""
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,62,"+""IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg"""
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,63,"+""dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu"""
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,64,"+""dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo"""
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,65,"+""ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4="""
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,68,"final String DOC = ""\""""+INPUT_STR+""\"""";"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,69,"JsonParser jp = _getParser(DOC, useStream);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,71,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,72,byte[] data = jp.getBinaryValue();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,73,assertNotNull(data);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,74,"assertArrayEquals(RESULT_BYTES, data);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,77,private void _testInArray(boolean useStream)
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,78,throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,80,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,82,final int entryCount = 7;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,84,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,85,JsonGenerator jg = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,86,jg.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,88,byte[][] entries = new byte[entryCount][];
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,89,for (int i = 0; i < entryCount; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,90,byte[] b = new byte[200 + i * 100];
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,91,for (int x = 0; x < b.length; ++x) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,92,b[x] = (byte) (i + x);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,94,entries[i] = b;
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,95,jg.writeBinary(b);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,98,jg.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,99,jg.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,101,"JsonParser jp = _getParser(sw.toString(), useStream);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,103,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,105,for (int i = 0; i < entryCount; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,106,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,107,byte[] b = jp.getBinaryValue();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,108,"assertArrayEquals(entries[i], b);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,110,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,113,private void _testEscaped(boolean useStream) throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,115,"// Input: ""Test!"" -> ""VGVzdCE="""
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,117,"// First, try with embedded linefeed half-way through:"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,119,"String DOC = quote(""VGVz\\ndCE=""); // note: must double-quote to get linefeed"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,120,"JsonParser jp = _getParser(DOC, useStream);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,121,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,122,byte[] b = jp.getBinaryValue();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,123,"assertEquals(""Test!"", new String(b, ""US-ASCII""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,124,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,125,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,127,// and then with escaped chars
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,128,"//        DOC = quote(""V\\u0047V\\u007AdCE=""); // note: must escape backslash..."
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,129,"DOC = quote(""V\\u0047V\\u007AdCE=""); // note: must escape backslash..."
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,130,"jp = _getParser(DOC, useStream);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,131,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,132,b = jp.getBinaryValue();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,133,"assertEquals(""Test!"", new String(b, ""US-ASCII""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,134,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,135,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,140,/* Other helper methods
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,144,"private JsonParser _getParser(String doc, boolean useStream)"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,145,throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,147,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,148,if (useStream) {
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,149,"return jf.createJsonParser(doc.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java,151,return jf.createJsonParser(new StringReader(doc));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,3,import java.io.ByteArrayInputStream;
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,4,import java.io.StringReader;
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,6,import com.fasterxml.jackson.core.JsonFactory;
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,7,import com.fasterxml.jackson.core.JsonParser;
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,8,import com.fasterxml.jackson.core.JsonToken;
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,9,import com.fasterxml.jackson.core.SerializableString;
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,10,import com.fasterxml.jackson.core.io.SerializedString;
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,12,public class TestNextXxx
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,13,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,15,// [JACKSON-653]
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,16,public void testIsNextTokenName() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,18,_testIsNextTokenName1(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,19,_testIsNextTokenName1(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,20,_testIsNextTokenName2(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,21,_testIsNextTokenName2(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,24,private void _testIsNextTokenName1(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,26,"final String DOC = ""{\""name\"":123,\""name2\"":14,\""x\"":\""name\""}"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,27,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,28,JsonParser jp = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,29,"jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,30,: jf.createJsonParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,31,"SerializedString NAME = new SerializedString(""name"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,32,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,33,"assertToken(JsonToken.START_OBJECT, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,34,assertTrue(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,35,"assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,36,"assertEquals(NAME.getValue(), jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,37,"assertEquals(NAME.getValue(), jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,38,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,39,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,40,"assertEquals(123, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,42,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,43,"assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,44,"assertEquals(""name2"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,45,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,47,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,48,"assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,49,"assertEquals(""x"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,51,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,52,"assertToken(JsonToken.VALUE_STRING, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,54,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,55,"assertToken(JsonToken.END_OBJECT, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,57,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,58,assertNull(jp.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,60,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,63,private void _testIsNextTokenName2(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,65,"final String DOC = ""{\""name\"":123,\""name2\"":14,\""x\"":\""name\""}"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,66,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,67,JsonParser jp = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,68,"jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,69,: jf.createJsonParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,70,"SerializableString NAME = new SerializedString(""name"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,71,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,72,"assertToken(JsonToken.START_OBJECT, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,73,assertTrue(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,74,"assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,75,"assertEquals(NAME.getValue(), jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,76,"assertEquals(NAME.getValue(), jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,77,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,78,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,79,"assertEquals(123, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,81,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,82,"assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,83,"assertEquals(""name2"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,84,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,86,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,87,"assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,88,"assertEquals(""x"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,90,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,91,"assertToken(JsonToken.VALUE_STRING, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,93,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,94,"assertToken(JsonToken.END_OBJECT, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,96,assertFalse(jp.nextFieldName(NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,97,assertNull(jp.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,99,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,3,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,5,public class TestParserNonStandard
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,6,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,8,// // // And then tests to verify [JACKSON-69]:
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,10,public void testSimpleUnquoted() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,12,_testSimpleUnquoted(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,13,_testSimpleUnquoted(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,16,public void testLargeUnquoted() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,18,_testLargeUnquoted(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,19,_testLargeUnquoted(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,22,public void testSingleQuotesDefault() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,24,_testSingleQuotesDefault(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,25,_testSingleQuotesDefault(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,28,public void testSingleQuotesEnabled() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,30,_testSingleQuotesEnabled(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,31,_testSingleQuotesEnabled(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,32,_testSingleQuotesEscaped(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,33,_testSingleQuotesEscaped(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,36,"// Test for [JACKSON-267], allowing '@' as name char, for unquoted names"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,37,public void testNonStandardNameChars() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,39,_testNonStandardNameChars(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,40,_testNonStandardNameChars(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,43,// Test for [JACKSON-300]
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,44,public void testNonStandardAnyCharQuoting() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,46,_testNonStandarBackslashQuoting(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,47,_testNonStandarBackslashQuoting(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,50,// Test for [JACKSON-358]
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,51,public void testLeadingZeroesUTF8() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,52,"_testLeadingZeroes(true, false);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,53,"_testLeadingZeroes(true, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,56,public void testLeadingZeroesReader() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,57,"_testLeadingZeroes(false, false);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,58,"_testLeadingZeroes(false, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,61,// [JACKSON-142]: allow NaN
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,62,public void testAllowNaN() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,63,_testAllowNaN(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,64,_testAllowNaN(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,67,// [JACKSON-142]: allow +Inf/-Inf
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,68,public void testAllowInfinity() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,69,_testAllowInf(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,70,_testAllowInf(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,75,/* Secondary test methods
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,79,private void _testLargeUnquoted(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,81,StringBuilder sb = new StringBuilder(5000);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,82,"sb.append(""[\n"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,83,//final int REPS = 2000;
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,84,final int REPS = 1050;
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,85,for (int i = 0; i < REPS; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,86,if (i > 0) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,87,"sb.append(',');"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,88,if ((i & 7) == 0) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,89,sb.append('\n');
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,92,"sb.append(""{"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,93,"sb.append(""abc"").append(i&127).append(':');"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,94,sb.append((i & 1) != 0);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,95,"sb.append(""}\n"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,97,"sb.append(""]"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,98,String JSON = sb.toString();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,99,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,100,"f.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,101,JsonParser jp = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,102,"createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,103,": createParserUsingReader(f, JSON)"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,105,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,106,for (int i = 0; i < REPS; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,107,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,108,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,109,"assertEquals(""abc""+(i&127), jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,110,"assertToken(((i&1) != 0) ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,111,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,113,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,117,private void _testSimpleUnquoted(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,119,"final String JSON = ""{ a : 1, _foo:true, $:\""money!\"", \"" \"":null }"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,120,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,121,"f.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,122,JsonParser jp = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,123,"createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,124,": createParserUsingReader(f, JSON)"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,127,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,128,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,129,"assertEquals(""a"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,130,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,131,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,132,"assertEquals(""_foo"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,133,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,134,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,135,"assertEquals(""$"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,136,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,137,"assertEquals(""money!"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,139,// and then regular quoted one should still work too:
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,140,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,141,"assertEquals("" "", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,143,"assertToken(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,145,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,149,* Test to verify that the default parser settings do not
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,150,"* accept single-quotes for String values (field names,"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,151,* textual values)
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,153,private void _testSingleQuotesDefault(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,155,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,156,"// First, let's see that by default they are not allowed"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,157,"String JSON = ""[ 'text' ]"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,158,"JsonParser jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,159,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,160,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,161,try {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,162,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,163,"fail(""Expected exception"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,164,} catch (JsonParseException e) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,165,"verifyException(e, ""Unexpected character ('''"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,168,"JSON = ""{ 'a':1 }"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,169,"jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,170,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,171,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,172,try {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,173,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,174,"fail(""Expected exception"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,175,} catch (JsonParseException e) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,176,"verifyException(e, ""Unexpected character ('''"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,181,"* Test to verify [JACKSON-173], optional handling of"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,182,"* single quotes, to allow handling invalid (but, alas, common)"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,183,* JSON.
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,185,private void _testSingleQuotesEnabled(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,187,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,188,"f.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,190,"String JSON = ""{ 'a' : 1, \""foobar\"": 'b', '_abcde1234':'d', '\""' : '\""\""', '':'' }"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,191,"JsonParser jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,192,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,194,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,196,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,197,"assertEquals(""a"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,198,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,199,"assertEquals(""1"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,200,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,201,"assertEquals(""foobar"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,202,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,203,"assertEquals(""b"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,204,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,205,"assertEquals(""_abcde1234"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,206,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,207,"assertEquals(""d"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,208,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,209,"assertEquals(""\"""", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,210,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,211,"//assertEquals(""\""\"""", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,213,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,214,"assertEquals("""", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,215,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,216,"assertEquals("""", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,218,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,221,// test to verify that we implicitly allow escaping of apostrophe [JACKSON-548]
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,222,private void _testSingleQuotesEscaped(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,224,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,225,"f.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,227,"String JSON = ""[ '16\\'' ]"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,228,"JsonParser jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,229,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,231,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,232,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,233,"assertEquals(""16'"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,234,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,237,private void _testNonStandardNameChars(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,239,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,240,"f.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,241,"String JSON = ""{ @type : \""mytype\"", #color : 123, *error* : true, """
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,242,"+"" hyphen-ated : \""yes\"", me+my : null"""
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,244,"JsonParser jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,245,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,247,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,249,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,250,"assertEquals(""@type"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,251,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,252,"assertEquals(""mytype"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,254,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,255,"assertEquals(""#color"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,256,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,257,"assertEquals(123, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,259,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,260,"assertEquals(""*error*"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,261,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,263,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,264,"assertEquals(""hyphen-ated"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,265,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,266,"assertEquals(""yes"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,268,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,269,"assertEquals(""me+my"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,270,"assertToken(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,272,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,273,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,276,private void _testNonStandarBackslashQuoting(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,278,// first: verify that we get an exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,279,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,280,assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER));
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,281,"final String JSON = quote(""\\'"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,282,"JsonParser jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,283,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,284,try {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,285,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,286,jp.getText();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,287,"fail(""Should have thrown an exception for doc <""+JSON+"">"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,288,} catch (JsonParseException e) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,289,"verifyException(e, ""unrecognized character escape"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,291,// and then verify it's ok...
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,292,"f.configure(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,293,assertTrue(f.isEnabled(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER));
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,294,"jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,295,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,296,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,297,"assertEquals(""'"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,300,"private void _testLeadingZeroes(boolean useStream, boolean appendSpace) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,302,// first: verify that we get an exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,303,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,304,assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS));
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,305,"String JSON = ""00003"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,306,if (appendSpace) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,307,"JSON += "" "";"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,309,"JsonParser jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,310,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,311,try {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,312,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,313,jp.getText();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,314,"fail(""Should have thrown an exception for doc <""+JSON+"">"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,315,} catch (JsonParseException e) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,316,"verifyException(e, ""invalid numeric value"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,319,// and then verify it's ok when enabled
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,320,"f.configure(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,321,assertTrue(f.isEnabled(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS));
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,322,"jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,323,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,324,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,325,"assertEquals(3, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,326,"assertEquals(""3"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,327,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,329,"// Plus, also: verify that leading zero magnitude is ok:"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,330,"JSON = ""0""+Integer.MAX_VALUE;"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,331,if (appendSpace) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,332,"JSON += "" "";"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,334,"jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"") : createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,335,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,336,"assertEquals(String.valueOf(Integer.MAX_VALUE), jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,337,"assertEquals(Integer.MAX_VALUE, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,338,Number nr = jp.getNumberValue();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,339,"assertSame(Integer.class, nr.getClass());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,340,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,343,private void _testAllowNaN(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,345,"final String JSON = ""[ NaN]"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,346,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,347,assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS));
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,349,"// without enabling, should get an exception"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,350,"JsonParser jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,351,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,353,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,354,try {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,355,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,356,"fail(""Expected exception"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,357,} catch (Exception e) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,358,"verifyException(e, ""non-standard"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,361,// we can enable it dynamically (impl detail)
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,362,"f.configure(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,363,"jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,364,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,366,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,367,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,368,double d = jp.getDoubleValue();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,369,assertTrue(Double.isNaN(d));
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,370,"assertEquals(""NaN"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,371,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,372,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,374,"// finally, should also work with skipping"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,375,"f.configure(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,376,"jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,377,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,378,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,379,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,380,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,381,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,384,private void _testAllowInf(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,386,"final String JSON = ""[ -INF, +INF, +Infinity,-Infinity ]"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,387,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,388,assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS));
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,390,"// without enabling, should get an exception"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,391,"JsonParser jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,392,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,394,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,395,try {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,396,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,397,"fail(""Expected exception"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,398,} catch (Exception e) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,399,"verifyException(e, ""Non-standard token '-INF'"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,402,"f.configure(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,403,"jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,404,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,406,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,408,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,409,double d = jp.getDoubleValue();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,410,"assertEquals(""-INF"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,411,assertTrue(Double.isInfinite(d));
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,412,assertTrue(d == Double.NEGATIVE_INFINITY);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,414,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,415,d = jp.getDoubleValue();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,416,"assertEquals(""+INF"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,417,assertTrue(Double.isInfinite(d));
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,418,assertTrue(d == Double.POSITIVE_INFINITY);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,420,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,421,d = jp.getDoubleValue();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,422,"assertEquals(""+Infinity"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,423,assertTrue(Double.isInfinite(d));
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,424,assertTrue(d == Double.POSITIVE_INFINITY);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,426,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,427,d = jp.getDoubleValue();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,428,"assertEquals(""-Infinity"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,429,assertTrue(Double.isInfinite(d));
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,430,assertTrue(d == Double.NEGATIVE_INFINITY);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,432,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,433,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,435,"// finally, should also work with skipping"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,436,"f.configure(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,437,"jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,438,": createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,440,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,441,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,442,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,443,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,444,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,445,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java,447,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,3,import java.io.ByteArrayOutputStream;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,5,import com.fasterxml.jackson.core.JsonGenerator;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,6,import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,7,import com.fasterxml.jackson.core.io.IOContext;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,8,import com.fasterxml.jackson.core.util.BufferRecycler;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,9,import com.fasterxml.jackson.test.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,11,public class TestUtf8Generator
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,12,extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,14,public void testUtf8Issue462() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,16,ByteArrayOutputStream bytes = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,17,"IOContext ioc = new IOContext(new BufferRecycler(), bytes, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,18,"JsonGenerator gen = new UTF8JsonGenerator(ioc, 0, null, bytes);"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,19,"String str = ""Natuurlijk is alles gelukt en weer een tevreden klant\uD83D\uDE04"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,20,int length = 4000 - 38;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,22,for (int i = 1; i <= length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,23,gen.writeNumber(1);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,25,gen.writeString(str);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,26,gen.flush();
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,4,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,5,import com.fasterxml.jackson.test.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,7,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,8,import java.util.Random;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,11,* Set of basic unit tests for verifying that the basic parser
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,12,* functionality works as expected.
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,14,public class TestUtf8Parser
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,15,extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,17,final static String[] UTF8_2BYTE_STRINGS = new String[] {
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,18,"/* This may look funny, but UTF8 scanner has fairly"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,19,"* elaborate decoding machinery, and it is indeed"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,20,* necessary to try out various combinations...
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,22,"""b"", ""A\u00D8"", ""abc"", ""c3p0"","
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,23,"""12345"", ""......"", ""Long\u00FAer"","
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,24,"""Latin1-fully-\u00BE-develop\u00A8d"","
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,25,"""Some very long name, ridiculously long actually to see that buffer expansion works: \u00BF?"""
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,28,final static String[] UTF8_3BYTE_STRINGS = new String[] {
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,29,"""\uC823?"", ""A\u400F"", ""1\u1234?"","
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,30,"""Ab123\u4034"","
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,31,"""Even-longer:\uC023"""
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,34,public void testEmptyName()
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,35,throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,37,"final String DOC = ""{ \""\"" : \""\"" }"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,39,"JsonParser jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,40,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,41,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,42,"assertEquals("""", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,43,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,44,"assertEquals("""", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,45,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,46,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,49,public void testUtf8Name2Bytes()
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,50,throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,52,final String[] NAMES = UTF8_2BYTE_STRINGS;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,54,for (int i = 0; i < NAMES.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,55,String NAME = NAMES[i];
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,56,"String DOC = ""{ \""""+NAME+""\"" : 0 }"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,57,"JsonParser jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,58,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,60,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,61,"assertEquals(NAME, jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,62,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,63,"// should retain name during value entry, too"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,64,"assertEquals(NAME, jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,66,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,67,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,71,public void testUtf8Name3Bytes() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,73,final String[] NAMES = UTF8_3BYTE_STRINGS;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,75,for (int i = 0; i < NAMES.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,76,String NAME = NAMES[i];
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,77,"String DOC = ""{ \""""+NAME+""\"" : true }"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,79,"JsonParser jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,80,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,82,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,83,"assertEquals(NAME, jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,84,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,85,"assertEquals(NAME, jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,87,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,89,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,93,// How about tests for Surrogate-Pairs?
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,95,public void testUtf8StringTrivial() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,97,String[] VALUES = UTF8_2BYTE_STRINGS;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,98,for (int i = 0; i < VALUES.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,99,String VALUE = VALUES[i];
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,100,"String DOC = ""[ \""""+VALUE+""\"" ]"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,101,"JsonParser jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,102,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,103,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,104,String act = getAndVerifyText(jp);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,105,if (act.length() != VALUE.length()) {
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,106,"fail(""Failed for value #""+(i+1)+""/""+VALUES.length+"": length was ""+act.length()+"", should be ""+VALUE.length());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,108,"assertEquals(VALUE, act);"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,109,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,110,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,113,VALUES = UTF8_3BYTE_STRINGS;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,114,for (int i = 0; i < VALUES.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,115,String VALUE = VALUES[i];
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,116,"String DOC = ""[ \""""+VALUE+""\"" ]"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,117,"JsonParser jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,118,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,119,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,120,"assertEquals(VALUE, getAndVerifyText(jp));"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,121,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,122,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,126,public void testUtf8StringValue() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,128,Random r = new Random(13);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,129,//int LEN = 72000;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,130,int LEN = 720;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,131,StringBuilder sb = new StringBuilder(LEN + 20);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,132,while (sb.length() < LEN) {
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,133,int c;
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,134,if (r.nextBoolean()) { // ascii
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,135,c = 32 + (r.nextInt() & 0x3F);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,136,"if (c == '""' || c == '\\') {"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,137,c = ' ';
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,139,} else if (r.nextBoolean()) { // 2-byte
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,140,c = 160 + (r.nextInt() & 0x3FF);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,141,} else if (r.nextBoolean()) { // 3-byte (non-surrogate)
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,142,c = 8000 + (r.nextInt() & 0x7FFF);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,143,} else { // surrogates (2 chars)
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,144,"int value = r.nextInt() & 0x3FFFF; // 20-bit, ~ 1 million"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,145,sb.append((char) (0xD800 + (value >> 10)));
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,146,c = (0xDC00 + (value & 0x3FF));
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,149,sb.append((char) c);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,152,ByteArrayOutputStream bout = new ByteArrayOutputStream(LEN);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,153,"OutputStreamWriter out = new OutputStreamWriter(bout, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,154,"out.write(""[\"""");"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,155,String VALUE = sb.toString();
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,156,out.write(VALUE);
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,157,"out.write(""\""]"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,158,out.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,160,byte[] data = bout.toByteArray();
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,162,JsonParser jp = new JsonFactory().createJsonParser(new ByteArrayInputStream(data));
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,163,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,164,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,165,String act = jp.getText();
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,167,"assertEquals(VALUE.length(), act.length());"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,168,"assertEquals(VALUE, act);"
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,169,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,3,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,6,"* Set of additional unit for verifying array parsing, specifically"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,7,* edge cases.
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,9,public class TestArrayParsing
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,10,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,12,public void testValidEmpty()
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,13,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,15,"final String DOC = ""[   \n  ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,17,"JsonParser jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,18,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,19,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,20,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,21,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,24,public void testInvalidEmptyMissingClose()
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,25,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,27,"final String DOC = ""[ "";"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,29,"JsonParser jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,30,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,32,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,33,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,34,"fail(""Expected a parsing error for missing array close marker"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,35,} catch (JsonParseException jex) {
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,36,"verifyException(jex, ""expected close marker for ARRAY"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,40,public void testInvalidMissingFieldName()
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,41,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,43,"final String DOC = ""[  : 3 ] "";"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,45,"JsonParser jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,46,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,48,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,49,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,50,"fail(""Expected a parsing error for odd character"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,51,} catch (JsonParseException jex) {
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,52,"verifyException(jex, ""Unexpected character"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,56,public void testInvalidExtraComma()
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,57,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,59,"final String DOC = ""[ 24, ] "";"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,61,"JsonParser jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,62,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,63,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,64,"assertEquals(24, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,66,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,67,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,68,"fail(""Expected a parsing error for missing array close marker"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,69,} catch (JsonParseException jex) {
True,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java,70,"verifyException(jex, ""expected a value"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,6,import com.fasterxml.jackson.core.io.CharacterEscapes;
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,9,* Set of basic unit tests for verifying that the basic parser
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,10,* functionality works as expected.
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,12,public class TestCharEscaping
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,13,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,15,// for [JACKSON-627]
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,16,private final static CharacterEscapes ESC_627 = new CharacterEscapes() {
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,17,final int[] ascii = CharacterEscapes.standardAsciiEscapesForJSON();
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,19,ascii['<'] = CharacterEscapes.ESCAPE_STANDARD;
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,20,ascii['>'] = CharacterEscapes.ESCAPE_STANDARD;
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,23,@Override
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,24,public int[] getEscapeCodesForAscii() {
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,25,return ascii;
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,28,@Override
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,29,public SerializableString getEscapeSequence(int ch) {
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,30,"throw new UnsupportedOperationException(""Not implemented for test"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,35,/* Unit tests
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,39,public void testMissingEscaping()
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,40,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,42,"// Invalid: control chars, including lf, must be escaped"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,43,"final String DOC = ""["""
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,44,"+""\""Linefeed: \n.\"""""
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,46,JsonParser jp = createParserUsingReader(DOC);
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,47,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,48,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,49,// This may or may not trigger exception
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,50,JsonToken t = jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,51,"assertToken(JsonToken.VALUE_STRING, t);"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,52,"// and if not, should get it here:"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,53,jp.getText();
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,54,"fail(""Expected an exception for un-escaped linefeed in string value"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,55,} catch (JsonParseException jex) {
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,56,"verifyException(jex, ""has to be escaped"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,60,public void testSimpleEscaping()
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,61,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,63,"String DOC = ""["""
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,64,"+""\""LF=\\n\"""""
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,67,JsonParser jp = createParserUsingReader(DOC);
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,68,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,69,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,70,"assertEquals(""LF=\n"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,71,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,74,"/* Note: must split Strings, so that javac won't try to handle"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,75,* escape and inline null char
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,77,"DOC = ""[\""NULL:\\u0000!\""]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,79,jp = createParserUsingReader(DOC);
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,80,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,81,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,82,"assertEquals(""NULL:\0!"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,84,// Then just a single char escaping
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,85,"jp = createParserUsingReader(""[\""\\u0123\""]"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,86,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,87,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,88,"assertEquals(""\u0123"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,90,// And then double sequence
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,91,"jp = createParserUsingReader(""[\""\\u0041\\u0043\""]"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,92,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,93,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,94,"assertEquals(""AC"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,97,public void testInvalid()
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,98,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,100,// 2-char sequences not allowed:
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,101,"String DOC = ""[\""\\u41=A\""]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,102,JsonParser jp = createParserUsingReader(DOC);
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,103,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,104,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,105,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,106,jp.getText();
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,107,"fail(""Expected an exception for unclosed ARRAY"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,108,} catch (JsonParseException jpe) {
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,109,"verifyException(jpe, ""for character escape"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,114,* Test to verify that decoder does not allow 8-digit escapes
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,115,* (non-BMP characters must be escaped using two 4-digit sequences)
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,117,public void test8DigitSequence()
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,118,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,120,"String DOC = ""[\""\\u00411234\""]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,121,JsonParser jp = createParserUsingReader(DOC);
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,122,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,123,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,124,"assertEquals(""A1234"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,127,// for [JACKSON-627]
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,128,public void testWriteLongCustomEscapes() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,130,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,131,jf.setCharacterEscapes(ESC_627); // must set to trigger bug
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,132,StringBuilder longString = new StringBuilder();
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,133,while (longString.length() < 2000) {
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,134,"longString.append(""\u65e5\u672c\u8a9e"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,137,StringWriter writer = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,138,"// must call #createJsonGenerator(Writer), #createJsonGenerator(OutputStream) doesn't trigger bug"
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,139,JsonGenerator jgen = jf.createJsonGenerator(writer);
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,140,jgen.setHighestNonEscapedChar(127); // must set to trigger bug
True,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java,141,jgen.writeString(longString.toString());
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,8,* Unit tests for verifying that support for (non-standard) comments
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,9,* works as expected.
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,11,public class TestComments
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,12,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,14,final static String DOC_WITH_SLASHSTAR_COMMENT =
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,15,"""[ /* comment:\n ends here */ 1 /* one more ok to have \""unquoted\""  */ ]"""
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,18,final static String DOC_WITH_SLASHSLASH_COMMENT =
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,19,"""[ // comment...\n 1 \r  // one more, not array: []   \n ]"""
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,23,* Unit test for verifying that by default comments are not
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,24,* recognized.
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,26,public void testDefaultSettings()
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,27,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,29,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,30,assertFalse(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,31,"JsonParser jp = jf.createJsonParser(new StringReader(""[ 1 ]""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,32,assertFalse(jp.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,35,public void testCommentsDisabled()
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,36,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,38,"_testDisabled(DOC_WITH_SLASHSTAR_COMMENT, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,39,"_testDisabled(DOC_WITH_SLASHSLASH_COMMENT, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,40,"_testDisabled(DOC_WITH_SLASHSTAR_COMMENT, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,41,"_testDisabled(DOC_WITH_SLASHSLASH_COMMENT, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,44,public void testCommentsEnabled()
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,45,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,47,"_testEnabled(DOC_WITH_SLASHSTAR_COMMENT, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,48,"_testEnabled(DOC_WITH_SLASHSLASH_COMMENT, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,49,"_testEnabled(DOC_WITH_SLASHSTAR_COMMENT, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,50,"_testEnabled(DOC_WITH_SLASHSLASH_COMMENT, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,55,// Helper methods
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,59,"private void _testDisabled(String doc, boolean useStream)"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,60,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,62,"JsonParser jp = _createParser(doc, useStream, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,63,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,64,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,65,"fail(""Expected exception for unrecognized comment"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,66,} catch (JsonParseException je) {
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,67,// Should have something denoting that user may want to enable 'ALLOW_COMMENTS'
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,68,"verifyException(je, ""ALLOW_COMMENTS"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,72,"private void _testEnabled(String doc, boolean useStream)"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,73,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,75,"JsonParser jp = _createParser(doc, useStream, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,76,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,77,"assertEquals(1, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,78,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,81,"private JsonParser _createParser(String doc, boolean useStream, boolean enabled)"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,82,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,84,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,85,"jf.configure(JsonParser.Feature.ALLOW_COMMENTS, enabled);"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,86,JsonParser jp = useStream ?
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,87,"jf.createJsonParser(doc.getBytes(""UTF-8""))"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,88,: jf.createJsonParser(doc);
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,89,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,src/test/java/com/fasterxml/jackson/core/main/TestComments.java,90,return jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,3,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,5,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,8,* Set of basic unit tests for verifying that the Array write methods
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,9,* of {@link JsonGenerator} work as expected.
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,11,public class TestGeneratorArray
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,12,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,14,public void testEmptyArrayWrite()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,15,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,17,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,18,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,20,JsonStreamContext ctxt = gen.getOutputContext();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,21,assertTrue(ctxt.inRoot());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,22,assertFalse(ctxt.inArray());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,23,assertFalse(ctxt.inObject());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,24,"assertEquals(0, ctxt.getEntryCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,25,"assertEquals(0, ctxt.getCurrentIndex());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,27,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,29,ctxt = gen.getOutputContext();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,30,assertFalse(ctxt.inRoot());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,31,assertTrue(ctxt.inArray());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,32,assertFalse(ctxt.inObject());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,33,"assertEquals(0, ctxt.getEntryCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,34,"assertEquals(0, ctxt.getCurrentIndex());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,36,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,38,ctxt = gen.getOutputContext();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,39,"assertTrue(""Should be in root, was ""+ctxt.getTypeDesc(), ctxt.inRoot());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,40,assertFalse(ctxt.inArray());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,41,assertFalse(ctxt.inObject());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,42,"assertEquals(1, ctxt.getEntryCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,43,// Index won't yet move
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,44,"assertEquals(0, ctxt.getCurrentIndex());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,46,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,47,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,48,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,49,"assertEquals(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,50,"assertEquals(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,51,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,53,"// Ok, then array with nested empty array"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,54,sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,55,gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,56,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,57,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,58,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,59,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,60,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,61,docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,62,jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,63,"assertEquals(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,64,"assertEquals(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,65,"assertEquals(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,66,"assertEquals(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,67,"assertEquals(null, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,68,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,71,public void testInvalidArrayWrite()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,72,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,74,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,75,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,76,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,77,// Mismatch:
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,78,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,79,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,80,"fail(""Expected an exception for mismatched array/object write"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,81,} catch (JsonGenerationException e) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,82,"verifyException(e, ""Current context not an object"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,86,public void testSimpleArrayWrite()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,87,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,89,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,90,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,91,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,92,gen.writeNumber(13);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,93,gen.writeBoolean(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,94,"gen.writeString(""foobar"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,95,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,96,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,97,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,98,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,99,"assertEquals(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,100,"assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,101,"assertEquals(13, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,102,"assertEquals(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,103,"assertEquals(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,104,"assertEquals(""foobar"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,105,"assertEquals(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,106,"assertEquals(null, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java,107,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,4,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,5,import com.fasterxml.jackson.test.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,7,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,10,* Set of basic unit tests that verify aspect of closing a
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,11,* {@link JsonGenerator} instance. This includes both closing
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,12,"* of physical resources (target), and logical content"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,13,* (json content tree)
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,14,*<p>
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,15,"* Specifically, features"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,16,* <code>JsonGenerator.Feature#AUTO_CLOSE_TARGET</code>
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,17,* and
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,18,* <code>JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT</code>
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,19,* are tested.
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,21,public class TestGeneratorClosing
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,22,extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,26,/* Helper classes
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,30,final static class MyWriter extends StringWriter
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,32,boolean mIsClosed = false;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,34,public MyWriter() { }
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,36,@Override
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,37,public void close() throws IOException {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,38,mIsClosed = true;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,39,super.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,41,public boolean isClosed() { return mIsClosed; }
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,44,final static class MyStream extends ByteArrayOutputStream
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,46,boolean mIsClosed = false;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,48,public MyStream() { }
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,50,@Override
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,51,public void close() throws IOException {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,52,mIsClosed = true;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,53,super.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,55,public boolean isClosed() { return mIsClosed; }
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,58,static class MyBytes extends ByteArrayOutputStream
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,60,public int flushed = 0;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,62,@Override
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,63,public void flush() throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,65,++flushed;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,66,super.flush();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,70,static class MyChars extends StringWriter
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,72,public int flushed = 0;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,74,@Override
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,75,public void flush()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,77,++flushed;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,78,super.flush();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,84,/* Unit tests
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,89,"* This unit test checks the default behaviour; with no auto-close, no"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,90,"* automatic closing should occur, nor explicit one unless specific"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,91,* forcing method is used.
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,93,public void testNoAutoCloseGenerator()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,94,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,96,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,98,// Check the default settings
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,99,assertTrue(f.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,100,// then change
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,101,f.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,102,assertFalse(f.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,103,MyWriter output = new MyWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,104,JsonGenerator jg = f.createJsonGenerator(output);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,106,// shouldn't be closed to begin with...
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,107,assertFalse(output.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,108,jg.writeNumber(39);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,109,// regular close won't close it either:
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,110,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,111,assertFalse(output.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,114,public void testCloseGenerator()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,115,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,117,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,118,f.enable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,119,MyWriter output = new MyWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,120,JsonGenerator jg = f.createJsonGenerator(output);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,122,// shouldn't be closed to begin with...
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,123,assertFalse(output.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,124,jg.writeNumber(39);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,125,// but close() should now close the writer
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,126,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,127,assertTrue(output.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,130,public void testNoAutoCloseOutputStream()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,131,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,133,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,134,f.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,135,MyStream output = new MyStream();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,136,"JsonGenerator jg = f.createJsonGenerator(output, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,138,assertFalse(output.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,139,jg.writeNumber(39);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,140,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,141,assertFalse(output.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,144,public void testAutoCloseArraysAndObjects()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,145,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,147,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,148,"// let's verify default setting, first:"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,149,assertTrue(f.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,150,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,152,"// First, test arrays:"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,153,JsonGenerator jg = f.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,154,jg.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,155,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,156,"assertEquals(""[]"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,158,// Then objects
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,159,sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,160,jg = f.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,161,jg.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,162,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,163,"assertEquals(""{}"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,166,public void testNoAutoCloseArraysAndObjects()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,167,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,169,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,170,f.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,171,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,172,JsonGenerator jg = f.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,173,jg.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,174,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,175,// shouldn't close
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,176,"assertEquals(""["", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,178,// Then objects
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,179,sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,180,jg = f.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,181,jg.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,182,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,183,"assertEquals(""{"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,186,// [JACKSON-401]
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,187,public void testAutoFlushOrNot() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,189,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,190,assertTrue(f.isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,191,MyChars sw = new MyChars();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,192,JsonGenerator jg = f.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,193,jg.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,194,jg.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,195,"assertEquals(0, sw.flushed);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,196,jg.flush();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,197,"assertEquals(1, sw.flushed);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,198,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,200,// ditto with stream
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,201,MyBytes bytes = new MyBytes();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,202,"jg = f.createJsonGenerator(bytes, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,203,jg.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,204,jg.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,205,"assertEquals(0, bytes.flushed);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,206,jg.flush();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,207,"assertEquals(1, bytes.flushed);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,208,"assertEquals(2, bytes.toByteArray().length);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,209,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,211,// then disable and we should not see flushing again...
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,212,f.disable(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,213,// first with a Writer
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,214,sw = new MyChars();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,215,jg = f.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,216,jg.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,217,jg.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,218,"assertEquals(0, sw.flushed);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,219,jg.flush();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,220,"assertEquals(0, sw.flushed);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,221,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,222,"assertEquals(""[]"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,224,// and then with OutputStream
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,225,bytes = new MyBytes();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,226,"jg = f.createJsonGenerator(bytes, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,227,jg.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,228,jg.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,229,"assertEquals(0, bytes.flushed);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,230,jg.flush();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,231,"assertEquals(0, bytes.flushed);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,232,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java,233,"assertEquals(2, bytes.toByteArray().length);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,4,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,5,import com.fasterxml.jackson.test.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,7,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,10,* Set of basic unit tests for verifying that copy-through methods
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,11,* of {@link JsonGenerator} work as expected.
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,13,public class TestGeneratorCopy
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,14,extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,16,public void testCopyRootTokens()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,17,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,19,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,20,"final String DOC = ""\""text\\non two lines\"" true false 2.0"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,21,JsonParser jp = jf.createJsonParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,22,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,23,JsonGenerator gen = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,25,JsonToken t;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,27,while ((t = jp.nextToken()) != null) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,28,gen.copyCurrentEvent(jp);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,29,// should not change parser state:
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,30,"assertToken(t, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,32,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,33,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,35,"assertEquals(""\""text\\non two lines\"" true false 2.0"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,38,public void testCopyArrayTokens()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,39,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,41,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,42,"final String DOC = ""123 [ 1, null, [ false ] ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,43,JsonParser jp = jf.createJsonParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,44,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,45,JsonGenerator gen = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,47,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,48,gen.copyCurrentEvent(jp);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,49,// should not change parser state:
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,50,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,51,"assertEquals(123, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,53,// And then let's copy the array
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,54,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,55,gen.copyCurrentStructure(jp);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,56,// which will advance parser to matching close Array
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,57,"assertToken(JsonToken.END_ARRAY, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,58,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,59,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,61,"assertEquals(""123 [1,null,[false]]"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,64,public void testCopyObjectTokens()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,65,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,67,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,68,"final String DOC = ""{ \""a\"":1, \""b\"":[{ \""c\"" : null }] }"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,69,JsonParser jp = jf.createJsonParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,70,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,71,JsonGenerator gen = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,73,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,74,gen.copyCurrentStructure(jp);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,75,// which will advance parser to matching end Object
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,76,"assertToken(JsonToken.END_OBJECT, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,77,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,78,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,80,"assertEquals(""{\""a\"":1,\""b\"":[{\""c\"":null}]}"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,4,import java.math.BigDecimal;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,5,import java.math.BigInteger;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,6,import java.util.concurrent.atomic.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,8,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,11,* Set of basic unit tests for verifying basic generator
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,12,* features.
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,14,public class TestGeneratorMisc
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,15,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,19,"/* Tests for closing, status"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,23,public void testIsClosed()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,24,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,26,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,27,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,28,boolean stream = ((i & 1) == 0);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,29,JsonGenerator jg = stream ?
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,30,jf.createJsonGenerator(new StringWriter())
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,31,": jf.createJsonGenerator(new ByteArrayOutputStream(), JsonEncoding.UTF8)"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,33,assertFalse(jg.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,34,jg.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,35,jg.writeNumber(-1);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,36,jg.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,37,assertFalse(jg.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,38,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,39,assertTrue(jg.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,40,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,41,assertTrue(jg.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,45,"// Also, ""very simple"" objects are supported even without Codec:"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,46,public void testSimpleWriteObject() throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,48,"// note: NOT mapping factory, for this test"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,49,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,50,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,51,JsonGenerator gen = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,52,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,54,// simple wrappers first
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,55,gen.writeObject(Integer.valueOf(1));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,56,gen.writeObject(Short.valueOf((short)-2));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,57,gen.writeObject(Long.valueOf(3));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,58,gen.writeObject(Byte.valueOf((byte)-4));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,59,gen.writeObject(Double.valueOf(0.25));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,60,gen.writeObject(Float.valueOf(-0.125f));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,61,gen.writeObject(Boolean.TRUE);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,62,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,63,String act = sw.toString().trim();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,64,"assertEquals(""[1,-2,3,-4,0.25,-0.125,true]"", act);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,66,// then other basic types
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,67,sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,68,gen = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,69,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,70,gen.writeObject(BigInteger.valueOf(1234));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,71,gen.writeObject(new BigDecimal(0.5));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,72,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,73,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,74,act = sw.toString().trim();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,75,"assertEquals(""[1234,0.5]"", act);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,77,// then Atomic types
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,78,sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,79,gen = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,80,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,81,gen.writeObject(new AtomicBoolean(false));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,82,gen.writeObject(new AtomicInteger(13));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,83,gen.writeObject(new AtomicLong(-127L));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,84,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,85,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,86,act = sw.toString().trim();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,87,"assertEquals(""[false,13,-127]"", act);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,92,/* Tests for raw output
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,96,public void testRaw() throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,98,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,99,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,100,JsonGenerator gen = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,101,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,102,"gen.writeRaw(""-123, true"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,103,"gen.writeRaw("", \""x\""  "");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,104,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,105,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,108,JsonParser jp = createParserUsingReader(sw.toString());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,109,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,110,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,111,"assertEquals(-123, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,112,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,113,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,114,"assertEquals(""x"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,115,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,116,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,119,public void testRawValue() throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,121,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,122,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,123,JsonGenerator gen = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,124,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,125,"gen.writeRawValue(""7"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,126,"gen.writeRawValue(""[ null ]"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,127,"gen.writeRawValue(""false"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,128,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,129,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,131,JsonParser jp = createParserUsingReader(sw.toString());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,132,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,134,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,135,"assertEquals(7, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,136,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,137,"assertToken(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,138,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,139,"assertToken(JsonToken.VALUE_FALSE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,141,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,142,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,147,/* Tests for binary data
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,152,"* This is really inadequate test, all in all, but should serve"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,153,* as some kind of sanity check. Reader-side should more thoroughly
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,154,"* test things, as it does need writers to construct the data first."
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,156,public void testBinaryWrite() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,158,_testBinaryWrite(false);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,159,_testBinaryWrite(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,162,private void _testBinaryWrite(boolean useCharBased) throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,164,"/* The usual sample input string, from Thomas Hobbes's ""Leviathan"""
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,165,* (via Wikipedia)
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,167,"final String INPUT = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,168,"final byte[] INPUT_BYTES = INPUT.getBytes(""US-ASCII"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,169,"// as per MIME variant, result minus lfs ="
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,170,final String OUTPUT =
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,171,"""TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz"""
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,172,"+""IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg"""
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,173,"+""dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu"""
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,174,"+""dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo"""
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,175,"+""ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4="""
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,178,/* Let's only test the standard base64 variant; but write
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,179,"* values in root, array and object contexts."
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,181,Base64Variant b64v = Base64Variants.getDefaultVariant();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,182,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,184,for (int i = 0; i < 3; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,185,JsonGenerator gen;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,186,ByteArrayOutputStream bout = new ByteArrayOutputStream(200);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,187,if (useCharBased) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,188,"gen = jf.createJsonGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,189,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,190,"gen = jf.createJsonGenerator(bout, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,193,switch (i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,194,case 0: // root
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,195,"gen.writeBinary(b64v, INPUT_BYTES, 0, INPUT_BYTES.length);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,196,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,197,case 1: // array
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,198,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,199,"gen.writeBinary(b64v, INPUT_BYTES, 0, INPUT_BYTES.length);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,200,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,201,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,202,default: // object
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,203,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,204,"gen.writeFieldName(""field"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,205,"gen.writeBinary(b64v, INPUT_BYTES, 0, INPUT_BYTES.length);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,206,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,207,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,209,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,211,JsonParser jp = jf.createJsonParser(new ByteArrayInputStream(bout.toByteArray()));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,213,// Need to skip other events before binary data:
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,214,switch (i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,215,case 0:
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,216,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,217,case 1:
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,218,"assertEquals(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,219,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,220,default:
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,221,"assertEquals(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,222,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,223,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,225,"assertEquals(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,226,String actualValue = jp.getText();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,227,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,228,"assertEquals(OUTPUT, actualValue);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,234,/* Tests for object writing
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,239,* Unit test that tries to trigger buffer-boundary conditions
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,241,public void testLongerObjects() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,243,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,244,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,245,boolean useChars = (i == 0);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,246,JsonGenerator jgen;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,247,ByteArrayOutputStream bout = new ByteArrayOutputStream(200);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,248,if (useChars) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,249,"jgen = jf.createJsonGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,250,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,251,"jgen = jf.createJsonGenerator(bout, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,254,jgen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,256,for (int rounds = 0; rounds < 1500; ++rounds) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,257,for (int letter = 'a'; letter <= 'z'; ++letter) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,258,for (int index = 0; index < 20; ++index) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,259,String name;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,260,if (letter > 'f') {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,261,"name = ""X""+letter+index;"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,262,} else if (letter > 'p') {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,263,"name = """"+letter+index;"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,264,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,265,"name = ""__""+index+letter;"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,267,jgen.writeFieldName(name);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,268,jgen.writeNumber(index-1);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,270,jgen.writeRaw('\n');
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,273,jgen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,274,jgen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,276,byte[] json = bout.toByteArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,277,JsonParser jp = jf.createJsonParser(json);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,278,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,279,for (int rounds = 0; rounds < 1500; ++rounds) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,280,for (int letter = 'a'; letter <= 'z'; ++letter) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,281,for (int index = 0; index < 20; ++index) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,282,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,283,String name;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,284,if (letter > 'f') {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,285,"name = ""X""+letter+index;"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,286,} else if (letter > 'p') {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,287,"name = """"+letter+index;"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,288,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,289,"name = ""__""+index+letter;"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,291,"assertEquals(name, jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,292,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,293,"assertEquals(index-1, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,297,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,4,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,5,import com.fasterxml.jackson.test.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,7,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,8,import java.math.BigDecimal;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,11,* Set of basic unit tests for verifying that the Object write methods
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,12,* of {@link JsonGenerator} work as expected.
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,14,public class TestGeneratorObject
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,15,extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,17,public void testEmptyObjectWrite()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,18,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,20,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,21,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,23,JsonStreamContext ctxt = gen.getOutputContext();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,24,assertTrue(ctxt.inRoot());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,25,assertFalse(ctxt.inArray());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,26,assertFalse(ctxt.inObject());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,27,"assertEquals(0, ctxt.getEntryCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,28,"assertEquals(0, ctxt.getCurrentIndex());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,30,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,32,ctxt = gen.getOutputContext();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,33,assertFalse(ctxt.inRoot());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,34,assertFalse(ctxt.inArray());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,35,assertTrue(ctxt.inObject());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,36,"assertEquals(0, ctxt.getEntryCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,37,"assertEquals(0, ctxt.getCurrentIndex());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,39,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,41,ctxt = gen.getOutputContext();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,42,assertTrue(ctxt.inRoot());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,43,assertFalse(ctxt.inArray());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,44,assertFalse(ctxt.inObject());
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,45,"assertEquals(1, ctxt.getEntryCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,46,// Index won't yet move
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,47,"assertEquals(0, ctxt.getCurrentIndex());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,49,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,51,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,52,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,53,"assertEquals(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,54,"assertEquals(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,55,"assertEquals(null, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,58,public void testInvalidObjectWrite()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,59,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,61,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,62,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,63,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,64,// Mismatch:
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,65,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,66,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,67,"fail(""Expected an exception for mismatched array/object write"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,68,} catch (JsonGenerationException e) {
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,69,"verifyException(e, ""Current context not an array"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,73,public void testSimpleObjectWrite()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,74,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,76,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,77,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,78,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,79,"gen.writeFieldName(""first"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,80,gen.writeNumber(-901);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,81,"gen.writeFieldName(""sec"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,82,gen.writeBoolean(false);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,83,"gen.writeFieldName(""3rd!""); // json field names are just strings, not ids with restrictions"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,84,"gen.writeString(""yee-haw"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,85,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,86,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,87,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,88,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,89,"assertEquals(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,90,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,91,"assertEquals(""first"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,92,"assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,93,"assertEquals(-901, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,94,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,95,"assertEquals(""sec"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,96,"assertEquals(JsonToken.VALUE_FALSE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,97,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,98,"assertEquals(""3rd!"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,99,"assertEquals(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,100,"assertEquals(""yee-haw"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,101,"assertEquals(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,102,"assertEquals(null, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,103,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,107,* Methods to test functionality added for [JACKSON-26]
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,109,public void testConvenienceMethods()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,110,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,112,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,113,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,114,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,116,"final BigDecimal dec = new BigDecimal(""0.1"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,117,"final String TEXT = ""\""some\nString!\"""";"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,119,"gen.writeNullField(""null"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,120,"gen.writeBooleanField(""bt"", true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,121,"gen.writeBooleanField(""bf"", false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,122,"gen.writeNumberField(""int"", -1289);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,123,"gen.writeNumberField(""dec"", dec);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,125,"gen.writeObjectFieldStart(""ob"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,126,"gen.writeStringField(""str"", TEXT);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,127,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,129,"gen.writeArrayFieldStart(""arr"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,130,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,132,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,133,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,135,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,136,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,137,"assertEquals(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,139,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,140,"assertEquals(""null"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,141,"assertEquals(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,142,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,143,"assertEquals(""bt"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,144,"assertEquals(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,145,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,146,"assertEquals(""bf"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,147,"assertEquals(JsonToken.VALUE_FALSE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,148,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,149,"assertEquals(""int"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,150,"assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,151,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,152,"assertEquals(""dec"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,153,"assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,155,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,156,"assertEquals(""ob"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,157,"assertEquals(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,158,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,159,"assertEquals(""str"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,160,"assertEquals(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,161,"assertEquals(TEXT, getAndVerifyText(jp));"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,162,"assertEquals(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,164,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,165,"assertEquals(""arr"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,166,"assertEquals(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,167,"assertEquals(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,169,"assertEquals(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,170,"assertEquals(null, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,171,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,175,* Tests to cover [JACKSON-164]
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,177,public void testConvenienceMethodsWithNulls()
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,178,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,180,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,181,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,182,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,184,"gen.writeStringField(""str"", null);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,185,"gen.writeNumberField(""num"", null);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,186,"gen.writeObjectField(""obj"", null);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,188,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,189,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,191,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,192,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,193,"assertEquals(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,195,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,196,"assertEquals(""str"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,197,"assertEquals(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,199,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,200,"assertEquals(""num"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,201,"assertEquals(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,203,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,204,"assertEquals(""obj"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,205,"assertEquals(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,207,"assertEquals(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,6,import com.fasterxml.jackson.core.io.SerializedString;
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,8,public class TestGeneratorWithSerializedString
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,9,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,11,"final static String NAME_WITH_QUOTES = ""\""name\"""";"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,12,"final static String NAME_WITH_LATIN1 = ""P\u00f6ll\u00f6"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,14,private final SerializedString quotedName = new SerializedString(NAME_WITH_QUOTES);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,15,private final SerializedString latin1Name = new SerializedString(NAME_WITH_LATIN1);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,17,public void testSimple() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,19,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,21,// First using char-backed generator
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,22,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,23,JsonGenerator jgen = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,24,_writeSimple(jgen);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,25,jgen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,26,String json = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,27,_verifySimple(jf.createJsonParser(json));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,29,// then using UTF-8
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,30,ByteArrayOutputStream out = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,31,"jgen = jf.createJsonGenerator(out, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,32,_writeSimple(jgen);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,33,jgen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,34,byte[] jsonB = out.toByteArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,35,_verifySimple(jf.createJsonParser(jsonB));
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,40,/* Helper methods
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,44,private void _writeSimple(JsonGenerator jgen) throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,46,// Let's just write array of 2 objects
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,47,jgen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,49,jgen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,50,jgen.writeFieldName(quotedName);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,51,"jgen.writeString(""a"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,52,jgen.writeFieldName(latin1Name);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,53,"jgen.writeString(""b"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,54,jgen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,56,jgen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,57,jgen.writeFieldName(latin1Name);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,58,"jgen.writeString(""c"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,59,jgen.writeFieldName(quotedName);
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,60,"jgen.writeString(""d"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,61,jgen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,63,jgen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,66,private void _verifySimple(JsonParser jp) throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,68,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,70,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,71,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,72,"assertEquals(NAME_WITH_QUOTES, jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,73,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,74,"assertEquals(""a"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,75,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,76,"assertEquals(NAME_WITH_LATIN1, jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,77,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,78,"assertEquals(""b"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,79,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,81,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,82,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,83,"assertEquals(NAME_WITH_LATIN1, jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,84,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,85,"assertEquals(""c"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,86,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,87,"assertEquals(NAME_WITH_QUOTES, jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,88,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,89,"assertEquals(""d"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,90,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,92,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java,93,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,7,public class TestJsonFactory
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,8,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,10,public void testGeneratorFeatures() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,12,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,13,assertNull(f.getCodec());
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,15,"f.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,16,assertTrue(f.isEnabled(JsonGenerator.Feature.QUOTE_FIELD_NAMES));
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,17,"f.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,18,assertFalse(f.isEnabled(JsonGenerator.Feature.QUOTE_FIELD_NAMES));
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,21,public void testParserFeatures() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,23,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,24,assertNull(f.getCodec());
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,26,"f.configure(JsonParser.Feature.INTERN_FIELD_NAMES, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,27,assertTrue(f.isEnabled(JsonParser.Feature.INTERN_FIELD_NAMES));
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,28,"f.configure(JsonParser.Feature.INTERN_FIELD_NAMES, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,29,assertFalse(f.isEnabled(JsonParser.Feature.INTERN_FIELD_NAMES));
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,32,public void testJsonWithFiles() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,34,"File file = File.createTempFile(""jackson-test"", null);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,35,file.deleteOnExit();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,37,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,39,// First: create file via generator.. and use an odd encoding
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,40,"JsonGenerator jg = f.createJsonGenerator(file, JsonEncoding.UTF16_LE);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,41,jg.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,42,"jg.writeRaw(""   "");"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,43,jg.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,44,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,46,// Ok: first read file directly
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,47,JsonParser jp = f.createJsonParser(file);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,48,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,49,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,50,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,51,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,53,// Then via URL:
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,54,jp = f.createJsonParser(file.toURI().toURL());
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,55,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,56,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,57,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,58,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,60,"// ok, delete once we are done"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java,61,file.delete();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,3,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,5,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,8,* Set of basic unit tests for verifying that the basic generator
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,9,* functionality works as expected.
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,11,public class TestJsonGenerator
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,12,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,14,"// // // First, tests for primitive (non-structured) values"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,16,public void testStringWrite()
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,17,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,19,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,20,"String[] inputStrings = new String[] { """", ""X"", ""1234567890"" };"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,21,for (int useReader = 0; useReader < 2; ++useReader) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,22,for (int writeString = 0; writeString < 2; ++writeString) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,23,for (int strIx = 0; strIx < inputStrings.length; ++strIx) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,24,String input = inputStrings[strIx];
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,25,JsonGenerator gen;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,26,ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,27,if (useReader != 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,28,"gen = jf.createJsonGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,29,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,30,"gen = jf.createJsonGenerator(bout, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,32,if (writeString > 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,33,gen.writeString(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,34,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,35,int len = input.length();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,36,char[] buffer = new char[len + 20];
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,37,// Let's use non-zero base offset too...
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,38,"input.getChars(0, len, buffer, strIx);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,39,"gen.writeString(buffer, strIx, len);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,41,gen.flush();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,42,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,43,JsonParser jp = jf.createJsonParser(new ByteArrayInputStream(bout.toByteArray()));
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,45,JsonToken t = jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,46,"assertNotNull(""Document \""""+bout.toString(""UTF-8"")+""\"" yielded no tokens"", t);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,47,"assertEquals(JsonToken.VALUE_STRING, t);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,48,"assertEquals(input, jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,49,"assertEquals(null, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,50,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,56,public void testIntWrite()
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,57,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,59,doTestIntWrite(false);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,60,doTestIntWrite(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,63,public void testLongWrite()
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,64,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,66,doTestLongWrite(false);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,67,doTestLongWrite(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,70,public void testBooleanWrite()
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,71,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,73,for (int i = 0; i < 4; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,74,boolean state = (i & 1) == 0;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,75,boolean pad = (i & 2) == 0;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,76,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,77,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,78,gen.writeBoolean(state);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,79,if (pad) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,80,"gen.writeRaw("" "");"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,82,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,83,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,84,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,85,JsonToken t = jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,86,String exp = Boolean.valueOf(state).toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,87,if (!exp.equals(jp.getText())) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,88,"fail(""Expected '""+exp+""', got '""+jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,90,"assertEquals(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE, t);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,91,"assertEquals(null, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,92,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,96,public void testNullWrite()
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,97,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,99,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,100,boolean pad = (i & 1) == 0;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,101,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,102,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,103,gen.writeNull();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,104,if (pad) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,105,"gen.writeRaw("" "");"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,107,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,108,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,109,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,110,JsonToken t = jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,111,"String exp = ""null"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,112,if (!exp.equals(jp.getText())) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,113,"fail(""Expected '""+exp+""', got '""+jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,115,"assertEquals(JsonToken.VALUE_NULL, t);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,116,"assertEquals(null, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,117,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,121,// // Then root-level output testing
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,123,public void testRootIntsWrite()
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,124,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,126,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,127,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,128,gen.writeNumber(1);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,129,gen.writeNumber(2);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,130,gen.writeNumber(-13);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,131,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,133,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,135,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,136,"assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,137,"assertEquals(1, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,138,"assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,139,"assertEquals(2, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,140,"assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,141,"assertEquals(-13, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,142,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,145,// Convenience methods
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,147,public void testFieldValueWrites()
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,148,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,150,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,151,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,152,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,153,"gen.writeNumberField(""long"", 3L);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,154,"gen.writeNumberField(""double"", 0.25);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,155,"gen.writeNumberField(""float"", -0.25f);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,156,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,157,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,159,"assertEquals(""{\""long\"":3,\""double\"":0.25,\""float\"":-0.25}"", sw.toString().trim());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,164,/* Internal methods
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,168,private void doTestIntWrite(boolean pad)
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,169,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,171,int[] VALUES = new int[] {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,172,"0, 1, -9, 32, -32, 57, 13240, -9999, Integer.MAX_VALUE, Integer.MAX_VALUE"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,174,for (int i = 0; i < VALUES.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,175,int VALUE = VALUES[i];
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,176,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,177,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,178,gen.writeNumber(VALUE);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,179,if (pad) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,180,"gen.writeRaw("" "");"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,182,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,183,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,184,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,185,JsonToken t = jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,186,"assertNotNull(""Document \""""+docStr+""\"" yielded no tokens"", t);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,187,// Number are always available as lexical representation too
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,188,"String exp = """"+VALUE;"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,189,if (!exp.equals(jp.getText())) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,190,"fail(""Expected '""+exp+""', got '""+jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,192,"assertEquals(JsonToken.VALUE_NUMBER_INT, t);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,193,"assertEquals(VALUE, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,194,"assertEquals(null, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,195,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,199,private void doTestLongWrite(boolean pad)
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,200,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,202,long[] VALUES = new long[] {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,203,"0L, 1L, -1L, -12005002294L, Long.MIN_VALUE, Long.MAX_VALUE"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,205,for (int i = 0; i < VALUES.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,206,long VALUE = VALUES[i];
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,207,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,208,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,209,gen.writeNumber(VALUE);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,210,if (pad) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,211,"gen.writeRaw("" "");"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,213,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,214,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,215,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,216,JsonToken t = jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,217,"assertNotNull(""Document \""""+docStr+""\"" yielded no tokens"", t);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,218,"String exp = """"+VALUE;"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,219,if (!exp.equals(jp.getText())) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,220,"fail(""Expected '""+exp+""', got '""+jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,222,"assertEquals(JsonToken.VALUE_NUMBER_INT, t);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,223,"assertEquals(VALUE, jp.getLongValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,224,"assertEquals(null, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java,225,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,4,import java.math.BigDecimal;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,5,import java.math.BigInteger;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,7,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,10,* Set of basic unit tests for verifying that the basic generator
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,11,* functionality works as expected.
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,13,public class TestJsonGeneratorFeatures
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,14,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,16,public void testConfigDefaults() throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,18,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,19,JsonGenerator jg = jf.createJsonGenerator(new StringWriter());
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,20,assertFalse(jg.isEnabled(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,23,public void testFieldNameQuoting() throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,25,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,26,"// by default, quoting should be enabled"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,27,"_testFieldNameQuoting(jf, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,28,// can disable it
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,29,jf.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,30,"_testFieldNameQuoting(jf, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,31,// and (re)enable:
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,32,jf.enable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,33,"_testFieldNameQuoting(jf, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,36,public void testNonNumericQuoting()
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,37,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,39,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,40,"// by default, quoting should be enabled"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,41,"_testNonNumericQuoting(jf, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,42,// can disable it
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,43,jf.disable(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,44,"_testNonNumericQuoting(jf, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,45,// and (re)enable:
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,46,jf.enable(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,47,"_testNonNumericQuoting(jf, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,51,"* Testing for [JACKSON-176], ability to force serializing numbers"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,52,* as JSON Strings.
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,54,public void testNumbersAsJSONStrings() throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,56,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,57,// by default should output numbers as-is:
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,58,"assertEquals(""[1,2,1.25,2.25,3001,0.5,-1]"", _writeNumbers(jf));"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,60,"// but if overridden, quotes as Strings"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,61,"jf.configure(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,62,"assertEquals(""[\""1\"",\""2\"",\""1.25\"",\""2.25\"",\""3001\"",\""0.5\"",\""-1\""]"","
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,63,_writeNumbers(jf));
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,66,private String _writeNumbers(JsonFactory jf) throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,68,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,69,JsonGenerator jg = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,71,jg.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,72,jg.writeNumber(1);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,73,jg.writeNumber(2L);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,74,jg.writeNumber(1.25);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,75,jg.writeNumber(2.25f);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,76,jg.writeNumber(BigInteger.valueOf(3001));
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,77,jg.writeNumber(BigDecimal.valueOf(0.5));
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,78,"jg.writeNumber(""-1"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,79,jg.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,80,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,82,return sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,87,/* Helper methods
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,91,"private void _testFieldNameQuoting(JsonFactory jf, boolean quoted)"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,92,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,94,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,95,JsonGenerator jg = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,96,jg.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,97,"jg.writeFieldName(""foo"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,98,jg.writeNumber(1);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,99,jg.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,100,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,102,String result = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,103,if (quoted) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,104,"assertEquals(""{\""foo\"":1}"", result);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,105,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,106,"assertEquals(""{foo:1}"", result);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,109,"private void _testNonNumericQuoting(JsonFactory jf, boolean quoted)"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,110,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,112,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,113,JsonGenerator jg = jf.createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,114,jg.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,115,"jg.writeFieldName(""double"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,116,jg.writeNumber(Double.NaN);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,117,jg.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,118,jg.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,119,"jg.writeFieldName(""float"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,120,jg.writeNumber(Float.NaN);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,121,jg.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,122,jg.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,124,String result = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,125,if (quoted) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,126,"assertEquals(""{\""double\"":\""NaN\""} {\""float\"":\""NaN\""}"", result);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,127,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java,128,"assertEquals(""{\""double\"":NaN} {\""float\"":NaN}"", result);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,3,import java.io.IOException;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,6,import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,9,* Unit tests for verifying that {@link JsonParser} instances properly
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,10,* merge back symbols to the root symbol table
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,12,public class TestJsonParserSymbols
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,13,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,16,"* To peek into state of ""root"" symbol tables (parent of all symbol"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,17,* tables for parsers constructed by this factory) we need to
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,18,* add some methods.
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,20,final static class MyJsonFactory extends JsonFactory
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,22,public int byteSymbolCount() { return _rootByteSymbols.size(); }
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,23,public int charSymbolCount() { return _rootCharSymbols.size(); }
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,26,"final static String JSON = ""{ \""a\"" : 3, \""aaa\"" : 4, \""_a\"" : 0 }"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,28,public void testByteSymbolsWithClose() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,30,_testWithClose(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,33,public void testByteSymbolsWithEOF() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,35,MyJsonFactory f = new MyJsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,36,"JsonParser jp = _getParser(f, JSON, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,37,while (jp.nextToken() != null) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,38,// shouldn't update before hitting end
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,39,"assertEquals(0, f.byteSymbolCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,41,// but now should have it after hitting EOF
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,42,"assertEquals(3, f.byteSymbolCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,43,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,44,"assertEquals(3, f.byteSymbolCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,47,public void testCharSymbolsWithClose() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,49,_testWithClose(false);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,52,public void testCharSymbolsWithEOF() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,54,MyJsonFactory f = new MyJsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,55,"JsonParser jp = _getParser(f, JSON, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,56,while (jp.nextToken() != null) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,57,// shouldn't update before hitting end
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,58,"assertEquals(0, f.charSymbolCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,60,// but now should have it
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,61,"assertEquals(3, f.charSymbolCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,62,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,63,"assertEquals(3, f.charSymbolCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,68,// Helper methods
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,72,private void _testWithClose(boolean useBytes) throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,74,MyJsonFactory f = new MyJsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,75,"JsonParser jp = _getParser(f, JSON, useBytes);"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,76,// Let's check 2 names
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,77,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,78,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,79,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,80,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,82,// shouldn't update before close or EOF:
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,83,"assertEquals(0, useBytes ? f.byteSymbolCount() : f.charSymbolCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,84,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,85,// but should after close
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,86,"assertEquals(2, useBytes ? f.byteSymbolCount() : f.charSymbolCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,89,"private JsonParser _getParser(MyJsonFactory f, String doc, boolean useBytes) throws IOException"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,91,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,92,if (useBytes) {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,93,"jp = f.createJsonParser(doc.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,94,"assertEquals(UTF8StreamJsonParser.class, jp.getClass());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,95,"assertEquals(0, f.byteSymbolCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,96,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,97,jp = f.createJsonParser(doc);
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,98,"assertEquals(UTF8StreamJsonParser.class, jp.getClass());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,99,"assertEquals(0, f.charSymbolCount());"
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,101,return jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,3,import com.fasterxml.jackson.core.io.NumberInput;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,6,* Set of basic unit tests for verifying that the low-level number
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,7,* handling methods work as expected.
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,9,public class TestNumberParsing
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,10,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,12,public void testIntParsing() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,14,"char[] testChars = ""123456789"".toCharArray();"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,16,"assertEquals(3, NumberInput.parseInt(testChars, 2, 1));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,17,"assertEquals(123, NumberInput.parseInt(testChars, 0, 3));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,18,"assertEquals(2345, NumberInput.parseInt(testChars, 1, 4));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,19,"assertEquals(9, NumberInput.parseInt(testChars, 8, 1));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,20,"assertEquals(456789, NumberInput.parseInt(testChars, 3, 6));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,21,"assertEquals(23456, NumberInput.parseInt(testChars, 1, 5));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,22,"assertEquals(123456789, NumberInput.parseInt(testChars, 0, 9));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,24,"testChars = ""32"".toCharArray();"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,25,"assertEquals(32, NumberInput.parseInt(testChars, 0, 2));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,26,"testChars = ""189"".toCharArray();"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,27,"assertEquals(189, NumberInput.parseInt(testChars, 0, 3));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,29,"testChars = ""10"".toCharArray();"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,30,"assertEquals(10, NumberInput.parseInt(testChars, 0, 2));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,31,"assertEquals(0, NumberInput.parseInt(testChars, 1, 1));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,34,public void testIntParsingWithStrings() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,36,"assertEquals(3, NumberInput.parseInt(""3""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,37,"assertEquals(0, NumberInput.parseInt(""0""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,38,"assertEquals(-3, NumberInput.parseInt(""-3""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,39,"assertEquals(27, NumberInput.parseInt(""27""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,40,"assertEquals(-31, NumberInput.parseInt(""-31""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,41,"assertEquals(271, NumberInput.parseInt(""271""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,42,"assertEquals(-131, NumberInput.parseInt(""-131""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,43,"assertEquals(2709, NumberInput.parseInt(""2709""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,44,"assertEquals(-9999, NumberInput.parseInt(""-9999""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,45,"assertEquals(Integer.MIN_VALUE, NumberInput.parseInt(""""+Integer.MIN_VALUE));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,46,"assertEquals(Integer.MAX_VALUE, NumberInput.parseInt(""""+Integer.MAX_VALUE));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,49,public void testLongParsing() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,51,"char[] testChars = ""123456789012345678"".toCharArray();"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,53,"assertEquals(123456789012345678L, NumberInput.parseLong(testChars, 0, testChars.length));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,56,// Unit test for [JACKSON-491]
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,57,public void testLongBoundsChecks() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,59,String minLong = String.valueOf(Long.MIN_VALUE).substring(1);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,60,String maxLong = String.valueOf(Long.MAX_VALUE);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,61,"final String VALUE_491 = ""1323372036854775807""; // is within range (JACKSON-491)"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,62,"final String OVERFLOW =  ""9999999999999999999""; // and this one is clearly out"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,64,"assertTrue(NumberInput.inLongRange(minLong, true));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,65,"assertTrue(NumberInput.inLongRange(maxLong, false));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,66,"assertTrue(NumberInput.inLongRange(VALUE_491, true));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,67,"assertTrue(NumberInput.inLongRange(VALUE_491, false));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,68,"assertFalse(NumberInput.inLongRange(OVERFLOW, false));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,69,"assertFalse(NumberInput.inLongRange(OVERFLOW, true));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,71,char[] cbuf = minLong.toCharArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,72,"assertTrue(NumberInput.inLongRange(cbuf, 0, cbuf.length, true));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,73,cbuf = maxLong.toCharArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,74,"assertTrue(NumberInput.inLongRange(cbuf, 0, cbuf.length, false));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,75,cbuf = VALUE_491.toCharArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,76,"assertTrue(NumberInput.inLongRange(cbuf, 0, cbuf.length, true));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,77,"assertTrue(NumberInput.inLongRange(cbuf, 0, cbuf.length, false));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,78,cbuf = OVERFLOW.toCharArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,79,"assertFalse(NumberInput.inLongRange(cbuf, 0, cbuf.length, true));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java,80,"assertFalse(NumberInput.inLongRange(cbuf, 0, cbuf.length, false));"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,3,import java.math.BigDecimal;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,4,import java.math.BigInteger;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,6,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,9,* Set of basic unit tests for verifying that the basic parser
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,10,* functionality works as expected.
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,12,public class TestNumericValues
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,13,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,15,public void testSimpleInt()
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,16,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,18,int EXP_I = 1234;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,20,"JsonParser jp = createParserUsingReader(""[ ""+EXP_I+"" ]"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,21,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,22,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,23,"assertEquals(JsonParser.NumberType.INT, jp.getNumberType());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,24,"assertEquals(""""+EXP_I, jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,26,"assertEquals(EXP_I, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,27,"assertEquals((long) EXP_I, jp.getLongValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,28,"assertEquals((double) EXP_I, jp.getDoubleValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,29,"assertEquals(BigDecimal.valueOf((long) EXP_I), jp.getDecimalValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,32,public void testIntRange()
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,33,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,35,"// let's test with readers and streams, separate code paths:"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,36,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,37,"String input = ""[ ""+Integer.MAX_VALUE+"",""+Integer.MIN_VALUE+"" ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,38,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,39,if (i == 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,40,jp = createParserUsingReader(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,41,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,42,"jp = this.createParserUsingStream(input, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,44,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,45,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,46,"assertEquals(JsonParser.NumberType.INT, jp.getNumberType());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,47,"assertEquals(Integer.MAX_VALUE, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,49,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,50,"assertEquals(JsonParser.NumberType.INT, jp.getNumberType());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,51,"assertEquals(Integer.MIN_VALUE, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,55,public void testInvalidIntAccess()
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,56,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,58,"JsonParser jp = createParserUsingReader(""[ \""abc\"" ]"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,59,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,60,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,61,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,62,jp.getIntValue();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,63,"fail(""Expected error trying to call getIntValue on non-numeric value"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,64,} catch (JsonParseException e) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,65,"verifyException(e, ""can not use numeric value accessors"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,69,public void testSimpleLong()
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,70,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,72,long EXP_L = 12345678907L;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,74,"JsonParser jp = createParserUsingReader(""[ ""+EXP_L+"" ]"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,75,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,76,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,77,"// beyond int, should be long"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,78,"assertEquals(JsonParser.NumberType.LONG, jp.getNumberType());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,79,"assertEquals(""""+EXP_L, jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,81,"assertEquals(EXP_L, jp.getLongValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,82,// Should get an exception if trying to convert to int
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,83,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,84,jp.getIntValue();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,85,} catch (JsonParseException jpe) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,86,"verifyException(jpe, ""out of range"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,88,"assertEquals((double) EXP_L, jp.getDoubleValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,89,"assertEquals(BigDecimal.valueOf((long) EXP_L), jp.getDecimalValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,92,public void testLongRange()
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,93,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,95,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,96,long belowMinInt = -1L + Integer.MIN_VALUE;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,97,long aboveMaxInt = 1L + Integer.MAX_VALUE;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,98,"String input = ""[ ""+Long.MAX_VALUE+"",""+Long.MIN_VALUE+"",""+aboveMaxInt+"", ""+belowMinInt+"" ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,99,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,100,if (i == 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,101,jp = createParserUsingReader(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,102,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,103,"jp = this.createParserUsingStream(input, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,105,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,106,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,107,"assertEquals(JsonParser.NumberType.LONG, jp.getNumberType());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,108,"assertEquals(Long.MAX_VALUE, jp.getLongValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,110,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,111,"assertEquals(JsonParser.NumberType.LONG, jp.getNumberType());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,112,"assertEquals(Long.MIN_VALUE, jp.getLongValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,114,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,115,"assertEquals(JsonParser.NumberType.LONG, jp.getNumberType());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,116,"assertEquals(aboveMaxInt, jp.getLongValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,118,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,119,"assertEquals(JsonParser.NumberType.LONG, jp.getNumberType());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,120,"assertEquals(belowMinInt, jp.getLongValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,123,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,124,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,128,public void testBigDecimalRange()
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,129,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,131,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,132,// let's test first values outside of Long range
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,133,BigInteger small = new BigDecimal(Long.MIN_VALUE).toBigInteger();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,134,small = small.subtract(BigInteger.ONE);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,135,BigInteger big = new BigDecimal(Long.MAX_VALUE).toBigInteger();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,136,big = big.add(BigInteger.ONE);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,137,"String input = ""[ ""+small+""  ,  ""+big+""]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,138,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,139,if (i == 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,140,jp = createParserUsingReader(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,141,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,142,"jp = this.createParserUsingStream(input, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,144,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,145,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,146,"assertEquals(JsonParser.NumberType.BIG_INTEGER, jp.getNumberType());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,147,"assertEquals(small, jp.getBigIntegerValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,148,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,149,"assertEquals(JsonParser.NumberType.BIG_INTEGER, jp.getNumberType());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,150,"assertEquals(big, jp.getBigIntegerValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,151,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,152,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,156,public void testSimpleDouble()
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,157,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,159,final String[] INPUTS = new String[] {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,160,"""1234.00"", ""2.1101567E-16"", ""1.0e5"", ""2.5e+5"", ""9e4"", ""-12e-3"", ""0.25"""
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,162,for (int input = 0; input < 2; ++input) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,163,for (int i = 0; i < INPUTS.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,165,"/* Testing double is more difficult, given the rounding"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,166,* errors and such. But let's try anyways.
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,168,String STR = INPUTS[i];
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,169,double EXP_D = Double.parseDouble(STR);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,170,"String DOC = ""[""+STR+""]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,172,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,174,if (input == 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,175,"jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,176,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,177,jp = createParserUsingReader(DOC);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,179,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,180,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,181,"assertEquals(STR, jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,182,"assertEquals(EXP_D, jp.getDoubleValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,183,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,184,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,189,public void testNumbers()
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,190,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,192,"final String DOC = ""[ -13, 8100200300, 13.5, 0.00010, -2.033 ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,194,for (int input = 0; input < 2; ++input) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,195,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,197,if (input == 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,198,"jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,199,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,200,jp = createParserUsingReader(DOC);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,203,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,205,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,206,"assertEquals(-13, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,207,"assertEquals(-13L, jp.getLongValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,208,"assertEquals(-13., jp.getDoubleValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,209,"assertEquals(""-13"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,211,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,212,"assertEquals(8100200300L, jp.getLongValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,213,// Should get exception for overflow:
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,214,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,215,/*int x =*/ jp.getIntValue();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,216,"fail(""Expected an exception for overflow"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,217,} catch (Exception e) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,218,"verifyException(e, ""out of range"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,220,"assertEquals(8100200300., jp.getDoubleValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,221,"assertEquals(""8100200300"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,223,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,224,"assertEquals(13, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,225,"assertEquals(13L, jp.getLongValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,226,"assertEquals(13.5, jp.getDoubleValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,227,"assertEquals(""13.5"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,229,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,230,"assertEquals(0, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,231,"assertEquals(0L, jp.getLongValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,232,"assertEquals(0.00010, jp.getDoubleValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,233,"assertEquals(""0.00010"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,235,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,236,"assertEquals(-2, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,237,"assertEquals(-2L, jp.getLongValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,238,"assertEquals(-2.033, jp.getDoubleValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,239,"assertEquals(""-2.033"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,241,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,246,* Method that tries to test that number parsing works in cases where
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,247,* input is split between buffer boundaries.
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,249,public void testParsingOfLongerSequences()
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,250,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,252,"double[] values = new double[] { 0.01, -10.5, 2.1e9, 4.0e-8 };"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,253,StringBuilder sb = new StringBuilder();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,255,for (int i = 0; i < values.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,256,if (i > 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,257,"sb.append(',');"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,259,sb.append(values[i]);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,261,String segment = sb.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,263,int COUNT = 1000;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,264,sb = new StringBuilder(COUNT * segment.length() + 20);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,265,"sb.append(""["");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,266,for (int i = 0; i < COUNT; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,267,if (i > 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,268,"sb.append(',');"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,270,sb.append(segment);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,271,sb.append('\n');
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,272,// let's add somewhat arbitray number of spaces
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,273,int x = (i & 3);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,274,if (i > 300) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,275,x += i % 5;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,277,while (--x > 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,278,sb.append(' ');
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,281,"sb.append(""]"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,282,String DOC = sb.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,284,for (int input = 0; input < 2; ++input) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,285,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,287,if (input == 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,288,"jp = createParserUsingStream(DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,289,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,290,jp = createParserUsingReader(DOC);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,293,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,294,for (int i = 0; i < COUNT; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,295,for (double d : values) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,296,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,297,"assertEquals(d, jp.getDoubleValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,300,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,306,/* New tests for 1.3 features
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,310,public void testSimpleBoolean()
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,311,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,313,"JsonParser jp = createParserUsingReader(""[ true ]"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,314,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,315,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,316,"assertEquals(true, jp.getBooleanValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,319,public void testInvalidBooleanAccess()
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,320,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,322,"JsonParser jp = createParserUsingReader(""[ \""abc\"" ]"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,323,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,324,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,325,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,326,jp.getBooleanValue();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,327,"fail(""Expected error trying to call getBooleanValue on non-boolean value"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,328,} catch (JsonParseException e) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,329,"verifyException(e, ""not of boolean type"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,3,import static org.junit.Assert.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,6,import com.fasterxml.jackson.test.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,8,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,11,* Set of basic unit tests that verify that the closing (or not) of
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,12,* the underlying source occurs as expected and specified
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,13,* by documentation.
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,15,public class TestParserClosing
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,16,extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,19,"* This unit test checks the default behaviour; with no auto-close, no"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,20,"* automatic closing should occur, nor explicit one unless specific"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,21,* forcing method is used.
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,23,public void testNoAutoCloseReader()
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,24,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,26,"final String DOC = ""[ 1 ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,28,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,30,// Check the default settings
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,31,assertTrue(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,32,// then change
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,33,f.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,34,assertFalse(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,35,MyReader input = new MyReader(DOC);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,36,JsonParser jp = f.createJsonParser(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,38,// shouldn't be closed to begin with...
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,39,assertFalse(input.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,40,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,41,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,42,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,43,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,44,// normally would be closed now
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,45,assertFalse(input.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,46,// regular close won't close it either:
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,47,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,48,assertFalse(input.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,52,public void testAutoCloseReader() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,54,"final String DOC = ""[ 1 ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,56,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,57,f.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,58,assertTrue(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,59,MyReader input = new MyReader(DOC);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,60,JsonParser jp = f.createJsonParser(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,61,assertFalse(input.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,62,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,63,// but can close half-way through
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,64,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,65,assertTrue(input.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,67,// And then let's test implicit close at the end too:
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,68,input = new MyReader(DOC);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,69,jp = f.createJsonParser(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,70,assertFalse(input.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,71,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,72,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,73,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,74,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,75,assertTrue(input.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,78,public void testNoAutoCloseInputStream()
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,79,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,81,"final String DOC = ""[ 1 ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,82,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,84,f.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,85,"MyStream input = new MyStream(DOC.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,86,JsonParser jp = f.createJsonParser(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,88,// shouldn't be closed to begin with...
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,89,assertFalse(input.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,90,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,91,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,92,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,93,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,94,// normally would be closed now
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,95,assertFalse(input.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,96,// regular close won't close it either:
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,97,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,98,assertFalse(input.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,101,// [JACKSON-287]
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,102,public void testReleaseContentBytes() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,104,"byte[] input = ""[1]foobar"".getBytes(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,105,JsonParser jp = new JsonFactory().createJsonParser(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,106,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,107,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,108,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,109,ByteArrayOutputStream out = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,110,// theoretically could have only read subset; but current impl is more greedy
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,111,"assertEquals(6, jp.releaseBuffered(out));"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,112,"assertArrayEquals(""foobar"".getBytes(""UTF-8""), out.toByteArray());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,115,public void testReleaseContentChars() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,117,"JsonParser jp = new JsonFactory().createJsonParser(""[true]xyz"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,118,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,119,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,120,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,121,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,122,// theoretically could have only read subset; but current impl is more greedy
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,123,"assertEquals(3, jp.releaseBuffered(sw));"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,124,"assertEquals(""xyz"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,129,/* Helper classes
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,133,final static class MyReader extends StringReader
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,135,boolean mIsClosed = false;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,137,public MyReader(String contents) {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,138,super(contents);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,141,@Override
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,142,public void close() {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,143,mIsClosed = true;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,144,super.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,147,public boolean isClosed() { return mIsClosed; }
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,150,final static class MyStream extends ByteArrayInputStream
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,152,boolean mIsClosed = false;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,154,public MyStream(byte[] data) {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,155,super(data);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,158,@Override
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,159,public void close() throws IOException {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,160,mIsClosed = true;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,161,super.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java,164,public boolean isClosed() { return mIsClosed; }
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,3,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,6,* Unit tests for verifying that additional <code>JsonParser.Feature</code>
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,7,* settings work as expected.
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,9,public class TestParserFeatures
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,10,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,12,public void testDefaultSettings()
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,14,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,15,assertTrue(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,16,assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,17,assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,18,assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_SINGLE_QUOTES));
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,19,assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS));
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,22,public void testQuotesRequired() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,24,_testQuotesRequired(false);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,25,_testQuotesRequired(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,29,"// // Tests for [JACKSON-208], unquoted tabs:"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,31,public void testTabsDefault() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,33,_testTabsDefault(false);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,34,_testTabsDefault(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,37,public void testTabsEnabled() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,39,_testTabsEnabled(false);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,40,_testTabsEnabled(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,45,/* Secondary test methods
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,49,private void _testQuotesRequired(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,51,"final String JSON = ""{ test : 3 }"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,52,"final String EXP_ERROR_FRAGMENT = ""was expecting double-quote to start"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,53,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,54,JsonParser jp = useStream ?
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,55,"createParserUsingStream(f, JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,56,": createParserUsingReader(f, JSON)"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,59,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,60,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,61,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,62,} catch (JsonParseException je) {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,63,"verifyException(je, EXP_ERROR_FRAGMENT);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,67,// // // Tests for [JACKSON-208]
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,69,private void _testTabsDefault(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,71,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,72,"// First, let's see that by default unquoted tabs are illegal"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,73,"String JSON = ""[\""tab:\t\""]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,74,"JsonParser jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"") : createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,75,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,76,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,77,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,78,jp.getText();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,79,"fail(""Expected exception"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,80,} catch (JsonParseException e) {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,81,"verifyException(e, ""Illegal unquoted character"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,85,private void _testTabsEnabled(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,87,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,88,"f.configure(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,90,"String FIELD = ""a\tb"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,91,"String VALUE = ""\t"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,92,"String JSON = ""{ ""+quote(FIELD)+"" : ""+quote(VALUE)+""}"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,93,"JsonParser jp = useStream ? createParserUsingStream(f, JSON, ""UTF-8"") : createParserUsingReader(f, JSON);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,95,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,96,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,97,"assertEquals(FIELD, jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,98,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,99,"assertEquals(VALUE, jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java,100,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,4,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,5,import com.fasterxml.jackson.test.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,7,import java.io.IOException;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,10,* Set of basic unit tests for verifying that the basic parser
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,11,* functionality works as expected.
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,13,public class TestParserLinefeeds
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,14,extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,16,public void testCR() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,18,"_testLinefeeds(""\r"", true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,19,"_testLinefeeds(""\r"", false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,22,public void testLF() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,24,"_testLinefeeds(""\n"", true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,25,"_testLinefeeds(""\n"", false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,28,public void testCRLF() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,30,"_testLinefeeds(""\r\n"", true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,31,"_testLinefeeds(""\r\n"", false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,36,/* Helper methods
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,40,"private void _testLinefeeds(String lf, boolean useStream)"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,41,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,43,"String DOC = ""[1,@2,@-178@]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,44,"DOC = DOC.replaceAll(""@"", lf);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,46,JsonParser jp = useStream ?
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,47,"createParserUsingStream(DOC, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,48,: createParserUsingReader(DOC);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,50,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,51,"assertEquals(1, jp.getCurrentLocation().getLineNr());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,53,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,54,"assertEquals(1, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,55,"assertEquals(1, jp.getCurrentLocation().getLineNr());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,57,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,58,"assertEquals(2, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,59,"assertEquals(2, jp.getCurrentLocation().getLineNr());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,61,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,62,"assertEquals(-178, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,63,"assertEquals(3, jp.getCurrentLocation().getLineNr());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,65,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,66,"assertEquals(4, jp.getCurrentLocation().getLineNr());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java,68,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,8,* Unit tests for verifying that object mapping functionality can
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,9,* be accessed using JsonParser.
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,11,public class TestParserWithObjects
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,12,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,17,/* Test for simple traversal with data mapping
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,21,public void testNextValue() throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,23,// Let's test both byte-backed and Reader-based one
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,24,_testNextValueBasic(false);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,25,_testNextValueBasic(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,28,// [JACKSON-395]
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,29,public void testNextValueNested() throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,31,// Let's test both byte-backed and Reader-based one
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,32,_testNextValueNested(false);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,33,_testNextValueNested(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,36,public void testIsClosed()
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,37,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,39,for (int i = 0; i < 4; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,40,"String JSON = ""[ 1, 2, 3 ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,41,boolean stream = ((i & 1) == 0);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,42,JsonParser jp = stream ?
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,43,"createParserUsingStream(JSON, ""UTF-8"")"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,44,: createParserUsingReader(JSON);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,45,boolean partial = ((i & 2) == 0);
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,47,assertFalse(jp.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,48,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,50,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,51,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,52,assertFalse(jp.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,54,if (partial) {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,55,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,56,assertTrue(jp.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,57,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,58,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,59,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,60,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,61,assertTrue(jp.isClosed());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,68,/* Supporting methods
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,72,private void  _testNextValueBasic(boolean useStream) throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,74,"// first array, no change to default"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,75,"JsonParser jp = _getParser(""[ 1, 2, 3, 4 ]"", useStream);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,76,"assertToken(JsonToken.START_ARRAY, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,77,for (int i = 1; i <= 4; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,78,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,79,"assertEquals(i, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,81,"assertToken(JsonToken.END_ARRAY, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,82,assertNull(jp.nextValue());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,83,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,85,"// then Object, is different"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,86,"jp = _getParser(""{ \""3\"" :3, \""4\"": 4, \""5\"" : 5 }"", useStream);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,87,"assertToken(JsonToken.START_OBJECT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,88,for (int i = 3; i <= 5; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,89,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,90,"assertEquals(String.valueOf(i), jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,91,"assertEquals(i, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,93,"assertToken(JsonToken.END_OBJECT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,94,assertNull(jp.nextValue());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,95,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,97,// and then mixed...
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,98,"jp = _getParser(""[ true, [ ], { \""a\"" : 3 } ]"", useStream);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,100,"assertToken(JsonToken.START_ARRAY, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,101,"assertToken(JsonToken.VALUE_TRUE, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,102,"assertToken(JsonToken.START_ARRAY, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,103,"assertToken(JsonToken.END_ARRAY, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,105,"assertToken(JsonToken.START_OBJECT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,106,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,107,"assertEquals(""a"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,108,"assertToken(JsonToken.END_OBJECT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,109,"assertToken(JsonToken.END_ARRAY, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,111,assertNull(jp.nextValue());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,112,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,115,// [JACKSON-395]
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,116,private void  _testNextValueNested(boolean useStream) throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,118,"// first array, no change to default"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,119,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,121,// then object with sub-objects...
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,122,"jp = _getParser(""{\""a\"": { \""b\"" : true, \""c\"": false }, \""d\"": 3 }"", useStream);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,124,"assertToken(JsonToken.START_OBJECT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,125,assertNull(jp.getCurrentName());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,126,"assertToken(JsonToken.START_OBJECT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,127,"assertEquals(""a"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,128,"assertToken(JsonToken.VALUE_TRUE, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,129,"assertEquals(""b"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,130,"assertToken(JsonToken.VALUE_FALSE, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,131,"assertEquals(""c"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,132,"assertToken(JsonToken.END_OBJECT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,133,"// ideally we should match closing marker with field, too:"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,134,"assertEquals(""a"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,136,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,137,"assertEquals(""d"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,138,"assertToken(JsonToken.END_OBJECT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,139,assertNull(jp.getCurrentName());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,140,assertNull(jp.nextValue());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,141,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,143,// and arrays
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,144,"jp = _getParser(""{\""a\"": [ false ] }"", useStream);"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,146,"assertToken(JsonToken.START_OBJECT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,147,assertNull(jp.getCurrentName());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,148,"assertToken(JsonToken.START_ARRAY, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,149,"assertEquals(""a"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,150,"assertToken(JsonToken.VALUE_FALSE, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,151,assertNull(jp.getCurrentName());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,152,"assertToken(JsonToken.END_ARRAY, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,153,"// ideally we should match closing marker with field, too:"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,154,"assertEquals(""a"", jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,155,"assertToken(JsonToken.END_OBJECT, jp.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,156,assertNull(jp.getCurrentName());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,157,assertNull(jp.nextValue());
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,158,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,161,"private JsonParser _getParser(String doc, boolean useStream)"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,162,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,164,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,165,if (useStream) {
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,166,"return jf.createJsonParser(doc.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java,168,return jf.createJsonParser(new StringReader(doc));
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,3,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,4,import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,6,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,9,* Set of basic unit tests for verifying that indenting
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,10,* option of generator works correctly
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,12,public class TestPrettyPrinter
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,13,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,15,public void testSimpleDocWithDefault() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,17,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,18,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,19,gen.useDefaultPrettyPrinter();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,20,"_verifyPrettyPrinter(gen, sw);"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,23,public void testSimpleDocWithMinimal() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,25,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,26,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,27,// first with standard minimal
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,28,gen.setPrettyPrinter(new MinimalPrettyPrinter());
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,29,"String docStr = _verifyPrettyPrinter(gen, sw);"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,30,"// which should have no linefeeds, tabs"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,31,"assertEquals(-1, docStr.indexOf('\n'));"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,32,"assertEquals(-1, docStr.indexOf('\t'));"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,34,// And then with slightly customized variant
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,35,gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,36,gen.setPrettyPrinter(new MinimalPrettyPrinter() {
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,37,@Override
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,38,// use TAB between array values
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,39,"public void beforeArrayValues(JsonGenerator jg) throws IOException, JsonGenerationException"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,41,"jg.writeRaw(""\t"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,44,"docStr = _verifyPrettyPrinter(gen, sw);"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,45,"assertEquals(-1, docStr.indexOf('\n'));"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,46,assertTrue(docStr.indexOf('\t') >= 0);
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,49,"private String _verifyPrettyPrinter(JsonGenerator gen, StringWriter sw) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,51,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,52,gen.writeNumber(3);
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,53,"gen.writeString(""abc"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,55,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,56,gen.writeBoolean(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,57,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,59,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,60,"gen.writeFieldName(""f"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,61,gen.writeNull();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,62,"gen.writeFieldName(""f2"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,63,gen.writeNull();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,64,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,66,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,67,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,69,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,70,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,72,"assertEquals(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,74,"assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,75,"assertEquals(3, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,76,"assertEquals(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,77,"assertEquals(""abc"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,79,"assertEquals(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,80,"assertEquals(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,81,"assertEquals(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,83,"assertEquals(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,84,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,85,"assertEquals(""f"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,86,"assertEquals(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,87,"assertEquals(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,88,"assertEquals(""f2"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,89,"assertEquals(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,90,"assertEquals(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,92,"assertEquals(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,94,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java,96,return docStr;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,4,import java.util.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,6,import static org.junit.Assert.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,8,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,11,* @since 1.7
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,13,public class TestRawStringWriting extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,16,"* Unit test for ""JsonGenerator.writeRawUTF8String()"""
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,18,public void testUtf8RawStrings() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,20,// Let's create set of Strings to output; no ctrl chars as we do raw
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,21,"List<byte[]> strings = generateStrings(new Random(28), 750000, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,22,ByteArrayOutputStream out = new ByteArrayOutputStream(16000);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,23,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,24,"JsonGenerator jgen = jf.createJsonGenerator(out, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,25,jgen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,26,for (byte[] str : strings) {
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,27,"jgen.writeRawUTF8String(str, 0, str.length);"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,29,jgen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,30,jgen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,31,byte[] json = out.toByteArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,33,// Ok: let's verify that stuff was written out ok
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,34,JsonParser jp = jf.createJsonParser(json);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,35,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,36,for (byte[] inputBytes : strings) {
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,37,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,38,String string = jp.getText();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,39,"byte[] outputBytes = string.getBytes(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,40,"assertEquals(inputBytes.length, outputBytes.length);"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,41,"assertArrayEquals(inputBytes, outputBytes);"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,43,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,47,"* Unit test for ""JsonGenerator.writeUTF8String()"", which needs"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,48,* to handle escaping properly
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,50,public void testUtf8StringsWithEscaping() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,52,// Let's create set of Strings to output; do include control chars too:
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,53,"List<byte[]> strings = generateStrings(new Random(28), 720000, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,54,ByteArrayOutputStream out = new ByteArrayOutputStream(16000);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,55,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,56,"JsonGenerator jgen = jf.createJsonGenerator(out, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,57,jgen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,59,for (byte[] str : strings) {
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,60,"jgen.writeUTF8String(str, 0, str.length);"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,61,jgen.writeRaw('\n');
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,63,jgen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,64,jgen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,65,byte[] json = out.toByteArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,67,// Ok: let's verify that stuff was written out ok
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,68,JsonParser jp = jf.createJsonParser(json);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,69,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,70,for (byte[] inputBytes : strings) {
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,71,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,72,String string = jp.getText();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,74,"byte[] outputBytes = string.getBytes(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,75,"assertEquals(inputBytes.length, outputBytes.length);"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,76,"assertArrayEquals(inputBytes, outputBytes);"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,78,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,83,/* Helper methods
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,87,"private List<byte[]> generateStrings(Random rnd, int totalLength, boolean includeCtrlChars)"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,88,throws IOException
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,90,ArrayList<byte[]> strings = new ArrayList<byte[]>();
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,91,do {
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,92,int len = 2;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,93,int bits = rnd.nextInt(13);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,94,while (--bits >= 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,95,len += len;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,97,len = 1 + ((len + len) / 3);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,98,"String str = generateString(rnd, len, includeCtrlChars);"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,99,"byte[] bytes = str.getBytes(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,100,strings.add(bytes);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,101,totalLength -= bytes.length;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,102,} while (totalLength > 0);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,103,return strings;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,106,"private String generateString(Random rnd, int length, boolean includeCtrlChars)"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,108,StringBuilder sb = new StringBuilder(length);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,109,do {
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,110,int i;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,111,switch (rnd.nextInt(3)) {
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,112,case 0: // 3 byte one
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,113,i = 2048 + rnd.nextInt(16383);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,114,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,115,case 1: // 2 byte
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,116,i = 128 + rnd.nextInt(1024);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,117,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,118,default: // ASCII
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,119,i = rnd.nextInt(192);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,120,if (!includeCtrlChars) {
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,121,i += 32;
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,122,"// but also need to avoid backslash, double-quote"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,123,"if (i == '\\' || i == '""') {"
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,124,i = '@'; // just arbitrary choice
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,128,sb.append((char) i);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,129,} while (sb.length() < length);
True,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java,130,return sb.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,4,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,5,import com.fasterxml.jackson.test.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,8,* Set of basic unit tests for verifying that Array/Object scopes
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,9,* are properly matched.
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,11,public class TestScopeMatching
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,12,extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,14,public void testUnclosedArray()
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,15,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,17,"JsonParser jp = createParserUsingReader(""[ 1, 2"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,18,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,19,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,20,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,22,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,23,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,24,"fail(""Expected an exception for unclosed ARRAY"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,25,} catch (JsonParseException jpe) {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,26,"verifyException(jpe, ""expected close marker for ARRAY"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,30,public void testUnclosedObject()
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,31,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,33,"JsonParser jp = createParserUsingReader(""{ \""key\"" : 3  "");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,34,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,35,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,36,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,38,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,39,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,40,"fail(""Expected an exception for unclosed OBJECT"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,41,} catch (JsonParseException jpe) {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,42,"verifyException(jpe, ""expected close marker for OBJECT"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,46,public void testEOFInName()
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,47,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,49,"final String JSON = ""{ \""abcd"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,50,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,51,JsonParser jp = (i == 0) ? createParserUsingReader(JSON)
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,52,": createParserUsingStream(JSON, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,53,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,54,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,55,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,56,"fail(""Expected an exception for EOF"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,57,} catch (JsonParseException jpe) {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,58,"verifyException(jpe, ""Unexpected end-of-input"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,63,public void testWeirdToken()
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,64,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,66,"final String JSON = ""[ nil ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,67,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,68,JsonParser jp = (i == 0) ? createParserUsingReader(JSON)
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,69,": createParserUsingStream(JSON, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,70,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,71,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,72,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,73,"fail(""Expected an exception for weird token"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,74,} catch (JsonParseException jpe) {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,75,"verifyException(jpe, ""Unrecognized token"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,80,public void testMismatchArrayToObject()
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,81,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,83,"final String JSON = ""[ 1, 2 }"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,84,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,85,JsonParser jp = (i == 0) ? createParserUsingReader(JSON)
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,86,": createParserUsingStream(JSON, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,87,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,88,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,89,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,90,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,91,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,92,"fail(""Expected an exception for incorrectly closed ARRAY"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,93,} catch (JsonParseException jpe) {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,94,"verifyException(jpe, ""Unexpected close marker '}': expected ']'"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,99,public void testMismatchObjectToArray()
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,100,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,102,"final String JSON = ""{ ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,103,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,104,JsonParser jp = (i == 0) ? createParserUsingReader(JSON)
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,105,": createParserUsingStream(JSON, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,106,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,108,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,109,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,110,"fail(""Expected an exception for incorrectly closed OBJECT"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,111,} catch (JsonParseException jpe) {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,112,"verifyException(jpe, ""Unexpected close marker ']': expected '}'"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,117,public void testMisssingColon()
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,118,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,120,"final String JSON = ""{ \""a\"" \""b\"" }"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,121,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,122,JsonParser jp = (i == 0) ? createParserUsingReader(JSON)
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,123,": createParserUsingStream(JSON, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,124,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,125,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,126,"// can be either here, or with next one..."
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,127,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,128,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,129,"fail(""Expected an exception for missing semicolon"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,130,} catch (JsonParseException jpe) {
True,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java,131,"verifyException(jpe, ""was expecting a colon"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,6,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,7,import com.fasterxml.jackson.test.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,9,import java.util.Random;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,12,* Set of basic unit tests for verifying that the string
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,13,"* generation, including character escaping, works as expected."
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,15,public class TestStringGeneration
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,16,extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,18,final static String[] SAMPLES = new String[] {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,19,"""\""test\"""","
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,20,"""\n"", ""\\n"", ""\r\n"", ""a\\b"", ""tab:\nok?"","
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,21,"""a\tb\tc\n\fdef\t \tg\""\""\""h\""\\ijklmn\b"","
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,22,"""\""\""\"""", ""\\r)'\"""","
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,23,"""Longer text & other stuff:\twith some\r\n\r\n random linefeeds etc added in to cause some \""special\"" handling \\\\ to occur...\n"""
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,26,public void testBasicEscaping()
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,27,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,29,doTestBasicEscaping(false);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,30,doTestBasicEscaping(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,33,public void testLongerRandomSingleChunk()
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,34,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,36,"/* Let's first generate 100k of pseudo-random characters, favoring"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,37,* 7-bit ascii range
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,39,for (int round = 0; round < 80; ++round) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,40,String content = generateRandom(75000+round);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,41,"doTestLongerRandom(content, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,42,"doTestLongerRandom(content, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,46,public void testLongerRandomMultiChunk()
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,47,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,49,"/* Let's first generate 100k of pseudo-random characters, favoring"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,50,* 7-bit ascii range
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,52,for (int round = 0; round < 70; ++round) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,53,String content = generateRandom(73000+round);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,54,"doTestLongerRandomMulti(content, false, round);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,55,"doTestLongerRandomMulti(content, true, round);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,61,/* Internal methods
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,65,private String generateRandom(int len)
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,67,StringBuilder sb = new StringBuilder(len+1000); // pad for surrogates
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,68,Random r = new Random(len);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,69,for (int i = 0; i < len; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,70,if (r.nextBoolean()) { // non-ascii
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,71,int value = r.nextInt() & 0xFFFF;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,72,"// Otherwise easy, except that need to ensure that"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,73,"// surrogates are properly paired: and, also"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,74,// their values do not exceed 0x10FFFF
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,75,if (value >= 0xD800 && value <= 0xDFFF) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,76,"// Let's discard first value, then, and produce valid pair"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,77,int fullValue = (r.nextInt() & 0xFFFFF);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,78,sb.append((char) (0xD800 + (fullValue >> 10)));
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,79,value = 0xDC00 + (fullValue & 0x3FF);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,81,sb.append((char) value);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,82,} else { // ascii
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,83,sb.append((char) (r.nextInt() & 0x7F));
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,86,return sb.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,89,private void doTestBasicEscaping(boolean charArray)
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,90,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,92,for (int i = 0; i < SAMPLES.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,93,String VALUE = SAMPLES[i];
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,94,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,95,JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,96,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,97,if (charArray) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,98,char[] buf = new char[VALUE.length() + i];
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,99,"VALUE.getChars(0, VALUE.length(), buf, i);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,100,"gen.writeString(buf, i, VALUE.length());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,101,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,102,gen.writeString(VALUE);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,104,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,105,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,106,String docStr = sw.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,107,JsonParser jp = createParserUsingReader(docStr);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,108,"assertEquals(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,109,JsonToken t = jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,110,"assertEquals(JsonToken.VALUE_STRING, t);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,111,"assertEquals(VALUE, jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,112,"assertEquals(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,113,"assertEquals(null, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,114,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,118,"private void doTestLongerRandom(String text, boolean charArray)"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,119,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,121,ByteArrayOutputStream bow = new ByteArrayOutputStream(text.length());
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,122,"JsonGenerator gen = new JsonFactory().createJsonGenerator(bow, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,124,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,125,if (charArray) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,126,char[] buf = new char[text.length()];
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,127,"text.getChars(0, text.length(), buf, 0);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,128,"gen.writeString(buf, 0, text.length());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,129,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,130,gen.writeString(text);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,132,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,133,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,134,byte[] docData = bow.toByteArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,135,JsonParser jp = new JsonFactory().createJsonParser(new ByteArrayInputStream(docData));
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,136,"assertEquals(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,137,JsonToken t = jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,138,"assertEquals(JsonToken.VALUE_STRING, t);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,139,String act = jp.getText();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,140,if (!text.equals(act)) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,141,if (text.length() != act.length()) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,142,"fail(""Expected string length ""+text.length()+"", actual ""+act.length());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,144,int i = 0;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,145,for (int len = text.length(); i < len; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,146,if (text.charAt(i) != act.charAt(i)) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,147,break;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,150,"fail(""Strings differ at position #""+i+"" (len ""+text.length()+""): expected char 0x""+Integer.toHexString(text.charAt(i))+"", actual 0x""+Integer.toHexString(act.charAt(i)));"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,152,"assertEquals(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,153,"assertEquals(null, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,154,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,157,"private void doTestLongerRandomMulti(String text, boolean charArray, int round)"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,158,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,160,ByteArrayOutputStream bow = new ByteArrayOutputStream(text.length());
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,161,"JsonGenerator gen = new JsonFactory().createJsonGenerator(bow, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,162,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,164,gen.writeString(text);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,165,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,166,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,168,"gen = new JsonFactory().createJsonGenerator(bow, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,169,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,170,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,172,Random rnd = new Random(text.length());
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,173,int offset = 0;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,175,while (offset < text.length()) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,176,int shift = 1 + ((rnd.nextInt() & 0xFFFFF) % 12); // 1 - 12
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,177,int len = (1 << shift) + shift; // up to 4k
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,178,if ((offset + len) >= text.length()) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,179,len = text.length() - offset;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,180,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,181,// Need to avoid splitting surrogates though
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,182,char c = text.charAt(offset+len-1);
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,183,if (c >= 0xD800 && c < 0xDC00) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,184,++len;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,187,if (charArray) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,188,char[] buf = new char[len];
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,189,"text.getChars(offset, offset+len, buf, 0);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,190,"gen.writeString(buf, 0, len);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,191,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,192,"gen.writeString(text.substring(offset, offset+len));"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,194,offset += len;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,197,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,198,gen.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,199,byte[] docData = bow.toByteArray();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,200,JsonParser jp = new JsonFactory().createJsonParser(new ByteArrayInputStream(docData));
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,201,"assertEquals(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,203,offset = 0;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,204,while (jp.nextToken() == JsonToken.VALUE_STRING) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,205,"// Let's verify, piece by piece"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,206,String act = jp.getText();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,207,"String exp = text.substring(offset, offset+act.length());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,208,if (act.length() != exp.length()) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,209,"fail(""String segment [""+offset+"" - ""+(offset+act.length())+""[ differs; exp length ""+exp+"", actual ""+act);"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,211,if (!act.equals(exp)) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,212,int i = 0;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,213,while (act.charAt(i) == exp.charAt(i)) {
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,214,++i;
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,216,"fail(""String segment [""+offset+"" - ""+(offset+act.length())+""[ different at offset #""+i"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,217,"+""; exp char 0x""+Integer.toHexString(exp.charAt(i))"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,218,"+"", actual 0x""+Integer.toHexString(act.charAt(i)));"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,220,offset += act.length();
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,222,"assertEquals(JsonToken.END_ARRAY, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java,223,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,3,import java.io.IOException;
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,7,public class TestUnicode extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,9,public void testSurrogates() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,11,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,12,"_testSurrogates(f, true);"
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,13,"_testSurrogates(f, false);"
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,18,/* Helper methods
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,22,"private void _testSurrogates(JsonFactory f, boolean checkText) throws IOException"
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,24,"byte[] json = ""{\""text\"":\""\uD83D\uDE03\""}"".getBytes(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,25,// first
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,26,JsonParser jp = f.createJsonParser(json);
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,27,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,28,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,29,if (checkText) {
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,30,"assertEquals(""text"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,32,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,33,if (checkText) {
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,34,"assertEquals(""\uD83D\uDE03"", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java,36,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,3,import com.fasterxml.jackson.core.JsonParser;
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,4,import com.fasterxml.jackson.core.JsonToken;
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,7,* @since 1.6
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,9,public class TestValueConversions
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,10,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,12,public void testAsInt() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,14,"final String input = ""[ 1, -3, 4.98, true, false, null, \""-17\"", \""foo\"" ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,15,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,16,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,17,if (i == 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,18,jp = createParserUsingReader(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,19,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,20,"jp = this.createParserUsingStream(input, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,22,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,23,"assertEquals(0, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,24,"assertEquals(9, jp.getValueAsLong(9));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,26,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,27,"assertEquals(1, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,28,"assertEquals(1, jp.getValueAsLong(-99));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,29,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,30,"assertEquals(-3, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,31,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,32,"assertEquals(4, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,33,"assertEquals(4, jp.getValueAsLong(99));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,34,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,35,"assertEquals(1, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,36,"assertToken(JsonToken.VALUE_FALSE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,37,"assertEquals(0, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,38,"assertToken(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,39,"assertEquals(0, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,40,"assertEquals(0, jp.getValueAsLong(27));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,41,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,42,"assertEquals(-17, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,43,"assertEquals(-17, jp.getValueAsLong(3));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,44,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,45,"assertEquals(0, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,46,"assertEquals(9, jp.getValueAsLong(9));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,48,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,49,"assertEquals(0, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,50,"assertEquals(9, jp.getValueAsLong(9));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,52,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,57,* @since 1.7
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,59,public void testAsBoolean() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,61,"final String input = ""[ true, false, null, 1, 0, \""true\"", \""false\"", \""foo\"" ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,62,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,63,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,64,if (i == 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,65,jp = createParserUsingReader(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,66,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,67,"jp = this.createParserUsingStream(input, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,69,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,70,"assertEquals(false, jp.getValueAsBoolean());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,71,"assertEquals(true, jp.getValueAsBoolean(true));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,73,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,74,"assertEquals(true, jp.getValueAsBoolean());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,75,"assertToken(JsonToken.VALUE_FALSE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,76,"assertEquals(false, jp.getValueAsBoolean());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,77,"assertToken(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,78,"assertEquals(false, jp.getValueAsBoolean());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,79,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,80,"assertEquals(1, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,81,"assertEquals(true, jp.getValueAsBoolean());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,82,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,83,"assertEquals(0, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,84,"assertEquals(false, jp.getValueAsBoolean());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,86,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,87,"assertEquals(true, jp.getValueAsBoolean());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,88,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,89,"assertEquals(false, jp.getValueAsBoolean());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,90,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,91,"assertEquals(false, jp.getValueAsBoolean());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,93,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,94,"assertEquals(false, jp.getValueAsBoolean());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,95,"assertEquals(true, jp.getValueAsBoolean(true));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,97,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,101,public void testAsLong() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,103,"final String input = ""[ 1, -3, 4.98, true, false, null, \""-17\"", \""foo\"" ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,104,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,105,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,106,if (i == 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,107,jp = createParserUsingReader(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,108,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,109,"jp = this.createParserUsingStream(input, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,111,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,112,"assertEquals(0L, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,113,"assertEquals(9L, jp.getValueAsLong(9L));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,115,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,116,"assertEquals(1L, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,117,"assertEquals(1L, jp.getValueAsLong(-99L));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,118,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,119,"assertEquals(-3L, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,120,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,121,"assertEquals(4L, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,122,"assertEquals(4L, jp.getValueAsLong(99L));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,123,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,124,"assertEquals(1L, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,125,"assertToken(JsonToken.VALUE_FALSE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,126,"assertEquals(0L, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,127,"assertToken(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,128,"assertEquals(0L, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,129,"assertEquals(0L, jp.getValueAsLong(27L));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,130,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,131,"assertEquals(-17L, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,132,"assertEquals(-17L, jp.getValueAsLong(3L));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,133,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,134,"assertEquals(0L, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,135,"assertEquals(9L, jp.getValueAsLong(9L));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,137,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,138,"assertEquals(0L, jp.getValueAsLong());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,139,"assertEquals(9L, jp.getValueAsLong(9L));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,141,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,145,public void testAsDouble() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,147,"final String input = ""[ 1, -3, 4.98, true, false, null, \""-17.25\"", \""foo\"" ]"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,148,for (int i = 0; i < 2; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,149,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,150,if (i == 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,151,jp = createParserUsingReader(input);
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,152,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,153,"jp = this.createParserUsingStream(input, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,155,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,156,"assertEquals(0.0, jp.getValueAsDouble());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,157,"assertEquals(9.0, jp.getValueAsDouble(9.0));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,159,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,160,"assertEquals(1., jp.getValueAsDouble());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,161,"assertEquals(1., jp.getValueAsDouble(-99.0));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,162,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,163,"assertEquals(-3., jp.getValueAsDouble());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,164,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,165,"assertEquals(4.98, jp.getValueAsDouble());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,166,"assertEquals(4.98, jp.getValueAsDouble(12.5));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,167,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,168,"assertEquals(1.0, jp.getValueAsDouble());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,169,"assertToken(JsonToken.VALUE_FALSE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,170,"assertEquals(0.0, jp.getValueAsDouble());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,171,"assertToken(JsonToken.VALUE_NULL, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,172,"assertEquals(0.0, jp.getValueAsDouble());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,173,"assertEquals(0.0, jp.getValueAsDouble(27.8));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,174,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,175,"assertEquals(-17.25, jp.getValueAsDouble());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,176,"assertEquals(-17.25, jp.getValueAsDouble(1.9));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,177,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,178,"assertEquals(0.0, jp.getValueAsDouble());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,179,"assertEquals(1.25, jp.getValueAsDouble(1.25));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,181,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,182,"assertEquals(0.0, jp.getValueAsDouble());"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,183,"assertEquals(7.5, jp.getValueAsDouble(7.5));"
True,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,src/test/java/com/fasterxml/jackson/core/main/TestValueConversions.java,185,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,1,package com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,4,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,5,import com.fasterxml.jackson.test.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,7,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,10,* Some unit tests to try to exercise part of parser code that
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,11,* deals with symbol (table) management.
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,13,public class TestWithTonsaSymbols
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,14,extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,16,"final static String FIELD_BASENAME = ""f"";"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,19,* How many fields to generate? Since maximum symbol table
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,20,"* size is defined as 6000 (above which table gets cleared,"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,21,"* assuming the name vocabulary is unbounded), let's do something"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,22,* just slightly below it.
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,24,final static int FIELD_COUNT = 5000;
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,26,public void testStreamReaderParser() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,28,_testWith(true);
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,31,public void testReaderParser() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,33,_testWith(false);
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,38,// Helper methods
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,42,private void _testWith(boolean useStream)
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,43,throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,45,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,46,String doc = buildDoc(FIELD_COUNT);
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,48,/* And let's do this multiple times: just so that symbol table
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,49,* state is different between runs.
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,51,for (int x = 0; x < 3; ++x) {
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,52,JsonParser jp = useStream ?
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,53,"jf.createJsonParser(new ByteArrayInputStream(doc.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,54,: jf.createJsonParser(new StringReader(doc));
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,55,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,56,for (int i = 0; i < FIELD_COUNT; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,57,"assertToken(JsonToken.FIELD_NAME, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,58,"assertEquals(fieldNameFor(i), jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,59,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,60,"assertEquals(i, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,62,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,63,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,67,"private void fieldNameFor(StringBuilder sb, int index)"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,69,"/* let's do something like ""f1.1"" to exercise different"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,70,* field names (important for byte-based codec)
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,71,* Other name shuffling done mostly just for fun... :)
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,73,sb.append(FIELD_BASENAME);
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,74,sb.append(index);
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,75,if (index > 50) {
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,76,sb.append('.');
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,77,if (index > 200) {
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,78,sb.append(index);
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,79,if (index > 4000) { // and some even longer symbols...
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,80,"sb.append(""."").append(index);"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,82,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,83,sb.append(index >> 3); // divide by 8
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,88,private String fieldNameFor(int index)
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,90,StringBuilder sb = new StringBuilder(16);
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,91,"fieldNameFor(sb, index);"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,92,return sb.toString();
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,95,private String buildDoc(int len)
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,97,StringBuilder sb = new StringBuilder(len * 12);
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,98,sb.append('{');
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,99,for (int i = 0; i < len; ++i) {
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,100,if (i > 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,101,"sb.append(',');"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,103,"sb.append('""');"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,104,"fieldNameFor(sb, i);"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,105,"sb.append('""');"
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,106,sb.append(':');
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,107,sb.append(i);
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,109,sb.append('}');
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,110,return sb.toString();
True,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,1,package com.fasterxml.jackson.core.util;
True,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,3,import com.fasterxml.jackson.core.io.CharTypes;
True,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,5,public class TestCharTypes
True,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,6,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,8,public void testQuoting()
True,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,10,StringBuilder sb = new StringBuilder();
True,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,11,"CharTypes.appendQuoted(sb, ""\n"");"
True,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,12,"assertEquals(""\\n"", sb.toString());"
True,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,13,sb = new StringBuilder();
True,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,14,"CharTypes.appendQuoted(sb, ""\u0000"");"
True,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java,15,"assertEquals(""\\u0000"", sb.toString());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,1,package com.fasterxml.jackson.core.util;
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,5,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,7,public class TestDelegates extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,10,"* Test default, non-overridden parser delegate."
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,12,public void testParserDelegate() throws IOException
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,14,"JsonParser jp = new JsonFactory().createJsonParser(""[ 1, true ]"");"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,15,assertNull(jp.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,16,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,17,"assertEquals(""["", jp.getText());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,18,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,19,"assertEquals(1, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,20,"assertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,21,assertTrue(jp.getBooleanValue());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,22,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,23,jp.close();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,24,assertTrue(jp.isClosed());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,28,"* Test default, non-overridden generator delegate."
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,30,public void testGeneratorDelegate() throws IOException
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,32,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,33,JsonGenerator jg = new JsonFactory().createJsonGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,34,jg.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,35,jg.writeNumber(13);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,36,jg.writeNull();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,37,jg.writeBoolean(false);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,38,jg.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,39,jg.close();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,40,assertTrue(jg.isClosed());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,41,"assertEquals(""[13,null,false]"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,1,package com.fasterxml.jackson.core.util;
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,3,import java.util.Random;
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,5,import com.fasterxml.jackson.core.io.NumberOutput;
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,8,* Set of basic unit tests for verifying that the low-level number
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,9,* printingg methods work as expected.
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,11,public class TestNumberPrinting
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,12,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,14,public void testIntPrinting()
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,15,throws Exception
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,17,assertIntPrint(0);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,18,assertIntPrint(-3);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,19,assertIntPrint(1234);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,20,assertIntPrint(-1234);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,21,assertIntPrint(56789);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,22,assertIntPrint(-56789);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,23,assertIntPrint(999999);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,24,assertIntPrint(-999999);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,25,assertIntPrint(1000000);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,26,assertIntPrint(-1000000);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,27,assertIntPrint(10000001);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,28,assertIntPrint(-10000001);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,29,assertIntPrint(-100000012);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,30,assertIntPrint(100000012);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,31,assertIntPrint(1999888777);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,32,assertIntPrint(-1999888777);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,33,assertIntPrint(Integer.MAX_VALUE);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,34,assertIntPrint(Integer.MIN_VALUE);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,36,Random rnd = new Random(12345L);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,37,for (int i = 0; i < 251000; ++i) {
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,38,assertIntPrint(rnd.nextInt());
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,42,public void testLongPrinting()
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,43,throws Exception
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,45,"// First, let's just cover couple of edge cases"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,46,"assertLongPrint(0L, 0);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,47,"assertLongPrint(1L, 0);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,48,"assertLongPrint(-1L, 0);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,49,"assertLongPrint(Long.MAX_VALUE, 0);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,50,"assertLongPrint(Long.MIN_VALUE, 0);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,51,"assertLongPrint(Long.MAX_VALUE-1L, 0);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,52,"assertLongPrint(Long.MIN_VALUE+1L, 0);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,54,Random rnd = new Random(12345L);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,55,"// Bigger value space, need more iterations for long"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,56,for (int i = 0; i < 678000; ++i) {
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,57,long l = ((long) rnd.nextInt() << 32) | (long) rnd.nextInt();
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,58,"assertLongPrint(l, i);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,64,// Internal methods
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,68,private void assertIntPrint(int value)
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,70,"String exp = """"+value;"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,71,String act = printToString(value);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,73,if (!exp.equals(act)) {
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,74,"assertEquals(""Expected conversion (exp '""+exp+""', len ""+exp.length()+""; act len ""+act.length()+"")"", exp, act);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,78,"private void assertLongPrint(long value, int index)"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,80,"String exp = """"+value;"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,81,String act = printToString(value);
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,83,if (!exp.equals(act)) {
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,84,"assertEquals(""Expected conversion (exp '""+exp+""', len ""+exp.length()+""; act len ""+act.length()+""; number index ""+index+"")"", exp, act);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,88,private String printToString(int value)
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,90,char[] buffer = new char[12];
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,91,"int offset = NumberOutput.outputInt(value, buffer, 0);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,92,"return new String(buffer, 0, offset);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,95,private String printToString(long value)
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,97,char[] buffer = new char[22];
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,98,"int offset = NumberOutput.outputLong(value, buffer, 0);"
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,99,"return new String(buffer, 0, offset);"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,1,package com.fasterxml.jackson.core.util;
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,3,import com.fasterxml.jackson.core.util.BufferRecycler;
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,4,import com.fasterxml.jackson.core.util.TextBuffer;
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,6,public class TestTextBuffer
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,7,extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,10,* Trivially simple basic test to ensure all basic append
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,11,* methods work
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,13,public void testSimple()
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,15,TextBuffer tb = new TextBuffer(new BufferRecycler());
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,16,tb.append('a');
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,17,"tb.append(new char[] { 'X', 'b' }, 1, 1);"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,18,"tb.append(""c"", 0, 1);"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,19,"assertEquals(3, tb.contentsAsArray().length);"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,20,"assertEquals(""abc"", tb.toString());"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,22,assertNotNull(tb.expandCurrentSegment());
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,25,public void testLonger()
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,27,TextBuffer tb = new TextBuffer(new BufferRecycler());
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,28,for (int i = 0; i < 2000; ++i) {
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,29,"tb.append(""abc"", 0, 3);"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,31,String str = tb.contentsAsString();
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,32,"assertEquals(6000, str.length());"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,33,"assertEquals(6000, tb.contentsAsArray().length);"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,35,"tb.resetWithShared(new char[] { 'a' }, 0, 1);"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,36,"assertEquals(1, tb.toString().length());"
True,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,1,package com.fasterxml.jackson.core.util;
True,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,3,import com.fasterxml.jackson.core.Version;
True,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,4,import com.fasterxml.jackson.core.util.VersionUtil;
True,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,6,public class TestVersionUtil extends com.fasterxml.jackson.test.BaseTest
True,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,8,public void testVersionPartParsing()
True,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,10,"assertEquals(13, VersionUtil.parseVersionPart(""13""));"
True,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,11,"assertEquals(27, VersionUtil.parseVersionPart(""27.8""));"
True,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,12,"assertEquals(0, VersionUtil.parseVersionPart(""-3""));"
True,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,15,public void testVersionParsing()
True,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,17,"assertEquals(new Version(1, 2, 15, ""foo""), VersionUtil.parseVersion(""1.2.15-foo""));"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,1,package com.fasterxml.jackson.test;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,3,import java.io.*;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,4,import java.util.Arrays;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,6,import junit.framework.TestCase;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,8,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,10,//import static org.junit.Assert.*;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,12,public abstract class BaseTest
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,13,extends TestCase
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,17,/* Some sample documents:
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,21,protected final static int SAMPLE_SPEC_VALUE_WIDTH = 800;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,22,protected final static int SAMPLE_SPEC_VALUE_HEIGHT = 600;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,23,"protected final static String SAMPLE_SPEC_VALUE_TITLE = ""View from 15th Floor"";"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,24,"protected final static String SAMPLE_SPEC_VALUE_TN_URL = ""http://www.example.com/image/481989943"";"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,25,protected final static int SAMPLE_SPEC_VALUE_TN_HEIGHT = 125;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,26,"protected final static String SAMPLE_SPEC_VALUE_TN_WIDTH = ""100"";"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,27,protected final static int SAMPLE_SPEC_VALUE_TN_ID1 = 116;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,28,protected final static int SAMPLE_SPEC_VALUE_TN_ID2 = 943;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,29,protected final static int SAMPLE_SPEC_VALUE_TN_ID3 = 234;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,30,protected final static int SAMPLE_SPEC_VALUE_TN_ID4 = 38793;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,32,protected final static String SAMPLE_DOC_JSON_SPEC =
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,33,"""{\n"""
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,34,"+""  \""Image\"" : {\n"""
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,35,"+""    \""Width\"" : ""+SAMPLE_SPEC_VALUE_WIDTH+"",\n"""
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,36,"+""    \""Height\"" : ""+SAMPLE_SPEC_VALUE_HEIGHT+"","""
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,37,"+""\""Title\"" : \""""+SAMPLE_SPEC_VALUE_TITLE+""\"",\n"""
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,38,"+""    \""Thumbnail\"" : {\n"""
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,39,"+""      \""Url\"" : \""""+SAMPLE_SPEC_VALUE_TN_URL+""\"",\n"""
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,40,"+""\""Height\"" : ""+SAMPLE_SPEC_VALUE_TN_HEIGHT+"",\n"""
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,41,"+""      \""Width\"" : \""""+SAMPLE_SPEC_VALUE_TN_WIDTH+""\""\n"""
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,42,"+""    },\n"""
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,43,"+""    \""IDs\"" : [""+SAMPLE_SPEC_VALUE_TN_ID1+"",""+SAMPLE_SPEC_VALUE_TN_ID2+"",""+SAMPLE_SPEC_VALUE_TN_ID3+"",""+SAMPLE_SPEC_VALUE_TN_ID4+""]\n"""
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,50,/* Helper classes (beans)
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,55,"* Sample class from Jackson tutorial (""JacksonInFiveMinutes"")"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,57,protected static class FiveMinuteUser {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,58,"public enum Gender { MALE, FEMALE };"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,60,public static class Name
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,62,"private String _first, _last;"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,64,public Name() { }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,65,"public Name(String f, String l) {"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,66,_first = f;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,67,_last = l;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,70,public String getFirst() { return _first; }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,71,public String getLast() { return _last; }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,73,public void setFirst(String s) { _first = s; }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,74,public void setLast(String s) { _last = s; }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,76,@Override
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,77,public boolean equals(Object o)
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,79,if (o == this) return true;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,80,if (o == null || o.getClass() != getClass()) return false;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,81,Name other = (Name) o;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,82,return _first.equals(other._first) && _last.equals(other._last);
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,86,private Gender _gender;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,87,private Name _name;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,88,private boolean _isVerified;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,89,private byte[] _userImage;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,91,public FiveMinuteUser() { }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,93,"public FiveMinuteUser(String first, String last, boolean verified, Gender g, byte[] data)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,95,"_name = new Name(first, last);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,96,_isVerified = verified;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,97,_gender = g;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,98,_userImage = data;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,101,public Name getName() { return _name; }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,102,public boolean isVerified() { return _isVerified; }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,103,public Gender getGender() { return _gender; }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,104,public byte[] getUserImage() { return _userImage; }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,106,public void setName(Name n) { _name = n; }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,107,public void setVerified(boolean b) { _isVerified = b; }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,108,public void setGender(Gender g) { _gender = g; }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,109,public void setUserImage(byte[] b) { _userImage = b; }
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,111,@Override
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,112,public boolean equals(Object o)
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,114,if (o == this) return true;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,115,if (o == null || o.getClass() != getClass()) return false;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,116,FiveMinuteUser other = (FiveMinuteUser) o;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,117,if (_isVerified != other._isVerified) return false;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,118,if (_gender != other._gender) return false;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,119,if (!_name.equals(other._name)) return false;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,120,byte[] otherImage = other._userImage;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,121,if (otherImage.length != _userImage.length) return false;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,122,"for (int i = 0, len = _userImage.length; i < len; ++i) {"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,123,if (_userImage[i] != otherImage[i]) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,124,return false;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,127,return true;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,133,/* High-level helpers
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,137,"protected void verifyJsonSpecSampleDoc(JsonParser jp, boolean verifyContents)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,138,throws IOException
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,140,"verifyJsonSpecSampleDoc(jp, verifyContents, true);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,143,"protected void verifyJsonSpecSampleDoc(JsonParser jp, boolean verifyContents,"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,144,boolean requireNumbers)
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,145,throws IOException
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,147,if (!jp.hasCurrentToken()) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,148,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,150,"assertToken(JsonToken.START_OBJECT, jp.getCurrentToken()); // main object"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,152,"assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Image'"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,153,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,154,"verifyFieldName(jp, ""Image"");"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,157,"assertToken(JsonToken.START_OBJECT, jp.nextToken()); // 'image' object"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,159,"assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Width'"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,160,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,161,"verifyFieldName(jp, ""Width"");"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,164,"verifyIntToken(jp.nextToken(), requireNumbers);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,165,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,166,"verifyIntValue(jp, SAMPLE_SPEC_VALUE_WIDTH);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,169,"assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Height'"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,170,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,171,"verifyFieldName(jp, ""Height"");"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,174,"verifyIntToken(jp.nextToken(), requireNumbers);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,175,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,176,"verifyIntValue(jp, SAMPLE_SPEC_VALUE_HEIGHT);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,178,"assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Title'"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,179,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,180,"verifyFieldName(jp, ""Title"");"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,182,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,183,"assertEquals(SAMPLE_SPEC_VALUE_TITLE, getAndVerifyText(jp));"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,184,"assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Thumbnail'"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,185,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,186,"verifyFieldName(jp, ""Thumbnail"");"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,189,"assertToken(JsonToken.START_OBJECT, jp.nextToken()); // 'thumbnail' object"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,190,"assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Url'"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,191,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,192,"verifyFieldName(jp, ""Url"");"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,194,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,195,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,196,"assertEquals(SAMPLE_SPEC_VALUE_TN_URL, getAndVerifyText(jp));"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,198,"assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Height'"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,199,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,200,"verifyFieldName(jp, ""Height"");"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,202,"verifyIntToken(jp.nextToken(), requireNumbers);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,203,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,204,"verifyIntValue(jp, SAMPLE_SPEC_VALUE_TN_HEIGHT);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,206,"assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Width'"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,207,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,208,"verifyFieldName(jp, ""Width"");"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,210,// Width value is actually a String in the example
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,211,"assertToken(JsonToken.VALUE_STRING, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,212,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,213,"assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, getAndVerifyText(jp));"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,216,"assertToken(JsonToken.END_OBJECT, jp.nextToken()); // 'thumbnail' object"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,217,"assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'IDs'"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,218,"assertToken(JsonToken.START_ARRAY, jp.nextToken()); // 'ids' array"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,219,"verifyIntToken(jp.nextToken(), requireNumbers); // ids[0]"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,220,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,221,"verifyIntValue(jp, SAMPLE_SPEC_VALUE_TN_ID1);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,223,"verifyIntToken(jp.nextToken(), requireNumbers); // ids[1]"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,224,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,225,"verifyIntValue(jp, SAMPLE_SPEC_VALUE_TN_ID2);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,227,"verifyIntToken(jp.nextToken(), requireNumbers); // ids[2]"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,228,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,229,"verifyIntValue(jp, SAMPLE_SPEC_VALUE_TN_ID3);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,231,"verifyIntToken(jp.nextToken(), requireNumbers); // ids[3]"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,232,if (verifyContents) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,233,"verifyIntValue(jp, SAMPLE_SPEC_VALUE_TN_ID4);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,235,"assertToken(JsonToken.END_ARRAY, jp.nextToken()); // 'ids' array"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,237,"assertToken(JsonToken.END_OBJECT, jp.nextToken()); // 'image' object"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,239,"assertToken(JsonToken.END_OBJECT, jp.nextToken()); // main object"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,242,"private void verifyIntToken(JsonToken t, boolean requireNumbers)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,244,if (t == JsonToken.VALUE_NUMBER_INT) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,245,return;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,247,if (requireNumbers) { // to get error
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,248,"assertToken(JsonToken.VALUE_NUMBER_INT, t);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,250,"// if not number, must be String"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,251,if (t != JsonToken.VALUE_STRING) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,252,"fail(""Expected INT or STRING value, got ""+t);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,256,"protected void verifyFieldName(JsonParser jp, String expName)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,257,throws IOException
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,259,"assertEquals(expName, jp.getText());"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,260,"assertEquals(expName, jp.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,263,"protected void verifyIntValue(JsonParser jp, long expValue)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,264,throws IOException
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,266,"// First, via textual"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,267,"assertEquals(String.valueOf(expValue), jp.getText());"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,271,* Method that checks whether Unit tests appear to run from Ant build
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,272,* scripts.
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,274,* @since 1.6
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,276,protected static boolean runsFromAnt() {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,277,"return ""true"".equals(System.getProperty(""FROM_ANT""));"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,282,/* Parser/generator construction
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,286,protected JsonParser createParserUsingReader(String input)
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,287,"throws IOException, JsonParseException"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,289,"return createParserUsingReader(new JsonFactory(), input);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,292,"protected JsonParser createParserUsingReader(JsonFactory f, String input)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,293,"throws IOException, JsonParseException"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,295,return f.createJsonParser(new StringReader(input));
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,298,"protected JsonParser createParserUsingStream(String input, String encoding)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,299,"throws IOException, JsonParseException"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,301,"return createParserUsingStream(new JsonFactory(), input, encoding);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,304,"protected JsonParser createParserUsingStream(JsonFactory f,"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,305,"String input, String encoding)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,306,"throws IOException, JsonParseException"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,309,"/* 23-Apr-2008, tatus: UTF-32 is not supported by JDK, have to"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,310,*   use our own codec too (which is not optimal since there's
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,311,"*   a chance both encoder and decoder might have bugs, but ones"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,312,*   that cancel each other out or such)
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,314,byte[] data;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,315,"if (encoding.equalsIgnoreCase(""UTF-32"")) {"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,316,data = encodeInUTF32BE(input);
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,317,} else {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,318,data = input.getBytes(encoding);
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,320,InputStream is = new ByteArrayInputStream(data);
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,321,return f.createJsonParser(is);
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,326,/* Additional assertion methods
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,330,"protected void assertToken(JsonToken expToken, JsonToken actToken)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,332,if (actToken != expToken) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,333,"fail(""Expected token ""+expToken+"", current token ""+actToken);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,337,"protected void assertToken(JsonToken expToken, JsonParser jp)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,339,"assertToken(expToken, jp.getCurrentToken());"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,342,"protected void assertType(Object ob, Class<?> expType)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,344,if (ob == null) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,345,"fail(""Expected an object of type ""+expType.getName()+"", got null"");"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,347,Class<?> cls = ob.getClass();
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,348,if (!expType.isAssignableFrom(cls)) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,349,"fail(""Expected type ""+expType.getName()+"", got ""+cls.getName());"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,353,"protected void verifyException(Throwable e, String... matches)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,355,String msg = e.getMessage();
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,356,"String lmsg = (msg == null) ? """" : msg.toLowerCase();"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,357,for (String match : matches) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,358,String lmatch = match.toLowerCase();
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,359,if (lmsg.indexOf(lmatch) >= 0) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,360,return;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,363,"fail(""Expected an exception with one of substrings (""+Arrays.asList(matches)+""): got one with message \""""+msg+""\"""");"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,367,* Method that gets textual contents of the current token using
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,368,"* available methods, and ensures results are consistent, before"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,369,* returning them
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,371,protected String getAndVerifyText(JsonParser jp)
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,372,"throws IOException, JsonParseException"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,374,"// Ok, let's verify other accessors"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,375,int actLen = jp.getTextLength();
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,376,char[] ch = jp.getTextCharacters();
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,377,"String str2 = new String(ch, jp.getTextOffset(), actLen);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,378,String str = jp.getText();
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,380,if (str.length() !=  actLen) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,381,"fail(""Internal problem (jp.token == ""+jp.getCurrentToken()+""): jp.getText().length() ['""+str+""'] == ""+str.length()+""; jp.getTextLength() == ""+actLen);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,383,"assertEquals(""String access via getText(), getTextXxx() must be the same"", str, str2);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,385,return str;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,390,/* And other helpers
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,394,protected byte[] encodeInUTF32BE(String input)
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,396,int len = input.length();
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,397,byte[] result = new byte[len * 4];
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,398,int ptr = 0;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,399,"for (int i = 0; i < len; ++i, ptr += 4) {"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,400,char c = input.charAt(i);
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,401,result[ptr] = result[ptr+1] = (byte) 0;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,402,result[ptr+2] = (byte) (c >> 8);
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,403,result[ptr+3] = (byte) c;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,405,return result;
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,408,public String quote(String str) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,409,"return '""'+str+'""';"

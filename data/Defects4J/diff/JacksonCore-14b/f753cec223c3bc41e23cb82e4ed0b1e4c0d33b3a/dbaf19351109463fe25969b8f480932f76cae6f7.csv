is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1050,"eportInvalidNumber(""Missing integer part (next char ""+_getCharDesc(c)+"")"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1050,"return _handleInvalidNumberStart(c, neg);"
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,477,// for [jackson-core#181]
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,479,* Method that tries to test that number parsing works in cases where
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,480,* input is split between buffer boundaries.
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,482,public void testParsingOfLongerSequencesWithNonNumeric() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,484,JsonFactory factory = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,485,factory.enable(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS);
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,486,double[] values = new double[] {
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,487,"0.01, -10.5, 2.1e9, 4.0e-8,"
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,488,"Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY"
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,490,for (int i = 0; i < values.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,491,int COUNT = 4096;
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,492,// Don't see the failure with a multiple of 1
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,493,int VCOUNT = 2 * COUNT;
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,494,"String arrayJson = toJsonArray(values[i], VCOUNT);"
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,495,StringBuilder sb = new StringBuilder(COUNT + arrayJson.length() + 20);
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,496,for (int j = 0; j < COUNT; ++j) {
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,497,sb.append(' ');
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,499,sb.append(arrayJson);
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,500,String DOC = sb.toString();
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,501,for (int input = 0; input < 2; ++input) {
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,502,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,503,if (input == 0) {
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,504,"jp = createParserUsingStream(factory, DOC, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,505,} else {
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,506,jp = factory.createParser(DOC);
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,508,"assertToken(JsonToken.START_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,509,for (int j = 0; j < VCOUNT; ++j) {
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,510,"assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,511,"assertEquals(values[i], jp.getDoubleValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,513,"assertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,514,jp.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,555,/* Helper methods
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,559,"private String toJsonArray(double v, int n) {"
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,560,StringBuilder sb = new StringBuilder().append('[').append(v);
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,561,for (int i = 1; i < n; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,562,"sb.append(',').append(v);"
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,564,return sb.append(']').toString();

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,135," Size of tertiary buckets within tertiary area, in ints."
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,137,rotected int _tertiaryBucketSize;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,140, First part of shift used to get from primary offset into tertiary bucket
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,141, offset (0-based); basically divides primary physical offset into
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,142, logical tertiary bucket index.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,135,* Constant that determines size of buckets for tertiary entries:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,136,"* <code>1 << _tertiaryShift</code> is the size, and shift value"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,137,* is also used for translating from primary offset into
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,138,* tertiary bucket (shift right by <code>4 + _tertiaryShift</code>).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,139,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,140,"* Default value is 2, for buckets of 4 slots; grows bigger with"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,141,* bigger table sizes.
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,144,rotected int _tertiaryOffsetShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,143,protected int _tertiaryShift;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,147, Second part of shift used to get from primary offset into tertiary bucket
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,148," offset (0-based); given logical tertiary bucket index, multiplies by"
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,149, size of tertiary slots to get relative physical offset from start of tertiary area.
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,151,rotected int _tertiaryBucketShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,278,_tertiaryShift = state.tertiaryShift;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,647,"/ so, first tertiary, 4 cells shared by N/16 primary slots"
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,648,nt offset = _tertiaryStart + ((origOffset >> 6) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,640,// tertiary area division is dynamic. First; its size is N/4 compared to
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,641,// primary hash size; and offsets are for 4 int slots. So to get to logical
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,642,"// index would shift by 4. But! Tertiary area is further split into buckets,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,643,"// determined by shift value. And finally, from bucket back into physical offsets"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,644,int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 4)) << (_tertiaryShift + 2));
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,650,"/ Since tertiary uses 4 slots (of 4 ints), let's loop"
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,651,or (int end = offset + 16; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,646,final int bucketSize = (4 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,647,for (int end = offset + bucketSize; offset < end; offset += 4) {
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,673,nt offset = _tertiaryStart + ((origOffset >> 6) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,669,int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 4)) << (_tertiaryShift + 2));
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,676,or (int end = offset + 16; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,672,final int bucketSize = (4 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,673,for (int end = offset + bucketSize; offset < end; offset += 4) {
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,695,nt offset = _tertiaryStart + ((origOffset >> 6) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,692,int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 4)) << (_tertiaryShift + 2));
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,698,or (int end = offset + 16; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,695,final int bucketSize = (4 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,696,for (int end = offset + bucketSize; offset < end; offset += 4) {
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,718,nt offset = _tertiaryStart + ((origOffset >> 6) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,716,int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 4)) << (_tertiaryShift + 2));
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,721,or (int end = offset + 16; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,719,final int bucketSize = (4 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,720,for (int end = offset + bucketSize; offset < end; offset += 4) {
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,807,"/ Yes if above 75%, or above 50% AND have spill-overs"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,806,"// Yes if above 80%, or above 50% AND have ~1% spill-overs"
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,809,f ((_spilloverEnd > _spilloverStart())
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,810,| (_count > (_hashSize - (_hashSize >> 2)))) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,808,int spillCount = (_spilloverEnd - _spilloverStart()) >> 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,810,if ((spillCount > (1 + _count >> 7))
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,811,|| (_count > (_hashSize * 0.80))) {
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,864,ffset2 = _secondaryStart + (_secondaryStart >> 1);
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,865,ffset2 += (offset >> 6) << 2; // and add 1/16th of orig index (but on 4 int boundary)
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,867,f (hashArea[offset2+3] == 0) {
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,868,eturn offset2;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,870,ffset2 += 4;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,871,f (hashArea[offset2+3] == 0) {
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,872,eturn offset2;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,874,ffset2 += 4;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,875,f (hashArea[offset2+3] == 0) {
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,876,eturn offset2;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,878,ffset2 += 4;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,879,f (hashArea[offset2+3] == 0) {
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,880,eturn offset2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,865,offset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 4)) << (_tertiaryShift + 2));
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,866,final int bucketSize = (4 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,867,for (int end = offset2 + bucketSize; offset2 < end; offset2 += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,868,if (hashArea[offset2+3] == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,869,return offset2;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,921, Helper method that calculates start of the spillover area
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,923,rivate final int _spilloverStart() {
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,924,"/ we'll need slot at 1.75x of hashSize, but with 4-ints per slot."
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,925,/ So basically multiply by 7
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,926,nt offset = _hashSize;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,927,eturn (offset << 3) - offset;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,930,rotected void reportTooManyCollisions()
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,932,/ First: do not fuzz about small symbol tables
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,933,f (_hashSize <= 512) { // would have spill-over area of 64 entries
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,934,eturn;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,936,"hrow new IllegalStateException(""Spill-over slots in symbol table with ""+_count"
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,937,""" entries, hash area of ""+_hashSize+"" slots is now full (all """
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,938,"(_hashSize >> 3)+"" slots -- suspect a DoS attack based on hash collisions"");"
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1064,secondaryStart = _hashSize << 2; // 4 ints per entry
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1033,_secondaryStart = (newSize << 2); // 4 ints per entry
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1035,_tertiaryShift = _calcTertiaryShift(newSize);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1108,/* Helper methods
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1113,* Helper method that calculates start of the spillover area
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1115,private final int _spilloverStart() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1116,"// we'll need slot at 1.75x of hashSize, but with 4-ints per slot."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1117,// So basically multiply by 7
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1118,int offset = _hashSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1119,return (offset << 3) - offset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1122,protected void reportTooManyCollisions()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1124,// First: do not fuzz about small symbol tables
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1125,if (_hashSize <= 512) { // would have spill-over area of 64 entries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1126,return;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1128,"throw new IllegalStateException(""Spill-over slots in symbol table with ""+_count"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1129,"+"" entries, hash area of ""+_hashSize+"" slots is now full (all """
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1130,"+(_hashSize >> 3)+"" slots -- suspect a DoS attack based on hash collisions"");"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1133,static int _calcTertiaryShift(int primarySlots)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1135,"// first: we only get 1/4 of slots of primary, to divide"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1136,int tertSlots = (primarySlots) >> 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1138,"// default is 2, meaning buckets of 4 (1 << 2) slots, up to 32 which is 8 buckets of 4 slots"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1139,if (tertSlots < 64) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1140,return 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1142,"// and then up to 256, with 32 buckets of 8 slots"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1143,if (tertSlots < 256) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1144,return 3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1146,"// and 2048, with 128 buckets of 16 slots"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1147,if (tertSlots < 1024) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1148,return 4;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1150,if (tertSlots < 4096) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1151,return 5;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1153,// and biggest buckets have 64 slots
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1154,return 6;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1174,public final int tertiaryShift;
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1158,"ublic TableInfo(int size, int count, int[] mainHash, String[] names,"
False,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1159,"nt spilloverEnd, int longNameOffset)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1180,"public TableInfo(int size, int count, int tertiaryShift,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1181,"int[] mainHash, String[] names, int spilloverEnd, int longNameOffset)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1185,this.tertiaryShift = tertiaryShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1196,tertiaryShift = src._tertiaryShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1205,int tertShift = _calcTertiaryShift(sz);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1209,"tertShift,"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,147,"ystem.out.println(""New symbols: ""+symbolsB);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,147,"//System.out.println(""New symbols: ""+symbolsB);"

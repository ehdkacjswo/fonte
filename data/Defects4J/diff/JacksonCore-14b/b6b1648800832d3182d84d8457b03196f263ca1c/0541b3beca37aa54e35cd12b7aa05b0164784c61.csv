is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,5,import org.junit.Assert;
True,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,51,public void testHashCalc() throws Exception
True,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,53,CharsToNameCanonicalizer sym = CharsToNameCanonicalizer.createRoot(123);
True,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,54,"char[] str1 = ""foo"".toCharArray();"
True,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,55,"char[] str2 = "" foo "".toCharArray();"
True,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,57,"assertEquals(sym.calcHash(str1, 0, 3), sym.calcHash(str2, 1, 3));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,45,final int SEED = 33333;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,46,ytesToNameCanonicalizer.createRoot(33333).makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,47,BytesToNameCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());
False,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,38,/ First just verify we got collisions for JDK too
False,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,39,/ ... only works if we use 31
False,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,41,nt hash = coll.get(0).hashCode();
False,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,42,"or (int i = 1, end = coll.size(); i < end; ++i) {"
False,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,43,f (coll.get(i).hashCode() != hash) {
False,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,44,"ail(""String #""+i+"" has different hash (0x""+Integer.toHexString(coll.get(i).hashCode())"
False,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,45,"""), expected 0x""+Integer.toHexString(hash));"
True,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,50,// First: attempt with exceptions turned on; should catch an exception
True,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,55,jf.enable(JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW);
True,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,57,try {
True,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,58,while (jp.nextToken() != null) {
True,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,61,"fail(""Should have failed"");"
True,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,62,} catch (IllegalStateException e) {
True,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,63,"verifyException(e, ""foo"");"
True,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,65,jp.close();
True,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,67,"// but then without feature, should pass"
True,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,68,jf = new JsonFactory();
True,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,69,jf.disable(JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW);
False,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,67,"/ and if we got here, fine"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,250, Get the sign information (works even for 0).
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,252, @param d the value to check
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,254," @return +1.0 or -1.0, never 0.0"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,256,rivate static double getSign(double d){ // TODO perhaps move to MathUtils?
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,257,ong l = Double.doubleToLongBits(d);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,258,eturn l < 0 ? -1.0 : 1.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2801,eturn leftPlane ? getSign(xa) * Math.PI : xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2789,"return leftPlane ? copySign(Math.PI, xa) : xa;"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2960,eturn getSign(y) * Math.PI;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2948,"return copySign(Math.PI, y);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3729,* Returns the first argument with the sign of the second argument.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3730,* A NaN {@code sign} argument is treated as positive.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3732,* @param magnitude the value to return
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3733,* @param sign the sign for the returned value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3734,* @return the magnitude with the same sign as the {@code sign} argument
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3736,"public static double copySign(double magnitude, double sign){"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3737,long m = Double.doubleToLongBits(magnitude);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3738,long s = Double.doubleToLongBits(sign);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3739,if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3740,return magnitude;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3742,return -magnitude; // flip sign
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3746,* Returns the first argument with the sign of the second argument.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3747,* A NaN {@code sign} argument is treated as positive.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3749,* @param magnitude the value to return
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3750,* @param sign the sign for the returned value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3751,* @return the magnitude with the same sign as the {@code sign} argument
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3753,"public static float copySign(float magnitude, float sign){"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3754,int m = Float.floatToIntBits(magnitude);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3755,int s = Float.floatToIntBits(sign);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3756,if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3757,return magnitude;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3759,return -magnitude; // flip sign

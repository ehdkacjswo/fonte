is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,15, limitations under the License.
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,17,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,20,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,23," Implements the <a href=""http://mathworld.wolfram.com/NevillesAlgorithm.html"">"
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,24, Neville's Algorithm</a> for interpolation of real univariate functions. For
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,25," reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X,"
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,26, chapter 2.
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,27, <p>
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,28," The actual code of Neville's evalution is in PolynomialFunctionLagrangeForm,"
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,29, this class provides an easy-to-use interface to it.
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,31, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,33,"ublic class NevilleInterpolator implements UnivariateRealInterpolator,"
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,34,erializable {
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,36,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,37,tatic final long serialVersionUID = 3003707660147873733L;
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,40, Computes an interpolating function for the data set.
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,42, @param x the interpolating points array
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,43, @param y the interpolating values array
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,44, @return a function which interpolates the data set
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,45, @throws MathException if arguments are invalid
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,47,"ublic UnivariateRealFunction interpolate(double x[], double y[]) throws"
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,48,athException {
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,50,olynomialFunctionLagrangeForm p;
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,51," = new PolynomialFunctionLagrangeForm(x, y);"
False,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,52,eturn p;
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,17,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,20,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,23,"* Implements the <a href=""http://mathworld.wolfram.com/NevillesAlgorithm.html"">"
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,24,* Neville's Algorithm</a> for interpolation of real univariate functions. For
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,25,"* reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X,"
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,26,* chapter 2.
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,27,* <p>
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,28,"* The actual code of Neville's evalution is in PolynomialFunctionLagrangeForm,"
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,29,* this class provides an easy-to-use interface to it.
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,31,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,33,"public class NevilleInterpolator implements UnivariateRealInterpolator,"
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,34,Serializable {
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,36,/** serializable version identifier */
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,37,static final long serialVersionUID = 3003707660147873733L;
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,40,* Computes an interpolating function for the data set.
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,42,* @param x the interpolating points array
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,43,* @param y the interpolating values array
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,44,* @return a function which interpolates the data set
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,45,* @throws MathException if arguments are invalid
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,47,"public UnivariateRealFunction interpolate(double x[], double y[]) throws"
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,48,MathException {
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,50,PolynomialFunctionLagrangeForm p;
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,51,"p = new PolynomialFunctionLagrangeForm(x, y);"
True,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,src/java/org/apache/commons/math/analysis/NevilleInterpolator.java,52,return p;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,15, limitations under the License.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,17,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,20,mport org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,23, Implements the representation of a real polynomial function in
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,24," Newton Form. For reference, see <b>Elementary Numerical Analysis</b>,"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,25," ISBN 0070124477, chapter 2."
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,26, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,27, The formula of polynomial in Newton form is
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,28,     p(x) = a[0] + a[1](x-c[0]) + a[2](x-c[0])(x-c[1]) + ... +
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,29,            a[n](x-c[0])(x-c[1])...(x-c[n-1])
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,30, Note that the length of a[] is one more than the length of c[]
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,32, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,34,"ublic class PolynomialFunctionNewtonForm implements UnivariateRealFunction,"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,35,erializable {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,37,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,38,tatic final long serialVersionUID = -3353896576191389897L;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,41," The coefficients of the polynomial, ordered by degree -- i.e."
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,42, coefficients[0] is the constant term and coefficients[n] is the
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,43, coefficient of x^n where n is the degree of the polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,45,rivate double coefficients[];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,48, Members of c[] are called centers of the Newton polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,49," When all c[i] = 0, a[] becomes normal polynomial coefficients,"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,50, i.e. a[i] = coefficients[i].
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,52,"rivate double a[], c[];"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,55, Whether the polynomial coefficients are available.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,57,rivate boolean coefficientsComputed;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,60, Construct a Newton polynomial with the given a[] and c[]. The order of
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,61," centers are important in that if c[] shuffle, then values of a[] would"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,62," completely change, not just a permutation of old a[]."
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,63, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,64, The constructor makes copy of the input arrays and assigns them.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,66, @param a the coefficients in Newton form formula
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,67, @param c the centers
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,68, @throws IllegalArgumentException if input arrays are not valid
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,70,"olynomialFunctionNewtonForm(double a[], double c[]) throws"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,71,llegalArgumentException {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,73,"erifyInputArray(a, c);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,74,his.a = new double[a.length];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,75,his.c = new double[c.length];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,76,"ystem.arraycopy(a, 0, this.a, 0, a.length);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,77,"ystem.arraycopy(c, 0, this.c, 0, c.length);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,78,oefficientsComputed = false;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,82, Calculate the function value at the given point.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,84, @param z the point at which the function value is to be computed
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,85, @return the function value
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,86, @throws FunctionEvaluationException if a runtime error occurs
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,87, @see UnivariateRealFunction#value(double)
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,89,ublic double value(double z) throws FunctionEvaluationException {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,90,"eturn evaluate(a, c, z);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,94, Returns the degree of the polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,96, @return the degree of the polynomial
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,98,ublic int degree() {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,99,eturn c.length;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,103, Returns a copy of coefficients in Newton form formula.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,104, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,105, Changes made to the returned copy will not affect the polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,107, @return a fresh copy of coefficients in Newton form formula
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,109,ublic double[] getNewtonCoefficients() {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,110,ouble[] out = new double[a.length];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,111,"ystem.arraycopy(a, 0, out, 0, a.length);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,112,eturn out;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,116, Returns a copy of the centers array.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,117, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,118, Changes made to the returned copy will not affect the polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,120, @return a fresh copy of the centers array
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,122,ublic double[] getCenters() {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,123,ouble[] out = new double[c.length];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,124,"ystem.arraycopy(c, 0, out, 0, c.length);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,125,eturn out;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,129, Returns a copy of the coefficients array.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,130, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,131, Changes made to the returned copy will not affect the polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,133, @return a fresh copy of the coefficients array
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,135,ublic double[] getCoefficients() {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,136,f (!coefficientsComputed) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,137,omputeCoefficients();
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,139,ouble[] out = new double[coefficients.length];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,140,"ystem.arraycopy(coefficients, 0, out, 0, coefficients.length);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,141,eturn out;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,145, Evaluate the Newton polynomial using nested multiplication. It is
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,146," also called <a href=""http://mathworld.wolfram.com/HornersRule.html"">"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,147, Horner's Rule</a> and takes O(N) time.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,149, @param a the coefficients in Newton form formula
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,150, @param c the centers
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,151, @param z the point at which the function value is to be computed
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,152, @return the function value
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,153, @throws FunctionEvaluationException if a runtime error occurs
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,154, @throws IllegalArgumentException if inputs are not valid
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,156,"ublic static double evaluate(double a[], double c[], double z) throws"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,157,"unctionEvaluationException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,159,"erifyInputArray(a, c);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,161,nt n = c.length;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,162,ouble value = a[n];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,163,or (int i = n-1; i >= 0; i--) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,164,alue = a[i] + (z - c[i]) * value;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,167,eturn value;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,171, Calculate the normal polynomial coefficients given the Newton form.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,172, It also uses nested multiplication but takes O(N^2) time.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,174,rotected void computeCoefficients() {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,175,"nt i, j, n = degree();"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,177,oefficients = new double[n+1];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,178,or (i = 0; i <= n; i++) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,179,oefficients[i] = 0.0;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,182,oefficients[0] = a[n];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,183,or (i = n-1; i >= 0; i--) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,184,or (j = n-i; j > 0; j--) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,185,oefficients[j] = coefficients[j-1] - c[i] * coefficients[j];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,187,oefficients[0] = a[i] - c[i] * coefficients[0];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,190,oefficientsComputed = true;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,194, Verifies that the input arrays are valid.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,195, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,196," The centers must be distinct for interpolation purposes, but not"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,197, for general use. Thus it is not verified here.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,199, @throws IllegalArgumentException if not valid
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,200," @see DividedDifferenceInterpolator#computeDividedDifference(double[],"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,201, double[])
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,203,"rotected static void verifyInputArray(double a[], double c[]) throws"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,204,llegalArgumentException {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,206,f (a.length < 1 || c.length < 1) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,207,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,208,"""Input arrays must not be empty."");"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,210,f (a.length != c.length + 1) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,211,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,212,"""Bad input array sizes, should have difference 1."");"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,17,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,23,* Implements the representation of a real polynomial function in
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,24,"* Newton Form. For reference, see <b>Elementary Numerical Analysis</b>,"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,25,"* ISBN 0070124477, chapter 2."
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,26,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,27,* The formula of polynomial in Newton form is
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,28,*     p(x) = a[0] + a[1](x-c[0]) + a[2](x-c[0])(x-c[1]) + ... +
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,29,*            a[n](x-c[0])(x-c[1])...(x-c[n-1])
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,30,* Note that the length of a[] is one more than the length of c[]
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,32,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,34,"public class PolynomialFunctionNewtonForm implements UnivariateRealFunction,"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,35,Serializable {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,37,/** serializable version identifier */
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,38,static final long serialVersionUID = -3353896576191389897L;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,41,"* The coefficients of the polynomial, ordered by degree -- i.e."
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,42,* coefficients[0] is the constant term and coefficients[n] is the
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,43,* coefficient of x^n where n is the degree of the polynomial.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,45,private double coefficients[];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,48,* Members of c[] are called centers of the Newton polynomial.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,49,"* When all c[i] = 0, a[] becomes normal polynomial coefficients,"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,50,* i.e. a[i] = coefficients[i].
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,52,"private double a[], c[];"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,55,* Whether the polynomial coefficients are available.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,57,private boolean coefficientsComputed;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,60,* Construct a Newton polynomial with the given a[] and c[]. The order of
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,61,"* centers are important in that if c[] shuffle, then values of a[] would"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,62,"* completely change, not just a permutation of old a[]."
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,63,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,64,* The constructor makes copy of the input arrays and assigns them.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,66,* @param a the coefficients in Newton form formula
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,67,* @param c the centers
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,68,* @throws IllegalArgumentException if input arrays are not valid
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,70,"PolynomialFunctionNewtonForm(double a[], double c[]) throws"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,71,IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,73,"verifyInputArray(a, c);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,74,this.a = new double[a.length];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,75,this.c = new double[c.length];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,76,"System.arraycopy(a, 0, this.a, 0, a.length);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,77,"System.arraycopy(c, 0, this.c, 0, c.length);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,78,coefficientsComputed = false;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,82,* Calculate the function value at the given point.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,84,* @param z the point at which the function value is to be computed
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,85,* @return the function value
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,86,* @throws FunctionEvaluationException if a runtime error occurs
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,87,* @see UnivariateRealFunction#value(double)
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,89,public double value(double z) throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,90,"return evaluate(a, c, z);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,94,* Returns the degree of the polynomial.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,96,* @return the degree of the polynomial
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,98,public int degree() {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,99,return c.length;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,103,* Returns a copy of coefficients in Newton form formula.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,104,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,105,* Changes made to the returned copy will not affect the polynomial.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,107,* @return a fresh copy of coefficients in Newton form formula
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,109,public double[] getNewtonCoefficients() {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,110,double[] out = new double[a.length];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,111,"System.arraycopy(a, 0, out, 0, a.length);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,112,return out;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,116,* Returns a copy of the centers array.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,117,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,118,* Changes made to the returned copy will not affect the polynomial.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,120,* @return a fresh copy of the centers array
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,122,public double[] getCenters() {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,123,double[] out = new double[c.length];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,124,"System.arraycopy(c, 0, out, 0, c.length);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,125,return out;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,129,* Returns a copy of the coefficients array.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,130,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,131,* Changes made to the returned copy will not affect the polynomial.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,133,* @return a fresh copy of the coefficients array
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,135,public double[] getCoefficients() {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,136,if (!coefficientsComputed) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,137,computeCoefficients();
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,139,double[] out = new double[coefficients.length];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,140,"System.arraycopy(coefficients, 0, out, 0, coefficients.length);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,141,return out;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,145,* Evaluate the Newton polynomial using nested multiplication. It is
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,146,"* also called <a href=""http://mathworld.wolfram.com/HornersRule.html"">"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,147,* Horner's Rule</a> and takes O(N) time.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,149,* @param a the coefficients in Newton form formula
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,150,* @param c the centers
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,151,* @param z the point at which the function value is to be computed
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,152,* @return the function value
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,153,* @throws FunctionEvaluationException if a runtime error occurs
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,154,* @throws IllegalArgumentException if inputs are not valid
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,156,"public static double evaluate(double a[], double c[], double z) throws"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,157,"FunctionEvaluationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,159,"verifyInputArray(a, c);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,161,int n = c.length;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,162,double value = a[n];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,163,for (int i = n-1; i >= 0; i--) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,164,value = a[i] + (z - c[i]) * value;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,167,return value;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,171,* Calculate the normal polynomial coefficients given the Newton form.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,172,* It also uses nested multiplication but takes O(N^2) time.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,174,protected void computeCoefficients() {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,175,"int i, j, n = degree();"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,177,coefficients = new double[n+1];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,178,for (i = 0; i <= n; i++) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,179,coefficients[i] = 0.0;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,182,coefficients[0] = a[n];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,183,for (i = n-1; i >= 0; i--) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,184,for (j = n-i; j > 0; j--) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,185,coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,187,coefficients[0] = a[i] - c[i] * coefficients[0];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,190,coefficientsComputed = true;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,194,* Verifies that the input arrays are valid.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,195,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,196,"* The centers must be distinct for interpolation purposes, but not"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,197,* for general use. Thus it is not verified here.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,199,* @throws IllegalArgumentException if not valid
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,200,"* @see DividedDifferenceInterpolator#computeDividedDifference(double[],"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,201,* double[])
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,203,"protected static void verifyInputArray(double a[], double c[]) throws"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,204,IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,206,if (a.length < 1 || c.length < 1) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,207,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,208,"(""Input arrays must not be empty."");"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,210,if (a.length != c.length + 1) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,211,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java,212,"(""Bad input array sizes, should have difference 1."");"
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,15, limitations under the License.
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,18,ackage org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,21, Cauchy Distribution.
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,22, Instances of CauchyDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,23," {@link DistributionFactory#createCauchyDistribution(double, double)}.<p>"
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,25, <p>
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,26, References:<p>
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,27, <ul>
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,28," <li><a href=""http://mathworld.wolfram.com/CauchyDistribution.html"">"
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,29, Cauchy Distribution</a></li>
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,30, </ul>
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,31, </p>
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,33, @since 1.1
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,34, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,36,ublic interface CauchyDistribution extends ContinuousDistribution {
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,39, Access the median.
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,40, @return median for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,42,ouble getMedian();
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,45, Access the scale parameter.
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,46, @return scale parameter for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,48,ouble getScale();
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,51, Modify the median.
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,52, @param median for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,54,oid setMedian(double median);
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,57, Modify the scale parameter.
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,58, @param s scale parameter for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,60,oid setScale(double s);
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,18,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,21,* Cauchy Distribution.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,22,* Instances of CauchyDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,23,"* {@link DistributionFactory#createCauchyDistribution(double, double)}.<p>"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,25,* <p>
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,26,* References:<p>
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,27,* <ul>
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,28,"* <li><a href=""http://mathworld.wolfram.com/CauchyDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,29,* Cauchy Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,30,* </ul>
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,31,* </p>
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,33,* @since 1.1
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,34,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,36,public interface CauchyDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,39,* Access the median.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,40,* @return median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,42,double getMedian();
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,45,* Access the scale parameter.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,46,* @return scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,48,double getScale();
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,51,* Modify the median.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,52,* @param median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,54,void setMedian(double median);
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,57,* Modify the scale parameter.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,58,* @param s scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,60,void setScale(double s);
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,15, limitations under the License.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,18,ackage org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,23, Default implementation of
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,24, {@link org.apache.commons.math.distribution.CauchyDistribution}.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,26, @since 1.1
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,27, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,29,ublic class CauchyDistributionImpl extends AbstractContinuousDistribution
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,30,"mplements CauchyDistribution, Serializable {"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,32,** Serializable version identifier */
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,33,rivate static final long serialVersionUID = 8589540077390120676L;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,35,** The median of this distribution. */
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,36,rivate double median = 0;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,38,** The scale of this distribution. */
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,39,rivate double scale = 1;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,42, Creates cauchy distribution with the medain equal to zero and scale
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,43, equal to one.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,45,ublic CauchyDistributionImpl(){
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,46,"his(0.0, 1.0);"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,50, Create a cauchy distribution using the given median and scale.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,51, @param median median for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,52, @param s scale parameter for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,54,"ublic CauchyDistributionImpl(double median, double s){"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,55,uper();
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,56,etMedian(median);
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,57,etScale(s);
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,61," For this disbution, X, this method returns P(X &lt; <code>x</code>)."
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,62, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,63, @return CDF evaluted at <code>x</code>.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,65,ublic double cumulativeProbability(double x) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,66,eturn 0.5 + (Math.atan((x - median) / scale) / Math.PI);
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,70, Access the median.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,71, @return median for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,73,ublic double getMedian() {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,74,eturn median;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,78, Access the scale parameter.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,79, @return scale parameter for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,81,ublic double getScale() {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,82,eturn scale;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,86," For this distribution, X, this method returns the critical point x, such"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,87, that P(X &lt; x) = <code>p</code>.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,88, <p>
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,89, Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,90, <code>Double.POSITIVE_INFINITY</code> for p=1.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,92, @param p the desired probability
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,93," @return x, such that P(X &lt; x) = <code>p</code>"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,94, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,95,         probability.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,97,ublic double inverseCumulativeProbability(double p) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,98,ouble ret;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,99,f (p < 0.0 || p > 1.0) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,100,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,101,"""probability argument must be between 0 and 1 (inclusive)"");"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,102, else if (p == 0) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,103,et = Double.NEGATIVE_INFINITY;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,104, else  if (p == 1) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,105,et = Double.POSITIVE_INFINITY;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,106, else {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,107,et = median + scale * Math.tan(Math.PI * (p - .5));
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,109,eturn ret;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,113, Modify the median.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,114, @param median for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,116,ublic void setMedian(double median) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,117,his.median = median;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,121, Modify the scale parameter.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,122, @param s scale parameter for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,123, @throws IllegalArgumentException if <code>sd</code> is not positive.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,125,ublic void setScale(double s) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,126,f (s <= 0.0) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,127,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,128,"Scale must be positive."");"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,130,cale = s;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,134," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,135, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,136, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,138, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,139," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,140,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,142,rotected double getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,143,ouble ret;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,145,f (p < .5) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,146,et = -Double.MAX_VALUE;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,147, else {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,148,et = getMedian();
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,151,eturn ret;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,155," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,156, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,157, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,159, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,160," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,161,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,163,rotected double getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,164,ouble ret;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,166,f (p < .5) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,167,et = getMedian();
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,168, else {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,169,et = Double.MAX_VALUE;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,172,eturn ret;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,176," Access the initial domain value, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,177, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,178, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,180, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,181, @return initial domain value
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,183,rotected double getInitialDomain(double p) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,184,ouble ret;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,186,f (p < .5) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,187,et = getMedian() - getScale();
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,188, else if (p > .5) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,189,et = getMedian() + getScale();
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,190, else {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,191,et = getMedian();
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,194,eturn ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,18,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,23,* Default implementation of
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,24,* {@link org.apache.commons.math.distribution.CauchyDistribution}.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,26,* @since 1.1
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,27,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,29,public class CauchyDistributionImpl extends AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,30,"implements CauchyDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,32,/** Serializable version identifier */
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,33,private static final long serialVersionUID = 8589540077390120676L;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,35,/** The median of this distribution. */
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,36,private double median = 0;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,38,/** The scale of this distribution. */
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,39,private double scale = 1;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,42,* Creates cauchy distribution with the medain equal to zero and scale
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,43,* equal to one.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,45,public CauchyDistributionImpl(){
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,46,"this(0.0, 1.0);"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,50,* Create a cauchy distribution using the given median and scale.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,51,* @param median median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,52,* @param s scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,54,"public CauchyDistributionImpl(double median, double s){"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,55,super();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,56,setMedian(median);
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,57,setScale(s);
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,61,"* For this disbution, X, this method returns P(X &lt; <code>x</code>)."
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,62,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,63,* @return CDF evaluted at <code>x</code>.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,65,public double cumulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,66,return 0.5 + (Math.atan((x - median) / scale) / Math.PI);
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,70,* Access the median.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,71,* @return median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,73,public double getMedian() {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,74,return median;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,78,* Access the scale parameter.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,79,* @return scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,81,public double getScale() {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,82,return scale;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,86,"* For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,87,* that P(X &lt; x) = <code>p</code>.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,88,* <p>
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,89,* Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,90,* <code>Double.POSITIVE_INFINITY</code> for p=1.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,92,* @param p the desired probability
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,93,"* @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,94,* @throws IllegalArgumentException if <code>p</code> is not a valid
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,95,*         probability.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,97,public double inverseCumulativeProbability(double p) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,98,double ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,99,if (p < 0.0 || p > 1.0) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,100,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,101,"(""probability argument must be between 0 and 1 (inclusive)"");"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,102,} else if (p == 0) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,103,ret = Double.NEGATIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,104,} else  if (p == 1) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,105,ret = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,106,} else {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,107,ret = median + scale * Math.tan(Math.PI * (p - .5));
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,109,return ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,113,* Modify the median.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,114,* @param median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,116,public void setMedian(double median) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,117,this.median = median;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,121,* Modify the scale parameter.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,122,* @param s scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,123,* @throws IllegalArgumentException if <code>sd</code> is not positive.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,125,public void setScale(double s) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,126,if (s <= 0.0) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,127,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,128,"""Scale must be positive."");"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,130,scale = s;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,134,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,135,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,136,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,138,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,139,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,140,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,142,protected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,143,double ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,145,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,146,ret = -Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,147,} else {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,148,ret = getMedian();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,151,return ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,155,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,156,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,157,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,159,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,160,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,161,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,163,protected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,164,double ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,166,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,167,ret = getMedian();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,168,} else {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,169,ret = Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,172,return ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,176,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,177,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,178,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,180,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,181,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,183,protected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,184,double ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,186,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,187,ret = getMedian() - getScale();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,188,} else if (p > .5) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,189,ret = getMedian() + getScale();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,190,} else {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,191,ret = getMedian();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,194,return ret;
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,15, limitations under the License.
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,18,ackage org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,21, Weibull Distribution.  This interface defines the two parameter form of the
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,22, distribution as defined by
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,23," <a href=""http://mathworld.wolfram.com/WeibullDistribution.html"">"
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,24," Weibull Distribution</a>, equations (1) and (2)."
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,26, Instances of WeibullDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,27," {@link DistributionFactory#createWeibullDistribution(double, double)}"
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,29, <p>
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,30, References:
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,31, <ul>
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,32," <li><a href=""http://mathworld.wolfram.com/WeibullDistribution.html"">"
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,33, Weibull Distribution</a></li>
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,34, </ul>
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,35, </p>
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,37, @since 1.1
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,38," @version $Revision: 1.12 $ $Date: 2004-06-23 11:26:18 -0500 (Wed, 23 Jun 2004) $"
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,40,ublic interface WeibullDistribution extends ContinuousDistribution {
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,43, Access the shape parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,44, @return the shape parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,46,ouble getShape();
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,49, Access the scale parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,50, @return the scale parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,52,ouble getScale();
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,55, Modify the shape parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,56, @param alpha The new shape parameter value.
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,58,oid setShape(double alpha);
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,61, Modify the scale parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,62, @param beta The new scale parameter value.
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,64,oid setScale(double beta);
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,18,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,21,* Weibull Distribution.  This interface defines the two parameter form of the
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,22,* distribution as defined by
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,23,"* <a href=""http://mathworld.wolfram.com/WeibullDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,24,"* Weibull Distribution</a>, equations (1) and (2)."
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,26,* Instances of WeibullDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,27,"* {@link DistributionFactory#createWeibullDistribution(double, double)}"
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,29,* <p>
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,30,* References:
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,31,* <ul>
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,32,"* <li><a href=""http://mathworld.wolfram.com/WeibullDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,33,* Weibull Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,34,* </ul>
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,35,* </p>
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,37,* @since 1.1
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,38,"* @version $Revision: 1.12 $ $Date: 2004-06-23 11:26:18 -0500 (Wed, 23 Jun 2004) $"
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,40,public interface WeibullDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,43,* Access the shape parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,44,* @return the shape parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,46,double getShape();
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,49,* Access the scale parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,50,* @return the scale parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,52,double getScale();
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,55,* Modify the shape parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,56,* @param alpha The new shape parameter value.
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,58,void setShape(double alpha);
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,61,* Modify the scale parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,62,* @param beta The new scale parameter value.
True,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,64,void setScale(double beta);
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,15, limitations under the License.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,18,ackage org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,23, Default implementation of
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,24, {@link org.apache.commons.math.distribution.WeibullDistribution}.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,26, @since 1.1
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,27," @version $Revision: 1.13 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,29,ublic class WeibullDistributionImpl extends AbstractContinuousDistribution
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,30,"mplements WeibullDistribution, Serializable {"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,32,** Serializable version identifier */
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,33,rivate static final long serialVersionUID = 8589540077390120676L;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,35,** The shape parameter. */
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,36,rivate double alpha;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,38,** The scale parameter. */
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,39,rivate double beta;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,42, Creates weibull distribution with the given shape and scale and a
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,43, location equal to zero.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,44, @param alpha the shape parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,45, @param beta the scale parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,47,"ublic WeibullDistributionImpl(double alpha, double beta){"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,48,uper();
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,49,etShape(alpha);
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,50,etScale(beta);
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,54," For this disbution, X, this method returns P(X &lt; <code>x</code>)."
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,55, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,56, @return CDF evaluted at <code>x</code>.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,58,ublic double cumulativeProbability(double x) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,59,ouble ret;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,60,f (x <= 0.0) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,61,et = 0.0;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,62, else {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,63,"et = 1.0 - Math.exp(-Math.pow(x / getScale(), getShape()));"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,65,eturn ret;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,69, Access the shape parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,70, @return the shape parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,72,ublic double getShape() {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,73,eturn alpha;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,77, Access the scale parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,78, @return the scale parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,80,ublic double getScale() {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,81,eturn beta;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,85," For this distribution, X, this method returns the critical point x, such"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,86, that P(X &lt; x) = <code>p</code>.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,87, <p>
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,88, Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,89, <code>Double.POSITIVE_INFINITY</code> for p=1.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,91, @param p the desired probability
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,92," @return x, such that P(X &lt; x) = <code>p</code>"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,93, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,94,         probability.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,96,ublic double inverseCumulativeProbability(double p) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,97,ouble ret;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,98,f (p < 0.0 || p > 1.0) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,99,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,100,"""probability argument must be between 0 and 1 (inclusive)"");"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,101, else if (p == 0) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,102,et = 0.0;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,103, else  if (p == 1) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,104,et = Double.POSITIVE_INFINITY;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,105, else {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,106,"et = getScale() * Math.pow(-Math.log(1.0 - p), 1.0 / getShape());"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,108,eturn ret;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,112, Modify the shape parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,113, @param alpha the new shape parameter value.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,115,ublic void setShape(double alpha) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,116,f (alpha <= 0.0) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,117,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,118,"Shape must be positive."");"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,120,his.alpha = alpha;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,124, Modify the scale parameter.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,125, @param beta the new scale parameter value.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,127,ublic void setScale(double beta) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,128,f (beta <= 0.0) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,129,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,130,"Scale must be positive."");"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,132,his.beta = beta;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,136," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,137, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,138, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,140, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,141," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,142,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,144,rotected double getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,145,eturn 0.0;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,149," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,150, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,151, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,153, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,154," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,155,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,157,rotected double getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,158,eturn Double.MAX_VALUE;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,162," Access the initial domain value, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,163, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,164, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,166, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,167, @return initial domain value
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,169,rotected double getInitialDomain(double p) {
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,170,/ use median
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,171,"eturn Math.pow(getScale() * Math.log(2.0), 1.0 / getShape());"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,18,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,23,* Default implementation of
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,24,* {@link org.apache.commons.math.distribution.WeibullDistribution}.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,26,* @since 1.1
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,27,"* @version $Revision: 1.13 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,29,public class WeibullDistributionImpl extends AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,30,"implements WeibullDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,32,/** Serializable version identifier */
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,33,private static final long serialVersionUID = 8589540077390120676L;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,35,/** The shape parameter. */
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,36,private double alpha;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,38,/** The scale parameter. */
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,39,private double beta;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,42,* Creates weibull distribution with the given shape and scale and a
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,43,* location equal to zero.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,44,* @param alpha the shape parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,45,* @param beta the scale parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,47,"public WeibullDistributionImpl(double alpha, double beta){"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,48,super();
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,49,setShape(alpha);
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,50,setScale(beta);
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,54,"* For this disbution, X, this method returns P(X &lt; <code>x</code>)."
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,55,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,56,* @return CDF evaluted at <code>x</code>.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,58,public double cumulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,59,double ret;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,60,if (x <= 0.0) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,61,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,62,} else {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,63,"ret = 1.0 - Math.exp(-Math.pow(x / getScale(), getShape()));"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,65,return ret;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,69,* Access the shape parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,70,* @return the shape parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,72,public double getShape() {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,73,return alpha;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,77,* Access the scale parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,78,* @return the scale parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,80,public double getScale() {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,81,return beta;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,85,"* For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,86,* that P(X &lt; x) = <code>p</code>.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,87,* <p>
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,88,* Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,89,* <code>Double.POSITIVE_INFINITY</code> for p=1.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,91,* @param p the desired probability
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,92,"* @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,93,* @throws IllegalArgumentException if <code>p</code> is not a valid
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,94,*         probability.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,96,public double inverseCumulativeProbability(double p) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,97,double ret;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,98,if (p < 0.0 || p > 1.0) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,99,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,100,"(""probability argument must be between 0 and 1 (inclusive)"");"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,101,} else if (p == 0) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,102,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,103,} else  if (p == 1) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,104,ret = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,105,} else {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,106,"ret = getScale() * Math.pow(-Math.log(1.0 - p), 1.0 / getShape());"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,108,return ret;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,112,* Modify the shape parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,113,* @param alpha the new shape parameter value.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,115,public void setShape(double alpha) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,116,if (alpha <= 0.0) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,117,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,118,"""Shape must be positive."");"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,120,this.alpha = alpha;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,124,* Modify the scale parameter.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,125,* @param beta the new scale parameter value.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,127,public void setScale(double beta) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,128,if (beta <= 0.0) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,129,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,130,"""Scale must be positive."");"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,132,this.beta = beta;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,136,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,137,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,138,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,140,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,141,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,142,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,144,protected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,145,return 0.0;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,149,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,150,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,151,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,153,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,154,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,155,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,157,protected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,158,return Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,162,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,163,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,164,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,166,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,167,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,169,protected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,170,// use median
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,171,"return Math.pow(getScale() * Math.log(2.0), 1.0 / getShape());"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,15, limitations under the License.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,18,ackage org.apache.commons.math.fraction;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,21,mport java.text.FieldPosition;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,22,mport java.text.Format;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,23,mport java.text.NumberFormat;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,24,mport java.text.ParseException;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,25,mport java.text.ParsePosition;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,26,mport java.util.Locale;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,28,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,31, Formats a Fraction number in proper format or improper format.  The number
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,32," format for each of the whole number, numerator and, denominator can be"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,33, configured.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,35, @since 1.1
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,36, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,38,ublic class FractionFormat extends Format implements Serializable {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,40,** Serializable version identifier */
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,41,rivate static final long serialVersionUID = -6337346779577272306L;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,43,** The format used for the denominator. */
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,44,rivate NumberFormat denominatorFormat;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,46,** The format used for the numerator. */
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,47,rivate NumberFormat numeratorFormat;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,50, Create an improper formatting instance with the default number format
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,51, for the numerator and denominator.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,53,ublic FractionFormat() {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,54,his(getDefaultNumberFormat());
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,58, Create an improper formatting instance with a custom number format for
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,59, both the numerator and denominator.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,60, @param format the custom format for both the numerator and denominator.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,62,ublic FractionFormat(NumberFormat format) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,63,"his(format, (NumberFormat)format.clone());"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,67, Create an improper formatting instance with a custom number format for
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,68, the numerator and a custom number format for the denominator.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,69, @param numeratorFormat the custom format for the numerator.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,70, @param denominatorFormat the custom format for the denominator.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,72,"ublic FractionFormat(NumberFormat numeratorFormat,"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,73,umberFormat denominatorFormat)
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,75,uper();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,76,his.numeratorFormat = numeratorFormat;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,77,his.denominatorFormat = denominatorFormat;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,81, This static method calls formatFraction() on a default instance of
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,82, FractionFormat.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,84, @param f Fraction object to format
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,85, @return A formatted fraction in proper form.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,87,ublic static String formatFraction(Fraction f) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,88,eturn getImproperInstance().format(f);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,92, Get the set of locales for which complex formats are available.  This
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,93, is the same set as the {@link NumberFormat} set.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,94, @return available complex format locales.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,96,ublic static Locale[] getAvailableLocales() {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,97,eturn NumberFormat.getAvailableLocales();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,101, Returns the default complex format for the current locale.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,102, @return the default complex format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,104,ublic static FractionFormat getImproperInstance() {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,105,eturn getImproperInstance(Locale.getDefault());
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,109, Returns the default complex format for the given locale.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,110, @param locale the specific locale used by the format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,111, @return the complex format specific to the given locale.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,113,ublic static FractionFormat getImproperInstance(Locale locale) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,114,umberFormat f = getDefaultNumberFormat(locale);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,115,eturn new FractionFormat(f);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,119, Returns the default complex format for the current locale.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,120, @return the default complex format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,122,ublic static FractionFormat getProperInstance() {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,123,eturn getProperInstance(Locale.getDefault());
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,127, Returns the default complex format for the given locale.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,128, @param locale the specific locale used by the format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,129, @return the complex format specific to the given locale.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,131,ublic static FractionFormat getProperInstance(Locale locale) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,132,umberFormat f = getDefaultNumberFormat(locale);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,133,eturn new ProperFractionFormat(f);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,137, Create a default number format.  The default number format is based on
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,138, {@link NumberFormat#getNumberInstance(java.util.Locale)} with the only
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,139," customizing is the maximum number of fraction digits, which is set to 0."
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,140, @return the default number format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,142,rotected static NumberFormat getDefaultNumberFormat() {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,143,eturn getDefaultNumberFormat(Locale.getDefault());
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,147, Create a default number format.  The default number format is based on
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,148, {@link NumberFormat#getNumberInstance(java.util.Locale)} with the only
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,149," customizing is the maximum number of fraction digits, which is set to 0."
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,150, @param locale the specific locale used by the format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,151, @return the default number format specific to the given locale.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,153,rivate static NumberFormat getDefaultNumberFormat(Locale locale) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,154,umberFormat nf = NumberFormat.getNumberInstance(locale);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,155,f.setMaximumFractionDigits(0);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,156,f.setParseIntegerOnly(true);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,157,eturn nf;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,161, Formats a {@link Fraction} object to produce a string.  The fraction is
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,162, output in improper format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,164, @param fraction the object to format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,165, @param toAppendTo where the text is to be appended
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,166," @param pos On input: an alignment field, if desired. On output: the"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,167,            offsets of the alignment field
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,168, @return the value passed in as toAppendTo.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,170,"ublic StringBuffer format(Fraction fraction, StringBuffer toAppendTo,"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,171,ieldPosition pos) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,173,os.setBeginIndex(0);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,174,os.setEndIndex(0);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,176,"etNumeratorFormat().format(fraction.getNumerator(), toAppendTo, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,177,"oAppendTo.append("" / "");"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,178,"etDenominatorFormat().format(fraction.getDenominator(), toAppendTo,"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,179,os);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,181,eturn toAppendTo;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,185, Formats a object to produce a string.  <code>obj</code> must be either a
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,186, {@link Fraction} object or a {@link Number} object.  Any other type of
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,187, object will result in an {@link IllegalArgumentException} being thrown.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,189, @param obj the object to format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,190, @param toAppendTo where the text is to be appended
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,191," @param pos On input: an alignment field, if desired. On output: the"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,192,            offsets of the alignment field
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,193, @return the value passed in as toAppendTo.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,194," @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,195, @throws IllegalArgumentException is <code>obj</code> is not a valid type.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,197,"ublic StringBuffer format(Object obj, StringBuffer toAppendTo,"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,198,ieldPosition pos)
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,200,tringBuffer ret = null;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,202,f (obj instanceof Fraction) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,203,"et = format( (Fraction)obj, toAppendTo, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,204, else if (obj instanceof Number) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,205,ry {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,206,"et = format( new Fraction(((Number)obj).doubleValue()),"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,207,"oAppendTo, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,208, catch (ConvergenceException ex) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,209,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,210,"Cannot convert given object to a fraction."");"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,212, else {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,213,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,214,"Cannot format given object as a fraction"");"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,217,eturn ret;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,221, Access the denominator format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,222, @return the denominator format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,224,ublic NumberFormat getDenominatorFormat() {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,225,eturn denominatorFormat;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,229, Access the numerator format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,230, @return the numerator format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,232,ublic NumberFormat getNumeratorFormat() {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,233,eturn numeratorFormat;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,237, Parses a string to produce a {@link Fraction} object.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,238, @param source the string to parse
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,239, @return the parsed {@link Fraction} object.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,240, @exception ParseException if the beginning of the specified string
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,241,            cannot be parsed.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,243,ublic Fraction parse(String source) throws ParseException {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,244,arsePosition parsePosition = new ParsePosition(0);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,245,"raction result = parse(source, parsePosition);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,246,f (parsePosition.getIndex() == 0) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,247,"hrow new ParseException(""Unparseable fraction number: \"""" +"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,248,"ource + ""\"""", parsePosition.getErrorIndex());"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,250,eturn result;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,254, Parses a string to produce a {@link Fraction} object.  This method
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,255, expects the string to be formatted as an improper fraction.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,256, @param source the string to parse
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,257, @param pos input/ouput parsing parameter.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,258, @return the parsed {@link Fraction} object.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,260,"ublic Fraction parse(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,261,nt initialIndex = pos.getIndex();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,263,/ parse whitespace
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,264,"arseAndIgnoreWhitespace(source, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,266,/ parse numerator
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,267,"umber num = getNumeratorFormat().parse(source, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,268,f (num == null) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,269,/ invalid integer number
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,270,"/ set index back to initial, error index should already be set"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,271,/ character examined.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,272,os.setIndex(initialIndex);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,273,eturn null;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,276,/ parse '/'
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,277,nt startIndex = pos.getIndex();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,278,"har c = parseNextCharacter(source, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,279,witch (c) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,280,ase 0 :
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,281,/ no '/'
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,282,/ return num as a fraction
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,283,"eturn new Fraction(num.intValue(), 1);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,284,ase '/' :
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,285,"/ found '/', continue parsing denominator"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,286,reak;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,287,efault :
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,288,/ invalid '/'
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,289,"/ set index back to initial, error index should be the last"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,290,/ character examined.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,291,os.setIndex(initialIndex);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,292,os.setErrorIndex(startIndex);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,293,eturn null;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,296,/ parse whitespace
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,297,"arseAndIgnoreWhitespace(source, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,299,/ parse denominator
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,300,"umber den = getDenominatorFormat().parse(source, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,301,f (den == null) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,302,/ invalid integer number
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,303,"/ set index back to initial, error index should already be set"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,304,/ character examined.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,305,os.setIndex(initialIndex);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,306,eturn null;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,309,"eturn new Fraction(num.intValue(), den.intValue());"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,313, Parses a string to produce a object.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,314, @param source the string to parse
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,315, @param pos input/ouput parsing parameter.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,316, @return the parsed object.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,317," @see java.text.Format#parseObject(java.lang.String, java.text.ParsePosition)"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,319,"ublic Object parseObject(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,320,"eturn parse(source, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,324, Modify the denominator format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,325, @param format the new denominator format value.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,326, @throws IllegalArgumentException if <code>format</code> is
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,327,         <code>null</code>.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,329,ublic void setDenominatorFormat(NumberFormat format) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,330,f (format == null) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,331,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,332,"denominator format can not be null."");"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,334,his.denominatorFormat = format;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,338, Modify the numerator format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,339, @param format the new numerator format value.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,340, @throws IllegalArgumentException if <code>format</code> is
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,341,         <code>null</code>.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,343,ublic void setNumeratorFormat(NumberFormat format) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,344,f (format == null) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,345,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,346,"numerator format can not be null."");"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,348,his.numeratorFormat = format;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,352, Parses <code>source</code> until a non-whitespace character is found.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,353, @param source the string to parse
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,354," @param pos input/ouput parsing parameter.  On output, <code>pos</code>"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,355,        holds the index of the next non-whitespace character.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,357,rotected static void parseAndIgnoreWhitespace(
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,358,"tring source, ParsePosition pos)"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,360,"arseNextCharacter(source, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,361,os.setIndex(pos.getIndex() - 1);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,365, Parses <code>source</code> until a non-whitespace character is found.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,366, @param source the string to parse
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,367, @param pos input/ouput parsing parameter.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,368, @return the first non-whitespace character.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,370,"rotected static char parseNextCharacter(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,371,nt index = pos.getIndex();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,372,nt n = source.length();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,373,har ret = 0;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,375,f (index < n) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,376,har c;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,377,o {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,378, = source.charAt(index++);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,379, while (Character.isWhitespace(c) && index < n);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,380,os.setIndex(index);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,382,f (index < n) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,383,et = c;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,387,eturn ret;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,18,package org.apache.commons.math.fraction;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,21,import java.text.FieldPosition;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,22,import java.text.Format;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,23,import java.text.NumberFormat;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,24,import java.text.ParseException;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,25,import java.text.ParsePosition;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,26,import java.util.Locale;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,28,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,31,* Formats a Fraction number in proper format or improper format.  The number
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,32,"* format for each of the whole number, numerator and, denominator can be"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,33,* configured.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,35,* @since 1.1
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,36,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,38,public class FractionFormat extends Format implements Serializable {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,40,/** Serializable version identifier */
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,41,private static final long serialVersionUID = -6337346779577272306L;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,43,/** The format used for the denominator. */
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,44,private NumberFormat denominatorFormat;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,46,/** The format used for the numerator. */
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,47,private NumberFormat numeratorFormat;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,50,* Create an improper formatting instance with the default number format
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,51,* for the numerator and denominator.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,53,public FractionFormat() {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,54,this(getDefaultNumberFormat());
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,58,* Create an improper formatting instance with a custom number format for
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,59,* both the numerator and denominator.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,60,* @param format the custom format for both the numerator and denominator.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,62,public FractionFormat(NumberFormat format) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,63,"this(format, (NumberFormat)format.clone());"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,67,* Create an improper formatting instance with a custom number format for
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,68,* the numerator and a custom number format for the denominator.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,69,* @param numeratorFormat the custom format for the numerator.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,70,* @param denominatorFormat the custom format for the denominator.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,72,"public FractionFormat(NumberFormat numeratorFormat,"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,73,NumberFormat denominatorFormat)
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,75,super();
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,76,this.numeratorFormat = numeratorFormat;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,77,this.denominatorFormat = denominatorFormat;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,81,* This static method calls formatFraction() on a default instance of
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,82,* FractionFormat.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,84,* @param f Fraction object to format
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,85,* @return A formatted fraction in proper form.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,87,public static String formatFraction(Fraction f) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,88,return getImproperInstance().format(f);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,92,* Get the set of locales for which complex formats are available.  This
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,93,* is the same set as the {@link NumberFormat} set.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,94,* @return available complex format locales.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,96,public static Locale[] getAvailableLocales() {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,97,return NumberFormat.getAvailableLocales();
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,101,* Returns the default complex format for the current locale.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,102,* @return the default complex format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,104,public static FractionFormat getImproperInstance() {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,105,return getImproperInstance(Locale.getDefault());
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,109,* Returns the default complex format for the given locale.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,110,* @param locale the specific locale used by the format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,111,* @return the complex format specific to the given locale.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,113,public static FractionFormat getImproperInstance(Locale locale) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,114,NumberFormat f = getDefaultNumberFormat(locale);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,115,return new FractionFormat(f);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,119,* Returns the default complex format for the current locale.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,120,* @return the default complex format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,122,public static FractionFormat getProperInstance() {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,123,return getProperInstance(Locale.getDefault());
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,127,* Returns the default complex format for the given locale.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,128,* @param locale the specific locale used by the format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,129,* @return the complex format specific to the given locale.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,131,public static FractionFormat getProperInstance(Locale locale) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,132,NumberFormat f = getDefaultNumberFormat(locale);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,133,return new ProperFractionFormat(f);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,137,* Create a default number format.  The default number format is based on
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,138,* {@link NumberFormat#getNumberInstance(java.util.Locale)} with the only
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,139,"* customizing is the maximum number of fraction digits, which is set to 0."
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,140,* @return the default number format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,142,protected static NumberFormat getDefaultNumberFormat() {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,143,return getDefaultNumberFormat(Locale.getDefault());
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,147,* Create a default number format.  The default number format is based on
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,148,* {@link NumberFormat#getNumberInstance(java.util.Locale)} with the only
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,149,"* customizing is the maximum number of fraction digits, which is set to 0."
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,150,* @param locale the specific locale used by the format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,151,* @return the default number format specific to the given locale.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,153,private static NumberFormat getDefaultNumberFormat(Locale locale) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,154,NumberFormat nf = NumberFormat.getNumberInstance(locale);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,155,nf.setMaximumFractionDigits(0);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,156,nf.setParseIntegerOnly(true);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,157,return nf;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,161,* Formats a {@link Fraction} object to produce a string.  The fraction is
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,162,* output in improper format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,164,* @param fraction the object to format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,165,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,166,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,167,*            offsets of the alignment field
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,168,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,170,"public StringBuffer format(Fraction fraction, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,171,FieldPosition pos) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,173,pos.setBeginIndex(0);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,174,pos.setEndIndex(0);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,176,"getNumeratorFormat().format(fraction.getNumerator(), toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,177,"toAppendTo.append("" / "");"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,178,"getDenominatorFormat().format(fraction.getDenominator(), toAppendTo,"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,179,pos);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,181,return toAppendTo;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,185,* Formats a object to produce a string.  <code>obj</code> must be either a
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,186,* {@link Fraction} object or a {@link Number} object.  Any other type of
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,187,* object will result in an {@link IllegalArgumentException} being thrown.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,189,* @param obj the object to format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,190,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,191,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,192,*            offsets of the alignment field
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,193,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,194,"* @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,195,* @throws IllegalArgumentException is <code>obj</code> is not a valid type.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,197,"public StringBuffer format(Object obj, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,198,FieldPosition pos)
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,200,StringBuffer ret = null;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,202,if (obj instanceof Fraction) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,203,"ret = format( (Fraction)obj, toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,204,} else if (obj instanceof Number) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,205,try {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,206,"ret = format( new Fraction(((Number)obj).doubleValue()),"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,207,"toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,208,} catch (ConvergenceException ex) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,209,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,210,"""Cannot convert given object to a fraction."");"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,212,} else {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,213,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,214,"""Cannot format given object as a fraction"");"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,217,return ret;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,221,* Access the denominator format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,222,* @return the denominator format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,224,public NumberFormat getDenominatorFormat() {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,225,return denominatorFormat;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,229,* Access the numerator format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,230,* @return the numerator format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,232,public NumberFormat getNumeratorFormat() {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,233,return numeratorFormat;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,237,* Parses a string to produce a {@link Fraction} object.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,238,* @param source the string to parse
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,239,* @return the parsed {@link Fraction} object.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,240,* @exception ParseException if the beginning of the specified string
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,241,*            cannot be parsed.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,243,public Fraction parse(String source) throws ParseException {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,244,ParsePosition parsePosition = new ParsePosition(0);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,245,"Fraction result = parse(source, parsePosition);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,246,if (parsePosition.getIndex() == 0) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,247,"throw new ParseException(""Unparseable fraction number: \"""" +"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,248,"source + ""\"""", parsePosition.getErrorIndex());"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,250,return result;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,254,* Parses a string to produce a {@link Fraction} object.  This method
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,255,* expects the string to be formatted as an improper fraction.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,256,* @param source the string to parse
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,257,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,258,* @return the parsed {@link Fraction} object.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,260,"public Fraction parse(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,261,int initialIndex = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,263,// parse whitespace
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,264,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,266,// parse numerator
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,267,"Number num = getNumeratorFormat().parse(source, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,268,if (num == null) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,269,// invalid integer number
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,270,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,271,// character examined.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,272,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,273,return null;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,276,// parse '/'
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,277,int startIndex = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,278,"char c = parseNextCharacter(source, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,279,switch (c) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,280,case 0 :
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,281,// no '/'
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,282,// return num as a fraction
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,283,"return new Fraction(num.intValue(), 1);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,284,case '/' :
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,285,"// found '/', continue parsing denominator"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,286,break;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,287,default :
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,288,// invalid '/'
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,289,"// set index back to initial, error index should be the last"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,290,// character examined.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,291,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,292,pos.setErrorIndex(startIndex);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,293,return null;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,296,// parse whitespace
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,297,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,299,// parse denominator
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,300,"Number den = getDenominatorFormat().parse(source, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,301,if (den == null) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,302,// invalid integer number
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,303,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,304,// character examined.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,305,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,306,return null;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,309,"return new Fraction(num.intValue(), den.intValue());"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,313,* Parses a string to produce a object.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,314,* @param source the string to parse
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,315,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,316,* @return the parsed object.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,317,"* @see java.text.Format#parseObject(java.lang.String, java.text.ParsePosition)"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,319,"public Object parseObject(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,320,"return parse(source, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,324,* Modify the denominator format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,325,* @param format the new denominator format value.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,326,* @throws IllegalArgumentException if <code>format</code> is
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,327,*         <code>null</code>.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,329,public void setDenominatorFormat(NumberFormat format) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,330,if (format == null) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,331,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,332,"""denominator format can not be null."");"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,334,this.denominatorFormat = format;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,338,* Modify the numerator format.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,339,* @param format the new numerator format value.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,340,* @throws IllegalArgumentException if <code>format</code> is
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,341,*         <code>null</code>.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,343,public void setNumeratorFormat(NumberFormat format) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,344,if (format == null) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,345,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,346,"""numerator format can not be null."");"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,348,this.numeratorFormat = format;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,352,* Parses <code>source</code> until a non-whitespace character is found.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,353,* @param source the string to parse
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,354,"* @param pos input/ouput parsing parameter.  On output, <code>pos</code>"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,355,*        holds the index of the next non-whitespace character.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,357,protected static void parseAndIgnoreWhitespace(
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,358,"String source, ParsePosition pos)"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,360,"parseNextCharacter(source, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,361,pos.setIndex(pos.getIndex() - 1);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,365,* Parses <code>source</code> until a non-whitespace character is found.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,366,* @param source the string to parse
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,367,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,368,* @return the first non-whitespace character.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,370,"protected static char parseNextCharacter(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,371,int index = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,372,int n = source.length();
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,373,char ret = 0;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,375,if (index < n) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,376,char c;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,377,do {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,378,c = source.charAt(index++);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,379,} while (Character.isWhitespace(c) && index < n);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,380,pos.setIndex(index);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,382,if (index < n) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,383,ret = c;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,387,return ret;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,15, limitations under the License.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,17,ackage org.apache.commons.math.fraction;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,19,mport java.text.FieldPosition;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,20,mport java.text.NumberFormat;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,21,mport java.text.ParsePosition;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,23,mport org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,26, Formats a Fraction number in proper format.  The number format for each of
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,27," the whole number, numerator and, denominator can be configured."
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,28, <p>
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,29," Minus signs are only allowed in the whole number part - i.e.,"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,30," ""-3 1/2"" is legitimate and denotes -7/2, but ""-3 -1/2"" is invalid and"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,31, will result in a <code>ParseException</code>.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,33, @since 1.1
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,34, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,36,ublic class ProperFractionFormat extends FractionFormat {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,38,** Serializable version identifier */
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,39,rivate static final long serialVersionUID = -6337346779577272307L;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,41,** The format used for the whole number. */
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,42,rivate NumberFormat wholeFormat;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,45, Create a proper formatting instance with the default number format for
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,46," the whole, numerator, and denominator."
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,48,ublic ProperFractionFormat() {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,49,his(getDefaultNumberFormat());
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,53, Create a proper formatting instance with a custom number format for the
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,54," whole, numerator, and denominator."
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,55," @param format the custom format for the whole, numerator, and"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,56,        denominator.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,58,ublic ProperFractionFormat(NumberFormat format) {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,59,"his(format, (NumberFormat)format.clone(), (NumberFormat)format.clone());"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,63, Create a proper formatting instance with a custom number format for each
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,64," of the whole, numerator, and denominator."
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,65, @param wholeFormat the custom format for the whole.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,66, @param numeratorFormat the custom format for the numerator.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,67, @param denominatorFormat the custom format for the denominator.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,69,"ublic ProperFractionFormat(NumberFormat wholeFormat,"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,70,"umberFormat numeratorFormat,"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,71,umberFormat denominatorFormat)
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,73,"uper(numeratorFormat, denominatorFormat);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,74,etWholeFormat(wholeFormat);
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,78, Formats a {@link Fraction} object to produce a string.  The fraction
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,79, is output in proper format.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,81, @param fraction the object to format.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,82, @param toAppendTo where the text is to be appended
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,83," @param pos On input: an alignment field, if desired. On output: the"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,84,            offsets of the alignment field
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,85, @return the value passed in as toAppendTo.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,87,"ublic StringBuffer format(Fraction fraction, StringBuffer toAppendTo,"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,88,ieldPosition pos) {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,90,os.setBeginIndex(0);
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,91,os.setEndIndex(0);
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,93,nt num = fraction.getNumerator();
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,94,nt den = fraction.getDenominator();
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,95,nt whole = num / den;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,96,um = num % den;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,98,f (whole != 0) {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,99,"etWholeFormat().format(whole, toAppendTo, pos);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,100,oAppendTo.append(' ');
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,101,um = Math.abs(num);
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,103,"etNumeratorFormat().format(num, toAppendTo, pos);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,104,"oAppendTo.append("" / "");"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,105,"etDenominatorFormat().format(den, toAppendTo,"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,106,os);
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,108,eturn toAppendTo;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,112, Access the whole format.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,113, @return the whole format.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,115,ublic NumberFormat getWholeFormat() {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,116,eturn wholeFormat;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,120, Parses a string to produce a {@link Fraction} object.  This method
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,121, expects the string to be formatted as a proper fraction.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,122, <p>
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,123," Minus signs are only allowed in the whole number part - i.e.,"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,124," ""-3 1/2"" is legitimate and denotes -7/2, but ""-3 -1/2"" is invalid and"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,125, will result in a <code>ParseException</code>.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,127, @param source the string to parse
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,128, @param pos input/ouput parsing parameter.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,129, @return the parsed {@link Fraction} object.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,131,"ublic Fraction parse(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,132,/ try to parse improper fraction
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,133,"raction ret = super.parse(source, pos);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,134,f (ret != null) {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,135,eturn ret;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,138,nt initialIndex = pos.getIndex();
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,140,/ parse whitespace
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,141,"arseAndIgnoreWhitespace(source, pos);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,143,/ parse whole
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,144,"umber whole = getWholeFormat().parse(source, pos);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,145,f (whole == null) {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,146,/ invalid integer number
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,147,"/ set index back to initial, error index should already be set"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,148,/ character examined.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,149,os.setIndex(initialIndex);
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,150,eturn null;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,153,/ parse whitespace
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,154,"arseAndIgnoreWhitespace(source, pos);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,156,/ parse numerator
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,157,"umber num = getNumeratorFormat().parse(source, pos);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,158,f (num == null) {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,159,/ invalid integer number
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,160,"/ set index back to initial, error index should already be set"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,161,/ character examined.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,162,os.setIndex(initialIndex);
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,163,eturn null;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,166,f (num.intValue() < 0) {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,167,"/ minus signs should be leading, invalid expression"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,168,os.setIndex(initialIndex);
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,169,eturn null;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,172,/ parse '/'
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,173,nt startIndex = pos.getIndex();
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,174,"har c = parseNextCharacter(source, pos);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,175,witch (c) {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,176,ase 0 :
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,177,/ no '/'
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,178,/ return num as a fraction
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,179,"eturn new Fraction(num.intValue(), 1);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,180,ase '/' :
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,181,"/ found '/', continue parsing denominator"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,182,reak;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,183,efault :
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,184,/ invalid '/'
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,185,"/ set index back to initial, error index should be the last"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,186,/ character examined.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,187,os.setIndex(initialIndex);
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,188,os.setErrorIndex(startIndex);
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,189,eturn null;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,192,/ parse whitespace
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,193,"arseAndIgnoreWhitespace(source, pos);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,195,/ parse denominator
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,196,"umber den = getDenominatorFormat().parse(source, pos);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,197,f (den == null) {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,198,/ invalid integer number
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,199,"/ set index back to initial, error index should already be set"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,200,/ character examined.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,201,os.setIndex(initialIndex);
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,202,eturn null;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,205,f (den.intValue() < 0) {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,206,"/ minus signs must be leading, invalid"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,207,os.setIndex(initialIndex);
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,208,eturn null;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,211,nt w = whole.intValue();
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,212,nt n = num.intValue();
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,213,nt d = den.intValue();
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,214,"eturn new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,218, Modify the whole format.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,219, @param format The new whole format value.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,220, @throws IllegalArgumentException if <code>format</code> is
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,221,         <code>null</code>.
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,223,ublic void setWholeFormat(NumberFormat format) {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,224,f (format == null) {
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,225,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,226,"whole format can not be null."");"
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,228,his.wholeFormat = format;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,17,package org.apache.commons.math.fraction;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,19,import java.text.FieldPosition;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,20,import java.text.NumberFormat;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,21,import java.text.ParsePosition;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,23,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,26,* Formats a Fraction number in proper format.  The number format for each of
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,27,"* the whole number, numerator and, denominator can be configured."
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,28,* <p>
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,29,"* Minus signs are only allowed in the whole number part - i.e.,"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,30,"* ""-3 1/2"" is legitimate and denotes -7/2, but ""-3 -1/2"" is invalid and"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,31,* will result in a <code>ParseException</code>.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,33,* @since 1.1
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,34,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,36,public class ProperFractionFormat extends FractionFormat {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,38,/** Serializable version identifier */
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,39,private static final long serialVersionUID = -6337346779577272307L;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,41,/** The format used for the whole number. */
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,42,private NumberFormat wholeFormat;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,45,* Create a proper formatting instance with the default number format for
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,46,"* the whole, numerator, and denominator."
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,48,public ProperFractionFormat() {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,49,this(getDefaultNumberFormat());
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,53,* Create a proper formatting instance with a custom number format for the
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,54,"* whole, numerator, and denominator."
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,55,"* @param format the custom format for the whole, numerator, and"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,56,*        denominator.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,58,public ProperFractionFormat(NumberFormat format) {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,59,"this(format, (NumberFormat)format.clone(), (NumberFormat)format.clone());"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,63,* Create a proper formatting instance with a custom number format for each
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,64,"* of the whole, numerator, and denominator."
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,65,* @param wholeFormat the custom format for the whole.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,66,* @param numeratorFormat the custom format for the numerator.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,67,* @param denominatorFormat the custom format for the denominator.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,69,"public ProperFractionFormat(NumberFormat wholeFormat,"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,70,"NumberFormat numeratorFormat,"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,71,NumberFormat denominatorFormat)
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,73,"super(numeratorFormat, denominatorFormat);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,74,setWholeFormat(wholeFormat);
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,78,* Formats a {@link Fraction} object to produce a string.  The fraction
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,79,* is output in proper format.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,81,* @param fraction the object to format.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,82,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,83,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,84,*            offsets of the alignment field
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,85,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,87,"public StringBuffer format(Fraction fraction, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,88,FieldPosition pos) {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,90,pos.setBeginIndex(0);
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,91,pos.setEndIndex(0);
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,93,int num = fraction.getNumerator();
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,94,int den = fraction.getDenominator();
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,95,int whole = num / den;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,96,num = num % den;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,98,if (whole != 0) {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,99,"getWholeFormat().format(whole, toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,100,toAppendTo.append(' ');
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,101,num = Math.abs(num);
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,103,"getNumeratorFormat().format(num, toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,104,"toAppendTo.append("" / "");"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,105,"getDenominatorFormat().format(den, toAppendTo,"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,106,pos);
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,108,return toAppendTo;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,112,* Access the whole format.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,113,* @return the whole format.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,115,public NumberFormat getWholeFormat() {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,116,return wholeFormat;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,120,* Parses a string to produce a {@link Fraction} object.  This method
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,121,* expects the string to be formatted as a proper fraction.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,122,* <p>
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,123,"* Minus signs are only allowed in the whole number part - i.e.,"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,124,"* ""-3 1/2"" is legitimate and denotes -7/2, but ""-3 -1/2"" is invalid and"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,125,* will result in a <code>ParseException</code>.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,127,* @param source the string to parse
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,128,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,129,* @return the parsed {@link Fraction} object.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,131,"public Fraction parse(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,132,// try to parse improper fraction
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,133,"Fraction ret = super.parse(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,134,if (ret != null) {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,135,return ret;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,138,int initialIndex = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,140,// parse whitespace
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,141,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,143,// parse whole
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,144,"Number whole = getWholeFormat().parse(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,145,if (whole == null) {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,146,// invalid integer number
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,147,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,148,// character examined.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,149,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,150,return null;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,153,// parse whitespace
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,154,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,156,// parse numerator
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,157,"Number num = getNumeratorFormat().parse(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,158,if (num == null) {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,159,// invalid integer number
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,160,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,161,// character examined.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,162,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,163,return null;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,166,if (num.intValue() < 0) {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,167,"// minus signs should be leading, invalid expression"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,168,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,169,return null;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,172,// parse '/'
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,173,int startIndex = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,174,"char c = parseNextCharacter(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,175,switch (c) {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,176,case 0 :
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,177,// no '/'
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,178,// return num as a fraction
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,179,"return new Fraction(num.intValue(), 1);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,180,case '/' :
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,181,"// found '/', continue parsing denominator"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,182,break;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,183,default :
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,184,// invalid '/'
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,185,"// set index back to initial, error index should be the last"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,186,// character examined.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,187,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,188,pos.setErrorIndex(startIndex);
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,189,return null;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,192,// parse whitespace
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,193,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,195,// parse denominator
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,196,"Number den = getDenominatorFormat().parse(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,197,if (den == null) {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,198,// invalid integer number
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,199,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,200,// character examined.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,201,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,202,return null;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,205,if (den.intValue() < 0) {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,206,"// minus signs must be leading, invalid"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,207,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,208,return null;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,211,int w = whole.intValue();
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,212,int n = num.intValue();
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,213,int d = den.intValue();
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,214,"return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,218,* Modify the whole format.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,219,* @param format The new whole format value.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,220,* @throws IllegalArgumentException if <code>format</code> is
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,221,*         <code>null</code>.
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,223,public void setWholeFormat(NumberFormat format) {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,224,if (format == null) {
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,225,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,226,"""whole format can not be null."");"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,228,this.wholeFormat = format;
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,17,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,20,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,23, Testcase for Divided Difference interpolator.
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,24, <p>
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,25, The error of polynomial interpolation is
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,26,     f(z) - p(z) = f^(n)(zeta) * (z-x[0])(z-x[1])...(z-x[n-1]) / n!
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,27, where f^(n) is the n-th derivative of the approximated function and
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,28, zeta is some point in the interval determined by x[] and z.
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,29, <p>
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,30," Since zeta is unknown, f^(n)(zeta) cannot be calculated. But we can bound"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,31," it and use the absolute value upper bound for estimates. For reference,"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,32," see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X, chapter 2."
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,34, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,36,ublic final class DividedDifferenceInterpolatorTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,39, Test of interpolator for the sine function.
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,40, <p>
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,41," |sin^(n)(zeta)| <= 1.0, zeta in [0, 2*PI]"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,43,ublic void testSinFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,44,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,45,nivariateRealInterpolator interpolator = new DividedDifferenceInterpolator();
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,46,"ouble x[], y[], z, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,48,"/ 6 interpolating points on interval [0, 2*PI]"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,49,nt n = 6;
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,50,"ouble min = 0.0, max = 2 * Math.PI;"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,51, = new double[n];
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,52, = new double[n];
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,53,or (int i = 0; i < n; i++) {
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,54,[i] = min + i * (max - min) / n;
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,55,[i] = f.value(x[i]);
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,57,ouble derivativebound = 1.0;
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,58,"nivariateRealFunction p = interpolator.interpolate(x, y);"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,60, = Math.PI / 4; expected = f.value(z); result = p.value(z);
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,61,"olerance = Math.abs(derivativebound * partialerror(x, z));"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,62,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,64, = Math.PI * 1.5; expected = f.value(z); result = p.value(z);
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,65,"olerance = Math.abs(derivativebound * partialerror(x, z));"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,66,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,70, Test of interpolator for the exponential function.
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,71, <p>
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,72," |expm1^(n)(zeta)| <= e, zeta in [-1, 1]"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,74,ublic void testExpm1Function() throws MathException {
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,75,nivariateRealFunction f = new Expm1Function();
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,76,nivariateRealInterpolator interpolator = new DividedDifferenceInterpolator();
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,77,"ouble x[], y[], z, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,79,"/ 5 interpolating points on interval [-1, 1]"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,80,nt n = 5;
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,81,"ouble min = -1.0, max = 1.0;"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,82, = new double[n];
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,83, = new double[n];
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,84,or (int i = 0; i < n; i++) {
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,85,[i] = min + i * (max - min) / n;
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,86,[i] = f.value(x[i]);
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,88,ouble derivativebound = Math.E;
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,89,"nivariateRealFunction p = interpolator.interpolate(x, y);"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,91, = 0.0; expected = f.value(z); result = p.value(z);
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,92,"olerance = Math.abs(derivativebound * partialerror(x, z));"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,93,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,95, = 0.5; expected = f.value(z); result = p.value(z);
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,96,"olerance = Math.abs(derivativebound * partialerror(x, z));"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,97,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,99, = -0.5; expected = f.value(z); result = p.value(z);
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,100,"olerance = Math.abs(derivativebound * partialerror(x, z));"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,101,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,105, Test of parameters for the interpolator.
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,107,ublic void testParameters() throws Exception {
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,108,nivariateRealInterpolator interpolator = new DividedDifferenceInterpolator();
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,110,ry {
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,111,/ bad abscissas array
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,112,"ouble x[] = { 1.0, 2.0, 2.0, 4.0 };"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,113,"ouble y[] = { 0.0, 4.0, 4.0, 2.5 };"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,114,"nivariateRealFunction p = interpolator.interpolate(x, y);"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,115,.value(0.0);
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,116,"ail(""Expecting MathException - bad abscissas array"");"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,117, catch (MathException ex) {
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,118,/ expected
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,123, Returns the partial error term (z-x[0])(z-x[1])...(z-x[n-1])/n!
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,125,"rotected double partialerror(double x[], double z) throws"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,126,llegalArgumentException {
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,128,f (x.length < 1) {
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,129,hrow new IllegalArgumentException
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,130,"""Interpolation array cannot be empty."");"
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,132,ouble out = 1;
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,133,or (int i = 0; i < x.length; i++) {
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,134,ut *= (z - x[i]) / (i + 1);
False,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,136,eturn out;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,17,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,19,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,23,* Testcase for Divided Difference interpolator.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,24,* <p>
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,25,* The error of polynomial interpolation is
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,26,*     f(z) - p(z) = f^(n)(zeta) * (z-x[0])(z-x[1])...(z-x[n-1]) / n!
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,27,* where f^(n) is the n-th derivative of the approximated function and
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,28,* zeta is some point in the interval determined by x[] and z.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,29,* <p>
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,30,"* Since zeta is unknown, f^(n)(zeta) cannot be calculated. But we can bound"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,31,"* it and use the absolute value upper bound for estimates. For reference,"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,32,"* see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X, chapter 2."
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,34,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,36,public final class DividedDifferenceInterpolatorTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,39,* Test of interpolator for the sine function.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,40,* <p>
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,41,"* |sin^(n)(zeta)| <= 1.0, zeta in [0, 2*PI]"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,43,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,44,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,45,UnivariateRealInterpolator interpolator = new DividedDifferenceInterpolator();
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,46,"double x[], y[], z, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,48,"// 6 interpolating points on interval [0, 2*PI]"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,49,int n = 6;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,50,"double min = 0.0, max = 2 * Math.PI;"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,51,x = new double[n];
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,52,y = new double[n];
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,53,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,54,x[i] = min + i * (max - min) / n;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,55,y[i] = f.value(x[i]);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,57,double derivativebound = 1.0;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,58,"UnivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,60,z = Math.PI / 4; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,61,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,62,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,64,z = Math.PI * 1.5; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,65,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,66,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,70,* Test of interpolator for the exponential function.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,71,* <p>
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,72,"* |expm1^(n)(zeta)| <= e, zeta in [-1, 1]"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,74,public void testExpm1Function() throws MathException {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,75,UnivariateRealFunction f = new Expm1Function();
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,76,UnivariateRealInterpolator interpolator = new DividedDifferenceInterpolator();
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,77,"double x[], y[], z, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,79,"// 5 interpolating points on interval [-1, 1]"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,80,int n = 5;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,81,"double min = -1.0, max = 1.0;"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,82,x = new double[n];
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,83,y = new double[n];
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,84,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,85,x[i] = min + i * (max - min) / n;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,86,y[i] = f.value(x[i]);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,88,double derivativebound = Math.E;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,89,"UnivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,91,z = 0.0; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,92,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,93,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,95,z = 0.5; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,96,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,97,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,99,z = -0.5; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,100,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,101,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,105,* Test of parameters for the interpolator.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,107,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,108,UnivariateRealInterpolator interpolator = new DividedDifferenceInterpolator();
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,110,try {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,111,// bad abscissas array
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,112,"double x[] = { 1.0, 2.0, 2.0, 4.0 };"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,113,"double y[] = { 0.0, 4.0, 4.0, 2.5 };"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,114,"UnivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,115,p.value(0.0);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,116,"fail(""Expecting MathException - bad abscissas array"");"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,117,} catch (MathException ex) {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,118,// expected
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,123,* Returns the partial error term (z-x[0])(z-x[1])...(z-x[n-1])/n!
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,125,"protected double partialerror(double x[], double z) throws"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,126,IllegalArgumentException {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,128,if (x.length < 1) {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,129,throw new IllegalArgumentException
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,130,"(""Interpolation array cannot be empty."");"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,132,double out = 1;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,133,for (int i = 0; i < x.length; i++) {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,134,out *= (z - x[i]) / (i + 1);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,136,return out;
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,15, limitations under the License.
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,17,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,19,mport org.apache.commons.math.FunctionEvaluationException;
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,22, Auxillary class for testing purposes.
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,24, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,26,ublic class Expm1Function implements DifferentiableUnivariateRealFunction {
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,28,ublic double value(double x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,29,/ Math.expm1() is available in jdk 1.5 but not in jdk 1.4.2.
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,30,eturn Math.exp(x) - 1.0;
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,33,ublic UnivariateRealFunction derivative() {
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,34,eturn new UnivariateRealFunction() {
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,35,ublic double value(double x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,36,eturn Math.exp(x);
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,17,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,19,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,22,* Auxillary class for testing purposes.
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,24,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,26,public class Expm1Function implements DifferentiableUnivariateRealFunction {
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,28,public double value(double x) throws FunctionEvaluationException {
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,29,// Math.expm1() is available in jdk 1.5 but not in jdk 1.4.2.
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,30,return Math.exp(x) - 1.0;
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,33,public UnivariateRealFunction derivative() {
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,34,return new UnivariateRealFunction() {
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,35,public double value(double x) throws FunctionEvaluationException {
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,36,return Math.exp(x);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,17,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,20,mport org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,21,mport org.apache.commons.math.complex.Complex;
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,22,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,25, Testcase for Laguerre solver.
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,26, <p>
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,27, Laguerre's method is very efficient in solving polynomials. Test runs
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,28," show that for a default absolute accuracy of 1E-6, it generally takes"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,29," less than 5 iterations to find one root, provided solveAll() is not"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,30," invoked, and 15 to 20 iterations to find all roots for quintic function."
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,32, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,34,ublic final class LaguerreSolverTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,37, Test of solver for the linear function.
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,39,ublic void testLinearFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,40,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,42,/ p(x) = 4x - 1
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,43,"ouble coefficients[] = { -1.0, 4.0 };"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,44,olynomialFunction f = new PolynomialFunction(coefficients);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,45,nivariateRealSolver solver = new LaguerreSolver(f);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,47,in = 0.0; max = 1.0; expected = 0.25;
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,48,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,49,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,50,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,51,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,55, Test of solver for the quadratic function.
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,57,ublic void testQuadraticFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,58,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,60,/ p(x) = 2x^2 + 5x - 3 = (x+3)(2x-1)
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,61,"ouble coefficients[] = { -3.0, 5.0, 2.0 };"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,62,olynomialFunction f = new PolynomialFunction(coefficients);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,63,nivariateRealSolver solver = new LaguerreSolver(f);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,65,in = 0.0; max = 2.0; expected = 0.5;
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,66,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,67,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,68,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,69,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,71,in = -4.0; max = -1.0; expected = -3.0;
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,72,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,73,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,74,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,75,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,79, Test of solver for the quintic function.
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,81,ublic void testQuinticFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,82,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,84,/ p(x) = x^5 - x^4 - 12x^3 + x^2 - x - 12 = (x+1)(x+3)(x-4)(x^2-x+1)
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,85,"ouble coefficients[] = { -12.0, -1.0, 1.0, -12.0, -1.0, 1.0 };"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,86,olynomialFunction f = new PolynomialFunction(coefficients);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,87,nivariateRealSolver solver = new LaguerreSolver(f);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,89,in = -2.0; max = 2.0; expected = -1.0;
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,90,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,91,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,92,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,93,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,95,in = -5.0; max = -2.5; expected = -3.0;
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,96,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,97,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,98,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,99,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,101,in = 3.0; max = 6.0; expected = 4.0;
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,102,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,103,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,104,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,105,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,109, Test of solver for the quintic function using solveAll().
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,111,ublic void testQuinticFunction2() throws MathException {
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,112,"ouble initial = 0.0, tolerance;"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,113,"omplex expected, result[];"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,115,/ p(x) = x^5 + 4x^3 + x^2 + 4 = (x+1)(x^2-x+1)(x^2+4)
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,116,"ouble coefficients[] = { 4.0, 0.0, 1.0, 4.0, 0.0, 1.0 };"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,117,olynomialFunction f = new PolynomialFunction(coefficients);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,118,aguerreSolver solver = new LaguerreSolver(f);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,119,"esult = solver.solveAll(coefficients, initial);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,121,"xpected = new Complex(0.0, -2.0);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,122,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,123,ath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,124,"estUtils.assertContains(result, expected, tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,126,"xpected = new Complex(0.0, 2.0);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,127,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,128,ath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,129,"estUtils.assertContains(result, expected, tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,131,"xpected = new Complex(0.5, 0.5 * Math.sqrt(3.0));"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,132,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,133,ath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,134,"estUtils.assertContains(result, expected, tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,136,"xpected = new Complex(-1.0, 0.0);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,137,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,138,ath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,139,"estUtils.assertContains(result, expected, tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,141,"xpected = new Complex(0.5, -0.5 * Math.sqrt(3.0));"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,142,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,143,ath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,144,"estUtils.assertContains(result, expected, tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,148, Test of parameters for the solver.
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,150,ublic void testParameters() throws Exception {
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,151,"ouble coefficients[] = { -3.0, 5.0, 2.0 };"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,152,olynomialFunction f = new PolynomialFunction(coefficients);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,153,nivariateRealSolver solver = new LaguerreSolver(f);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,155,ry {
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,156,/ bad interval
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,157,"olver.solve(1, -1);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,158,"ail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,159, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,160,/ expected
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,162,ry {
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,163,/ no bracketing
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,164,"olver.solve(2, 3);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,165,"ail(""Expecting IllegalArgumentException - no bracketing"");"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,166, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,167,/ expected
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,169,ry {
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,170,/ bad function
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,171,nivariateRealFunction f2 = new SinFunction();
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,172,nivariateRealSolver solver2 = new LaguerreSolver(f2);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,173,"ail(""Expecting IllegalArgumentException - bad function"");"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,174, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,175,/ expected
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,17,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,19,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,20,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,21,import org.apache.commons.math.complex.Complex;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,22,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,25,* Testcase for Laguerre solver.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,26,* <p>
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,27,* Laguerre's method is very efficient in solving polynomials. Test runs
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,28,"* show that for a default absolute accuracy of 1E-6, it generally takes"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,29,"* less than 5 iterations to find one root, provided solveAll() is not"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,30,"* invoked, and 15 to 20 iterations to find all roots for quintic function."
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,32,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,34,public final class LaguerreSolverTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,37,* Test of solver for the linear function.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,39,public void testLinearFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,40,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,42,// p(x) = 4x - 1
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,43,"double coefficients[] = { -1.0, 4.0 };"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,44,PolynomialFunction f = new PolynomialFunction(coefficients);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,45,UnivariateRealSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,47,min = 0.0; max = 1.0; expected = 0.25;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,48,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,49,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,50,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,51,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,55,* Test of solver for the quadratic function.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,57,public void testQuadraticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,58,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,60,// p(x) = 2x^2 + 5x - 3 = (x+3)(2x-1)
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,61,"double coefficients[] = { -3.0, 5.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,62,PolynomialFunction f = new PolynomialFunction(coefficients);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,63,UnivariateRealSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,65,min = 0.0; max = 2.0; expected = 0.5;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,66,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,67,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,68,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,69,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,71,min = -4.0; max = -1.0; expected = -3.0;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,72,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,73,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,74,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,75,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,79,* Test of solver for the quintic function.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,81,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,82,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,84,// p(x) = x^5 - x^4 - 12x^3 + x^2 - x - 12 = (x+1)(x+3)(x-4)(x^2-x+1)
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,85,"double coefficients[] = { -12.0, -1.0, 1.0, -12.0, -1.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,86,PolynomialFunction f = new PolynomialFunction(coefficients);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,87,UnivariateRealSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,89,min = -2.0; max = 2.0; expected = -1.0;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,90,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,91,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,92,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,93,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,95,min = -5.0; max = -2.5; expected = -3.0;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,96,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,97,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,98,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,99,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,101,min = 3.0; max = 6.0; expected = 4.0;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,102,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,103,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,104,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,105,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,109,* Test of solver for the quintic function using solveAll().
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,111,public void testQuinticFunction2() throws MathException {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,112,"double initial = 0.0, tolerance;"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,113,"Complex expected, result[];"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,115,// p(x) = x^5 + 4x^3 + x^2 + 4 = (x+1)(x^2-x+1)(x^2+4)
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,116,"double coefficients[] = { 4.0, 0.0, 1.0, 4.0, 0.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,117,PolynomialFunction f = new PolynomialFunction(coefficients);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,118,LaguerreSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,119,"result = solver.solveAll(coefficients, initial);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,121,"expected = new Complex(0.0, -2.0);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,122,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,123,Math.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,124,"TestUtils.assertContains(result, expected, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,126,"expected = new Complex(0.0, 2.0);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,127,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,128,Math.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,129,"TestUtils.assertContains(result, expected, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,131,"expected = new Complex(0.5, 0.5 * Math.sqrt(3.0));"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,132,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,133,Math.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,134,"TestUtils.assertContains(result, expected, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,136,"expected = new Complex(-1.0, 0.0);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,137,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,138,Math.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,139,"TestUtils.assertContains(result, expected, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,141,"expected = new Complex(0.5, -0.5 * Math.sqrt(3.0));"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,142,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,143,Math.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,144,"TestUtils.assertContains(result, expected, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,148,* Test of parameters for the solver.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,150,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,151,"double coefficients[] = { -3.0, 5.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,152,PolynomialFunction f = new PolynomialFunction(coefficients);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,153,UnivariateRealSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,155,try {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,156,// bad interval
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,157,"solver.solve(1, -1);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,158,"fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,159,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,160,// expected
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,162,try {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,163,// no bracketing
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,164,"solver.solve(2, 3);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,165,"fail(""Expecting IllegalArgumentException - no bracketing"");"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,166,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,167,// expected
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,169,try {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,170,// bad function
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,171,UnivariateRealFunction f2 = new SinFunction();
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,172,UnivariateRealSolver solver2 = new LaguerreSolver(f2);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,173,"fail(""Expecting IllegalArgumentException - bad function"");"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,174,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,175,// expected
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,17,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,20,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,23, Testcase for Muller solver.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,24, <p>
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,25," Muller's method converges almost quadratically near roots, but it can"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,26, be very slow in regions far away from zeros. Test runs show that for
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,27," reasonably good initial values, for a default absolute accuracy of 1E-6,"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,28, it generally takes 5 to 10 iterations for the solver to converge.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,29, <p>
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,30, Tests for the exponential function illustrate the situations where
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,31, Muller solver performs poorly.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,33, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,35,ublic final class MullerSolverTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,38, Test of solver for the sine function.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,40,ublic void testSinFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,41,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,42,nivariateRealSolver solver = new MullerSolver(f);
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,43,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,45,in = 3.0; max = 4.0; expected = Math.PI;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,46,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,47,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,48,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,49,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,51,in = -1.0; max = 1.5; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,52,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,53,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,54,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,55,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,59, Test of solver for the sine function using solve2().
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,61,ublic void testSinFunction2() throws MathException {
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,62,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,63,ullerSolver solver = new MullerSolver(f);
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,64,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,66,in = 3.0; max = 4.0; expected = Math.PI;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,67,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,68,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,69,"esult = solver.solve2(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,70,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,72,in = -1.0; max = 1.5; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,73,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,74,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,75,"esult = solver.solve2(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,76,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,80, Test of solver for the quintic function.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,82,ublic void testQuinticFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,83,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,84,nivariateRealSolver solver = new MullerSolver(f);
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,85,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,87,in = -0.4; max = 0.2; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,88,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,89,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,90,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,91,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,93,in = 0.75; max = 1.5; expected = 1.0;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,94,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,95,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,96,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,97,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,99,in = -0.9; max = -0.2; expected = -0.5;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,100,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,101,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,102,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,103,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,107, Test of solver for the quintic function using solve2().
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,109,ublic void testQuinticFunction2() throws MathException {
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,110,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,111,ullerSolver solver = new MullerSolver(f);
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,112,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,114,in = -0.4; max = 0.2; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,115,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,116,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,117,"esult = solver.solve2(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,118,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,120,in = 0.75; max = 1.5; expected = 1.0;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,121,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,122,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,123,"esult = solver.solve2(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,124,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,126,in = -0.9; max = -0.2; expected = -0.5;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,127,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,128,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,129,"esult = solver.solve2(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,130,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,134, Test of solver for the exponential function.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,135, <p>
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,136, It takes 10 to 15 iterations for the last two tests to converge.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,137," In fact, if not for the bisection alternative, the solver would"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,138, exceed the default maximal iteration of 100.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,140,ublic void testExpm1Function() throws MathException {
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,141,nivariateRealFunction f = new Expm1Function();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,142,nivariateRealSolver solver = new MullerSolver(f);
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,143,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,145,in = -1.0; max = 2.0; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,146,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,147,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,148,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,149,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,151,in = -20.0; max = 10.0; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,152,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,153,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,154,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,155,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,157,in = -50.0; max = 100.0; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,158,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,159,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,160,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,161,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,165, Test of solver for the exponential function using solve2().
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,166, <p>
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,167, It takes 25 to 50 iterations for the last two tests to converge.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,169,ublic void testExpm1Function2() throws MathException {
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,170,nivariateRealFunction f = new Expm1Function();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,171,ullerSolver solver = new MullerSolver(f);
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,172,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,174,in = -1.0; max = 2.0; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,175,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,176,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,177,"esult = solver.solve2(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,178,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,180,in = -20.0; max = 10.0; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,181,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,182,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,183,"esult = solver.solve2(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,184,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,186,in = -50.0; max = 100.0; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,187,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,188,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,189,"esult = solver.solve2(min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,190,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,194, Test of parameters for the solver.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,196,ublic void testParameters() throws Exception {
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,197,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,198,nivariateRealSolver solver = new MullerSolver(f);
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,200,ry {
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,201,/ bad interval
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,202,"olver.solve(1, -1);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,203,"ail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,204, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,205,/ expected
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,207,ry {
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,208,/ no bracketing
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,209,"olver.solve(2, 3);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,210,"ail(""Expecting IllegalArgumentException - no bracketing"");"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,211, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,212,/ expected
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,17,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,19,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,23,* Testcase for Muller solver.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,24,* <p>
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,25,"* Muller's method converges almost quadratically near roots, but it can"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,26,* be very slow in regions far away from zeros. Test runs show that for
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,27,"* reasonably good initial values, for a default absolute accuracy of 1E-6,"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,28,* it generally takes 5 to 10 iterations for the solver to converge.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,29,* <p>
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,30,* Tests for the exponential function illustrate the situations where
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,31,* Muller solver performs poorly.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,33,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,35,public final class MullerSolverTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,38,* Test of solver for the sine function.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,40,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,41,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,42,UnivariateRealSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,43,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,45,min = 3.0; max = 4.0; expected = Math.PI;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,46,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,47,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,48,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,49,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,51,min = -1.0; max = 1.5; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,52,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,53,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,54,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,55,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,59,* Test of solver for the sine function using solve2().
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,61,public void testSinFunction2() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,62,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,63,MullerSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,64,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,66,min = 3.0; max = 4.0; expected = Math.PI;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,67,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,68,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,69,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,70,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,72,min = -1.0; max = 1.5; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,73,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,74,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,75,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,76,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,80,* Test of solver for the quintic function.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,82,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,83,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,84,UnivariateRealSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,85,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,87,min = -0.4; max = 0.2; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,88,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,89,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,90,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,91,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,93,min = 0.75; max = 1.5; expected = 1.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,94,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,95,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,96,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,97,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,99,min = -0.9; max = -0.2; expected = -0.5;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,100,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,101,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,102,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,103,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,107,* Test of solver for the quintic function using solve2().
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,109,public void testQuinticFunction2() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,110,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,111,MullerSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,112,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,114,min = -0.4; max = 0.2; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,115,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,116,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,117,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,118,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,120,min = 0.75; max = 1.5; expected = 1.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,121,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,122,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,123,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,124,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,126,min = -0.9; max = -0.2; expected = -0.5;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,127,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,128,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,129,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,130,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,134,* Test of solver for the exponential function.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,135,* <p>
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,136,* It takes 10 to 15 iterations for the last two tests to converge.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,137,"* In fact, if not for the bisection alternative, the solver would"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,138,* exceed the default maximal iteration of 100.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,140,public void testExpm1Function() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,141,UnivariateRealFunction f = new Expm1Function();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,142,UnivariateRealSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,143,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,145,min = -1.0; max = 2.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,146,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,147,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,148,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,149,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,151,min = -20.0; max = 10.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,152,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,153,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,154,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,155,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,157,min = -50.0; max = 100.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,158,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,159,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,160,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,161,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,165,* Test of solver for the exponential function using solve2().
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,166,* <p>
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,167,* It takes 25 to 50 iterations for the last two tests to converge.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,169,public void testExpm1Function2() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,170,UnivariateRealFunction f = new Expm1Function();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,171,MullerSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,172,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,174,min = -1.0; max = 2.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,175,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,176,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,177,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,178,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,180,min = -20.0; max = 10.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,181,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,182,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,183,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,184,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,186,min = -50.0; max = 100.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,187,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,188,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,189,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,190,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,194,* Test of parameters for the solver.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,196,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,197,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,198,UnivariateRealSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,200,try {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,201,// bad interval
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,202,"solver.solve(1, -1);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,203,"fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,204,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,205,// expected
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,207,try {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,208,// no bracketing
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,209,"solver.solve(2, 3);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,210,"fail(""Expecting IllegalArgumentException - no bracketing"");"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,211,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,212,// expected
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,17,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,20,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,23, Testcase for Neville interpolator.
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,24, <p>
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,25, The error of polynomial interpolation is
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,26,     f(z) - p(z) = f^(n)(zeta) * (z-x[0])(z-x[1])...(z-x[n-1]) / n!
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,27, where f^(n) is the n-th derivative of the approximated function and
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,28, zeta is some point in the interval determined by x[] and z.
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,29, <p>
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,30," Since zeta is unknown, f^(n)(zeta) cannot be calculated. But we can bound"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,31," it and use the absolute value upper bound for estimates. For reference,"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,32," see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X, chapter 2."
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,34, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,36,ublic final class NevilleInterpolatorTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,39, Test of interpolator for the sine function.
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,40, <p>
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,41," |sin^(n)(zeta)| <= 1.0, zeta in [0, 2*PI]"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,43,ublic void testSinFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,44,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,45,nivariateRealInterpolator interpolator = new NevilleInterpolator();
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,46,"ouble x[], y[], z, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,48,"/ 6 interpolating points on interval [0, 2*PI]"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,49,nt n = 6;
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,50,"ouble min = 0.0, max = 2 * Math.PI;"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,51, = new double[n];
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,52, = new double[n];
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,53,or (int i = 0; i < n; i++) {
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,54,[i] = min + i * (max - min) / n;
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,55,[i] = f.value(x[i]);
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,57,ouble derivativebound = 1.0;
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,58,"nivariateRealFunction p = interpolator.interpolate(x, y);"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,60, = Math.PI / 4; expected = f.value(z); result = p.value(z);
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,61,"olerance = Math.abs(derivativebound * partialerror(x, z));"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,62,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,64, = Math.PI * 1.5; expected = f.value(z); result = p.value(z);
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,65,"olerance = Math.abs(derivativebound * partialerror(x, z));"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,66,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,70, Test of interpolator for the exponential function.
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,71, <p>
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,72," |expm1^(n)(zeta)| <= e, zeta in [-1, 1]"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,74,ublic void testExpm1Function() throws MathException {
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,75,nivariateRealFunction f = new Expm1Function();
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,76,nivariateRealInterpolator interpolator = new NevilleInterpolator();
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,77,"ouble x[], y[], z, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,79,"/ 5 interpolating points on interval [-1, 1]"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,80,nt n = 5;
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,81,"ouble min = -1.0, max = 1.0;"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,82, = new double[n];
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,83, = new double[n];
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,84,or (int i = 0; i < n; i++) {
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,85,[i] = min + i * (max - min) / n;
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,86,[i] = f.value(x[i]);
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,88,ouble derivativebound = Math.E;
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,89,"nivariateRealFunction p = interpolator.interpolate(x, y);"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,91, = 0.0; expected = f.value(z); result = p.value(z);
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,92,"olerance = Math.abs(derivativebound * partialerror(x, z));"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,93,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,95, = 0.5; expected = f.value(z); result = p.value(z);
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,96,"olerance = Math.abs(derivativebound * partialerror(x, z));"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,97,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,99, = -0.5; expected = f.value(z); result = p.value(z);
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,100,"olerance = Math.abs(derivativebound * partialerror(x, z));"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,101,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,105, Test of parameters for the interpolator.
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,107,ublic void testParameters() throws Exception {
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,108,nivariateRealInterpolator interpolator = new NevilleInterpolator();
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,110,ry {
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,111,/ bad abscissas array
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,112,"ouble x[] = { 1.0, 2.0, 2.0, 4.0 };"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,113,"ouble y[] = { 0.0, 4.0, 4.0, 2.5 };"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,114,"nivariateRealFunction p = interpolator.interpolate(x, y);"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,115,.value(0.0);
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,116,"ail(""Expecting MathException - bad abscissas array"");"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,117, catch (MathException ex) {
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,118,/ expected
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,123, Returns the partial error term (z-x[0])(z-x[1])...(z-x[n-1])/n!
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,125,"rotected double partialerror(double x[], double z) throws"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,126,llegalArgumentException {
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,128,f (x.length < 1) {
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,129,hrow new IllegalArgumentException
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,130,"""Interpolation array cannot be empty."");"
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,132,ouble out = 1;
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,133,or (int i = 0; i < x.length; i++) {
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,134,ut *= (z - x[i]) / (i + 1);
False,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,136,eturn out;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,17,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,19,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,23,* Testcase for Neville interpolator.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,24,* <p>
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,25,* The error of polynomial interpolation is
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,26,*     f(z) - p(z) = f^(n)(zeta) * (z-x[0])(z-x[1])...(z-x[n-1]) / n!
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,27,* where f^(n) is the n-th derivative of the approximated function and
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,28,* zeta is some point in the interval determined by x[] and z.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,29,* <p>
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,30,"* Since zeta is unknown, f^(n)(zeta) cannot be calculated. But we can bound"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,31,"* it and use the absolute value upper bound for estimates. For reference,"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,32,"* see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X, chapter 2."
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,34,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,36,public final class NevilleInterpolatorTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,39,* Test of interpolator for the sine function.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,40,* <p>
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,41,"* |sin^(n)(zeta)| <= 1.0, zeta in [0, 2*PI]"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,43,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,44,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,45,UnivariateRealInterpolator interpolator = new NevilleInterpolator();
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,46,"double x[], y[], z, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,48,"// 6 interpolating points on interval [0, 2*PI]"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,49,int n = 6;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,50,"double min = 0.0, max = 2 * Math.PI;"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,51,x = new double[n];
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,52,y = new double[n];
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,53,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,54,x[i] = min + i * (max - min) / n;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,55,y[i] = f.value(x[i]);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,57,double derivativebound = 1.0;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,58,"UnivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,60,z = Math.PI / 4; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,61,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,62,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,64,z = Math.PI * 1.5; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,65,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,66,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,70,* Test of interpolator for the exponential function.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,71,* <p>
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,72,"* |expm1^(n)(zeta)| <= e, zeta in [-1, 1]"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,74,public void testExpm1Function() throws MathException {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,75,UnivariateRealFunction f = new Expm1Function();
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,76,UnivariateRealInterpolator interpolator = new NevilleInterpolator();
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,77,"double x[], y[], z, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,79,"// 5 interpolating points on interval [-1, 1]"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,80,int n = 5;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,81,"double min = -1.0, max = 1.0;"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,82,x = new double[n];
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,83,y = new double[n];
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,84,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,85,x[i] = min + i * (max - min) / n;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,86,y[i] = f.value(x[i]);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,88,double derivativebound = Math.E;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,89,"UnivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,91,z = 0.0; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,92,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,93,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,95,z = 0.5; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,96,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,97,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,99,z = -0.5; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,100,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,101,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,105,* Test of parameters for the interpolator.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,107,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,108,UnivariateRealInterpolator interpolator = new NevilleInterpolator();
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,110,try {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,111,// bad abscissas array
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,112,"double x[] = { 1.0, 2.0, 2.0, 4.0 };"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,113,"double y[] = { 0.0, 4.0, 4.0, 2.5 };"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,114,"UnivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,115,p.value(0.0);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,116,"fail(""Expecting MathException - bad abscissas array"");"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,117,} catch (MathException ex) {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,118,// expected
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,123,* Returns the partial error term (z-x[0])(z-x[1])...(z-x[n-1])/n!
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,125,"protected double partialerror(double x[], double z) throws"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,126,IllegalArgumentException {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,128,if (x.length < 1) {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,129,throw new IllegalArgumentException
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,130,"(""Interpolation array cannot be empty."");"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,132,double out = 1;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,133,for (int i = 0; i < x.length; i++) {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,134,out *= (z - x[i]) / (i + 1);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,136,return out;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,17,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,20,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,23, Testcase for Lagrange form of polynomial function.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,24, <p>
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,25, We use n+1 points to interpolate a polynomial of degree n. This should
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,26, give us the exact same polynomial as result. Thus we can use a very
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,27, small tolerance to account only for round-off errors.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,29, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,31,ublic final class PolynomialFunctionLagrangeFormTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,34, Test of polynomial for the linear function.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,36,ublic void testLinearFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,37,olynomialFunctionLagrangeForm p;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,38,"ouble c[], z, expected, result, tolerance = 1E-12;"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,40,/ p(x) = 1.5x - 4
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,41,"ouble x[] = { 0.0, 3.0 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,42,"ouble y[] = { -4.0, 0.5 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,43," = new PolynomialFunctionLagrangeForm(x, y);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,45, = 2.0; expected = -1.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,46,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,48, = 4.5; expected = 2.75; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,49,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,51, = 6.0; expected = 5.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,52,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,54,"ssertEquals(1, p.degree());"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,56, = p.getCoefficients();
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,57,"ssertEquals(2, c.length);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,58,"ssertEquals(-4.0, c[0], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,59,"ssertEquals(1.5, c[1], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,63, Test of polynomial for the quadratic function.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,65,ublic void testQuadraticFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,66,olynomialFunctionLagrangeForm p;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,67,"ouble c[], z, expected, result, tolerance = 1E-12;"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,69,/ p(x) = 2x^2 + 5x - 3 = (2x - 1)(x + 3)
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,70,"ouble x[] = { 0.0, -1.0, 0.5 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,71,"ouble y[] = { -3.0, -6.0, 0.0 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,72," = new PolynomialFunctionLagrangeForm(x, y);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,74, = 1.0; expected = 4.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,75,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,77, = 2.5; expected = 22.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,78,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,80, = -2.0; expected = -5.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,81,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,83,"ssertEquals(2, p.degree());"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,85, = p.getCoefficients();
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,86,"ssertEquals(3, c.length);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,87,"ssertEquals(-3.0, c[0], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,88,"ssertEquals(5.0, c[1], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,89,"ssertEquals(2.0, c[2], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,93, Test of polynomial for the quintic function.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,95,ublic void testQuinticFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,96,olynomialFunctionLagrangeForm p;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,97,"ouble c[], z, expected, result, tolerance = 1E-12;"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,99,/ p(x) = x^5 - x^4 - 7x^3 + x^2 + 6x = x(x^2 - 1)(x + 2)(x - 3)
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,100,"ouble x[] = { 1.0, -1.0, 2.0, 3.0, -3.0, 0.5 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,101,"ouble y[] = { 0.0, 0.0, -24.0, 0.0, -144.0, 2.34375 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,102," = new PolynomialFunctionLagrangeForm(x, y);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,104, = 0.0; expected = 0.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,105,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,107, = -2.0; expected = 0.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,108,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,110, = 4.0; expected = 360.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,111,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,113,"ssertEquals(5, p.degree());"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,115, = p.getCoefficients();
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,116,"ssertEquals(6, c.length);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,117,"ssertEquals(0.0, c[0], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,118,"ssertEquals(6.0, c[1], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,119,"ssertEquals(1.0, c[2], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,120,"ssertEquals(-7.0, c[3], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,121,"ssertEquals(-1.0, c[4], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,122,"ssertEquals(1.0, c[5], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,126, Test of parameters for the polynomial.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,128,ublic void testParameters() throws Exception {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,129,olynomialFunctionLagrangeForm p;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,131,ry {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,132,/ bad input array length
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,133,ouble x[] = { 1.0 };
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,134,ouble y[] = { 2.0 };
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,135," = new PolynomialFunctionLagrangeForm(x, y);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,136,"ail(""Expecting IllegalArgumentException - bad input array length"");"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,137, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,138,/ expected
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,140,ry {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,141,/ mismatch input arrays
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,142,"ouble x[] = { 1.0, 2.0, 3.0, 4.0 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,143,"ouble y[] = { 0.0, -4.0, -24.0 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,144," = new PolynomialFunctionLagrangeForm(x, y);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,145,"ail(""Expecting IllegalArgumentException - mismatch input arrays"");"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,146, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,147,/ expected
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,17,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,19,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,23,* Testcase for Lagrange form of polynomial function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,24,* <p>
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,25,* We use n+1 points to interpolate a polynomial of degree n. This should
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,26,* give us the exact same polynomial as result. Thus we can use a very
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,27,* small tolerance to account only for round-off errors.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,29,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,31,public final class PolynomialFunctionLagrangeFormTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,34,* Test of polynomial for the linear function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,36,public void testLinearFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,37,PolynomialFunctionLagrangeForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,38,"double c[], z, expected, result, tolerance = 1E-12;"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,40,// p(x) = 1.5x - 4
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,41,"double x[] = { 0.0, 3.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,42,"double y[] = { -4.0, 0.5 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,43,"p = new PolynomialFunctionLagrangeForm(x, y);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,45,z = 2.0; expected = -1.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,46,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,48,z = 4.5; expected = 2.75; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,49,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,51,z = 6.0; expected = 5.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,52,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,54,"assertEquals(1, p.degree());"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,56,c = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,57,"assertEquals(2, c.length);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,58,"assertEquals(-4.0, c[0], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,59,"assertEquals(1.5, c[1], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,63,* Test of polynomial for the quadratic function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,65,public void testQuadraticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,66,PolynomialFunctionLagrangeForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,67,"double c[], z, expected, result, tolerance = 1E-12;"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,69,// p(x) = 2x^2 + 5x - 3 = (2x - 1)(x + 3)
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,70,"double x[] = { 0.0, -1.0, 0.5 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,71,"double y[] = { -3.0, -6.0, 0.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,72,"p = new PolynomialFunctionLagrangeForm(x, y);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,74,z = 1.0; expected = 4.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,75,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,77,z = 2.5; expected = 22.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,78,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,80,z = -2.0; expected = -5.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,81,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,83,"assertEquals(2, p.degree());"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,85,c = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,86,"assertEquals(3, c.length);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,87,"assertEquals(-3.0, c[0], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,88,"assertEquals(5.0, c[1], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,89,"assertEquals(2.0, c[2], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,93,* Test of polynomial for the quintic function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,95,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,96,PolynomialFunctionLagrangeForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,97,"double c[], z, expected, result, tolerance = 1E-12;"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,99,// p(x) = x^5 - x^4 - 7x^3 + x^2 + 6x = x(x^2 - 1)(x + 2)(x - 3)
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,100,"double x[] = { 1.0, -1.0, 2.0, 3.0, -3.0, 0.5 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,101,"double y[] = { 0.0, 0.0, -24.0, 0.0, -144.0, 2.34375 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,102,"p = new PolynomialFunctionLagrangeForm(x, y);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,104,z = 0.0; expected = 0.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,105,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,107,z = -2.0; expected = 0.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,108,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,110,z = 4.0; expected = 360.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,111,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,113,"assertEquals(5, p.degree());"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,115,c = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,116,"assertEquals(6, c.length);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,117,"assertEquals(0.0, c[0], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,118,"assertEquals(6.0, c[1], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,119,"assertEquals(1.0, c[2], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,120,"assertEquals(-7.0, c[3], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,121,"assertEquals(-1.0, c[4], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,122,"assertEquals(1.0, c[5], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,126,* Test of parameters for the polynomial.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,128,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,129,PolynomialFunctionLagrangeForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,131,try {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,132,// bad input array length
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,133,double x[] = { 1.0 };
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,134,double y[] = { 2.0 };
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,135,"p = new PolynomialFunctionLagrangeForm(x, y);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,136,"fail(""Expecting IllegalArgumentException - bad input array length"");"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,137,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,138,// expected
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,140,try {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,141,// mismatch input arrays
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,142,"double x[] = { 1.0, 2.0, 3.0, 4.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,143,"double y[] = { 0.0, -4.0, -24.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,144,"p = new PolynomialFunctionLagrangeForm(x, y);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,145,"fail(""Expecting IllegalArgumentException - mismatch input arrays"");"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,146,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,147,// expected
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,17,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,20,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,23, Testcase for Newton form of polynomial function.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,24, <p>
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,25, The small tolerance number is used only to account for round-off errors.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,27, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,29,ublic final class PolynomialFunctionNewtonFormTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,32, Test of polynomial for the linear function.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,34,ublic void testLinearFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,35,olynomialFunctionNewtonForm p;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,36,"ouble coefficients[], z, expected, result, tolerance = 1E-12;"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,38,/ p(x) = 1.5x - 4 = 2 + 1.5(x-4)
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,39,"ouble a[] = { 2.0, 1.5 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,40,ouble c[] = { 4.0 };
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,41," = new PolynomialFunctionNewtonForm(a, c);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,43, = 2.0; expected = -1.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,44,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,46, = 4.5; expected = 2.75; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,47,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,49, = 6.0; expected = 5.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,50,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,52,"ssertEquals(1, p.degree());"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,54,oefficients = p.getCoefficients();
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,55,"ssertEquals(2, coefficients.length);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,56,"ssertEquals(-4.0, coefficients[0], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,57,"ssertEquals(1.5, coefficients[1], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,61, Test of polynomial for the quadratic function.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,63,ublic void testQuadraticFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,64,olynomialFunctionNewtonForm p;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,65,"ouble coefficients[], z, expected, result, tolerance = 1E-12;"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,67,/ p(x) = 2x^2 + 5x - 3 = 4 + 3(x-1) + 2(x-1)(x+2)
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,68,"ouble a[] = { 4.0, 3.0, 2.0 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,69,"ouble c[] = { 1.0, -2.0 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,70," = new PolynomialFunctionNewtonForm(a, c);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,72, = 1.0; expected = 4.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,73,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,75, = 2.5; expected = 22.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,76,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,78, = -2.0; expected = -5.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,79,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,81,"ssertEquals(2, p.degree());"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,83,oefficients = p.getCoefficients();
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,84,"ssertEquals(3, coefficients.length);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,85,"ssertEquals(-3.0, coefficients[0], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,86,"ssertEquals(5.0, coefficients[1], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,87,"ssertEquals(2.0, coefficients[2], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,91, Test of polynomial for the quintic function.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,93,ublic void testQuinticFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,94,olynomialFunctionNewtonForm p;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,95,"ouble coefficients[], z, expected, result, tolerance = 1E-12;"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,97,/ p(x) = x^5 - x^4 - 7x^3 + x^2 + 6x
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,98,/      = 6x - 6x^2 -6x^2(x-1) + x^2(x-1)(x+1) + x^2(x-1)(x+1)(x-2)
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,99,"ouble a[] = { 0.0, 6.0, -6.0, -6.0, 1.0, 1.0 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,100,"ouble c[] = { 0.0, 0.0, 1.0, -1.0, 2.0 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,101," = new PolynomialFunctionNewtonForm(a, c);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,103, = 0.0; expected = 0.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,104,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,106, = -2.0; expected = 0.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,107,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,109, = 4.0; expected = 360.0; result = p.value(z);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,110,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,112,"ssertEquals(5, p.degree());"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,114,oefficients = p.getCoefficients();
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,115,"ssertEquals(6, coefficients.length);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,116,"ssertEquals(0.0, coefficients[0], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,117,"ssertEquals(6.0, coefficients[1], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,118,"ssertEquals(1.0, coefficients[2], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,119,"ssertEquals(-7.0, coefficients[3], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,120,"ssertEquals(-1.0, coefficients[4], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,121,"ssertEquals(1.0, coefficients[5], tolerance);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,125, Test of parameters for the polynomial.
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,127,ublic void testParameters() throws Exception {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,128,olynomialFunctionNewtonForm p;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,130,ry {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,131,/ bad input array length
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,132,ouble a[] = { 1.0 };
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,133,ouble c[] = { 2.0 };
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,134," = new PolynomialFunctionNewtonForm(a, c);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,135,"ail(""Expecting IllegalArgumentException - bad input array length"");"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,136, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,137,/ expected
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,139,ry {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,140,/ mismatch input arrays
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,141,"ouble a[] = { 1.0, 2.0, 3.0, 4.0 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,142,"ouble c[] = { 4.0, 3.0, 2.0, 1.0 };"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,143," = new PolynomialFunctionNewtonForm(a, c);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,144,"ail(""Expecting IllegalArgumentException - mismatch input arrays"");"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,145, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,146,/ expected
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,17,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,19,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,23,* Testcase for Newton form of polynomial function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,24,* <p>
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,25,* The small tolerance number is used only to account for round-off errors.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,27,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,29,public final class PolynomialFunctionNewtonFormTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,32,* Test of polynomial for the linear function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,34,public void testLinearFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,35,PolynomialFunctionNewtonForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,36,"double coefficients[], z, expected, result, tolerance = 1E-12;"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,38,// p(x) = 1.5x - 4 = 2 + 1.5(x-4)
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,39,"double a[] = { 2.0, 1.5 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,40,double c[] = { 4.0 };
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,41,"p = new PolynomialFunctionNewtonForm(a, c);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,43,z = 2.0; expected = -1.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,44,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,46,z = 4.5; expected = 2.75; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,47,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,49,z = 6.0; expected = 5.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,50,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,52,"assertEquals(1, p.degree());"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,54,coefficients = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,55,"assertEquals(2, coefficients.length);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,56,"assertEquals(-4.0, coefficients[0], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,57,"assertEquals(1.5, coefficients[1], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,61,* Test of polynomial for the quadratic function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,63,public void testQuadraticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,64,PolynomialFunctionNewtonForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,65,"double coefficients[], z, expected, result, tolerance = 1E-12;"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,67,// p(x) = 2x^2 + 5x - 3 = 4 + 3(x-1) + 2(x-1)(x+2)
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,68,"double a[] = { 4.0, 3.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,69,"double c[] = { 1.0, -2.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,70,"p = new PolynomialFunctionNewtonForm(a, c);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,72,z = 1.0; expected = 4.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,73,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,75,z = 2.5; expected = 22.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,76,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,78,z = -2.0; expected = -5.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,79,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,81,"assertEquals(2, p.degree());"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,83,coefficients = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,84,"assertEquals(3, coefficients.length);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,85,"assertEquals(-3.0, coefficients[0], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,86,"assertEquals(5.0, coefficients[1], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,87,"assertEquals(2.0, coefficients[2], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,91,* Test of polynomial for the quintic function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,93,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,94,PolynomialFunctionNewtonForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,95,"double coefficients[], z, expected, result, tolerance = 1E-12;"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,97,// p(x) = x^5 - x^4 - 7x^3 + x^2 + 6x
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,98,//      = 6x - 6x^2 -6x^2(x-1) + x^2(x-1)(x+1) + x^2(x-1)(x+1)(x-2)
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,99,"double a[] = { 0.0, 6.0, -6.0, -6.0, 1.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,100,"double c[] = { 0.0, 0.0, 1.0, -1.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,101,"p = new PolynomialFunctionNewtonForm(a, c);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,103,z = 0.0; expected = 0.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,104,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,106,z = -2.0; expected = 0.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,107,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,109,z = 4.0; expected = 360.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,110,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,112,"assertEquals(5, p.degree());"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,114,coefficients = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,115,"assertEquals(6, coefficients.length);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,116,"assertEquals(0.0, coefficients[0], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,117,"assertEquals(6.0, coefficients[1], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,118,"assertEquals(1.0, coefficients[2], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,119,"assertEquals(-7.0, coefficients[3], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,120,"assertEquals(-1.0, coefficients[4], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,121,"assertEquals(1.0, coefficients[5], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,125,* Test of parameters for the polynomial.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,127,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,128,PolynomialFunctionNewtonForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,130,try {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,131,// bad input array length
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,132,double a[] = { 1.0 };
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,133,double c[] = { 2.0 };
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,134,"p = new PolynomialFunctionNewtonForm(a, c);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,135,"fail(""Expecting IllegalArgumentException - bad input array length"");"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,136,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,137,// expected
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,139,try {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,140,// mismatch input arrays
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,141,"double a[] = { 1.0, 2.0, 3.0, 4.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,142,"double c[] = { 4.0, 3.0, 2.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,143,"p = new PolynomialFunctionNewtonForm(a, c);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,144,"fail(""Expecting IllegalArgumentException - mismatch input arrays"");"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,145,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,146,// expected
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,17,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,20,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,23, Testcase for Ridders solver.
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,24, <p>
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,25," Ridders' method converges superlinearly, more specific, its rate of"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,26, convergence is sqrt(2). Test runs show that for a default absolute
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,27," accuracy of 1E-6, it generally takes less than 5 iterations for close"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,28, initial bracket and 5 to 10 iterations for distant initial bracket
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,29, to converge.
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,31, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,33,ublic final class RiddersSolverTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,36, Test of solver for the sine function.
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,38,ublic void testSinFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,39,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,40,nivariateRealSolver solver = new RiddersSolver(f);
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,41,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,43,in = 3.0; max = 4.0; expected = Math.PI;
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,44,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,45,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,46,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,47,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,49,in = -1.0; max = 1.5; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,50,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,51,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,52,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,53,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,57, Test of solver for the quintic function.
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,59,ublic void testQuinticFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,60,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,61,nivariateRealSolver solver = new RiddersSolver(f);
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,62,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,64,in = -0.4; max = 0.2; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,65,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,66,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,67,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,68,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,70,in = 0.75; max = 1.5; expected = 1.0;
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,71,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,72,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,73,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,74,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,76,in = -0.9; max = -0.2; expected = -0.5;
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,77,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,78,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,79,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,80,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,84, Test of solver for the exponential function.
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,86,ublic void testExpm1Function() throws MathException {
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,87,nivariateRealFunction f = new Expm1Function();
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,88,nivariateRealSolver solver = new RiddersSolver(f);
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,89,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,91,in = -1.0; max = 2.0; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,92,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,93,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,94,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,95,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,97,in = -20.0; max = 10.0; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,98,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,99,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,100,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,101,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,103,in = -50.0; max = 100.0; expected = 0.0;
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,104,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,105,ath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,106,"esult = solver.solve(min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,107,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,111, Test of parameters for the solver.
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,113,ublic void testParameters() throws Exception {
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,114,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,115,nivariateRealSolver solver = new RiddersSolver(f);
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,117,ry {
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,118,/ bad interval
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,119,"olver.solve(1, -1);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,120,"ail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,121, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,122,/ expected
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,124,ry {
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,125,/ no bracketing
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,126,"olver.solve(2, 3);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,127,"ail(""Expecting IllegalArgumentException - no bracketing"");"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,128, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,129,/ expected
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,17,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,19,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,23,* Testcase for Ridders solver.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,24,* <p>
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,25,"* Ridders' method converges superlinearly, more specific, its rate of"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,26,* convergence is sqrt(2). Test runs show that for a default absolute
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,27,"* accuracy of 1E-6, it generally takes less than 5 iterations for close"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,28,* initial bracket and 5 to 10 iterations for distant initial bracket
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,29,* to converge.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,31,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,33,public final class RiddersSolverTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,36,* Test of solver for the sine function.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,38,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,39,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,40,UnivariateRealSolver solver = new RiddersSolver(f);
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,41,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,43,min = 3.0; max = 4.0; expected = Math.PI;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,44,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,45,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,46,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,47,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,49,min = -1.0; max = 1.5; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,50,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,51,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,52,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,53,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,57,* Test of solver for the quintic function.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,59,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,60,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,61,UnivariateRealSolver solver = new RiddersSolver(f);
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,62,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,64,min = -0.4; max = 0.2; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,65,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,66,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,67,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,68,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,70,min = 0.75; max = 1.5; expected = 1.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,71,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,72,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,73,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,74,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,76,min = -0.9; max = -0.2; expected = -0.5;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,77,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,78,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,79,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,80,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,84,* Test of solver for the exponential function.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,86,public void testExpm1Function() throws MathException {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,87,UnivariateRealFunction f = new Expm1Function();
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,88,UnivariateRealSolver solver = new RiddersSolver(f);
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,89,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,91,min = -1.0; max = 2.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,92,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,93,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,94,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,95,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,97,min = -20.0; max = 10.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,98,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,99,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,100,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,101,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,103,min = -50.0; max = 100.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,104,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,105,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,106,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,107,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,111,* Test of parameters for the solver.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,113,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,114,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,115,UnivariateRealSolver solver = new RiddersSolver(f);
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,117,try {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,118,// bad interval
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,119,"solver.solve(1, -1);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,120,"fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,121,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,122,// expected
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,124,try {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,125,// no bracketing
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,126,"solver.solve(2, 3);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,127,"fail(""Expecting IllegalArgumentException - no bracketing"");"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,128,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,129,// expected
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,18,ackage org.apache.commons.math.distribution;
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,21, Test cases for CauchyDistribution.
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,22, Extends ContinuousDistributionAbstractTest.  See class javadoc for
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,23, ContinuousDistributionAbstractTest for details.
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,25, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,27,ublic class CauchyDistributionTest extends ContinuousDistributionAbstractTest  {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,30, Constructor for CauchyDistributionTest.
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,31, @param arg0
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,33,ublic CauchyDistributionTest(String arg0) {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,34,uper(arg0);
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,37,/-------------- Implementations for abstract methods -----------------------
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,39,** Creates the default continuous distribution instance to use in tests. */
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,40,ublic ContinuousDistribution makeDistribution() {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,41,"eturn DistributionFactory.newInstance().createCauchyDistribution(1.2, 2.1);"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,44,** Creates the default cumulative probability distribution test input values */
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,45,ublic double[] makeCumulativeTestPoints() {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,46,/ quantiles computed using Mathematica
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,47,"eturn new double[] {-667.2485619d, -65.6230835d, -25.48302995d,"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,48,"12.05887818d, -5.263135428d, 7.663135428d, 14.45887818d,"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,49,"7.88302995d, 68.0230835d, 669.6485619d};"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,52,** Creates the default cumulative probability density test expected values */
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,53,ublic double[] makeCumulativeTestValues() {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,54,"eturn new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.900d, 0.950d,"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,55,".975d, 0.990d, 0.999d};"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,58,/---------------------------- Additional test cases -------------------------
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,60,ublic void testInverseCumulativeProbabilityExtremes() throws Exception {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,61,"etInverseCumulativeTestPoints(new double[] {0.0, 1.0});"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,62,etInverseCumulativeTestValues(
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,63,"ew double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,64,erifyInverseCumulativeProbabilities();
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,67,ublic void testMedian() {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,68,auchyDistribution distribution = (CauchyDistribution) getDistribution();
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,69,ouble expected = Math.random();
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,70,istribution.setMedian(expected);
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,71,"ssertEquals(expected, distribution.getMedian(), 0.0);"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,74,ublic void testScale() {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,75,auchyDistribution distribution = (CauchyDistribution) getDistribution();
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,76,ouble expected = Math.random();
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,77,istribution.setScale(expected);
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,78,"ssertEquals(expected, distribution.getScale(), 0.0);"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,81,ublic void testSetScale() {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,82,auchyDistribution distribution = (CauchyDistribution) getDistribution();
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,83,ry {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,84,istribution.setScale(0.0);
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,85,"ail(""Can not have 0.0 scale."");"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,86, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,87,/ success
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,90,ry {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,91,istribution.setScale(-1.0);
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,92,"ail(""Can not have negative scale."");"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,93, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,94,/ success
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,18,package org.apache.commons.math.distribution;
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,21,* Test cases for CauchyDistribution.
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,22,* Extends ContinuousDistributionAbstractTest.  See class javadoc for
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,23,* ContinuousDistributionAbstractTest for details.
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,25,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,27,public class CauchyDistributionTest extends ContinuousDistributionAbstractTest  {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,30,* Constructor for CauchyDistributionTest.
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,31,* @param arg0
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,33,public CauchyDistributionTest(String arg0) {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,34,super(arg0);
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,37,//-------------- Implementations for abstract methods -----------------------
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,39,/** Creates the default continuous distribution instance to use in tests. */
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,40,public ContinuousDistribution makeDistribution() {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,41,"return DistributionFactory.newInstance().createCauchyDistribution(1.2, 2.1);"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,44,/** Creates the default cumulative probability distribution test input values */
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,45,public double[] makeCumulativeTestPoints() {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,46,// quantiles computed using Mathematica
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,47,"return new double[] {-667.2485619d, -65.6230835d, -25.48302995d,"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,48,"-12.05887818d, -5.263135428d, 7.663135428d, 14.45887818d,"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,49,"27.88302995d, 68.0230835d, 669.6485619d};"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,52,/** Creates the default cumulative probability density test expected values */
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,53,public double[] makeCumulativeTestValues() {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,54,"return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.900d, 0.950d,"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,55,"0.975d, 0.990d, 0.999d};"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,58,//---------------------------- Additional test cases -------------------------
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,60,public void testInverseCumulativeProbabilityExtremes() throws Exception {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,61,"setInverseCumulativeTestPoints(new double[] {0.0, 1.0});"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,62,setInverseCumulativeTestValues(
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,63,"new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,64,verifyInverseCumulativeProbabilities();
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,67,public void testMedian() {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,68,CauchyDistribution distribution = (CauchyDistribution) getDistribution();
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,69,double expected = Math.random();
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,70,distribution.setMedian(expected);
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,71,"assertEquals(expected, distribution.getMedian(), 0.0);"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,74,public void testScale() {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,75,CauchyDistribution distribution = (CauchyDistribution) getDistribution();
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,76,double expected = Math.random();
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,77,distribution.setScale(expected);
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,78,"assertEquals(expected, distribution.getScale(), 0.0);"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,81,public void testSetScale() {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,82,CauchyDistribution distribution = (CauchyDistribution) getDistribution();
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,83,try {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,84,distribution.setScale(0.0);
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,85,"fail(""Can not have 0.0 scale."");"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,86,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,87,// success
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,90,try {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,91,distribution.setScale(-1.0);
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,92,"fail(""Can not have negative scale."");"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,93,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,94,// success
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,18,ackage org.apache.commons.math.distribution;
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,21, Test cases for WeibullDistribution.
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,22, Extends ContinuousDistributionAbstractTest.  See class javadoc for
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,23, ContinuousDistributionAbstractTest for details.
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,25," @version $Revision: 1.8 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,27,ublic class WeibullDistributionTest extends ContinuousDistributionAbstractTest  {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,30, Constructor for CauchyDistributionTest.
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,31, @param arg0
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,33,ublic WeibullDistributionTest(String arg0) {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,34,uper(arg0);
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,37,/-------------- Implementations for abstract methods -----------------------
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,39,** Creates the default continuous distribution instance to use in tests. */
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,40,ublic ContinuousDistribution makeDistribution() {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,41,"eturn DistributionFactory.newInstance().createWeibullDistribution(1.2, 2.1);"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,44,** Creates the default cumulative probability distribution test input values */
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,45,ublic double[] makeCumulativeTestPoints() {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,46,/ quantiles computed using Mathematica
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,47,"eturn new double[] {0.00664355181d, 0.04543282833d, 0.09811627374d,"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,48,".1767135246d, 0.3219468654d, 4.207902826d, 5.23968437d,"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,49,".232056007d, 7.497630467d, 10.51154969d};"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,52,** Creates the default cumulative probability density test expected values */
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,53,ublic double[] makeCumulativeTestValues() {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,54,"eturn new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.900d, 0.950d,"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,55,".975d, 0.990d, 0.999d};"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,58,/---------------------------- Additional test cases -------------------------
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,60,ublic void testInverseCumulativeProbabilityExtremes() throws Exception {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,61,"etInverseCumulativeTestPoints(new double[] {0.0, 1.0});"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,62,etInverseCumulativeTestValues(
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,63,"ew double[] {0.0, Double.POSITIVE_INFINITY});"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,64,erifyInverseCumulativeProbabilities();
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,67,ublic void testAlpha() {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,68,eibullDistribution distribution = (WeibullDistribution) getDistribution();
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,69,ouble expected = Math.random();
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,70,istribution.setShape(expected);
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,71,"ssertEquals(expected, distribution.getShape(), 0.0);"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,74,ublic void testBeta() {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,75,eibullDistribution distribution = (WeibullDistribution) getDistribution();
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,76,ouble expected = Math.random();
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,77,istribution.setScale(expected);
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,78,"ssertEquals(expected, distribution.getScale(), 0.0);"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,81,ublic void testSetAlpha() {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,82,eibullDistribution distribution = (WeibullDistribution) getDistribution();
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,83,ry {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,84,istribution.setShape(0.0);
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,85,"ail(""Can not have 0.0 alpha."");"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,86, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,87,/ success
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,90,ry {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,91,istribution.setShape(-1.0);
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,92,"ail(""Can not have negative alpha."");"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,93, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,94,/ success
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,98,ublic void testSetBeta() {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,99,eibullDistribution distribution = (WeibullDistribution) getDistribution();
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,100,ry {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,101,istribution.setScale(0.0);
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,102,"ail(""Can not have 0.0 beta."");"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,103, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,104,/ success
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,107,ry {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,108,istribution.setScale(-1.0);
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,109,"ail(""Can not have negative beta."");"
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,110, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,111,/ success
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,18,package org.apache.commons.math.distribution;
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,21,* Test cases for WeibullDistribution.
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,22,* Extends ContinuousDistributionAbstractTest.  See class javadoc for
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,23,* ContinuousDistributionAbstractTest for details.
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,25,"* @version $Revision: 1.8 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,27,public class WeibullDistributionTest extends ContinuousDistributionAbstractTest  {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,30,* Constructor for CauchyDistributionTest.
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,31,* @param arg0
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,33,public WeibullDistributionTest(String arg0) {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,34,super(arg0);
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,37,//-------------- Implementations for abstract methods -----------------------
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,39,/** Creates the default continuous distribution instance to use in tests. */
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,40,public ContinuousDistribution makeDistribution() {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,41,"return DistributionFactory.newInstance().createWeibullDistribution(1.2, 2.1);"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,44,/** Creates the default cumulative probability distribution test input values */
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,45,public double[] makeCumulativeTestPoints() {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,46,// quantiles computed using Mathematica
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,47,"return new double[] {0.00664355181d, 0.04543282833d, 0.09811627374d,"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,48,"0.1767135246d, 0.3219468654d, 4.207902826d, 5.23968437d,"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,49,"6.232056007d, 7.497630467d, 10.51154969d};"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,52,/** Creates the default cumulative probability density test expected values */
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,53,public double[] makeCumulativeTestValues() {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,54,"return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.900d, 0.950d,"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,55,"0.975d, 0.990d, 0.999d};"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,58,//---------------------------- Additional test cases -------------------------
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,60,public void testInverseCumulativeProbabilityExtremes() throws Exception {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,61,"setInverseCumulativeTestPoints(new double[] {0.0, 1.0});"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,62,setInverseCumulativeTestValues(
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,63,"new double[] {0.0, Double.POSITIVE_INFINITY});"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,64,verifyInverseCumulativeProbabilities();
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,67,public void testAlpha() {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,68,WeibullDistribution distribution = (WeibullDistribution) getDistribution();
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,69,double expected = Math.random();
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,70,distribution.setShape(expected);
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,71,"assertEquals(expected, distribution.getShape(), 0.0);"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,74,public void testBeta() {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,75,WeibullDistribution distribution = (WeibullDistribution) getDistribution();
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,76,double expected = Math.random();
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,77,distribution.setScale(expected);
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,78,"assertEquals(expected, distribution.getScale(), 0.0);"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,81,public void testSetAlpha() {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,82,WeibullDistribution distribution = (WeibullDistribution) getDistribution();
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,83,try {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,84,distribution.setShape(0.0);
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,85,"fail(""Can not have 0.0 alpha."");"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,86,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,87,// success
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,90,try {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,91,distribution.setShape(-1.0);
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,92,"fail(""Can not have negative alpha."");"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,93,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,94,// success
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,98,public void testSetBeta() {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,99,WeibullDistribution distribution = (WeibullDistribution) getDistribution();
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,100,try {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,101,distribution.setScale(0.0);
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,102,"fail(""Can not have 0.0 beta."");"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,103,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,104,// success
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,107,try {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,108,distribution.setScale(-1.0);
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,109,"fail(""Can not have negative beta."");"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,110,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,111,// success
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,18,ackage org.apache.commons.math.fraction;
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,20,mport java.text.NumberFormat;
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,21,mport java.text.ParseException;
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,22,mport java.util.Locale;
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,24,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,26,ublic class FractionFormatTest extends TestCase {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,28,ractionFormat properFormat = null;
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,29,ractionFormat improperFormat = null;
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,31,rotected Locale getLocale() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,32,eturn Locale.getDefault();
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,35,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,36,roperFormat = FractionFormat.getProperInstance(getLocale());
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,37,mproperFormat = FractionFormat.getImproperInstance(getLocale());
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,40,ublic void testFormat() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,41,"raction c = new Fraction(1, 2);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,42,"tring expected = ""1 / 2"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,44,tring actual = properFormat.format(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,45,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,47,ctual = improperFormat.format(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,48,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,51,ublic void testFormatNegative() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,52,"raction c = new Fraction(-1, 2);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,53,"tring expected = ""-1 / 2"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,55,tring actual = properFormat.format(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,56,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,58,ctual = improperFormat.format(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,59,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,62,ublic void testFormatZero() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,63,"raction c = new Fraction(0, 1);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,64,"tring expected = ""0 / 1"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,66,tring actual = properFormat.format(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,67,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,69,ctual = improperFormat.format(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,70,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,73,ublic void testFormatImproper() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,74,"raction c = new Fraction(5, 3);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,76,tring actual = properFormat.format(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,77,"ssertEquals(""1 2 / 3"", actual);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,79,ctual = improperFormat.format(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,80,"ssertEquals(""5 / 3"", actual);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,83,ublic void testFormatImproperNegative() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,84,"raction c = new Fraction(-5, 3);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,86,tring actual = properFormat.format(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,87,"ssertEquals(""-1 2 / 3"", actual);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,89,ctual = improperFormat.format(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,90,"ssertEquals(""-5 / 3"", actual);"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,93,ublic void testParse() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,94,"tring source = ""1 / 2"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,96,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,97,raction c = properFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,98,ssertNotNull(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,99,"ssertEquals(1, c.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,100,"ssertEquals(2, c.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,102, = improperFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,103,ssertNotNull(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,104,"ssertEquals(1, c.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,105,"ssertEquals(2, c.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,106, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,107,ail(ex.getMessage());
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,111,ublic void testParseInteger() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,112,"tring source = ""10"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,113,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,114,raction c = properFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,115,ssertNotNull(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,116,"ssertEquals(10, c.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,117,"ssertEquals(1, c.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,118, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,119,ail(ex.getMessage());
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,121,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,122,raction c = improperFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,123,ssertNotNull(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,124,"ssertEquals(10, c.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,125,"ssertEquals(1, c.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,126, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,127,ail(ex.getMessage());
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,131,ublic void testParseInvalid() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,132,"tring source = ""a"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,133,"tring msg = ""should not be able to parse '10 / a'."";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,134,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,135,roperFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,136,ail(msg);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,137, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,138,/ success
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,140,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,141,mproperFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,142,ail(msg);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,143, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,144,/ success
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,148,ublic void testParseInvalidDenominator() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,149,"tring source = ""10 / a"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,150,"tring msg = ""should not be able to parse '10 / a'."";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,151,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,152,roperFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,153,ail(msg);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,154, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,155,/ success
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,157,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,158,mproperFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,159,ail(msg);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,160, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,161,/ success
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,165,ublic void testParseNegative() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,167,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,168,"tring source = ""-1 / 2"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,169,raction c = properFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,170,ssertNotNull(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,171,"ssertEquals(-1, c.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,172,"ssertEquals(2, c.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,174, = improperFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,175,ssertNotNull(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,176,"ssertEquals(-1, c.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,177,"ssertEquals(2, c.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,179,"ource = ""1 / -2"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,180, = properFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,181,ssertNotNull(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,182,"ssertEquals(-1, c.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,183,"ssertEquals(2, c.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,185, = improperFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,186,ssertNotNull(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,187,"ssertEquals(-1, c.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,188,"ssertEquals(2, c.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,189, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,190,ail(ex.getMessage());
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,194,ublic void testParseProper() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,195,"tring source = ""1 2 / 3"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,197,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,198,raction c = properFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,199,ssertNotNull(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,200,"ssertEquals(5, c.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,201,"ssertEquals(3, c.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,202, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,203,ail(ex.getMessage());
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,206,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,207,mproperFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,208,"ail(""invalid improper fraction."");"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,209, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,210,/ success
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,214,ublic void testParseProperNegative() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,215,"tring source = ""-1 2 / 3"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,216,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,217,raction c = properFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,218,ssertNotNull(c);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,219,"ssertEquals(-5, c.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,220,"ssertEquals(3, c.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,221, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,222,ail(ex.getMessage());
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,225,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,226,mproperFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,227,"ail(""invalid improper fraction."");"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,228, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,229,/ success
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,233,ublic void testParseProperInvalidMinus() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,234,"tring source = ""2 -2 / 3"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,235,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,236,raction c = properFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,237,"ail(""invalid minus in improper fraction."");"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,238, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,239,/ expected
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,241,"ource = ""2 2 / -3"";"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,242,ry {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,243,raction c = properFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,244,"ail(""invalid minus in improper fraction."");"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,245, catch (ParseException ex) {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,246,/ expected
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,250,ublic void testNumeratorFormat() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,251,umberFormat old = properFormat.getNumeratorFormat();
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,252,umberFormat nf = NumberFormat.getInstance();
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,253,f.setParseIntegerOnly(true);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,254,roperFormat.setNumeratorFormat(nf);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,255,"ssertEquals(nf, properFormat.getNumeratorFormat());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,256,roperFormat.setNumeratorFormat(old);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,258,ld = improperFormat.getNumeratorFormat();
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,259,f = NumberFormat.getInstance();
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,260,f.setParseIntegerOnly(true);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,261,mproperFormat.setNumeratorFormat(nf);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,262,"ssertEquals(nf, improperFormat.getNumeratorFormat());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,263,mproperFormat.setNumeratorFormat(old);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,266,ublic void testDenominatorFormat() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,267,umberFormat old = properFormat.getDenominatorFormat();
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,268,umberFormat nf = NumberFormat.getInstance();
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,269,f.setParseIntegerOnly(true);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,270,roperFormat.setDenominatorFormat(nf);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,271,"ssertEquals(nf, properFormat.getDenominatorFormat());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,272,roperFormat.setDenominatorFormat(old);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,274,ld = improperFormat.getDenominatorFormat();
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,275,f = NumberFormat.getInstance();
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,276,f.setParseIntegerOnly(true);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,277,mproperFormat.setDenominatorFormat(nf);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,278,"ssertEquals(nf, improperFormat.getDenominatorFormat());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,279,mproperFormat.setDenominatorFormat(old);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,282,ublic void testWholeFormat() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,283,roperFractionFormat format = (ProperFractionFormat)properFormat;
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,285,umberFormat old = format.getWholeFormat();
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,286,umberFormat nf = NumberFormat.getInstance();
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,287,f.setParseIntegerOnly(true);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,288,ormat.setWholeFormat(nf);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,289,"ssertEquals(nf, format.getWholeFormat());"
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,290,ormat.setWholeFormat(old);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,18,package org.apache.commons.math.fraction;
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,20,import java.text.NumberFormat;
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,21,import java.text.ParseException;
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,22,import java.util.Locale;
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,26,public class FractionFormatTest extends TestCase {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,28,FractionFormat properFormat = null;
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,29,FractionFormat improperFormat = null;
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,31,protected Locale getLocale() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,32,return Locale.getDefault();
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,35,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,36,properFormat = FractionFormat.getProperInstance(getLocale());
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,37,improperFormat = FractionFormat.getImproperInstance(getLocale());
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,40,public void testFormat() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,41,"Fraction c = new Fraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,42,"String expected = ""1 / 2"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,44,String actual = properFormat.format(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,45,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,47,actual = improperFormat.format(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,48,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,51,public void testFormatNegative() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,52,"Fraction c = new Fraction(-1, 2);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,53,"String expected = ""-1 / 2"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,55,String actual = properFormat.format(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,56,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,58,actual = improperFormat.format(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,59,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,62,public void testFormatZero() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,63,"Fraction c = new Fraction(0, 1);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,64,"String expected = ""0 / 1"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,66,String actual = properFormat.format(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,67,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,69,actual = improperFormat.format(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,70,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,73,public void testFormatImproper() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,74,"Fraction c = new Fraction(5, 3);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,76,String actual = properFormat.format(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,77,"assertEquals(""1 2 / 3"", actual);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,79,actual = improperFormat.format(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,80,"assertEquals(""5 / 3"", actual);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,83,public void testFormatImproperNegative() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,84,"Fraction c = new Fraction(-5, 3);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,86,String actual = properFormat.format(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,87,"assertEquals(""-1 2 / 3"", actual);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,89,actual = improperFormat.format(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,90,"assertEquals(""-5 / 3"", actual);"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,93,public void testParse() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,94,"String source = ""1 / 2"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,96,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,97,Fraction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,98,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,99,"assertEquals(1, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,100,"assertEquals(2, c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,102,c = improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,103,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,104,"assertEquals(1, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,105,"assertEquals(2, c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,106,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,107,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,111,public void testParseInteger() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,112,"String source = ""10"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,113,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,114,Fraction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,115,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,116,"assertEquals(10, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,117,"assertEquals(1, c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,118,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,119,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,121,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,122,Fraction c = improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,123,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,124,"assertEquals(10, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,125,"assertEquals(1, c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,126,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,127,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,131,public void testParseInvalid() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,132,"String source = ""a"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,133,"String msg = ""should not be able to parse '10 / a'."";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,134,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,135,properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,136,fail(msg);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,137,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,138,// success
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,140,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,141,improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,142,fail(msg);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,143,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,144,// success
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,148,public void testParseInvalidDenominator() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,149,"String source = ""10 / a"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,150,"String msg = ""should not be able to parse '10 / a'."";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,151,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,152,properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,153,fail(msg);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,154,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,155,// success
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,157,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,158,improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,159,fail(msg);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,160,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,161,// success
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,165,public void testParseNegative() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,167,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,168,"String source = ""-1 / 2"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,169,Fraction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,170,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,171,"assertEquals(-1, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,172,"assertEquals(2, c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,174,c = improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,175,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,176,"assertEquals(-1, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,177,"assertEquals(2, c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,179,"source = ""1 / -2"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,180,c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,181,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,182,"assertEquals(-1, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,183,"assertEquals(2, c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,185,c = improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,186,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,187,"assertEquals(-1, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,188,"assertEquals(2, c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,189,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,190,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,194,public void testParseProper() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,195,"String source = ""1 2 / 3"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,197,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,198,Fraction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,199,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,200,"assertEquals(5, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,201,"assertEquals(3, c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,202,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,203,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,206,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,207,improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,208,"fail(""invalid improper fraction."");"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,209,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,210,// success
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,214,public void testParseProperNegative() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,215,"String source = ""-1 2 / 3"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,216,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,217,Fraction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,218,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,219,"assertEquals(-5, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,220,"assertEquals(3, c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,221,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,222,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,225,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,226,improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,227,"fail(""invalid improper fraction."");"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,228,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,229,// success
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,233,public void testParseProperInvalidMinus() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,234,"String source = ""2 -2 / 3"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,235,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,236,Fraction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,237,"fail(""invalid minus in improper fraction."");"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,238,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,239,// expected
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,241,"source = ""2 2 / -3"";"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,242,try {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,243,Fraction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,244,"fail(""invalid minus in improper fraction."");"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,245,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,246,// expected
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,250,public void testNumeratorFormat() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,251,NumberFormat old = properFormat.getNumeratorFormat();
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,252,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,253,nf.setParseIntegerOnly(true);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,254,properFormat.setNumeratorFormat(nf);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,255,"assertEquals(nf, properFormat.getNumeratorFormat());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,256,properFormat.setNumeratorFormat(old);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,258,old = improperFormat.getNumeratorFormat();
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,259,nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,260,nf.setParseIntegerOnly(true);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,261,improperFormat.setNumeratorFormat(nf);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,262,"assertEquals(nf, improperFormat.getNumeratorFormat());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,263,improperFormat.setNumeratorFormat(old);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,266,public void testDenominatorFormat() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,267,NumberFormat old = properFormat.getDenominatorFormat();
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,268,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,269,nf.setParseIntegerOnly(true);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,270,properFormat.setDenominatorFormat(nf);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,271,"assertEquals(nf, properFormat.getDenominatorFormat());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,272,properFormat.setDenominatorFormat(old);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,274,old = improperFormat.getDenominatorFormat();
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,275,nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,276,nf.setParseIntegerOnly(true);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,277,improperFormat.setDenominatorFormat(nf);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,278,"assertEquals(nf, improperFormat.getDenominatorFormat());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,279,improperFormat.setDenominatorFormat(old);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,282,public void testWholeFormat() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,283,ProperFractionFormat format = (ProperFractionFormat)properFormat;
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,285,NumberFormat old = format.getWholeFormat();
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,286,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,287,nf.setParseIntegerOnly(true);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,288,format.setWholeFormat(nf);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,289,"assertEquals(nf, format.getWholeFormat());"
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,290,format.setWholeFormat(old);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,17,ackage org.apache.commons.math.fraction;
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,19,mport org.apache.commons.math.ConvergenceException;
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,21,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,24, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,26,ublic class FractionTest extends TestCase {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,28,"rivate void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,29,"ssertEquals(expectedNumerator, actual.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,30,"ssertEquals(expectedDenominator, actual.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,33,ublic void testConstructor() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,34,"ssertFraction(0, 1, new Fraction(0, 1));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,35,"ssertFraction(0, 1, new Fraction(0, 2));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,36,"ssertFraction(0, 1, new Fraction(0, -1));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,37,"ssertFraction(1, 2, new Fraction(1, 2));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,38,"ssertFraction(1, 2, new Fraction(2, 4));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,39,"ssertFraction(-1, 2, new Fraction(-1, 2));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,40,"ssertFraction(-1, 2, new Fraction(1, -2));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,41,"ssertFraction(-1, 2, new Fraction(-2, 4));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,42,"ssertFraction(-1, 2, new Fraction(2, -4));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,44,/ overflow
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,45,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,46,"ew Fraction(Integer.MIN_VALUE, -1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,47,ail();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,48, catch (ArithmeticException ex) {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,49,/ success
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,51,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,52,"ew Fraction(1, Integer.MIN_VALUE);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,53,ail();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,54, catch (ArithmeticException ex) {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,55,/ success
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,57,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,58,"ssertFraction(0, 1, new Fraction(0.00000000000001));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,59,"ssertFraction(2, 5, new Fraction(0.40000000000001));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,60,"ssertFraction(15, 1, new Fraction(15.0000000000001));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,62, catch (ConvergenceException ex) {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,63,ail(ex.getMessage());
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,67,ublic void testCompareTo() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,68,"raction first = new Fraction(1, 2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,69,"raction second = new Fraction(1, 3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,70,"raction third = new Fraction(1, 2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,72,"ssertEquals(0, first.compareTo(first));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,73,"ssertEquals(0, first.compareTo(third));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,74,"ssertEquals(1, first.compareTo(second));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,75,"ssertEquals(-1, second.compareTo(first));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,78,ublic void testDoubleValue() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,79,"raction first = new Fraction(1, 2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,80,"raction second = new Fraction(1, 3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,82,"ssertEquals(0.5, first.doubleValue(), 0.0);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,83,"ssertEquals(1.0 / 3.0, second.doubleValue(), 0.0);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,86,ublic void testFloatValue() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,87,"raction first = new Fraction(1, 2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,88,"raction second = new Fraction(1, 3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,90,"ssertEquals(0.5f, first.floatValue(), 0.0f);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,91,"ssertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,94,ublic void testIntValue() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,95,"raction first = new Fraction(1, 2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,96,"raction second = new Fraction(3, 2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,98,"ssertEquals(0, first.intValue());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,99,"ssertEquals(1, second.intValue());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,102,ublic void testLongValue() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,103,"raction first = new Fraction(1, 2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,104,"raction second = new Fraction(3, 2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,106,"ssertEquals(0L, first.longValue());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,107,"ssertEquals(1L, second.longValue());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,110,ublic void testConstructorDouble() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,111,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,112,"ssertFraction(1, 2, new Fraction(0.5));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,113,"ssertFraction(1, 3, new Fraction(1.0 / 3.0));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,114,"ssertFraction(17, 100, new Fraction(17.0 / 100.0));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,115,"ssertFraction(317, 100, new Fraction(317.0 / 100.0));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,116,"ssertFraction(-1, 2, new Fraction(-0.5));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,117,"ssertFraction(-1, 3, new Fraction(-1.0 / 3.0));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,118,"ssertFraction(-17, 100, new Fraction(17.0 / -100.0));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,119,"ssertFraction(-317, 100, new Fraction(-317.0 / 100.0));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,120, catch (ConvergenceException ex) {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,121,ail(ex.getMessage());
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,125,ublic void testAbs() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,126,"raction a = new Fraction(10, 21);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,127,"raction b = new Fraction(-10, 21);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,128,"raction c = new Fraction(10, -21);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,130,"ssertFraction(10, 21, a.abs());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,131,"ssertFraction(10, 21, b.abs());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,132,"ssertFraction(10, 21, c.abs());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,135,ublic void testReciprocal() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,136,raction f = null;
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,138," = new Fraction(50, 75);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,139, = f.reciprocal();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,140,"ssertEquals(3, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,141,"ssertEquals(2, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,143," = new Fraction(4, 3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,144, = f.reciprocal();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,145,"ssertEquals(3, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,146,"ssertEquals(4, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,148," = new Fraction(-15, 47);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,149, = f.reciprocal();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,150,"ssertEquals(-47, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,151,"ssertEquals(15, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,153," = new Fraction(0, 3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,154,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,155, = f.reciprocal();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,156,"ail(""expecting ArithmeticException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,157, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,159,/ large values
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,160," = new Fraction(Integer.MAX_VALUE, 1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,161, = f.reciprocal();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,162,"ssertEquals(1, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,163,"ssertEquals(Integer.MAX_VALUE, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,166,ublic void testNegate() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,167,raction f = null;
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,169," = new Fraction(50, 75);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,170, = f.negate();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,171,"ssertEquals(-2, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,172,"ssertEquals(3, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,174," = new Fraction(-50, 75);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,175, = f.negate();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,176,"ssertEquals(2, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,177,"ssertEquals(3, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,179,/ large values
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,180," = new Fraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,181, = f.negate();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,182,"ssertEquals(Integer.MIN_VALUE+2, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,183,"ssertEquals(Integer.MAX_VALUE, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,185," = new Fraction(Integer.MIN_VALUE, 1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,186,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,187, = f.negate();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,188,"ail(""expecting ArithmeticException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,189, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,192,ublic void testAdd() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,193,"raction a = new Fraction(1, 2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,194,"raction b = new Fraction(2, 3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,196,"ssertFraction(1, 1, a.add(a));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,197,"ssertFraction(7, 6, a.add(b));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,198,"ssertFraction(7, 6, b.add(a));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,199,"ssertFraction(4, 3, b.add(b));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,201,"raction f1 = new Fraction(Integer.MAX_VALUE - 1, 1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,202,raction f2 = Fraction.ONE;
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,203,raction f = f1.add(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,204,"ssertEquals(Integer.MAX_VALUE, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,205,"ssertEquals(1, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,207,"1 = new Fraction(-1, 13*13*2*2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,208,"2 = new Fraction(-2, 13*17*2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,209, = f1.add(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,210,"ssertEquals(13*13*17*2*2, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,211,"ssertEquals(-17 - 2*13*2, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,213,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,214,.add(null);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,215,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,216, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,218,"/ if this fraction is added naively, it will overflow."
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,219,/ check that it doesn't.
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,220,"1 = new Fraction(1,32768*3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,221,"2 = new Fraction(1,59049);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,222, = f1.add(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,223,"ssertEquals(52451, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,224,"ssertEquals(1934917632, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,226,"1 = new Fraction(Integer.MIN_VALUE, 3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,227,"2 = new Fraction(1,3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,228, = f1.add(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,229,"ssertEquals(Integer.MIN_VALUE+1, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,230,"ssertEquals(3, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,232,"1 = new Fraction(Integer.MAX_VALUE - 1, 1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,233,2 = Fraction.ONE;
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,234, = f1.add(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,235,"ssertEquals(Integer.MAX_VALUE, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,236,"ssertEquals(1, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,238,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,239, = f.add(Fraction.ONE); // should overflow
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,240,"ail(""expecting ArithmeticException but got: "" + f.toString());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,241, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,243,/ denominator should not be a multiple of 2 or 3 to trigger overflow
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,244,"1 = new Fraction(Integer.MIN_VALUE, 5);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,245,"2 = new Fraction(-1,5);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,246,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,247, = f1.add(f2); // should overflow
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,248,"ail(""expecting ArithmeticException but got: "" + f.toString());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,249, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,251,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,252,"= new Fraction(-Integer.MAX_VALUE, 1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,253, = f.add(f);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,254,"ail(""expecting ArithmeticException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,255, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,257,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,258,"= new Fraction(-Integer.MAX_VALUE, 1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,259, = f.add(f);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,260,"ail(""expecting ArithmeticException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,261, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,263,"1 = new Fraction(3,327680);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,264,"2 = new Fraction(2,59049);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,265,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,266, = f1.add(f2); // should overflow
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,267,"ail(""expecting ArithmeticException but got: "" + f.toString());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,268, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,271,ublic void testDivide() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,272,"raction a = new Fraction(1, 2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,273,"raction b = new Fraction(2, 3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,275,"ssertFraction(1, 1, a.divide(a));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,276,"ssertFraction(3, 4, a.divide(b));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,277,"ssertFraction(4, 3, b.divide(a));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,278,"ssertFraction(1, 1, b.divide(b));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,280,"raction f1 = new Fraction(3, 5);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,281,raction f2 = Fraction.ZERO;
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,282,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,283,raction f = f1.divide(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,284,"ail(""expecting ArithmeticException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,285, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,287,"1 = new Fraction(0, 5);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,288,"2 = new Fraction(2, 7);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,289,raction f = f1.divide(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,290,"ssertSame(Fraction.ZERO, f);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,292,"1 = new Fraction(2, 7);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,293,2 = Fraction.ONE;
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,294, = f1.divide(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,295,"ssertEquals(2, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,296,"ssertEquals(7, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,298,"1 = new Fraction(1, Integer.MAX_VALUE);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,299, = f1.divide(f1);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,300,"ssertEquals(1, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,301,"ssertEquals(1, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,303,"1 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,304,"2 = new Fraction(1, Integer.MAX_VALUE);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,305, = f1.divide(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,306,"ssertEquals(Integer.MIN_VALUE, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,307,"ssertEquals(1, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,309,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,310,.divide(null);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,311,"ail(""IllegalArgumentException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,312, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,314,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,315,"1 = new Fraction(1, Integer.MAX_VALUE);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,316, = f1.divide(f1.reciprocal());  // should overflow
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,317,"ail(""expecting ArithmeticException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,318, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,319,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,320,"1 = new Fraction(1, -Integer.MAX_VALUE);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,321, = f1.divide(f1.reciprocal());  // should overflow
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,322,"ail(""expecting ArithmeticException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,323, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,326,ublic void testMultiply() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,327,"raction a = new Fraction(1, 2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,328,"raction b = new Fraction(2, 3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,330,"ssertFraction(1, 4, a.multiply(a));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,331,"ssertFraction(1, 3, a.multiply(b));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,332,"ssertFraction(1, 3, b.multiply(a));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,333,"ssertFraction(4, 9, b.multiply(b));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,335,"raction f1 = new Fraction(Integer.MAX_VALUE, 1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,336,"raction f2 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,337,raction f = f1.multiply(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,338,"ssertEquals(Integer.MIN_VALUE, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,339,"ssertEquals(1, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,341,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,342,.multiply(null);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,343,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,344, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,347,ublic void testSubtract() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,348,"raction a = new Fraction(1, 2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,349,"raction b = new Fraction(2, 3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,351,"ssertFraction(0, 1, a.subtract(a));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,352,"ssertFraction(-1, 6, a.subtract(b));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,353,"ssertFraction(1, 6, b.subtract(a));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,354,"ssertFraction(0, 1, b.subtract(b));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,356,"raction f = new Fraction(1,1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,357,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,358,.subtract(null);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,359,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,360, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,362,"/ if this fraction is subtracted naively, it will overflow."
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,363,/ check that it doesn't.
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,364,"raction f1 = new Fraction(1,32768*3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,365,"raction f2 = new Fraction(1,59049);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,366, = f1.subtract(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,367,"ssertEquals(-13085, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,368,"ssertEquals(1934917632, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,370,"1 = new Fraction(Integer.MIN_VALUE, 3);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,371,"2 = new Fraction(1,3).negate();"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,372, = f1.subtract(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,373,"ssertEquals(Integer.MIN_VALUE+1, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,374,"ssertEquals(3, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,376,"1 = new Fraction(Integer.MAX_VALUE, 1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,377,2 = Fraction.ONE;
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,378, = f1.subtract(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,379,"ssertEquals(Integer.MAX_VALUE-1, f.getNumerator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,380,"ssertEquals(1, f.getDenominator());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,382,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,383,"1 = new Fraction(1, Integer.MAX_VALUE);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,384,"2 = new Fraction(1, Integer.MAX_VALUE - 1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,385, = f1.subtract(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,386,"ail(""expecting ArithmeticException"");  //should overflow"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,387, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,389,/ denominator should not be a multiple of 2 or 3 to trigger overflow
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,390,"1 = new Fraction(Integer.MIN_VALUE, 5);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,391,"2 = new Fraction(1,5);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,392,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,393, = f1.subtract(f2); // should overflow
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,394,"ail(""expecting ArithmeticException but got: "" + f.toString());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,395, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,397,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,398,"= new Fraction(Integer.MIN_VALUE, 1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,399, = f.subtract(Fraction.ONE);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,400,"ail(""expecting ArithmeticException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,401, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,403,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,404,"= new Fraction(Integer.MAX_VALUE, 1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,405, = f.subtract(Fraction.ONE.negate());
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,406,"ail(""expecting ArithmeticException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,407, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,409,"1 = new Fraction(3,327680);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,410,"2 = new Fraction(2,59049);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,411,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,412, = f1.subtract(f2); // should overflow
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,413,"ail(""expecting ArithmeticException but got: "" + f.toString());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,414, catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,417,ublic void testEqualsAndHashCode() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,418,"raction zero  = new Fraction(0,1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,419,raction nullFraction = null;
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,420,nt zeroHash = zero.hashCode();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,421,ssertTrue( zero.equals(zero));
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,422,ssertFalse(zero.equals(nullFraction));
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,423,ssertFalse(zero.equals(new Double(0)));
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,424,"raction zero2 = new Fraction(0,2);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,425,ssertTrue(zero.equals(zero2));
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,426,"ssertEquals(zero.hashCode(), zero2.hashCode());"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,427,"raction one = new Fraction(1,1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,428,ssertFalse((one.equals(zero) ||zero.equals(one)));
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,431,ublic void testGetReducedFraction() {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,432,"raction threeFourths = new Fraction(3, 4);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,433,"ssertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,434,"ssertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,435,ry {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,436,"raction f = Fraction.getReducedFraction(1, 0);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,437,"ail(""expecting ArithmeticException"");"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,438, catch (ArithmeticException ex) {
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,439,/ expected
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,441,ssertEquals(Fraction.getReducedFraction
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,442,"2, Integer.MIN_VALUE).getNumerator(),-1);"
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,443,ssertEquals(Fraction.getReducedFraction
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,444,"1, -1).getNumerator(), -1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,17,package org.apache.commons.math.fraction;
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,19,import org.apache.commons.math.ConvergenceException;
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,24,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,26,public class FractionTest extends TestCase {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,28,"private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,29,"assertEquals(expectedNumerator, actual.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,30,"assertEquals(expectedDenominator, actual.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,33,public void testConstructor() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,34,"assertFraction(0, 1, new Fraction(0, 1));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,35,"assertFraction(0, 1, new Fraction(0, 2));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,36,"assertFraction(0, 1, new Fraction(0, -1));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,37,"assertFraction(1, 2, new Fraction(1, 2));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,38,"assertFraction(1, 2, new Fraction(2, 4));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,39,"assertFraction(-1, 2, new Fraction(-1, 2));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,40,"assertFraction(-1, 2, new Fraction(1, -2));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,41,"assertFraction(-1, 2, new Fraction(-2, 4));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,42,"assertFraction(-1, 2, new Fraction(2, -4));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,44,// overflow
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,45,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,46,"new Fraction(Integer.MIN_VALUE, -1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,47,fail();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,48,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,49,// success
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,51,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,52,"new Fraction(1, Integer.MIN_VALUE);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,53,fail();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,54,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,55,// success
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,57,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,58,"assertFraction(0, 1, new Fraction(0.00000000000001));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,59,"assertFraction(2, 5, new Fraction(0.40000000000001));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,60,"assertFraction(15, 1, new Fraction(15.0000000000001));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,62,} catch (ConvergenceException ex) {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,63,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,67,public void testCompareTo() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,68,"Fraction first = new Fraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,69,"Fraction second = new Fraction(1, 3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,70,"Fraction third = new Fraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,72,"assertEquals(0, first.compareTo(first));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,73,"assertEquals(0, first.compareTo(third));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,74,"assertEquals(1, first.compareTo(second));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,75,"assertEquals(-1, second.compareTo(first));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,78,public void testDoubleValue() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,79,"Fraction first = new Fraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,80,"Fraction second = new Fraction(1, 3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,82,"assertEquals(0.5, first.doubleValue(), 0.0);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,83,"assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,86,public void testFloatValue() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,87,"Fraction first = new Fraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,88,"Fraction second = new Fraction(1, 3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,90,"assertEquals(0.5f, first.floatValue(), 0.0f);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,91,"assertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,94,public void testIntValue() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,95,"Fraction first = new Fraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,96,"Fraction second = new Fraction(3, 2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,98,"assertEquals(0, first.intValue());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,99,"assertEquals(1, second.intValue());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,102,public void testLongValue() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,103,"Fraction first = new Fraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,104,"Fraction second = new Fraction(3, 2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,106,"assertEquals(0L, first.longValue());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,107,"assertEquals(1L, second.longValue());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,110,public void testConstructorDouble() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,111,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,112,"assertFraction(1, 2, new Fraction(0.5));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,113,"assertFraction(1, 3, new Fraction(1.0 / 3.0));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,114,"assertFraction(17, 100, new Fraction(17.0 / 100.0));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,115,"assertFraction(317, 100, new Fraction(317.0 / 100.0));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,116,"assertFraction(-1, 2, new Fraction(-0.5));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,117,"assertFraction(-1, 3, new Fraction(-1.0 / 3.0));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,118,"assertFraction(-17, 100, new Fraction(17.0 / -100.0));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,119,"assertFraction(-317, 100, new Fraction(-317.0 / 100.0));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,120,} catch (ConvergenceException ex) {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,121,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,125,public void testAbs() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,126,"Fraction a = new Fraction(10, 21);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,127,"Fraction b = new Fraction(-10, 21);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,128,"Fraction c = new Fraction(10, -21);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,130,"assertFraction(10, 21, a.abs());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,131,"assertFraction(10, 21, b.abs());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,132,"assertFraction(10, 21, c.abs());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,135,public void testReciprocal() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,136,Fraction f = null;
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,138,"f = new Fraction(50, 75);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,139,f = f.reciprocal();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,140,"assertEquals(3, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,141,"assertEquals(2, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,143,"f = new Fraction(4, 3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,144,f = f.reciprocal();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,145,"assertEquals(3, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,146,"assertEquals(4, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,148,"f = new Fraction(-15, 47);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,149,f = f.reciprocal();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,150,"assertEquals(-47, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,151,"assertEquals(15, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,153,"f = new Fraction(0, 3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,154,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,155,f = f.reciprocal();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,156,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,157,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,159,// large values
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,160,"f = new Fraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,161,f = f.reciprocal();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,162,"assertEquals(1, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,163,"assertEquals(Integer.MAX_VALUE, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,166,public void testNegate() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,167,Fraction f = null;
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,169,"f = new Fraction(50, 75);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,170,f = f.negate();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,171,"assertEquals(-2, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,172,"assertEquals(3, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,174,"f = new Fraction(-50, 75);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,175,f = f.negate();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,176,"assertEquals(2, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,177,"assertEquals(3, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,179,// large values
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,180,"f = new Fraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,181,f = f.negate();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,182,"assertEquals(Integer.MIN_VALUE+2, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,183,"assertEquals(Integer.MAX_VALUE, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,185,"f = new Fraction(Integer.MIN_VALUE, 1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,186,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,187,f = f.negate();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,188,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,189,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,192,public void testAdd() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,193,"Fraction a = new Fraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,194,"Fraction b = new Fraction(2, 3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,196,"assertFraction(1, 1, a.add(a));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,197,"assertFraction(7, 6, a.add(b));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,198,"assertFraction(7, 6, b.add(a));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,199,"assertFraction(4, 3, b.add(b));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,201,"Fraction f1 = new Fraction(Integer.MAX_VALUE - 1, 1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,202,Fraction f2 = Fraction.ONE;
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,203,Fraction f = f1.add(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,204,"assertEquals(Integer.MAX_VALUE, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,205,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,207,"f1 = new Fraction(-1, 13*13*2*2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,208,"f2 = new Fraction(-2, 13*17*2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,209,f = f1.add(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,210,"assertEquals(13*13*17*2*2, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,211,"assertEquals(-17 - 2*13*2, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,213,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,214,f.add(null);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,215,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,216,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,218,"// if this fraction is added naively, it will overflow."
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,219,// check that it doesn't.
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,220,"f1 = new Fraction(1,32768*3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,221,"f2 = new Fraction(1,59049);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,222,f = f1.add(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,223,"assertEquals(52451, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,224,"assertEquals(1934917632, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,226,"f1 = new Fraction(Integer.MIN_VALUE, 3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,227,"f2 = new Fraction(1,3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,228,f = f1.add(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,229,"assertEquals(Integer.MIN_VALUE+1, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,230,"assertEquals(3, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,232,"f1 = new Fraction(Integer.MAX_VALUE - 1, 1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,233,f2 = Fraction.ONE;
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,234,f = f1.add(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,235,"assertEquals(Integer.MAX_VALUE, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,236,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,238,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,239,f = f.add(Fraction.ONE); // should overflow
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,240,"fail(""expecting ArithmeticException but got: "" + f.toString());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,241,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,243,// denominator should not be a multiple of 2 or 3 to trigger overflow
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,244,"f1 = new Fraction(Integer.MIN_VALUE, 5);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,245,"f2 = new Fraction(-1,5);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,246,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,247,f = f1.add(f2); // should overflow
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,248,"fail(""expecting ArithmeticException but got: "" + f.toString());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,249,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,251,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,252,"f= new Fraction(-Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,253,f = f.add(f);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,254,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,255,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,257,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,258,"f= new Fraction(-Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,259,f = f.add(f);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,260,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,261,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,263,"f1 = new Fraction(3,327680);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,264,"f2 = new Fraction(2,59049);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,265,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,266,f = f1.add(f2); // should overflow
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,267,"fail(""expecting ArithmeticException but got: "" + f.toString());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,268,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,271,public void testDivide() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,272,"Fraction a = new Fraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,273,"Fraction b = new Fraction(2, 3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,275,"assertFraction(1, 1, a.divide(a));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,276,"assertFraction(3, 4, a.divide(b));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,277,"assertFraction(4, 3, b.divide(a));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,278,"assertFraction(1, 1, b.divide(b));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,280,"Fraction f1 = new Fraction(3, 5);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,281,Fraction f2 = Fraction.ZERO;
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,282,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,283,Fraction f = f1.divide(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,284,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,285,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,287,"f1 = new Fraction(0, 5);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,288,"f2 = new Fraction(2, 7);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,289,Fraction f = f1.divide(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,290,"assertSame(Fraction.ZERO, f);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,292,"f1 = new Fraction(2, 7);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,293,f2 = Fraction.ONE;
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,294,f = f1.divide(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,295,"assertEquals(2, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,296,"assertEquals(7, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,298,"f1 = new Fraction(1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,299,f = f1.divide(f1);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,300,"assertEquals(1, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,301,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,303,"f1 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,304,"f2 = new Fraction(1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,305,f = f1.divide(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,306,"assertEquals(Integer.MIN_VALUE, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,307,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,309,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,310,f.divide(null);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,311,"fail(""IllegalArgumentException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,312,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,314,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,315,"f1 = new Fraction(1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,316,f = f1.divide(f1.reciprocal());  // should overflow
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,317,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,318,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,319,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,320,"f1 = new Fraction(1, -Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,321,f = f1.divide(f1.reciprocal());  // should overflow
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,322,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,323,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,326,public void testMultiply() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,327,"Fraction a = new Fraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,328,"Fraction b = new Fraction(2, 3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,330,"assertFraction(1, 4, a.multiply(a));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,331,"assertFraction(1, 3, a.multiply(b));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,332,"assertFraction(1, 3, b.multiply(a));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,333,"assertFraction(4, 9, b.multiply(b));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,335,"Fraction f1 = new Fraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,336,"Fraction f2 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,337,Fraction f = f1.multiply(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,338,"assertEquals(Integer.MIN_VALUE, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,339,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,341,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,342,f.multiply(null);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,343,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,344,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,347,public void testSubtract() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,348,"Fraction a = new Fraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,349,"Fraction b = new Fraction(2, 3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,351,"assertFraction(0, 1, a.subtract(a));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,352,"assertFraction(-1, 6, a.subtract(b));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,353,"assertFraction(1, 6, b.subtract(a));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,354,"assertFraction(0, 1, b.subtract(b));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,356,"Fraction f = new Fraction(1,1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,357,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,358,f.subtract(null);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,359,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,360,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,362,"// if this fraction is subtracted naively, it will overflow."
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,363,// check that it doesn't.
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,364,"Fraction f1 = new Fraction(1,32768*3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,365,"Fraction f2 = new Fraction(1,59049);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,366,f = f1.subtract(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,367,"assertEquals(-13085, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,368,"assertEquals(1934917632, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,370,"f1 = new Fraction(Integer.MIN_VALUE, 3);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,371,"f2 = new Fraction(1,3).negate();"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,372,f = f1.subtract(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,373,"assertEquals(Integer.MIN_VALUE+1, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,374,"assertEquals(3, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,376,"f1 = new Fraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,377,f2 = Fraction.ONE;
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,378,f = f1.subtract(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,379,"assertEquals(Integer.MAX_VALUE-1, f.getNumerator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,380,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,382,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,383,"f1 = new Fraction(1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,384,"f2 = new Fraction(1, Integer.MAX_VALUE - 1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,385,f = f1.subtract(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,386,"fail(""expecting ArithmeticException"");  //should overflow"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,387,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,389,// denominator should not be a multiple of 2 or 3 to trigger overflow
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,390,"f1 = new Fraction(Integer.MIN_VALUE, 5);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,391,"f2 = new Fraction(1,5);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,392,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,393,f = f1.subtract(f2); // should overflow
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,394,"fail(""expecting ArithmeticException but got: "" + f.toString());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,395,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,397,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,398,"f= new Fraction(Integer.MIN_VALUE, 1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,399,f = f.subtract(Fraction.ONE);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,400,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,401,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,403,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,404,"f= new Fraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,405,f = f.subtract(Fraction.ONE.negate());
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,406,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,407,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,409,"f1 = new Fraction(3,327680);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,410,"f2 = new Fraction(2,59049);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,411,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,412,f = f1.subtract(f2); // should overflow
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,413,"fail(""expecting ArithmeticException but got: "" + f.toString());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,414,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,417,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,418,"Fraction zero  = new Fraction(0,1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,419,Fraction nullFraction = null;
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,420,int zeroHash = zero.hashCode();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,421,assertTrue( zero.equals(zero));
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,422,assertFalse(zero.equals(nullFraction));
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,423,assertFalse(zero.equals(new Double(0)));
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,424,"Fraction zero2 = new Fraction(0,2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,425,assertTrue(zero.equals(zero2));
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,426,"assertEquals(zero.hashCode(), zero2.hashCode());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,427,"Fraction one = new Fraction(1,1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,428,assertFalse((one.equals(zero) ||zero.equals(one)));
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,431,public void testGetReducedFraction() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,432,"Fraction threeFourths = new Fraction(3, 4);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,433,"assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,434,"assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,435,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,436,"Fraction f = Fraction.getReducedFraction(1, 0);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,437,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,438,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,439,// expected
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,441,assertEquals(Fraction.getReducedFraction
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,442,"(2, Integer.MIN_VALUE).getNumerator(),-1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,443,assertEquals(Fraction.getReducedFraction
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,444,"(1, -1).getNumerator(), -1);"

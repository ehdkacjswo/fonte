is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,26, @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,26,* @version $Revision: 1.12 $ $Date: 2004/07/20 12:55:01 $
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,34," The coefficients of the polynomial, ordered by degree -- i.e.,  coefficients[0] is the constant term"
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,35, and coefficients[n] is the coefficient of x^n where n is the degree of the polynomial.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,34,"* The coefficients of the polynomial, ordered by degree -- i.e.,"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,35,* coefficients[0] is the constant term and coefficients[n] is the
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,36,* coefficient of x^n where n is the degree of the polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,40, Construct a polynomial with the given coefficients.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,41,* Construct a polynomial with the given coefficients.  The first element
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,42,* of the coefficients array is the constant term.  Higher degree
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,43,* coefficients follow in sequence.  The degree of the resulting polynomial
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,44,* is the length of the array minus 1.
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,26, A <strong>polynomial spline function</strong> consists of a set of <i>interpolating polynomials</i>
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,27," and an ascending array of  domain <i>knot points</i>, determining the intervals over which the"
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,28, spline function is defined by the constituent polynomials.  The polynomials are assumed to have
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,29, been computed to match the values of another function at the knot points.  The value
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,30," consistency constraints are not currently enforced by <code>PolynomialSplineFunction</code> itself,"
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,31, but are assumed to hold  among the polynomials and knot points passed to the constructor.
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,26,* A <strong>polynomial spline function</strong> consists of a set of
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,27,* <i>interpolating polynomials</i> and an ascending array of  domain
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,28,"* <i>knot points</i>, determining the intervals over which the spline function"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,29,* is defined by the constituent polynomials.  The polynomials are assumed to
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,30,* have been computed to match the values of another function at the knot
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,31,* points.  The value consistency constraints are not currently enforced by
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,32,"* <code>PolynomialSplineFunction</code> itself, but are assumed to hold among"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,33,* the polynomials and knot points passed to the constructor.
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,33, N.B.:  The polynomials in the <code>polynomials</code> property must be centered on the knot points
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,34, to compute the spline function values.  See below.
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,35,* N.B.:  The polynomials in the <code>polynomials</code> property must be
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,36,* centered on the knot points to compute the spline function values.  See below.
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,36, The value of the polynomial spline function for an argument <code>x</code> is computed as follows:
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,38,* The domain of the polynomial spline function is
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,39,"* <code>[smallest knot, largest knot)</code>.  Attempts to evaluate the"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,40,* function at values outside of this range generate IllegalArgumentExceptions.
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,41,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,42,* The value of the polynomial spline function for an argument <code>x</code>
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,43,* is computed as follows:
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,38, <li>The knot array is searched to find the segment to which <code>x</code> belongs.
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,39,"  If <code>x</code> is less than the smallest knot point or greater than or equal to the largest one, an"
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,40,  <code>IllegalArgumentException</code> is thrown.</li>
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,41, <li> Let <code>j</code> be the index of the largest knot point that is less than or equal to <code>x</code>.
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,42,  The value returned is <br> <code>polynomials[j](x - knot[j])</code></li></ol>
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,45,* <li>The knot array is searched to find the segment to which <code>x</code>
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,46,* belongs.  If <code>x</code> is less than the smallest knot point or greater
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,47,"* than or equal to the largest one, an <code>IllegalArgumentException</code>"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,48,* is thrown.</li>
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,49,* <li> Let <code>j</code> be the index of the largest knot point that is less
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,50,* than or equal to <code>x</code>.  The value returned is <br>
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,51,* <code>polynomials[j](x - knot[j])</code></li></ol>
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,44, @version $Revision: 1.7 $ $Date: 2004/07/17 21:19:39 $
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,53,* @version $Revision: 1.8 $ $Date: 2004/07/20 12:55:01 $
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,55, The polynomial functions that make up the spline.  The first element determines the value of the spline
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,56," over the first subinterval, the second over the second, etc.   Spline function values are determined by"
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,57, evaluating these functions at <code>(x - knot[i])</code> where i is the knot segment to which x belongs.
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,64,* The polynomial functions that make up the spline.  The first element
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,65,"* determines the value of the spline over the first subinterval, the"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,66,"* second over the second, etc.   Spline function values are determined by"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,67,* evaluating these functions at <code>(x - knot[i])</code> where i is the
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,68,* knot segment to which x belongs.
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,61,** Number of spline segments = number of polynomials = number of partition points - 1 */
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,73,* Number of spline segments = number of polynomials
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,74,*  = number of partition points - 1
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,66, Construct a polynomial spline function with the given segment delimiters and interpolating
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,67, polynomials.
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,80,* Construct a polynomial spline function with the given segment delimiters
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,81,* and interpolating polynomials.
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,69," The constructor copies both arrays and assigns the copies to the knots and polynomials properties,"
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,70, respectively.
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,83,* The constructor copies both arrays and assigns the copies to the knots
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,84,"* and polynomials properties, respectively."
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,76,"     <code>polynomials.length != knots.length - 1 </code>, or the knots array"
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,77,     is not strictly increasing.
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,90,"* <code>polynomials.length != knots.length - 1 </code>, or the knots array"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,91,* is not strictly increasing.
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,81,uper();
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,117,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,118,* Throws FunctionEvaluationException if v is outside of the domain of the
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,119,"* function.  The domain is [smallest knot, largest knot)."
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,120,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,121,* See {@link PolynomialSplineFunction} for details on the algorithm for
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,122,* computing the value of the function.
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,109, than the largest knot point)
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,128,* than or equal to the largest knot point)
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,144, Returns the number of spline segments = the number of polynomials = the number of knot points - 1.
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,163,* Returns the number of spline segments = the number of polynomials
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,164,* = the number of knot points - 1.
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,185,"         in a stricly increasing manner.  <code>false</code>, otherwise."
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,206,"* in a stricly increasing manner.  <code>false</code>, otherwise."
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,52,    by 10.  See TODO: add reference </li>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,52,*    by 10. </li>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,57, @version $Revision: 1.28 $ $Date: 2004/07/18 23:57:11 $
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,57,* @version $Revision: 1.29 $ $Date: 2004/07/20 12:53:54 $

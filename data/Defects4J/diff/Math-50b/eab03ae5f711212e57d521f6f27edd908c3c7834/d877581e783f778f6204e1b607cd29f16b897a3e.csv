is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,26, @version $Revision: 1.14 $ $Date: 2004/04/27 04:37:58 $
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,26,* @version $Revision: 1.15 $ $Date: 2004/04/27 16:42:33 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,27, @version $Revision: 1.11 $ $Date: 2004/04/23 18:20:12 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,27,* @version $Revision: 1.12 $ $Date: 2004/04/27 16:42:33 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,74,* @throws IllegalArgumentException if function is null.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,83,if (f == null) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,84,"throw new IllegalArgumentException(""function can not be null."");"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,28, @version $Revision: 1.5 $ $Date: 2004/04/27 04:37:58 $
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,28,* @version $Revision: 1.6 $ $Date: 2004/04/27 16:42:34 $
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,87,f (sd < 0.0) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,88,"hrow new IllegalArgumentException(""Standard deviation must be"" +"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,88,if (sd <= 0.0) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,89,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,90,"""Standard deviation must be positive."");"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,99,ouble z = x;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,100,f(standardDeviation > 0){
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,101, = (x - mean) / standardDeviation;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,102,else{
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,103,eturn 0.0;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,100,double z = (x - mean) / standardDeviation;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,140,/TODO is this ok?
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,141,f(standardDeviation == 0){
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,142,eturn mean;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,155,.387132872796366608)
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,156, (((((((r * 5226.495278852854561 +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,146,3.387132872796366608) /
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,147,(((((((r * 5226.495278852854561 +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,160,"else { //closer than 0.075 from {0,1} boundary"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,161,f (q > 0) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,162, = 1 - p;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,163, else {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,164, = p;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,166, = Math.sqrt(- Math.log(r));
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,167,f (r <= 5.0) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,168, += -1.6;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,169,al = (((((((r * 7.7454501427834140764e-4 +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,170,.0227238449892691845833) * r + 0.24178072517745061177) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,171, + 1.27045825245236838258) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,172,.64784832476320460504) * r + 5.7694972214606914055) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,173, + 4.6303378461565452959) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,174,.42343711074968357734)
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,175, (((((((r *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,176,.05075007164441684324e-9 + 5.475938084995344946e-4) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,177, + 0.0151986665636164571966) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,178,.14810397642748007459) * r + 0.68976733498510000455) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,179, + 1.6763848301838038494) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,180,.05319162663775882187) * r + 1.0);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,181,else { //very close to  0 or 1
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,182, += -5.;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,183,al = (((((((r * 2.01033439929228813265e-7 +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,184,.71155556874348757815e-5) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,185,.0012426609473880784386) * r + 0.026532189526576123093) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,186, + 0.29656057182850489123) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,187,.7848265399172913358) * r + 5.4637849111641143699) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,188, + 6.6579046435011037772) /
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,189,((((((r *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,190,.04426310338993978564e-15 + 1.4215117583164458887e-7)*
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,191, + 1.8463183175100546818e-5) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,192,.868691311456132591e-4) * r + 0.0148753612908506148525) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,193, + 0.13692988092273580531) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,194,.59983220655588793769) * r + 1.0);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,196,f(q < 0.0)
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,197,al = -val;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,151,"} else { //closer than 0.075 from {0,1} boundary"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,152,if (q > 0) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,153,r = 1 - p;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,154,} else {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,155,r = p;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,157,r = Math.sqrt(- Math.log(r));
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,158,if (r <= 5.0) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,159,r += -1.6;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,160,val = (((((((r * 7.7454501427834140764e-4 +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,161,0.0227238449892691845833) * r + 0.24178072517745061177) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,162,r + 1.27045825245236838258) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,163,3.64784832476320460504) * r + 5.7694972214606914055) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,164,r + 4.6303378461565452959) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,165,1.42343711074968357734) /
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,166,(((((((r *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,167,1.05075007164441684324e-9 + 5.475938084995344946e-4) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,168,r + 0.0151986665636164571966) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,169,0.14810397642748007459) * r + 0.68976733498510000455) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,170,r + 1.6763848301838038494) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,171,2.05319162663775882187) * r + 1.0);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,172,} else { //very close to  0 or 1
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,173,r += -5.;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,174,val = (((((((r * 2.01033439929228813265e-7 +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,175,2.71155556874348757815e-5) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,176,0.0012426609473880784386) * r + 0.026532189526576123093) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,177,r + 0.29656057182850489123) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,178,1.7848265399172913358) * r + 5.4637849111641143699) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,179,r + 6.6579046435011037772) /
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,180,(((((((r *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,181,2.04426310338993978564e-15 + 1.4215117583164458887e-7)*
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,182,r + 1.8463183175100546818e-5) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,183,7.868691311456132591e-4) * r + 0.0148753612908506148525) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,184,r + 0.13692988092273580531) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,185,0.59983220655588793769) * r + 1.0);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,187,if(q < 0.0) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,188,val = -val;
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,31, @version $Revision: 1.4 $ $Date: 2004/04/12 02:27:49 $
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,31,* @version $Revision: 1.5 $ $Date: 2004/04/27 16:42:34 $
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,35,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,38, Default constructor
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,40,ublic TestStatisticImpl() {
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,58,"hrow new IllegalArgumentException( ""observed counts must be non-negative,"""
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,59," "" expected counts must be postive"");"
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,53,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,54,"""observed counts must be non-negative expected counts must be postive"");"
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,137,f ((sample1 == null) || (sample2 == null
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,138,"| Math.min(sample1.length, sample2.length) < 5)) {"
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,132,if ((sample1 == null) || (sample2 == null ||
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,133,"Math.min(sample1.length, sample2.length) < 5)) {"
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,155,f ((sample1 == null) || (sample2 == null
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,156,"| Math.min(sample1.length, sample2.length) < 5)) {"
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,150,if ((sample1 == null) || (sample2 == null ||
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,151,"Math.min(sample1.length, sample2.length) < 5)) {"
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,217,f ((sampleStats1 == null)
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,218,| (sampleStats2 == null
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,219,"| Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {"
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,212,if ((sampleStats1 == null) ||
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,213,(sampleStats2 == null ||
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,214,"Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {"
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,235,f ((sampleStats1 == null) || (sampleStats2 == null
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,236,"| Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {"
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,230,if ((sampleStats1 == null) || (sampleStats2 == null ||
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,231,"Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {"
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,304,eturn (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2)))
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,305, ((v1 * v1) / (n1 * n1 * (n1 - 1d))
False,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,306, (v2 * v2) / (n2 * n2 * (n2 - 1d)));
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,299,return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,300,((v1 * v1) / (n1 * n1 * (n1 - 1d)) + (v2 * v2) /
True,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java,301,(n2 * n2 * (n2 - 1d)));
False,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,52, @version $Revision: 1.1 $ $Date: 2004/04/11 21:52:28 $
True,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,52,* @version $Revision: 1.2 $ $Date: 2004/04/27 16:42:34 $
True,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,56,/** Serializable version identifier */
True,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,391,* @exception MathException if the confidence interval can not be computed.
True,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,426,* @exception MathException if the confidence interval can not be computed.
False,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,429,eturn getSlopeStdErr()
False,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,430, getTDistribution().inverseCumulativeProbability(1d - alpha / 2d);
True,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,433,return getSlopeStdErr() *
True,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,434,getTDistribution().inverseCumulativeProbability(1d - alpha / 2d);
True,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,456,* @exception MathException if the significance level can not be computed.
False,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,455,d
False,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,456, getTDistribution().cumulativeProbability(
True,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,460,1.0 - getTDistribution().cumulativeProbability(
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,22, @version $Revision: 1.15 $ $Date: 2004/04/12 05:22:11 $
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,22,* @version $Revision: 1.16 $ $Date: 2004/04/27 16:42:34 $
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,31,"test(values, 0, 0);"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,60,if (values == null) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,61,"throw new IllegalArgumentException(""input value array is null"");"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,67,f (values == null) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,68,"hrow new IllegalArgumentException(""input value array is null"");"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,29, @version $Revision: 1.13 $ $Date: 2004/02/21 21:35:15 $
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,29,* @version $Revision: 1.14 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,33,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,25, @version $Revision: 1.15 $ $Date: 2004/02/21 21:35:15 $
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,25,* @version $Revision: 1.16 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,29,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,25, @version $Revision: 1.17 $ $Date: 2004/03/04 04:25:09 $
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,25,* @version $Revision: 1.18 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,29,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,31, @version $Revision: 1.18 $ $Date: 2004/03/21 00:22:26 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,31,* @version $Revision: 1.19 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,35,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,32, @version $Revision: 1.16 $ $Date: 2004/03/04 04:25:09 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,32,* @version $Revision: 1.17 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,36,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,109,eturn sum.evaluate(values) / ((double) length);
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,110,"return sum.evaluate(values, begin, length) / ((double) length);"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,25, @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:15 $
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,25,* @version $Revision: 1.15 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,29,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,31, @version $Revision: 1.19 $ $Date: 2004/03/21 00:23:29 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,31,* @version $Revision: 1.20 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,35,/** Serializable version identifier */
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,80,* @return the skewness of the available values.
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,22, @version $Revision: 1.15 $ $Date: 2004/03/04 04:25:09 $
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,22,* @version $Revision: 1.16 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,26,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,25, @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:15 $
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,25,* @version $Revision: 1.15 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,29,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,28, @version $Revision: 1.18 $ $Date: 2004/03/04 04:25:09 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,28,* @version $Revision: 1.19 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,32,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,31, @version $Revision: 1.15 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,31,* @version $Revision: 1.16 $ $Date: 2004/04/27 16:42:33 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,35,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,25, @version $Revision: 1.12 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,25,* @version $Revision: 1.13 $ $Date: 2004/04/27 16:42:33 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,29,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,31, @version $Revision: 1.15 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,31,* @version $Revision: 1.16 $ $Date: 2004/04/27 16:42:33 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,35,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,31, @version $Revision: 1.17 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,31,* @version $Revision: 1.18 $ $Date: 2004/04/27 16:42:33 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,35,/** Serializable version identifier */
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,72,"test(values, 0, 0);"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,31, @version $Revision: 1.16 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,31,* @version $Revision: 1.17 $ $Date: 2004/04/27 16:42:32 $
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,35,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,25, @version $Revision: 1.18 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,25,* @version $Revision: 1.19 $ $Date: 2004/04/27 16:42:32 $
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,29,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,31, @version $Revision: 1.16 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,31,* @version $Revision: 1.17 $ $Date: 2004/04/27 16:42:32 $
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,35,/** Serializable version identifier */
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,31, @version $Revision: 1.16 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,31,* @version $Revision: 1.17 $ $Date: 2004/04/27 16:42:32 $
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,35,/** Serializable version identifier */
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,53, @version $Revision: 1.12 $ $Date: 2004/02/21 21:35:16 $
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,53,* @version $Revision: 1.13 $ $Date: 2004/04/27 16:42:34 $
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,57,/** Serializable version identifier */
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,53, @version $Revision: 1.13 $ $Date: 2004/02/21 21:35:16 $
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,53,* @version $Revision: 1.14 $ $Date: 2004/04/27 16:42:34 $
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,57,/** Serializable version identifier */
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,49, @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:16 $
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,49,* @version $Revision: 1.15 $ $Date: 2004/04/27 16:42:34 $
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,53,/** Serializable version identifier */
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,3,* Copyright 2004 The Apache Software Foundation
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,5,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,6,*  you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,7,*  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,9,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,14,*  See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,15,*  limitations under the License.
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,18,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,23,* @version $Revision: 1.1 $ $Date: 2004/04/27 16:42:32 $
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,25,public class UnivariateRealSolverFactoryImplTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,27,/** solver factory */
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,28,private UnivariateRealSolverFactory factory;
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,30,/** function */
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,31,private DifferentiableUnivariateRealFunction function;
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,33,* @throws java.lang.Exception
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,34,* @see junit.framework.TestCase#tearDown()
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,36,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,37,super.setUp();
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,38,factory = new UnivariateRealSolverFactoryImpl();
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,39,function = new SinFunction();
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,43,* @throws java.lang.Exception
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,44,* @see junit.framework.TestCase#tearDown()
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,46,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,47,factory = null;
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,48,function = null;
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,49,super.tearDown();
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,52,public void testNewBisectionSolverNull() {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,53,try {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,54,UnivariateRealSolver solver = factory.newBisectionSolver(null);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,55,fail();
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,56,} catch(IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,57,// success
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,61,public void testNewBisectionSolverValid() {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,62,UnivariateRealSolver solver = factory.newBisectionSolver(function);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,63,assertNotNull(solver);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,64,assertTrue(solver instanceof BisectionSolver);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,67,public void testNewNewtonSolverNull() {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,68,try {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,69,UnivariateRealSolver solver = factory.newNewtonSolver(null);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,70,fail();
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,71,} catch(IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,72,// success
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,76,public void testNewNewtonSolverValid() {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,77,UnivariateRealSolver solver = factory.newNewtonSolver(function);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,78,assertNotNull(solver);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,79,assertTrue(solver instanceof NewtonSolver);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,82,public void testNewBrentSolverNull() {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,83,try {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,84,UnivariateRealSolver solver = factory.newBrentSolver(null);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,85,fail();
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,86,} catch(IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,87,// success
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,91,public void testNewBrentSolverValid() {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,92,UnivariateRealSolver solver = factory.newBrentSolver(function);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,93,assertNotNull(solver);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,94,assertTrue(solver instanceof BrentSolver);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,97,public void testNewSecantSolverNull() {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,98,try {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,99,UnivariateRealSolver solver = factory.newSecantSolver(null);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,100,fail();
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,101,} catch(IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,102,// success
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,106,public void testNewSecantSolverValid() {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,107,UnivariateRealSolver solver = factory.newSecantSolver(function);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,108,assertNotNull(solver);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,109,assertTrue(solver instanceof SecantSolver);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,22,import org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,26, @version $Revision: 1.14 $ $Date: 2004/04/12 02:27:49 $
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,27,* @version $Revision: 1.15 $ $Date: 2004/04/27 16:42:31 $
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,168,public void testSumSq() {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,169,double[] x = null;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,171,// test null
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,172,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,173,StatUtils.sumSq(x);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,174,"fail(""null is not a valid data array."");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,175,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,176,// success
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,179,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,180,"StatUtils.sumSq(x, 0, 4);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,181,"fail(""null is not a valid data array."");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,182,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,183,// success
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,186,// test empty
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,187,x = new double[] {};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,188,"TestUtils.assertEquals(Double.NaN, StatUtils.sumSq(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,189,"TestUtils.assertEquals(Double.NaN, StatUtils.sumSq(x, 0, 0), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,191,// test one
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,192,x = new double[] {two};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,193,"TestUtils.assertEquals(4, StatUtils.sumSq(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,194,"TestUtils.assertEquals(4, StatUtils.sumSq(x, 0, 1), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,196,// test many
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,197,"x = new double[] {one, two, two, three};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,198,"TestUtils.assertEquals(18, StatUtils.sumSq(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,199,"TestUtils.assertEquals(8, StatUtils.sumSq(x, 1, 2), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,202,public void testProduct() {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,203,double[] x = null;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,205,// test null
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,206,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,207,StatUtils.product(x);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,208,"fail(""null is not a valid data array."");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,209,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,210,// success
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,213,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,214,"StatUtils.product(x, 0, 4);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,215,"fail(""null is not a valid data array."");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,216,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,217,// success
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,220,// test empty
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,221,x = new double[] {};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,222,"TestUtils.assertEquals(Double.NaN, StatUtils.product(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,223,"TestUtils.assertEquals(Double.NaN, StatUtils.product(x, 0, 0), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,225,// test one
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,226,x = new double[] {two};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,227,"TestUtils.assertEquals(two, StatUtils.product(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,228,"TestUtils.assertEquals(two, StatUtils.product(x, 0, 1), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,230,// test many
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,231,"x = new double[] {one, two, two, three};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,232,"TestUtils.assertEquals(12, StatUtils.product(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,233,"TestUtils.assertEquals(4, StatUtils.product(x, 1, 2), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,236,public void testSumLog() {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,237,double[] x = null;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,239,// test null
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,240,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,241,StatUtils.sumLog(x);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,242,"fail(""null is not a valid data array."");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,243,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,244,// success
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,247,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,248,"StatUtils.sumLog(x, 0, 4);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,249,"fail(""null is not a valid data array."");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,250,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,251,// success
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,254,// test empty
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,255,x = new double[] {};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,256,"TestUtils.assertEquals(Double.NaN, StatUtils.sumLog(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,257,"TestUtils.assertEquals(Double.NaN, StatUtils.sumLog(x, 0, 0), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,259,// test one
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,260,x = new double[] {two};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,261,"TestUtils.assertEquals(Math.log(two), StatUtils.sumLog(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,262,"TestUtils.assertEquals(Math.log(two), StatUtils.sumLog(x, 0, 1), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,264,// test many
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,265,"x = new double[] {one, two, two, three};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,266,"TestUtils.assertEquals(Math.log(one) + 2.0 * Math.log(two) + Math.log(three), StatUtils.sumLog(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,267,"TestUtils.assertEquals(2.0 * Math.log(two), StatUtils.sumLog(x, 1, 2), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,270,public void testMean() {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,271,double[] x = null;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,273,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,274,"StatUtils.mean(x, 0, 4);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,275,"fail(""null is not a valid data array."");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,276,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,277,// success
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,280,// test empty
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,281,x = new double[] {};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,282,"TestUtils.assertEquals(Double.NaN, StatUtils.mean(x, 0, 0), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,284,// test one
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,285,x = new double[] {two};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,286,"TestUtils.assertEquals(two, StatUtils.mean(x, 0, 1), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,288,// test many
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,289,"x = new double[] {one, two, two, three};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,290,"TestUtils.assertEquals(2.5, StatUtils.mean(x, 2, 2), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,293,public void testVariance() {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,294,double[] x = null;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,296,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,297,"StatUtils.variance(x, 0, 4);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,298,"fail(""null is not a valid data array."");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,299,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,300,// success
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,303,// test empty
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,304,x = new double[] {};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,305,"TestUtils.assertEquals(Double.NaN, StatUtils.variance(x, 0, 0), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,307,// test one
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,308,x = new double[] {two};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,309,"TestUtils.assertEquals(0.0, StatUtils.variance(x, 0, 1), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,311,// test many
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,312,"x = new double[] {one, two, two, three};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,313,"TestUtils.assertEquals(0.5, StatUtils.variance(x, 2, 2), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,316,public void testMax() {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,317,double[] x = null;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,319,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,320,"StatUtils.max(x, 0, 4);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,321,"fail(""null is not a valid data array."");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,322,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,323,// success
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,326,// test empty
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,327,x = new double[] {};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,328,"TestUtils.assertEquals(Double.NaN, StatUtils.max(x, 0, 0), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,330,// test one
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,331,x = new double[] {two};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,332,"TestUtils.assertEquals(two, StatUtils.max(x, 0, 1), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,334,// test many
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,335,"x = new double[] {one, two, two, three};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,336,"TestUtils.assertEquals(three, StatUtils.max(x, 1, 3), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,339,public void testMin() {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,340,double[] x = null;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,342,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,343,"StatUtils.min(x, 0, 4);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,344,"fail(""null is not a valid data array."");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,345,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,346,// success
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,349,// test empty
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,350,x = new double[] {};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,351,"TestUtils.assertEquals(Double.NaN, StatUtils.min(x, 0, 0), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,353,// test one
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,354,x = new double[] {two};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,355,"TestUtils.assertEquals(two, StatUtils.min(x, 0, 1), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,357,// test many
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,358,"x = new double[] {one, two, two, three};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,359,"TestUtils.assertEquals(two, StatUtils.min(x, 1, 3), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,362,public void testPercentile() {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,363,double[] x = null;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,365,// test null
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,366,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,367,"StatUtils.percentile(x, .25);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,368,"fail(""null is not a valid data array."");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,369,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,370,// success
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,373,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,374,"StatUtils.percentile(x, 0, 4, 0.25);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,375,"fail(""null is not a valid data array."");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,376,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,377,// success
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,380,// test empty
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,381,x = new double[] {};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,382,"TestUtils.assertEquals(Double.NaN, StatUtils.percentile(x, 25), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,383,"TestUtils.assertEquals(Double.NaN, StatUtils.percentile(x, 0, 0, 25), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,385,// test one
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,386,x = new double[] {two};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,387,"TestUtils.assertEquals(two, StatUtils.percentile(x, 25), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,388,"TestUtils.assertEquals(two, StatUtils.percentile(x, 0, 1, 25), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,390,// test many
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,391,"x = new double[] {one, two, two, three};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,392,"TestUtils.assertEquals(2.5, StatUtils.percentile(x, 70), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,393,"TestUtils.assertEquals(2.5, StatUtils.percentile(x, 1, 3, 62.5), tolerance);"
False,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,29, @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:50 $
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,29,* @version $Revision: 1.2 $ $Date: 2004/04/27 16:42:32 $
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,332,public void testNewInstanceStringNull() {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,333,try {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,334,DescriptiveStatistics u = DescriptiveStatistics.newInstance((String)null);
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,335,"fail(""null is not a valid descriptive statistics class name"");"
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,336,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,337,// success
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,338,} catch (Exception ex) {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,339,fail();
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,343,public void testNewInstanceStringValid() {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,344,try {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,345,DescriptiveStatistics u = DescriptiveStatistics.newInstance(
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,346,"""org.apache.commons.math.stat.univariate.DescriptiveStatisticsImpl"");"
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,347,assertNotNull(u);
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,348,assertTrue(u instanceof DescriptiveStatisticsImpl);
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,349,} catch (Exception ex) {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,350,fail();
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,354,public void testNewInstanceClassNull() {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,355,try {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,356,DescriptiveStatistics u = DescriptiveStatistics.newInstance((Class)null);
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,357,"fail(""null is not a valid descriptive statistics class"");"
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,358,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,359,// success
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,360,} catch (Exception ex) {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,361,fail();
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,365,public void testNewInstanceClassValid() {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,366,try {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,367,DescriptiveStatistics u = DescriptiveStatistics.newInstance(
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,368,DescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,369,assertNotNull(u);
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,370,assertTrue(u instanceof DescriptiveStatisticsImpl);
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,371,} catch (Exception ex) {
True,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java,372,fail();
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,22, @version $Revision: 1.11 $ $Date: 2004/02/21 21:35:17 $
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,22,* @version $Revision: 1.12 $ $Date: 2004/04/27 16:42:32 $
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,2,* Copyright 2003-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,16,package org.apache.commons.math.stat.univariate.moment;
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,18,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,19,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,22,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,23,* @version $Revision: 1.1 $ $Date: 2004/04/27 16:42:33 $
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,25,public class FirstMomentTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,27,/** descriptive statistic. */
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,28,protected FirstMoment stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,31,* @param name
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,33,public FirstMomentTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,34,super(name);
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,38,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,40,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,42,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,43,stat = new FirstMoment();
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,45,return stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,49,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,51,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/univariate/moment/FirstMomentTest.java,52,return this.mean;

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,21,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,269,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,270,@Override
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,271,public FieldMatrix<T> power(final int p) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,272,if (p < 0) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,273,"throw new IllegalArgumentException(""p must be >= 0"");"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,276,if (!isSquare()) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,277,"throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,280,if (p == 0) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,281,"return MatrixUtils.createFieldIdentityMatrix(this.getField(), this.getRowDimension());"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,284,if (p == 1) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,285,return this.copy();
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,288,final int power = p - 1;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,291,* Only log_2(p) operations is used by doing as follows:
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,292,* 5^214 = 5^128 * 5^64 * 5^16 * 5^4 * 5^2
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,294,"* In general, the same approach is used for A^p."
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,297,final char[] binaryRepresentation = Integer.toBinaryString(power)
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,298,.toCharArray();
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,299,final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,301,for (int i = 0; i < binaryRepresentation.length; ++i) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,302,if (binaryRepresentation[i] == '1') {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,303,final int pos = binaryRepresentation.length - i - 1;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,304,nonZeroPositions.add(pos);
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,308,ArrayList<FieldMatrix<T>> results = new ArrayList<FieldMatrix<T>>(
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,309,binaryRepresentation.length);
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,311,"results.add(0, this.copy());"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,313,for (int i = 1; i < binaryRepresentation.length; ++i) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,314,final FieldMatrix<T> s = results.get(i - 1);
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,315,final FieldMatrix<T> r = s.multiply(s);
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,316,"results.add(i, r);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,319,FieldMatrix<T> result = this.copy();
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,321,for (Integer i : nonZeroPositions) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,322,result = result.multiply(results.get(i));
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,325,return result;
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,119,* Returns the result multiplying this with itself <code>p</code> times.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,120,"* Depending on the type of the field elements, T,"
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,121,* instability for high powers might occur.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,122,* @param      p raise this to power p
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,123,* @return     this^p
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,124,* @throws     IllegalArgumentException if p < 0
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,125,*             NonSquareMatrixException if the matrix is not square
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,127,FieldMatrix<T> power(final int p);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,202,@Test
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,203,public void testPower() {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,204,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,205,FieldMatrix<Fraction> mInv = new Array2DRowFieldMatrix<Fraction>(testDataInv);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,206,FieldMatrix<Fraction> mPlusInv = new Array2DRowFieldMatrix<Fraction>(testDataPlusInv);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,207,FieldMatrix<Fraction> identity = new Array2DRowFieldMatrix<Fraction>(id);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,209,"TestUtils.assertEquals(m.power(0), identity);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,210,"TestUtils.assertEquals(mInv.power(0), identity);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,211,"TestUtils.assertEquals(mPlusInv.power(0), identity);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,213,"TestUtils.assertEquals(m.power(1), m);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,214,"TestUtils.assertEquals(mInv.power(1), mInv);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,215,"TestUtils.assertEquals(mPlusInv.power(1), mPlusInv);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,217,FieldMatrix<Fraction> C1 = m.copy();
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,218,FieldMatrix<Fraction> C2 = mInv.copy();
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,219,FieldMatrix<Fraction> C3 = mPlusInv.copy();
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,221,// stop at 5 to avoid overflow
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,222,for (int i = 2; i <= 5; ++i) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,223,C1 = C1.multiply(m);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,224,C2 = C2.multiply(mInv);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,225,C3 = C3.multiply(mPlusInv);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,227,"TestUtils.assertEquals(m.power(i), C1);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,228,"TestUtils.assertEquals(mInv.power(i), C2);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,229,"TestUtils.assertEquals(mPlusInv.power(i), C3);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,232,try {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,233,FieldMatrix<Fraction> mNotSquare = new Array2DRowFieldMatrix<Fraction>(testData2T);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,234,mNotSquare.power(2);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,235,"Assert.fail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,236,} catch (NonSquareMatrixException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,237,// ignored
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,240,try {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,241,m.power(-1);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,242,"Assert.fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,243,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,244,// ignored

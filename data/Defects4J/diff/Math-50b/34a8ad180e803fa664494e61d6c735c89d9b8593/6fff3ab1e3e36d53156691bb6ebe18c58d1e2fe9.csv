is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,25,import org.apache.commons.math.MaxIterationsExceededException;
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,85,@Test
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,86,public void testQuinticMax() throws MathException {
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,87,"// The quintic function has zeros at 0, +-0.5 and +-1."
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,88,"// The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,89,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,90,UnivariateRealOptimizer minimizer = new BrentOptimizer();
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,91,"assertEquals(0.27195613, minimizer.optimize(f, GoalType.MAXIMIZE, 0.2, 0.3), 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,92,minimizer.setMaximalIterationCount(30);
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,93,try {
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,94,"minimizer.optimize(f, GoalType.MAXIMIZE, 0.2, 0.3);"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,95,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,96,} catch (MaxIterationsExceededException miee) {
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,97,// expected
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,98,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,99,"fail(""wrong exception caught"");"

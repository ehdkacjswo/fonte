is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,58, @version $Revision: 1.6 $ $Date: 2003/08/09 04:03:41 $
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,58,* @version $Revision: 1.7 $ $Date: 2003/09/27 04:13:34 $
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,66,uper();
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,66,"this(null, null);"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,74,uper(message);
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,74,"this(message, null);"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,93,uper(throwable);
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,93,"this(null, throwable);"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,56,import org.apache.commons.lang.exception.NestableException;
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,58, @version $Revision: 1.5 $ $Date: 2003/08/09 04:03:41 $
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,60,* @version $Revision: 1.6 $ $Date: 2003/09/27 04:13:34 $
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,60,ublic class MathException extends Exception {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,62,public class MathException extends NestableException {
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,66,uper();
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,68,"this(null, null);"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,72,* Create an exception with a given error message.
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,73,uper(message);
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,76,"this(message, null);"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,80,* Create an exception with a given error message and root cause.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,89,* Create an exception with a given root cause.
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,88,uper(throwable);
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,93,"this(null, throwable);"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,56,import org.apache.commons.lang.exception.NestableRuntimeException;
False,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,60, @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,62,* @version $Revision: 1.3 $ $Date: 2003/09/27 04:13:33 $
False,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,62,ublic class ConvergenceException extends RuntimeException {
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,64,public class ConvergenceException extends NestableRuntimeException {
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,66,* Default constructor.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,68,public ConvergenceException() {
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,69,"this(null, null);"
False,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,68,uper(message);
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,77,"this(message, null);"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,90,* Create an exception with a given root cause.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,91,* @param throwable caught exception causing this problem
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,93,public ConvergenceException(Throwable throwable) {
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,94,"this(null, throwable);"
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,59, Utility class comprised of root finding techniques.
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,61, @version $Revision: 1.4 $ $Date: 2003/09/07 03:12:56 $
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,59,* Utility routines for {@link UnivariateRealSolver} objects.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,60,* @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:33 $
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,63,ublic class RootFinding {
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,62,public class UnivariateRealSolverUtils {
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,65, Default constructor. Prohibit construction.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,64,* Default constructor.
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,67,rivate RootFinding() {
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,66,private UnivariateRealSolverUtils() {
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,71,* Method to solve for zeros of real univariate functions.  A
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,72,* default solver is created and used for solving.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,73,* @param f the function.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,74,* @param x0 the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,75,* @param x1 the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,76,* @return a value where the function is zero.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,77,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,78,*         solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,80,"public static double solve(UnivariateRealFunction f, double x0, double x1)"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,81,throws MathException
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,83,if(f == null){
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,84,"throw new IllegalArgumentException(""f can not be null."");"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,87,return UnivariateRealSolverFactory.newInstance().newDefaultSolver(f)
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,88,".solve(x0, x1);"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,92,* Convience method to solve for zeros of real univariate functions.  A
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,93,* default solver is created and used for solving.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,94,* @param f the function.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,95,* @param x0 the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,96,* @param x1 the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,97,* @param absoluteAccuracy the accuracy to be used by the solver.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,98,* @return a value where the function is zero.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,99,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,100,*         solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,102,public static double solve(
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,103,"UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,104,"double x0,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,105,"double x1,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,106,double absoluteAccuracy)
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,107,throws MathException
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,109,if(f == null){
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,110,"throw new IllegalArgumentException(""f can not be null."");"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,113,UnivariateRealSolver solver = UnivariateRealSolverFactory.newInstance()
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,114,.newDefaultSolver(f);
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,115,solver.setAbsoluteAccuracy(absoluteAccuracy);
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,116,"return solver.solve(x0, x1);"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,57,mport org.apache.commons.math.analysis.RootFinding;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,59,mport org.apache.commons.math.analysis.UnivariateRealSolverUtil;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,58,import org.apache.commons.math.analysis.UnivariateRealSolverUtils;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,66, @version $Revision: 1.8 $ $Date: 2003/07/30 21:58:11 $
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,65,* @version $Revision: 1.9 $ $Date: 2003/09/27 04:13:34 $
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,124,"ouble[] bracket = RootFinding.bracket(rootFindingFunction,"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,123,"double[] bracket = UnivariateRealSolverUtils.bracket(rootFindingFunction,"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,129,ouble root = UnivariateRealSolverUtil.solve(
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,128,double root = UnivariateRealSolverUtils.solve(
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,71, @version $Revision: 1.3 $ $Date: 2003/09/26 19:30:32 $
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,71,* @version $Revision: 1.4 $ $Date: 2003/09/27 04:13:33 $
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,144,* Apply the given statistic to this univariate collection.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,145,* @param stat the statistic to apply
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,146,* @return the computed value of the statistic.
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,65, @version $Revision: 1.6 $ $Date: 2003/09/26 19:30:32 $
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,65,* @version $Revision: 1.7 $ $Date: 2003/09/27 04:13:33 $
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,80,uper(list);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,80,"this(list, null);"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,92,his.transformer = new BeanTransformer(propertyName);
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,106,"ystem.out.println(""Set prop name; "" + propertyName);"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,108,his.transformer = new BeanTransformer(propertyName);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,106,setTransformer(new BeanTransformer(propertyName));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,66, @version $Revision: 1.4 $ $Date: 2003/07/09 21:45:23 $
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,66,* @version $Revision: 1.5 $ $Date: 2003/09/27 04:13:33 $
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,88,his.name = name;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,88,setName(name);
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,63, @version $Revision: 1.6 $ $Date: 2003/09/26 19:30:32 $
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,63,* @version $Revision: 1.7 $ $Date: 2003/09/27 04:13:33 $
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,83,uper();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,84,his.list = list;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,85,ransformer = new DefaultTransformer();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,83,"this(list, new DefaultTransformer());"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,191,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,192, @see org.apache.commons.math.stat.AbstractUnivariate#apply(org.apache.commons.math.stat.univariate.UnivariateStatistic)
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,190,* Apply the given statistic to this univariate collection.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,191,* @param stat the statistic to apply
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,192,* @return the computed value of the statistic.
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,60, @version $Revision: 1.7 $ $Date: 2003/09/26 19:30:32 $
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,60,* @version $Revision: 1.8 $ $Date: 2003/09/27 04:13:33 $
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,147,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,148, @see org.apache.commons.math.stat.AbstractUnivariate#apply(org.apache.commons.math.stat.univariate.UnivariateStatistic)
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,148,* Apply the given statistic to this univariate collection.
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,149,* @param stat the statistic to apply
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,150,* @return the computed value of the statistic.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,70, @version $Revision: 1.20 $ $Date: 2003/09/26 19:30:32 $
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,70,* @version $Revision: 1.21 $ $Date: 2003/09/27 04:13:33 $
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,164,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,165, @see org.apache.commons.math.stat.AbstractUnivariate#apply(org.apache.commons.math.stat.univariate.UnivariateStatistic)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,165,* Apply the given statistic to this univariate collection.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,166,* @param stat the statistic to apply
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,167,* @return the computed value of the statistic.
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,58,mport org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,58,import org.apache.commons.logging.LogFactory;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,62, @version $Revision: 1.5 $ $Date: 2003/09/17 19:19:09 $
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,62,* @version $Revision: 1.6 $ $Date: 2003/09/27 04:13:34 $
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,75,uper();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,75,this(null);
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,83,his.propertyName = property;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,87, @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,89,ublic double transform(final Object o) throws MathException {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,90,ouble d = Double.NaN;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,91,ry {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,92, =
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,93,"(Number) PropertyUtils.getProperty(o, propertyName))"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,94,doubleValue();
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,95, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,96,"hrow new MathException(e.getMessage(),e);"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,97, catch (InvocationTargetException e) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,98,"hrow new MathException(e.getMessage(),e);"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,99, catch (NoSuchMethodException e) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,100,"hrow new MathException(e.getMessage(),e);"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,102,eturn d;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,83,super();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,84,setPropertyName(property);
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,104,* @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,106,public double transform(final Object o) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,107,double d = Double.NaN;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,108,try {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,109,d =
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,110,"((Number) PropertyUtils.getProperty(o, getPropertyName()))"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,111,.doubleValue();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,112,} catch (IllegalAccessException e) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,113,LogFactory.getLog(getClass()).error(
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,114,"""Property can not be accessed.  Using NaN."", e);"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,115,} catch (InvocationTargetException e) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,116,LogFactory.getLog(getClass()).error(
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,117,"""Property accessor method threw an exception.  Using NaN."", e);"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,118,e.printStackTrace();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,119,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,120,LogFactory.getLog(getClass()).error(
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,121,"""Property accessor method does not exist.  Using NaN."", e);"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,123,return d;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,57,import org.apache.commons.beanutils.ConversionException;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,58,import org.apache.commons.beanutils.converters.DoubleConverter;
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,58, @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,62,* @version $Revision: 1.4 $ $Date: 2003/09/27 04:13:34 $
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,65,/** Converter used to transform objects. */
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,66,private static final DoubleConverter converter =
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,67,new DoubleConverter(new Double(Double.NaN));
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,66,ouble d = Double.NaN;
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,68,f (o instanceof Number) {
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,69,eturn ((Number) o).doubleValue();
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,70, else {
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,71,ry {
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,72, = Double.parseDouble(o.toString());
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,73, catch (Exception e) {
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,74,.printStackTrace();
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,73,double d;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,74,try {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,75,"d = ((Double)converter.convert(Double.class, o)).doubleValue();"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,76,} catch(ConversionException ex){
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,77,d = Double.NaN;
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,9,* are met:
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,55,package org.apache.commons.math;
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,60,* @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,62,public class MathConfigurationExceptionTest extends TestCase {
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,66,public void testConstructor(){
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,67,MathConfigurationException ex = new MathConfigurationException();
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,68,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,69,assertNull(ex.getMessage());
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,75,public void testConstructorMessage(){
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,76,"String msg = ""message"";"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,77,MathConfigurationException ex = new MathConfigurationException(msg);
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,78,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,79,"assertEquals(msg, ex.getMessage());"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,85,public void testConstructorMessageCause(){
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,86,"String outMsg = ""outer message"";"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,87,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,88,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,89,"MathConfigurationException ex = new MathConfigurationException(outMsg, cause);"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,90,"assertEquals(outMsg, ex.getMessage());"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,91,"assertEquals(cause, ex.getCause());"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,97,public void testConstructorCause(){
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,98,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,99,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,100,MathConfigurationException ex = new MathConfigurationException(cause);
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,101,"assertEquals(cause, ex.getCause());"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,9,* are met:
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,55,package org.apache.commons.math;
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,60,* @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,62,public class MathExceptionTest extends TestCase {
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,66,public void testConstructor(){
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,67,MathException ex = new MathException();
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,68,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,69,assertNull(ex.getMessage());
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,75,public void testConstructorMessage(){
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,76,"String msg = ""message"";"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,77,MathException ex = new MathException(msg);
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,78,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,79,"assertEquals(msg, ex.getMessage());"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,85,public void testConstructorMessageCause(){
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,86,"String outMsg = ""outer message"";"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,87,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,88,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,89,"MathException ex = new MathException(outMsg, cause);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,90,"assertEquals(outMsg, ex.getMessage());"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,91,"assertEquals(cause, ex.getCause());"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,97,public void testConstructorCause(){
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,98,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,99,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,100,MathException ex = new MathException(cause);
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,101,"assertEquals(cause, ex.getCause());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,61, @version $Revision: 1.2 $ $Date: 2003/09/17 19:29:27 $
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,61,* @version $Revision: 1.3 $ $Date: 2003/09/27 04:13:34 $
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,67,ublic BisectionSolverTest(String name) {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,68,uper(name);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,124,public void testSetFunctionValueAccuracy(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,125,double expected = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,127,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,128,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,129,try {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,130,solver.setFunctionValueAccuracy(expected);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,131,"assertEquals(expected, solver.getFunctionValueAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,132,} catch (MathException ex) {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,133,fail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,140,public void testResetFunctionValueAccuracy(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,141,double newValue = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,143,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,144,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,145,try {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,146,double oldValue = solver.getFunctionValueAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,147,solver.setFunctionValueAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,148,solver.resetFunctionValueAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,149,"assertEquals(oldValue, solver.getFunctionValueAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,150,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,151,fail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,158,public void testSetAbsoluteAccuracy(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,159,double expected = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,161,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,162,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,163,try {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,164,solver.setAbsoluteAccuracy(expected);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,165,"assertEquals(expected, solver.getAbsoluteAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,166,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,167,fail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,174,public void testResetAbsoluteAccuracy(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,175,double newValue = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,177,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,178,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,179,try {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,180,double oldValue = solver.getAbsoluteAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,181,solver.setAbsoluteAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,182,solver.resetAbsoluteAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,183,"assertEquals(oldValue, solver.getAbsoluteAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,184,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,185,fail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,192,public void testSetMaximalIterationCount(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,193,int expected = 100;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,195,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,196,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,197,solver.setMaximalIterationCount(expected);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,198,"assertEquals(expected, solver.getMaximalIterationCount());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,204,public void testResetMaximalIterationCount(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,205,int newValue = 10000;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,207,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,208,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,209,int oldValue = solver.getMaximalIterationCount();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,210,solver.setMaximalIterationCount(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,211,solver.resetMaximalIterationCount();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,212,"assertEquals(oldValue, solver.getMaximalIterationCount());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,218,public void testSetRelativeAccuracy(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,219,double expected = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,221,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,222,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,223,try {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,224,solver.setRelativeAccuracy(expected);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,225,"assertEquals(expected, solver.getRelativeAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,226,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,227,fail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,234,public void testResetRelativeAccuracy(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,235,double newValue = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,237,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,238,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,239,try {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,240,double oldValue = solver.getRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,241,solver.setRelativeAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,242,solver.resetRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,243,"assertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,244,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,245,fail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,9,* are met:
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,55,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,60,* @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,62,public class ConvergenceExceptionTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,66,public void testConstructor(){
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,67,ConvergenceException ex = new ConvergenceException();
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,68,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,69,assertNull(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,75,public void testConstructorMessage(){
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,76,"String msg = ""message"";"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,77,ConvergenceException ex = new ConvergenceException(msg);
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,78,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,79,"assertEquals(msg, ex.getMessage());"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,85,public void testConstructorMessageCause(){
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,86,"String outMsg = ""outer message"";"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,87,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,88,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,89,"ConvergenceException ex = new ConvergenceException(outMsg, cause);"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,90,"assertEquals(outMsg, ex.getMessage());"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,91,"assertEquals(cause, ex.getCause());"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,97,public void testConstructorCause(){
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,98,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,99,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,100,ConvergenceException ex = new ConvergenceException(cause);
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,101,"assertEquals(cause, ex.getCause());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,72, @version $Revision: 1.3 $ $Date: 2003/09/17 19:29:27 $
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,72,* @version $Revision: 1.4 $ $Date: 2003/09/27 04:13:34 $
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,284,"esult = UnivariateRealSolverUtil.solve(f, -0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,284,"result = UnivariateRealSolverUtils.solve(f, -0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,286,"esult = UnivariateRealSolverUtil.solve(f, -0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,286,"result = UnivariateRealSolverUtils.solve(f, -0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,288,"esult = UnivariateRealSolverUtil.solve(f, -0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,288,"result = UnivariateRealSolverUtils.solve(f, -0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,290,"esult = UnivariateRealSolverUtil.solve(f, 0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,290,"result = UnivariateRealSolverUtils.solve(f, 0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,292,"esult = UnivariateRealSolverUtil.solve(f, 0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,292,"result = UnivariateRealSolverUtils.solve(f, 0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,294,"esult = UnivariateRealSolverUtil.solve(f, 0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,294,"result = UnivariateRealSolverUtils.solve(f, 0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,296,"esult = UnivariateRealSolverUtil.solve(f, 0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,296,"result = UnivariateRealSolverUtils.solve(f, 0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,298,"esult = UnivariateRealSolverUtil.solve(f, 0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,298,"result = UnivariateRealSolverUtils.solve(f, 0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,300,"esult = UnivariateRealSolverUtil.solve(f, 0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,300,"result = UnivariateRealSolverUtils.solve(f, 0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,302,"esult = UnivariateRealSolverUtil.solve(f, 0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,302,"result = UnivariateRealSolverUtils.solve(f, 0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,304,"esult = UnivariateRealSolverUtil.solve(f, 0.85, 5);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,304,"result = UnivariateRealSolverUtils.solve(f, 0.85, 5);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,59,import junit.framework.TestCase;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,59, Utility routines for {@link UnivariateRealSolver} objects.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,60, @version $Revision: 1.2 $ $Date: 2003/09/07 03:12:56 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,62,* @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,62,ublic class UnivariateRealSolverUtil {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,64,public class UnivariateRealSolverUtilsTest extends TestCase {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,64, Default constructor.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,66,rivate UnivariateRealSolverUtil() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,67,uper();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,68,public void testSolveNull(){
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,69,try {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,70,"UnivariateRealSolverUtils.solve(null, 0.0, 4.0);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,71,fail();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,72,} catch(MathException ex){
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,73,"fail(""math exception should no be thrown."");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,74,} catch(IllegalArgumentException ex){
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,75,// success
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,71, Method to solve for zeros of real univariate functions.  A
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,72, default solver is created and used for solving.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,73, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,74, @param x0 the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,75, @param x1 the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,76, @return a value where the function is zero.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,77, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,78,         solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,80,"ublic static double solve(UnivariateRealFunction f, double x0, double x1)"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,81,hrows MathException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,83,eturn UnivariateRealSolverFactory.newInstance().newDefaultSolver(f)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,84,"solve(x0, x1);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,82,public void testSolveSin(){
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,83,try {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,84,"double x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,85,4.0);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,86,"assertEquals(Math.PI, x, 1.0e-4);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,87,} catch(MathException ex){
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,88,"fail(""math exception should no be thrown."");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,88, Convience method to solve for zeros of real univariate functions.  A
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,89, default solver is created and used for solving.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,90, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,91, @param x0 the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,92, @param x1 the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,93, @param absoluteAccuracy the accuracy to be used by the solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,94, @return a value where the function is zero.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,95, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,96,         solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,95,public void testSolveAccuracyNull(){
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,96,try {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,97,double accuracy = 1.0e-6;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,98,"UnivariateRealSolverUtils.solve(null, 0.0, 4.0, accuracy);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,99,fail();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,100,} catch(MathException ex){
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,101,"fail(""math exception should no be thrown."");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,102,} catch(IllegalArgumentException ex){
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,103,// success
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,98,ublic static double solve(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,99,"nivariateRealFunction f,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,100,"ouble x0,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,101,"ouble x1,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,102,ouble absoluteAccuracy)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,103,hrows MathException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,105,nivariateRealSolver solver = UnivariateRealSolverFactory.newInstance()
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,106,newDefaultSolver(f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,107,olver.setAbsoluteAccuracy(absoluteAccuracy);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,108,"eturn solver.solve(x0, x1);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,110,public void testSolveAccuracySin(){
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,111,try {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,112,double accuracy = 1.0e-6;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,113,"double x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,114,"4.0, accuracy);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,115,"assertEquals(Math.PI, x, accuracy);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,116,} catch(MathException ex){
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,117,"fail(""math exception should no be thrown."");"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,60, @version $Revision: 1.4 $ $Date: 2003/09/17 19:29:30 $
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,60,* @version $Revision: 1.5 $ $Date: 2003/09/27 04:13:33 $
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,64, Constructor for ChiSquareDistributionTest.
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,65, @param name
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,67,ublic GammaDistributionTest(String name) {
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,68,uper(name);
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,72,"estProbability(15.5, 4.0, 2.0, .9499);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,73,"estProbability( 0.5, 4.0, 1.0, .0018);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,74,"estProbability(10.0, 1.0, 2.0, .9933);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,75,"estProbability( 5.0, 2.0, 2.0, .7127);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,64,"testProbability(-1.000, 4.0, 2.0, .0000);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,65,"testProbability(15.501, 4.0, 2.0, .9499);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,66,"testProbability( 0.504, 4.0, 1.0, .0018);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,67,"testProbability(10.011, 1.0, 2.0, .9933);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,68,"testProbability( 5.000, 2.0, 2.0, .7127);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,71,public void testValues(){
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,72,"testValue(15.501, 4.0, 2.0, .9499);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,73,"testValue( 0.504, 4.0, 1.0, .0018);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,74,"testValue(10.011, 1.0, 2.0, .9933);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,75,"testValue( 5.000, 2.0, 2.0, .7127);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,83,"private void testValue(double expected, double a, double b, double p){"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,84,"double actual = DistributionFactory.newInstance().createGammaDistribution(a, b).inverseCummulativeProbability(p);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,85,"assertEquals(""critical value for "" + p, expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,68, @version $Revision: 1.4 $ $Date: 2003/09/17 19:29:32 $
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,68,* @version $Revision: 1.5 $ $Date: 2003/09/27 04:13:33 $
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,141,public void testSetPropertyName(){
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,142,BeanListUnivariateImpl u = new BeanListUnivariateImpl(null);
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,143,"String expected = ""property"";"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,144,u.setPropertyName(expected);
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,145,"assertEquals(expected, u.getPropertyName());"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,56,import java.io.BufferedReader;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,57,import java.io.IOException;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,58,import java.io.StringReader;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,63, @version $Revision: 1.2 $ $Date: 2003/07/07 23:19:19 $
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,67,* @version $Revision: 1.3 $ $Date: 2003/09/27 04:13:33 $
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,106,"requency f = new Frequency(""test counts"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,110,"Frequency f = new Frequency(""test pcts"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,128,public void testToString(){
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,129,"Frequency f = new Frequency(""test toString"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,130,f.addValue(oneL);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,131,f.addValue(twoL);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,132,f.addValue(oneI);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,133,f.addValue(twoI);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,135,String s = f.toString();
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,136,assertNotNull(s);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,137,BufferedReader reader = new BufferedReader(new StringReader(s));
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,138,try {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,139,String line = reader.readLine(); // header line
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,140,assertNotNull(line);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,142,line = reader.readLine(); // one's or two's line
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,143,assertNotNull(line);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,145,line = reader.readLine(); // one's or two's line
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,146,assertNotNull(line);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,148,line = reader.readLine(); // no more elements
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,149,assertNull(line);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,150,} catch(IOException ex){
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,151,fail(ex.getMessage());
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,158,public void testSetName(){
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,159,"String name = ""name"";"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,160,Frequency f = new Frequency();
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,161,f.setName(name);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,162,"assertEquals(name, f.getName());"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,5,* reserved.
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,9,* are met:
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,55,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,57,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,59,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,62,* @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,64,public class BeanTransformerTest extends TestCase {
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,69,public void testConstructor(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,70,BeanTransformer b = new BeanTransformer();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,71,assertNull(b.getPropertyName());
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,77,public void testConstructorString(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,78,"String name = ""property"";"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,79,BeanTransformer b = new BeanTransformer(name);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,80,"assertEquals(name, b.getPropertyName());"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,86,public void testSetPropertyName(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,87,"String name = ""property"";"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,88,BeanTransformer b = new BeanTransformer();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,89,b.setPropertyName(name);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,90,"assertEquals(name, b.getPropertyName());"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,96,public void testTransformNoSuchMethod(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,97,"BeanTransformer b = new BeanTransformer(""z"");"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,98,TestBean target = new TestBean();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,99,double value = b.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,100,"TestUtils.assertEquals(Double.NaN, value, 1.0e-2);"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,106,public void testTransform(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,107,"BeanTransformer b = new BeanTransformer(""x"");"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,108,TestBean target = new TestBean();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,109,double value = b.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,110,"TestUtils.assertEquals(1.0, value, 1.0e-2);"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,116,public void testTransformInvocationError(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,117,"BeanTransformer b = new BeanTransformer(""z"");"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,118,TestBean target = new TestBean();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,119,double value = b.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,120,"TestUtils.assertEquals(Double.NaN, value, 1.0e-2);"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,126,public void testTransformInvalidType(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,127,"BeanTransformer b = new BeanTransformer(""y"");"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,128,TestBean target = new TestBean();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,129,try {
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,130,b.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,131,fail();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,132,} catch(ClassCastException ex){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,133,// success
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,5,* reserved.
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,9,* are met:
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,55,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,57,import java.math.BigDecimal;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,59,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,61,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,64,* @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,66,public class DefaultTransformerTest extends TestCase {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,70,public void testTransformDouble(){
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,71,double expected = 1.0;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,72,Double input = new Double(expected);
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,73,DefaultTransformer t = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,74,"assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,80,public void testTransformNull(){
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,81,double expected = Double.NaN;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,82,DefaultTransformer t = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,83,"TestUtils.assertEquals(expected, t.transform(null), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,89,public void testTransformInteger(){
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,90,double expected = 1.0;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,91,Integer input = new Integer(1);
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,92,DefaultTransformer t = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,93,"assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,99,public void testTransformBigDecimal(){
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,100,double expected = 1.0;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,101,"BigDecimal input = new BigDecimal(""1.0"");"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,102,DefaultTransformer t = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,103,"assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,109,public void testTransformString(){
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,110,double expected = 1.0;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,111,"String input = ""1.0"";"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,112,DefaultTransformer t = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,113,"assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,119,public void testTransformObject(){
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,120,double expected = Double.NaN;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,121,Boolean input = Boolean.TRUE;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,122,DefaultTransformer t = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,123,"TestUtils.assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,5,* reserved.
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,9,* are met:
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,55,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,58,* @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,60,public class TestBean {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,61,private Double x = new Double(1.0);
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,63,"private String y = ""1.0"";"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,65,private Double z = new Double(2.0);
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,70,public Double getX() {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,71,return x;
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,77,public String getY() {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,78,return y;
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,84,public void setX(Double double1) {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,85,x = double1;
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,91,public void setY(String string) {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,92,y = string;
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,98,public Double getZ() {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,99,throw new RuntimeException();
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,105,public void setZ(Double double1) {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,106,z = double1;
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,5,* reserved.
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,9,* are met:
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,55,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,60,* @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,62,public class TransformerMapTest extends TestCase {
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,66,public void testPutTransformer(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,67,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,69,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,70,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,71,"assertEquals(expected, map.getTransformer(TransformerMapTest.class));"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,77,public void testContainsClass(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,78,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,79,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,80,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,81,assertTrue(map.containsClass(TransformerMapTest.class));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,87,public void testContainsTransformer(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,88,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,89,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,90,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,91,assertTrue(map.containsTransformer(expected));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,97,public void testRemoveTransformer(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,98,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,100,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,101,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,102,assertTrue(map.containsClass(TransformerMapTest.class));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,103,assertTrue(map.containsTransformer(expected));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,104,map.removeTransformer(TransformerMapTest.class);
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,105,assertFalse(map.containsClass(TransformerMapTest.class));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,106,assertFalse(map.containsTransformer(expected));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,112,public void testClear(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,113,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,115,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,116,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,117,assertTrue(map.containsClass(TransformerMapTest.class));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,118,map.clear();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,119,assertFalse(map.containsClass(TransformerMapTest.class));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,125,public void testClasses(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,126,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,127,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,128,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,129,assertTrue(map.classes().contains(TransformerMapTest.class));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,135,public void testTransformers(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,136,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,137,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,138,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,139,assertTrue(map.transformers().contains(expected));

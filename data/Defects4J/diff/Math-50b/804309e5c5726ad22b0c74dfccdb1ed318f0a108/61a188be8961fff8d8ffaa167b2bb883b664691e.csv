is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,20,import org.apache.commons.math.exception.util.ExceptionContext;
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,21,import org.apache.commons.math.exception.util.ExceptionContextProvider;
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,24, serve as a base class to create all the exceptions that share the semantics
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,25," of the standard {@link IllegalArgumentException}, but must also provide a"
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,26, localized message.
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,26,* serve as a base class to create all the exceptions that have the semantics
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,27,* of the standard {@link IllegalArgumentException}.
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,31,ublic class MathIllegalArgumentException extends MathRuntimeException {
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,32,public class MathIllegalArgumentException extends IllegalArgumentException
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,33,implements ExceptionContextProvider {
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,36,/** Context. */
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,37,private final ExceptionContext context = new ExceptionContext();
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,41,"ddMessage(pattern, args);"
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,45,"context.addMessage(pattern, args);"
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,48,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,49,public ExceptionContext getContext() {
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,50,return context;
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,53,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,54,@Override
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,55,public String getMessage() {
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,56,return context.getMessage();
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,59,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,60,@Override
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,61,public String getLocalizedMessage() {
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,62,return context.getLocalizedMessage();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,17,package org.apache.commons.math.exception.util;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,19,import java.util.List;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,20,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,21,import java.util.Set;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,22,import java.util.Map;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,23,import java.io.IOException;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,24,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,25,import java.io.ObjectOutputStream;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,26,import java.io.ObjectInputStream;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,27,import java.util.HashMap;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,28,import java.text.MessageFormat;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,29,import java.util.Locale;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,32,* Class that contains the actual implementation of the functionality mandated
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,33,* by the {@link ExceptionContext} interface.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,34,* All Commons Math exceptions delegate the interface's methods to this class.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,36,* @since 3.0
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,37,* @version $Id$
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,39,public class ExceptionContext implements Serializable {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,40,/** Serializable version Id. */
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,41,private static final long serialVersionUID = -6024911025449780478L;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,43,* Various informations that enrich the informative message.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,45,private List<Localizable> msgPatterns = new ArrayList<Localizable>();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,47,* Various informations that enrich the informative message.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,48,* The arguments will replace the corresponding place-holders in
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,49,* {@link #msgPatterns}.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,51,private List<Object[]> msgArguments = new ArrayList<Object[]>();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,53,* Arbitrary context information.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,55,"private Map<String, Object> context = new HashMap<String, Object>();"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,58,* Sets a message.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,60,* @param pattern Message pattern.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,61,* @param arguments Values for replacing the placeholders in the message
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,62,* pattern.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,64,"public void addMessage(Localizable pattern,"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,65,Object ... arguments) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,66,msgPatterns.add(pattern);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,67,msgArguments.add(ArgUtils.flatten(arguments));
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,71,"* Sets the context (key, value) pair."
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,72,* Keys are assumed to be unique within an instance. If the same key is
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,73,"* assigned a new value, the previous one will be lost."
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,75,* @param key Context key (not null).
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,76,* @param value Context value.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,78,"public void setValue(String key, Object value) {"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,79,"context.put(key, value);"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,83,* Gets the value associated to the given context key.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,85,* @param key Context key.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,86,* @return the context value or {@code null} if the key does not exist.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,88,public Object getValue(String key) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,89,return context.get(key);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,93,* Gets all the keys stored in the exception
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,95,* @return the set of keys.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,97,public Set<String> getKeys() {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,98,return context.keySet();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,102,* Gets the default message.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,104,* @return the message.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,106,public String getMessage() {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,107,return getMessage(Locale.US);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,111,* Gets the message in the default locale.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,113,* @return the localized message.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,115,public String getLocalizedMessage() {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,116,return getMessage(Locale.getDefault());
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,120,* Gets the message in a specified locale.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,122,* @param locale Locale in which the message should be translated.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,123,* @return the localized message.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,125,public String getMessage(final Locale locale) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,126,"return buildMessage(locale, "": "");"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,130,* Gets the message in a specified locale.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,132,* @param locale Locale in which the message should be translated.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,133,* @param separator Separator inserted between the message parts.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,134,* @return the localized message.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,136,"public String getMessage(final Locale locale,"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,137,final String separator) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,138,"return buildMessage(locale, separator);"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,142,* Builds a message string.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,144,* @param locale Locale in which the message should be translated.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,145,* @param separator Message separator.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,146,* @return a localized message string.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,148,"private String buildMessage(Locale locale,"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,149,String separator) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,150,final StringBuilder sb = new StringBuilder();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,151,int count = 0;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,152,final int len = msgPatterns.size();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,153,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,154,final Localizable pat = msgPatterns.get(i);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,155,final Object[] args = msgArguments.get(i);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,156,"final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,157,locale);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,158,sb.append(fmt.format(args));
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,159,if (++count < len) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,160,// Add a separator if there are other messages.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,161,sb.append(separator);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,165,return sb.toString();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,169,* Serialize this object to the given stream.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,171,* @param out Stream.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,172,* @throws IOException This should never happen.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,174,private void writeObject(ObjectOutputStream out)
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,175,throws IOException {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,176,serializeMessages(out);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,177,serializeContext(out);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,180,* Deserialize this object from the given stream.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,182,* @param in Stream.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,183,* @throws IOException This should never happen.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,184,* @throws ClassNotFoundException This should never happen.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,186,private void readObject(ObjectInputStream in)
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,187,"throws IOException,"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,188,ClassNotFoundException {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,189,deSerializeMessages(in);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,190,deSerializeContext(in);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,194,* Serialize  {@link #msgPatterns} and {@link #msgArguments}.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,196,* @param out Stream.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,197,* @throws IOException This should never happen.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,199,private void serializeMessages(ObjectOutputStream out)
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,200,throws IOException {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,201,// Step 1.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,202,final int len = msgPatterns.size();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,203,out.writeInt(len);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,204,// Step 2.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,205,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,206,final Localizable pat = msgPatterns.get(i);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,207,// Step 3.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,208,out.writeObject(pat);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,209,final Object[] args = msgArguments.get(i);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,210,final int aLen = args.length;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,211,// Step 4.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,212,out.writeInt(aLen);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,213,for (int j = 0; j < aLen; j++) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,214,if (args[j] instanceof Serializable) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,215,// Step 5a.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,216,out.writeObject(args[j]);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,217,} else {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,218,// Step 5b.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,219,out.writeObject(nonSerializableReplacement(args[j]));
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,226,* Deserialize {@link #msgPatterns} and {@link #msgArguments}.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,228,* @param in Stream.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,229,* @throws IOException This should never happen.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,230,* @throws ClassNotFoundException This should never happen.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,232,private void deSerializeMessages(ObjectInputStream in)
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,233,"throws IOException,"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,234,ClassNotFoundException {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,235,// Step 1.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,236,final int len = in.readInt();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,237,msgPatterns = new ArrayList<Localizable>(len);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,238,msgArguments = new ArrayList<Object[]>(len);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,239,// Step 2.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,240,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,241,// Step 3.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,242,final Localizable pat = (Localizable) in.readObject();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,243,msgPatterns.add(pat);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,244,// Step 4.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,245,final int aLen = in.readInt();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,246,final Object[] args = new Object[aLen];
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,247,for (int j = 0; j < aLen; j++) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,248,// Step 5.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,249,args[j] = in.readObject();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,251,msgArguments.add(args);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,256,* Serialize {@link #context}.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,258,* @param out Stream.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,259,* @throws IOException This should never happen.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,261,private void serializeContext(ObjectOutputStream out)
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,262,throws IOException {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,263,// Step 1.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,264,final int len = context.keySet().size();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,265,out.writeInt(len);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,266,for (String key : context.keySet()) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,267,// Step 2.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,268,out.writeObject(key);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,269,final Object value = context.get(key);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,270,if (value instanceof Serializable) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,271,// Step 3a.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,272,out.writeObject(value);
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,273,} else {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,274,// Step 3b.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,275,out.writeObject(nonSerializableReplacement(value));
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,281,* Deserialize {@link #context}.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,283,* @param in Stream.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,284,* @throws IOException This should never happen.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,285,* @throws ClassNotFoundException This should never happen.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,287,private void deSerializeContext(ObjectInputStream in)
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,288,"throws IOException,"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,289,ClassNotFoundException {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,290,// Step 1.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,291,final int len = in.readInt();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,292,"context = new HashMap<String, Object>();"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,293,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,294,// Step 2.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,295,final String key = (String) in.readObject();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,296,// Step 3.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,297,final Object value = in.readObject();
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,298,"context.put(key, value);"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,303,* Replaces a non-serializable object with an error message string.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,305,* @param obj Object that does not implement the {@code Serializable
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,306,* interface.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,307,* @return a string that mentions which class could not be serialized.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,309,private String nonSerializableReplacement(Object obj) {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java,310,"return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,17,package org.apache.commons.math.exception.util;
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,20,* Interface for accessing the context data structure stored in Commons Math
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,21,* exceptions.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,23,* @version $Id$
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,25,public interface ExceptionContextProvider {
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,27,"* Gets a reference to the ""rich context"" data structure that allows to"
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,28,"* customize error messages and store key, value pairs in exceptions."
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,30,* @return a reference to the exception context.
True,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java,32,ExceptionContext getContext();
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,17,package org.apache.commons.math.exception.util;
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,19,import java.util.Locale;
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,20,import java.util.Arrays;
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,21,import java.io.IOException;
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,22,import java.io.ObjectOutputStream;
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,23,import java.io.ObjectInputStream;
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,24,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,25,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,28,import org.junit.Test;
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,31,* Test for {@link ExceptionContext}.
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,33,* @version $Id$
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,35,public class ExceptionContextTest {
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,36,@Test
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,37,public void testMessageChain() {
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,38,final ExceptionContext c = new ExceptionContext();
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,39,"final String sep = "" | ""; // Non-default separator."
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,40,"final String m1 = ""column index (0)"";"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,41,"c.addMessage(LocalizedFormats.COLUMN_INDEX, 0);"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,42,"final String m2 = ""got 1x2 but expected 3x4"";"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,43,"c.addMessage(LocalizedFormats.DIMENSIONS_MISMATCH_2x2, 1, 2, 3, 4);"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,44,"final String m3 = ""It didn't work out"";"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,45,"c.addMessage(LocalizedFormats.SIMPLE_MESSAGE, m3);"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,47,"Assert.assertEquals(c.getMessage(Locale.US, sep),"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,48,m1 + sep + m2 + sep + m3);
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,51,@Test
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,52,public void testNoArgAddMessage() {
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,53,final ExceptionContext c = new ExceptionContext();
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,54,c.addMessage(LocalizedFormats.SIMPLE_MESSAGE);
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,55,"Assert.assertEquals(c.getMessage(), ""{0}"");"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,58,@Test
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,59,public void testContext() {
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,60,final ExceptionContext c = new ExceptionContext();
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,62,"final String[] keys = {""Key 1"", ""Key 2""};"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,63,"final Object[] values = {""Value 1"", Integer.valueOf(2)};"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,65,for (int i = 0; i < keys.length; i++) {
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,66,"c.setValue(keys[i], values[i]);"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,69,// Check that all keys are present.
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,70,Assert.assertTrue(c.getKeys().containsAll(Arrays.asList(keys)));
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,72,// Check that all values are correctly stored.
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,73,for (int i = 0; i < keys.length; i++) {
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,74,"Assert.assertEquals(values[i], c.getValue(keys[i]));"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,77,// Check behaviour on missing key.
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,78,"Assert.assertNull(c.getValue(""xyz""));"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,81,@Test
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,82,public void testSerialize()
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,83,"throws IOException,"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,84,ClassNotFoundException {
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,85,final ExceptionContext cOut = new ExceptionContext();
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,86,"cOut.addMessage(LocalizedFormats.COLUMN_INDEX, 0);"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,87,"cOut.setValue(""Key 1"", Integer.valueOf(0));"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,89,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,90,ObjectOutputStream oos = new ObjectOutputStream(bos);
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,91,oos.writeObject(cOut);
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,93,ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,94,ObjectInputStream ois = new ObjectInputStream(bis);
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,95,ExceptionContext cIn = (ExceptionContext) ois.readObject();
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,97,Assert.assertTrue(cOut.getMessage().equals(cIn.getMessage()));
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,98,for (String key : cIn.getKeys()) {
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,99,Assert.assertTrue(cOut.getValue(key).equals(cIn.getValue(key)));
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,103,@Test
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,104,public void testSerializeUnserializable() {
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,105,final ExceptionContext cOut = new ExceptionContext();
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,106,"cOut.addMessage(LocalizedFormats.SIMPLE_MESSAGE, ""OK"");"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,107,"cOut.addMessage(LocalizedFormats.SIMPLE_MESSAGE, new Unserializable());"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,108,"String key = ""Key 1"";"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,109,"cOut.setValue(key, new Unserializable());"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,111,try {
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,112,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,113,ObjectOutputStream oos = new ObjectOutputStream(bos);
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,114,oos.writeObject(cOut);
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,116,ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,117,ObjectInputStream ois = new ObjectInputStream(bis);
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,118,ExceptionContext cIn = (ExceptionContext) ois.readObject();
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,120,String nsObjStr = (String) cIn.getValue(key);
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,121,"Assert.assertTrue(nsObjStr.matches("".*could not be serialized.*""));"
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,122,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,123,Assert.fail(e.toString());
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,128,* Class used by {@link #testSerializeUnserializable()}.
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,130,private static class Unserializable {
True,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java,131,Unserializable() {}

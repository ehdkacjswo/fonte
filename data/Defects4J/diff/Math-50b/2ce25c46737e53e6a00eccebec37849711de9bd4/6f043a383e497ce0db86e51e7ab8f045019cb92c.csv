is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,21,mport org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,22,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,249,* Returns true iff <code>object</code> is a
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,250,* <code>SummaryStatistics</code> instance and all statistics have the
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,251,* same values as this.
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,252,* @param object the object to test equality against.
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,253,* @return true if object equals this
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,255,@Override
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,256,public boolean equals(Object object) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,257,if (object == this) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,258,return true;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,260,if (object instanceof AggregatingSummaryStatistics == false) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,261,return false;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,263,AggregatingSummaryStatistics stat = (AggregatingSummaryStatistics)object;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,264,return (super.equals(stat) &&
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,265,aggregateStatistics.equals(stat.aggregateStatistics));
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,269,* Returns hash code based on values of statistics
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,270,* @return hash code
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,272,@Override
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,273,public int hashCode() {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,274,return 123 + super.hashCode() + aggregateStatistics.hashCode();
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,632,"oints.add(new PointModel(px, py));"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,632,"points.add(new PointModel(this, px, py));"
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,683,rivate class PointModel extends WeightedMeasurement {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,683,private static class PointModel extends WeightedMeasurement {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,685,"ublic PointModel(double px, double py) {"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,685,"public PointModel(Circle circle, double px, double py) {"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,689,this.circle = circle;
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,693,f (parameter == cx) {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,694,eturn getPartialDiX() - getPartialRadiusX();
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,695, else if (parameter == cy) {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,696,eturn getPartialDiY() - getPartialRadiusY();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,694,if (parameter == circle.cx) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,695,return getPartialDiX() - circle.getPartialRadiusX();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,696,} else if (parameter == circle.cy) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,697,return getPartialDiY() - circle.getPartialRadiusY();
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,702,ouble dx = px - cx.getEstimate();
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,703,ouble dy = py - cy.getEstimate();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,703,double dx = px - circle.cx.getEstimate();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,704,double dy = py - circle.cy.getEstimate();
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,708,eturn (cx.getEstimate() - px) / getCenterDistance();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,709,return (circle.cx.getEstimate() - px) / getCenterDistance();
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,712,eturn (cy.getEstimate() - py) / getCenterDistance();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,713,return (circle.cy.getEstimate() - py) / getCenterDistance();
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,717,eturn getCenterDistance() - getRadius();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,718,return getCenterDistance() - circle.getRadius();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,723,private transient final Circle circle;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,677,"oints.add(new PointModel(px, py));"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,677,"points.add(new PointModel(this, px, py));"
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,728,rivate class PointModel extends WeightedMeasurement {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,728,private static class PointModel extends WeightedMeasurement {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,730,"ublic PointModel(double px, double py) {"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,730,"public PointModel(Circle circle, double px, double py) {"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,734,this.circle = circle;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,738,f (parameter == cx) {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,739,eturn getPartialDiX() - getPartialRadiusX();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,740, else if (parameter == cy) {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,741,eturn getPartialDiY() - getPartialRadiusY();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,739,if (parameter == circle.cx) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,740,return getPartialDiX() - circle.getPartialRadiusX();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,741,} else if (parameter == circle.cy) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,742,return getPartialDiY() - circle.getPartialRadiusY();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,747,ouble dx = px - cx.getEstimate();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,748,ouble dy = py - cy.getEstimate();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,748,double dx = px - circle.cx.getEstimate();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,749,double dy = py - circle.cy.getEstimate();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,753,eturn (cx.getEstimate() - px) / getCenterDistance();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,754,return (circle.cx.getEstimate() - px) / getCenterDistance();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,757,eturn (cy.getEstimate() - py) / getCenterDistance();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,758,return (circle.cy.getEstimate() - py) / getCenterDistance();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,762,eturn getCenterDistance() - getRadius();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,763,return getCenterDistance() - circle.getRadius();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,768,private transient final Circle circle;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,793,"ddMeasurement(new LocalMeasurement(x, y, w));"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,795,"addMeasurement(new LocalMeasurement(this, x, y, w));"
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,810,rivate class LocalMeasurement extends WeightedMeasurement {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,812,private static class LocalMeasurement extends WeightedMeasurement {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,816,private transient final QuadraticProblem pb;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,816,"ublic LocalMeasurement(double x, double y, double w) {"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,819,"public LocalMeasurement(QuadraticProblem pb, double x, double y, double w) {"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,822,this.pb = pb;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,823,eturn theoreticalValue(x);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,827,return pb.theoreticalValue(x);
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,828,"eturn partial(x, parameter);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,832,"return pb.partial(x, parameter);"
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,571,easurements[i] = new MinpackMeasurement(i);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,571,"measurements[i] = new MinpackMeasurement(this, i);"
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,588,rivate class MinpackMeasurement extends WeightedMeasurement {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,588,private static class MinpackMeasurement extends WeightedMeasurement {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,590,ublic MinpackMeasurement(int index) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,590,"public MinpackMeasurement(MinpackFunction f, int index) {"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,593,this.f = f;
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,601,eturn getResiduals()[index];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,602,return f.getResiduals()[index];
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,610,or (int j = 0; j < n; ++j) {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,611,f (parameter == parameters[j]) {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,612,eturn getJacobian()[index][j];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,611,for (int j = 0; j < f.n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,612,if (parameter == f.parameters[j]) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,613,return f.getJacobian()[index][j];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,620,private transient final MinpackFunction f;

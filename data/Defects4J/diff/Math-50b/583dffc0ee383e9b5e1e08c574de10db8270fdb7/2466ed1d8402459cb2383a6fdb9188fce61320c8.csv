is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,200,/ org.apache.commons.math.linear.BigMatrixImpl
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,201,/ org.apache.commons.math.linear.RealMatrixImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,206,// org.apache.commons.math.linear.BigMatrixImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,207,// org.apache.commons.math.linear.RealMatrixImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,264,// org.apache.commons.math.analysis.UnivariateRealSolverImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,265,"{ ""function to solve cannot be null"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,266,"""la fonction \u00e0 r\u00e9soudre ne peux pas \u00eatre nulle"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,268,// org.apache.commons.math.analysis.LaguerreSolver
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,269,"{ ""function is not polynomial"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,270,"""la fonction n''est pas p\u00f4lynomiale"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,272,// org.apache.commons.math.analysis.NewtonSolver
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,273,"{ ""function is not differentiable"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,274,"""la fonction n''est pas diff\u00e9rentiable"" },"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,33,rivate static final long serialVersionUID = 4963578633786538912L;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,33,private static final long serialVersionUID = 5227509383222989438L;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,39,* @deprecated as of 2.0 the function to solve is passed as an argument
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,40,"* to the {@link #solve(UnivariateRealFunction, double, double)} or"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,41,"* {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,42,* method.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,44,@Deprecated
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,45, Find a zero in the given interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,50,* Construct a solver.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,47, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,48, @param max the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,49, @param initial the start value to use (ignored).
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,50, @return the value where the function is zero
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,51, @throws MaxIterationsExceededException the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,52, @throws FunctionEvaluationException if an error occurs evaluating
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,53,  the function
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,54, @throws IllegalArgumentException if min is not less than max
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,53,public BisectionSolver() {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,54,"super(100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,57,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,58,@Deprecated
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,59,"eturn solve(min, max);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,61,"return solve(f, min, max);"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,63, Find a zero root in the given interval.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,65, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,66, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,67, @return the value where the function is zero
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,68, @throws MaxIterationsExceededException if the maximum iteration count is exceeded.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,69, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,70, function
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,71, @throws IllegalArgumentException if min is not less than max
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,73,"ublic double solve(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,74,unctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,64,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,65,@Deprecated
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,66,"public double solve(double min, double max)"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,67,"throws MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,68,"return solve(f, min, max);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,71,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,72,"public double solve(final UnivariateRealFunction f, double min, double max, double initial)"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,73,"throws MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,74,"return solve(min, max);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,77,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,78,"public double solve(final UnivariateRealFunction f, double min, double max)"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,79,"throws MaxIterationsExceededException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,34,rivate static final long serialVersionUID = -2136672307739067002L;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,34,private static final long serialVersionUID = 7694577816772532779L;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,40,* @deprecated as of 2.0 the function to solve is passed as an argument
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,41,"* to the {@link #solve(UnivariateRealFunction, double, double)} or"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,42,"* {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,43,* method.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,45,@Deprecated
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,51,* Construct a solver.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,53,public BrentSolver() {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,54,"super(100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,57,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,58,@Deprecated
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,59,"public double solve(double min, double max)"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,60,"throws MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,61,"return solve(f, min, max);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,64,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,65,@Deprecated
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,66,"public double solve(double min, double max, double initial)"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,67,"throws MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,68,"return solve(f, min, max, initial);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,78,* @param f function to solve.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,64,"ublic double solve(double min, double max, double initial)"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,91,"public double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,92,"final double min, final double max, final double initial)"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,89,"eturn solve(min, yMin, initial, yInitial, min, yMin);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,117,"return solve(f, min, yMin, initial, yInitial, min, yMin);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,101,"eturn solve(initial, yInitial, max, yMax, initial, yInitial);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,129,"return solve(f, initial, yInitial, max, yMax, initial, yInitial);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,105,"eturn solve(min, yMin, max, yMax, initial, yInitial);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,133,"return solve(f, min, yMin, max, yMax, initial, yInitial);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,125,"ublic double solve(double min, double max) throws MaxIterationsExceededException,"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,153,"public double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,154,"final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,155,"throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,155,"et = solve(min, yMin, max, yMax, min, yMin);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,185,"ret = solve(f, min, yMin, max, yMax, min, yMin);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,200,* @param f the function to solve
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,184,"rivate double solve(double x0, double y0,"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,215,"private double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,216,"double x0, double y0,"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,21,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,41,** polynomial function to solve */
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,42,/** polynomial function to solve.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,43,* @deprecated as of 2.0 the function is not stored anymore in the instance
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,45,@Deprecated
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,53,* @deprecated as of 2.0 the function to solve is passed as an argument
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,54,"* to the {@link #solve(UnivariateRealFunction, double, double)} or"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,55,"* {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,56,* method.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,58,@Deprecated
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,55, = (PolynomialFunction)f;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,63,p = (PolynomialFunction) f;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,57,"hrow new IllegalArgumentException(""Function is not polynomial."");"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,65,"throw MathRuntimeException.createIllegalArgumentException(""function is not polynomial"", null);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,70,* Construct a solver.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,72,public LaguerreSolver() {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,73,"super(100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,80,* @deprecated as of 2.0 the function is not stored anymore within the instance.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,82,@Deprecated
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,87,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,88,@Deprecated
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,89,"public double solve(final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,90,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,91,"return solve(p, min, max);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,94,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,95,@Deprecated
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,96,"public double solve(final double min, final double max, final double initial)"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,97,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,98,"return solve(p, min, max, initial);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,106,* @param f function to solve (must be polynomial)
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,85,"ublic double solve(double min, double max, double initial) throws"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,86,"onvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,117,"public double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,118,"final double min, final double max, final double initial)"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,119,"throws ConvergenceException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,89,f (p.value(min) == 0.0) { return min; }
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,90,f (p.value(max) == 0.0) { return max; }
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,91,f (p.value(initial) == 0.0) { return initial; }
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,122,if (f.value(min) == 0.0) { return min; }
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,123,if (f.value(max) == 0.0) { return max; }
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,124,if (f.value(initial) == 0.0) { return initial; }
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,93,"erifyBracketing(min, max, p);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,126,"verifyBracketing(min, max, f);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,95,"f (isBracketing(min, initial, p)) {"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,96,"eturn solve(min, initial);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,128,"if (isBracketing(min, initial, f)) {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,129,"return solve(f, min, initial);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,98,"eturn solve(initial, max);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,131,"return solve(f, initial, max);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,145,* @param f the function to solve
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,120,"ublic double solve(double min, double max) throws ConvergenceException,"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,121,unctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,155,"public double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,156,"final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,157,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,159,// check function type
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,160,if (!(f instanceof PolynomialFunction)) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,161,"throw MathRuntimeException.createIllegalArgumentException(""function is not polynomial"", null);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,124,f (p.value(min) == 0.0) { return min; }
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,125,f (p.value(max) == 0.0) { return max; }
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,126,"erifyBracketing(min, max, p);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,165,if (f.value(min) == 0.0) { return min; }
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,166,if (f.value(max) == 0.0) { return max; }
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,167,"verifyBracketing(min, max, f);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,128,ouble coefficients[] = p.getCoefficients();
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,169,double coefficients[] = ((PolynomialFunction) f).getCoefficients();
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,19,import org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,39,rivate static final long serialVersionUID = 6552227503458976920L;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,40,private static final long serialVersionUID = 7768903775784754323L;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,46,* @deprecated as of 2.0 the function to solve is passed as an argument
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,47,"* to the {@link #solve(UnivariateRealFunction, double, double)} or"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,48,"* {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,49,* method.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,51,@Deprecated
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,57,* Construct a solver.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,59,public MullerSolver() {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,60,"super(100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,63,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,64,@Deprecated
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,65,"public double solve(final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,66,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,67,"return solve(f, min, max);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,70,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,71,@Deprecated
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,72,"public double solve(final double min, final double max, final double initial)"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,73,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,74,"return solve(f, min, max, initial);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,82,* @param f the function to solve
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,65,"ublic double solve(double min, double max, double initial) throws"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,66,"axIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,93,"public double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,94,"final double min, final double max, final double initial)"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,95,"throws MaxIterationsExceededException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,76,"eturn solve(min, initial);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,105,"return solve(f, min, initial);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,78,"eturn solve(initial, max);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,107,"return solve(f, initial, max);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,126,* @param f the function to solve
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,106,"ublic double solve(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,107,unctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,136,"public double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,137,"final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,138,"throws MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,219,* Find a real root in the given interval.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,220,* <p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,221,* solve2() differs from solve() in the way it avoids complex operations.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,222,"* Except for the initial [min, max], solve2() does not require bracketing"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,223,"* condition, e.g. f(x0), f(x1), f(x2) can have the same sign. If complex"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,224,"* number arises in the computation, we simply use its modulus as real"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,225,* approximation.</p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,226,* <p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,227,"* Because the interval may not be bracketing, bisection alternative is"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,228,* not applicable here. However in practice our treatment usually works
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,229,"* well, especially near real zeros where the imaginary part of complex"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,230,* approximation is often negligible.</p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,231,* <p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,232,* The formulas here do not use divided differences directly.</p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,234,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,235,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,236,* @return the point at which the function value is zero
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,237,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,238,* or the solver detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,239,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,240,* function
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,241,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,242,"* @deprecated replaced by {@link #solve2(UnivariateRealFunction, double, double)"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,243,* since 2.0
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,245,@Deprecated
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,246,"public double solve2(final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,247,"throws MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,248,"return solve2(f, min, max);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,212,"ublic double solve2(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,213,unctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,276,"public double solve2(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,277,"final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,278,"throws MaxIterationsExceededException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,20,mport java.io.IOException;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,21,mport org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,21,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,35,rivate static final long serialVersionUID = 2067325783137941016L;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,35,private static final long serialVersionUID = 7579593514004764309L;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,37,** The first derivative of the target function. */
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,38,rivate transient UnivariateRealFunction derivative;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,40,* @deprecated as of 2.0 the function to solve is passed as an argument
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,41,"* to the {@link #solve(UnivariateRealFunction, double, double)} or"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,42,"* {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,43,* method.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,45,@Deprecated
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,46,erivative = f.derivative();
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,51,* Construct a solver.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,53,public NewtonSolver() {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,54,"super(100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,57,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,58,@Deprecated
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,59,"public double solve(final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,60,"throws MaxIterationsExceededException,"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,61,FunctionEvaluationException  {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,62,"return solve(f, min, max);"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,65,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,66,@Deprecated
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,67,"public double solve(final double min, final double max, final double startValue)"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,68,"throws MaxIterationsExceededException, FunctionEvaluationException  {"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,69,"return solve(f, min, max, startValue);"
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,60,"ublic double solve(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,61,unctionEvaluationException  {
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,62,"eturn solve(min, max, UnivariateRealSolverUtils.midpoint(min, max));"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,83,"public double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,84,"final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,85,"throws MaxIterationsExceededException, FunctionEvaluationException  {"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,86,"return solve(f, min, max, UnivariateRealSolverUtils.midpoint(min, max));"
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,75, @throws IllegalArgumentException if startValue is not between min and max
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,99,* @throws IllegalArgumentException if startValue is not between min and max or
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,100,* if function is not a {@link DifferentiableUnivariateRealFunction} instance
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,77,"ublic double solve(double min, double max, double startValue)"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,102,"public double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,103,"final double min, final double max, final double startValue)"
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,80,learResult();
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,81,"erifySequence(min, startValue, max);"
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,83,ouble x0 = startValue;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,84,ouble x1;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,86,nt i = 0;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,87,hile (i < maximalIterationCount) {
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,88,1 = x0 - (f.value(x0) / derivative.value(x0));
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,89,f (Math.abs(x1 - x0) <= absoluteAccuracy) {
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,91,"etResult(x1, i);"
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,92,eturn x1;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,106,try {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,108,final UnivariateRealFunction derivative =
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,109,((DifferentiableUnivariateRealFunction) f).derivative();
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,110,clearResult();
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,111,"verifySequence(min, startValue, max);"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,113,double x0 = startValue;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,114,double x1;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,116,int i = 0;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,117,while (i < maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,119,x1 = x0 - (f.value(x0) / derivative.value(x0));
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,120,if (Math.abs(x1 - x0) <= absoluteAccuracy) {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,121,"setResult(x1, i);"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,122,return x1;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,125,x0 = x1;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,126,++i;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,95,0 = x1;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,96,+i;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,129,throw new MaxIterationsExceededException(maximalIterationCount);
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,130,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,131,"throw MathRuntimeException.createIllegalArgumentException(""function is not differentiable"","
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,132,null);
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,99,hrow new MaxIterationsExceededException(maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,103, Custom deserialization to initialize transient deriviate field.
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,105, @param in serialized object input stream
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,106, @throws IOException if IO error occurs
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,107, @throws ClassNotFoundException if instantiation error occurs
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,109,rivate void readObject(java.io.ObjectInputStream in)
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,110,"hrows IOException, ClassNotFoundException {"
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,111,n.defaultReadObject();
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,112,erivative = ((DifferentiableUnivariateRealFunction) f).derivative();
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,19,import org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,38,rivate static final long serialVersionUID = -4703139035737911735L;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,39,private static final long serialVersionUID = -1556464494585337088L;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,45,* @deprecated as of 2.0 the function to solve is passed as an argument
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,46,"* to the {@link #solve(UnivariateRealFunction, double, double)} or"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,47,"* {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,48,* method.
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,50,@Deprecated
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,56,* Construct a solver.
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,58,public RiddersSolver() {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,59,"super(100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,62,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,63,@Deprecated
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,64,"public double solve(final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,65,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,66,"return solve(f, min, max);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,69,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,70,@Deprecated
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,71,"public double solve(final double min, final double max, final double initial)"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,72,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,73,"return solve(f, min, max, initial);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,81,* @param f the function to solve
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,63,"ublic double solve(double min, double max, double initial) throws"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,64,"axIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,91,"public double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,92,"final double min, final double max, final double initial)"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,93,"throws MaxIterationsExceededException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,74,"eturn solve(min, initial);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,103,"return solve(f, min, initial);"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,76,"eturn solve(initial, max);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,105,"return solve(f, initial, max);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,114,* @param f the function to solve
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,93,"ublic double solve(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,94,unctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,123,"public double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,124,"final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,125,"throws MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,21,import org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,44,rivate static final long serialVersionUID = 1984971194738974867L;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,45,private static final long serialVersionUID = 2477470651270304246L;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,50,* @deprecated as of 2.0 the function to solve is passed as an argument
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,51,"* to the {@link #solve(UnivariateRealFunction, double, double)} or"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,52,"* {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,53,* method.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,55,@Deprecated
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,61,* Construct a solver.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,63,public SecantSolver() {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,64,"super(100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,67,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,68,@Deprecated
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,69,"public double solve(final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,70,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,71,"return solve(f, min, max);"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,74,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,75,@Deprecated
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,76,"public double solve(final double min, final double max, final double initial)"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,77,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,78,"return solve(f, min, max, initial);"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,84,* @param f the function to solve
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,67,"ublic double solve(double min, double max, double initial)"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,95,"public double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,96,"final double min, final double max, final double initial)"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,70,"eturn solve(min, max);"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,98,"return solve(f, min, max);"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,103,* @param f the function to solve
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,84,"ublic double solve(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,85,unctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,113,"public double solve(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,114,"final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,115,"throws MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,161,"* @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double)"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,162,* since 2.0
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,164,@Deprecated
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,169,* Solve for a zero root in the given interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,170,* A solver may require that the interval brackets a single zero root.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,172,* @param f the function to solve.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,173,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,174,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,175,* @return a value where the function is zero
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,176,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,177,* or the solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,178,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,179,* function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,180,* @throws IllegalArgumentException if min > max or the endpoints do not
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,181,* satisfy the requirements specified by the solver
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,182,* @since 2.0
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,184,"double solve(UnivariateRealFunction f, double min, double max)"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,185,"throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,186,FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,202,"* @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double, double)"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,203,* since 2.0
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,205,@Deprecated
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,210,"* Solve for a zero in the given interval, start at startValue."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,211,* A solver may require that the interval brackets a single zero root.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,213,* @param f the function to solve.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,214,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,215,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,216,* @param startValue the start value to use
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,217,* @return a value where the function is zero
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,218,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,219,* or the solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,220,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,221,* function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,222,* @throws IllegalArgumentException if min > max or the arguments do not
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,223,* satisfy the requirements specified by the solver
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,224,* @since 2.0
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,226,"double solve(UnivariateRealFunction f, double min, double max, double startValue)"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,227,"throws ConvergenceException, FunctionEvaluationException;"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,34, // create a Brent solver to use with a UnivariateRealFunction f
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,35, BrentSolver solver = factory.newBrentSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,34,* // create a Brent solver to use
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,35,* BrentSolver solver = factory.newBrentSolver();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,56, Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,56,* Create a new {@link UnivariateRealSolver}.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,58, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,61,ublic abstract UnivariateRealSolver newDefaultSolver(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,62,nivariateRealFunction f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,60,public abstract UnivariateRealSolver newDefaultSolver();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,65, Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,63,* Create a new {@link UnivariateRealSolver}.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,67, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,70,ublic abstract UnivariateRealSolver newBisectionSolver(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,71,nivariateRealFunction f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,67,public abstract UnivariateRealSolver newBisectionSolver();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,74, Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,70,* Create a new {@link UnivariateRealSolver}.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,76, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,79,ublic abstract UnivariateRealSolver newBrentSolver(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,80,nivariateRealFunction f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,74,public abstract UnivariateRealSolver newBrentSolver();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,83, Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,77,* Create a new {@link UnivariateRealSolver}.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,85, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,88,ublic abstract UnivariateRealSolver newNewtonSolver(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,89,ifferentiableUnivariateRealFunction f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,81,public abstract UnivariateRealSolver newNewtonSolver();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,92, Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,84,* Create a new {@link UnivariateRealSolver}.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,94, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,97,ublic abstract UnivariateRealSolver newSecantSolver(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,98,nivariateRealFunction f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,88,public abstract UnivariateRealSolver newSecantSolver();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,36, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,37, actual solver returned is determined by the underlying factory.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,39, This factory returns a {@link BrentSolver} instance.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,41, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,42, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,44,ublic UnivariateRealSolver newDefaultSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,45,eturn newBrentSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,35,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,36,public UnivariateRealSolver newDefaultSolver() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,37,return newBrentSolver();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,49, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,50, solver is an implementation of the bisection method.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,51, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,52, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,54,ublic UnivariateRealSolver newBisectionSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,55,eturn new BisectionSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,40,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,41,public UnivariateRealSolver newBisectionSolver() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,42,return new BisectionSolver();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,59, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,60, solver is an implementation of the Brent method.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,61, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,62, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,64,ublic UnivariateRealSolver newBrentSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,65,eturn new BrentSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,45,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,46,public UnivariateRealSolver newBrentSolver() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,47,return new BrentSolver();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,69, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,70, solver is an implementation of Newton's Method.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,71, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,72, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,74,ublic UnivariateRealSolver newNewtonSolver(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,75,ifferentiableUnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,77,eturn new NewtonSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,50,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,51,public UnivariateRealSolver newNewtonSolver() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,52,return new NewtonSolver();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,81, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,82, solver is an implementation of the secant method.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,83, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,84, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,86,ublic UnivariateRealSolver newSecantSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,87,eturn new SecantSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,55,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,56,public UnivariateRealSolver newSecantSolver() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,57,return new SecantSolver();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,71,** The function to solve. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,71,/** The function to solve.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,72,* @deprecated as of 2.0 the function to solve is passed as an argument
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,73,"* to the {@link #solve(UnivariateRealFunction, double, double)} or"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,74,"* {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,75,* method. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,76,@Deprecated
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,87,* @deprecated as of 2.0 the function to solve is passed as an argument
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,88,"* to the {@link #solve(UnivariateRealFunction, double, double)} or"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,89,"* {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,90,* method.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,92,@Deprecated
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,88,uper();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,91,"hrow new IllegalArgumentException(""function can not be null."");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,99,"throw MathRuntimeException.createIllegalArgumentException(""function to solve cannot be null"","
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,100,null);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,104,this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,105,this.defaultRelativeAccuracy = 1E-14;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,106,this.defaultFunctionValueAccuracy = 1E-15;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,107,this.absoluteAccuracy = defaultAbsoluteAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,108,this.relativeAccuracy = defaultRelativeAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,109,this.functionValueAccuracy = defaultFunctionValueAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,110,this.defaultMaximalIterationCount = defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,111,this.maximalIterationCount = defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,115,* Construct a solver with given iteration count and accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,117,* @param defaultAbsoluteAccuracy maximum absolute error
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,118,* @param defaultMaximalIterationCount maximum number of iterations
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,119,* @throws IllegalArgumentException if f is null or the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,120,* defaultAbsoluteAccuracy is not valid
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,122,"protected UnivariateRealSolverImpl(int defaultMaximalIterationCount,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,123,double defaultAbsoluteAccuracy) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,55,"eturn factory.newDefaultSolver(f).solve(x0, x1);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,55,"return factory.newDefaultSolver().solve(f, x0, x1);"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,79,nivariateRealSolver solver = factory.newDefaultSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,79,UnivariateRealSolver solver = factory.newDefaultSolver();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,81,"eturn solver.solve(x0, x1);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,81,"return solver.solve(f, x0, x1);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,31,ublic void testSinZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,29,@Deprecated
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,30,public void testDeprecated() throws MathException {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,46,ublic void testQuinticZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,42,public void testSinZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,43,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,44,double result;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,46,UnivariateRealSolver solver = new BisectionSolver();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,47,"result = solver.solve(f, 3, 4);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,48,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,50,"result = solver.solve(f, 1, 4);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,51,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,54,public void testQuinticZero() throws MathException {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,50,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,51,"esult = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,58,UnivariateRealSolver solver = new BisectionSolver();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,59,"result = solver.solve(f, -0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,54,"esult = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,62,"result = solver.solve(f, -0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,57,"esult = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,65,"result = solver.solve(f, -0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,60,"esult = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,68,"result = solver.solve(f, 0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,63,"esult = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,71,"result = solver.solve(f, 0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,66,"esult = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,74,"result = solver.solve(f, 0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,69,"esult = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,77,"result = solver.solve(f, 0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,72,"esult = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,80,"result = solver.solve(f, 0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,75,"esult = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,83,"result = solver.solve(f, 0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,78,"esult = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,86,"result = solver.solve(f, 0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,81,"esult = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,89,"result = solver.solve(f, 0.85, 5);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,93,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,94,nivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,101,UnivariateRealSolver solver = new BisectionSolver();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,104,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,105,nivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,111,UnivariateRealSolver solver = new BisectionSolver();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,117,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,118,nivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,123,UnivariateRealSolver solver = new BisectionSolver();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,128,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,129,nivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,133,UnivariateRealSolver solver = new BisectionSolver();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,142,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,143,nivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,145,UnivariateRealSolver solver = new BisectionSolver();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,154,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,155,nivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,155,UnivariateRealSolver solver = new BisectionSolver();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,168,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,169,nivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,167,UnivariateRealSolver solver = new BisectionSolver();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,179,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,180,nivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,177,UnivariateRealSolver solver = new BisectionSolver();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,194,isectionSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,191,BisectionSolver solver = new BisectionSolver();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,197,"esult = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,194,"result = solver.solve(f, -0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,199,"ssertEquals(solver2.solve(-0.2, 0.2), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,196,"assertEquals(solver2.solve(f, -0.2, 0.2), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,201,"esult = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,198,"result = solver.solve(f, -0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,203,"ssertEquals(solver2.solve(-0.1, 0.3), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,200,"assertEquals(solver2.solve(f, -0.1, 0.3), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,205,"esult = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,202,"result = solver.solve(f, -0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,207,"ssertEquals(solver2.solve(-0.3, 0.45), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,204,"assertEquals(solver2.solve(f, -0.3, 0.45), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,209,"esult = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,206,"result = solver.solve(f, 0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,211,"ssertEquals(solver2.solve(0.3, 0.7), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,208,"assertEquals(solver2.solve(f, 0.3, 0.7), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,213,"esult = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,210,"result = solver.solve(f, 0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,215,"ssertEquals(solver2.solve(0.2, 0.6), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,212,"assertEquals(solver2.solve(f, 0.2, 0.6), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,217,"esult = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,214,"result = solver.solve(f, 0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,219,"ssertEquals(solver2.solve(0.05, 0.95), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,216,"assertEquals(solver2.solve(f, 0.05, 0.95), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,221,"esult = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,218,"result = solver.solve(f, 0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,223,"ssertEquals(solver2.solve(0.85, 1.25), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,220,"assertEquals(solver2.solve(f, 0.85, 1.25), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,225,"esult = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,222,"result = solver.solve(f, 0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,227,"ssertEquals(solver2.solve(0.8, 1.2), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,224,"assertEquals(solver2.solve(f, 0.8, 1.2), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,229,"esult = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,226,"result = solver.solve(f, 0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,231,"ssertEquals(solver2.solve(0.85, 1.75), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,228,"assertEquals(solver2.solve(f, 0.85, 1.75), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,233,"esult = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,230,"result = solver.solve(f, 0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,235,"ssertEquals(solver2.solve(0.55, 1.45), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,232,"assertEquals(solver2.solve(f, 0.55, 1.45), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,237,"esult = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,234,"result = solver.solve(f, 0.85, 5);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,239,"ssertEquals(solver2.solve(0.85, 5), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,236,"assertEquals(solver2.solve(f, 0.85, 5), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,244,olver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,241,solver = new BisectionSolver();
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,48,ublic void testSinZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,48,@Deprecated
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,49,public void testDeprecated() throws MathException {
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,85,ublic void testQuinticZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,86,public void testSinZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,87,// The sinus function is behaved well around the root at #pi. The second
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,88,"// order derivative is zero, which means linar approximating methods will"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,89,// still converge quadratically.
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,90,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,91,double result;
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,92,UnivariateRealSolver solver = new BrentSolver();
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,93,// Somewhat benign interval. The function is monotone.
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,94,"result = solver.solve(f, 3, 4);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,95,//System.out.println(
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,96,"//    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,97,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,98,// 4 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,99,assertTrue(solver.getIterationCount() <= 5);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,100,// Larger and somewhat less benign interval. The function is grows first.
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,101,"result = solver.solve(f, 1, 4);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,102,//System.out.println(
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,103,"//    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,104,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,105,// 5 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,106,assertTrue(solver.getIterationCount() <= 6);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,107,solver = new SecantSolver();
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,108,"result = solver.solve(f, 3, 4);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,109,//System.out.println(
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,110,"//    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,111,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,112,// 4 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,113,assertTrue(solver.getIterationCount() <= 5);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,114,"result = solver.solve(f, 1, 4);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,115,//System.out.println(
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,116,"//    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,117,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,118,// 5 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,119,assertTrue(solver.getIterationCount() <= 6);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,120,"assertEquals(result, solver.getResult(), 0);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,123,public void testQuinticZero() throws MathException {
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,96,nivariateRealSolver solver = new BrentSolver(f);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,134,UnivariateRealSolver solver = new BrentSolver();
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,99,"esult = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,137,"result = solver.solve(f, -0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,106,"esult = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,144,"result = solver.solve(f, -0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,113,"esult = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,151,"result = solver.solve(f, -0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,120,"esult = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,158,"result = solver.solve(f, 0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,127,"esult = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,165,"result = solver.solve(f, 0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,134,"esult = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,172,"result = solver.solve(f, 0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,142,"esult = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,180,"result = solver.solve(f, 0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,149,"esult = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,187,"result = solver.solve(f, 0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,156,"esult = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,194,"result = solver.solve(f, 0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,163,"esult = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,201,"result = solver.solve(f, 0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,170,"esult = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,208,"result = solver.solve(f, 0.85, 5);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,177,olver = new SecantSolver(f);
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,178,"esult = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,215,solver = new SecantSolver();
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,216,"result = solver.solve(f, -0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,184,"esult = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,222,"result = solver.solve(f, -0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,190,"esult = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,228,"result = solver.solve(f, -0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,196,"esult = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,234,"result = solver.solve(f, 0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,202,"esult = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,240,"result = solver.solve(f, 0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,208,"esult = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,246,"result = solver.solve(f, 0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,214,"esult = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,252,"result = solver.solve(f, 0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,220,"esult = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,258,"result = solver.solve(f, 0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,226,"esult = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,264,"result = solver.solve(f, 0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,234,"esult = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,272,"result = solver.solve(f, 0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,240,"esult = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,278,"result = solver.solve(f, 0.85, 5);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,273,nivariateRealSolver solver = new BrentSolver(f);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,311,UnivariateRealSolver solver = new BrentSolver();
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,276,"ouble result = solver.solve(Math.PI, 4);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,314,"double result = solver.solve(f, Math.PI, 4);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,279,"esult = solver.solve(3, Math.PI);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,317,"result = solver.solve(f, 3, Math.PI);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,285,nivariateRealSolver solver = new BrentSolver(f);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,323,UnivariateRealSolver solver = new BrentSolver();
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,287,"olver.solve(1, -1);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,325,"solver.solve(f, 1, -1);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,293,"olver.solve(1, 1.5);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,331,"solver.solve(f, 1, 1.5);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,303,nivariateRealSolver solver = new BrentSolver(f);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,341,UnivariateRealSolver solver = new BrentSolver();
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,307,"esult = solver.solve(0.6, 7.0);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,345,"result = solver.solve(f, 0.6, 7.0);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,314,"esult = solver.solve(0.6, 7.0, 0.0);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,352,"result = solver.solve(f, 0.6, 7.0, 0.0);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,324,"esult = solver.solve(0.6, 7.0, 0.61);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,362,"result = solver.solve(f, 0.6, 7.0, 0.61);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,330,"esult = solver.solve(0.6, 7.0, 0.999999);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,368,"result = solver.solve(f, 0.6, 7.0, 0.999999);"
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,336,"esult = solver.solve(0.6, 7.0, 1.0);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,374,"result = solver.solve(f, 0.6, 7.0, 1.0);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,37, Test of solver for the linear function.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,37,* Test deprecated APIs.
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,39,ublic void testLinearFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,39,@Deprecated
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,40,public void testDeprecated() throws MathException {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,56,* Test of solver for the linear function.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,58,public void testLinearFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,59,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,61,// p(x) = 4x - 1
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,62,"double coefficients[] = { -1.0, 4.0 };"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,63,PolynomialFunction f = new PolynomialFunction(coefficients);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,64,UnivariateRealSolver solver = new LaguerreSolver();
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,66,min = 0.0; max = 1.0; expected = 0.25;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,67,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,68,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,69,"result = solver.solve(f, min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,70,"assertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,63,nivariateRealSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,82,UnivariateRealSolver solver = new LaguerreSolver();
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,68,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,87,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,74,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,93,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,87,nivariateRealSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,106,UnivariateRealSolver solver = new LaguerreSolver();
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,92,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,111,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,98,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,117,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,104,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,123,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,117,olynomialFunction f = new PolynomialFunction(coefficients);
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,118,aguerreSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,136,LaguerreSolver solver = new LaguerreSolver();
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,153,nivariateRealSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,171,UnivariateRealSolver solver = new LaguerreSolver();
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,157,"olver.solve(1, -1);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,175,"solver.solve(f, 1, -1);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,164,"olver.solve(2, 3);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,182,"solver.solve(f, 2, 3);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,171,nivariateRealFunction f2 = new SinFunction();
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,172,ew LaguerreSolver(f2);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,189,"solver.solve(new SinFunction(), -1, 1);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,38, Test of solver for the sine function.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,38,* Test deprecated APIs.
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,40,ublic void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,40,@Deprecated
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,41,public void testDeprecated() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,60,* Test deprecated APIs.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,62,@Deprecated
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,63,public void testDeprecated2() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,64,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,65,MullerSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,66,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,68,min = -0.4; max = 0.2; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,69,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,70,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,71,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,72,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,74,min = 0.75; max = 1.5; expected = 1.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,75,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,76,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,77,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,78,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,80,min = -0.9; max = -0.2; expected = -0.5;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,81,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,82,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,83,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,84,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,88,* Test of solver for the sine function.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,90,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,91,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,92,UnivariateRealSolver solver = new MullerSolver();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,93,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,95,min = 3.0; max = 4.0; expected = Math.PI;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,96,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,97,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,98,"result = solver.solve(f, min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,99,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,101,min = -1.0; max = 1.5; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,102,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,103,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,104,"result = solver.solve(f, min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,105,"assertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,63,ullerSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,113,MullerSolver solver = new MullerSolver();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,69,"esult = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,119,"result = solver.solve2(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,75,"esult = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,125,"result = solver.solve2(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,84,nivariateRealSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,134,UnivariateRealSolver solver = new MullerSolver();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,90,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,140,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,96,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,146,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,102,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,152,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,111,ullerSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,161,MullerSolver solver = new MullerSolver();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,117,"esult = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,167,"result = solver.solve2(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,123,"esult = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,173,"result = solver.solve2(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,129,"esult = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,179,"result = solver.solve2(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,142,nivariateRealSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,192,UnivariateRealSolver solver = new MullerSolver();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,148,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,198,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,154,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,204,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,160,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,210,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,171,ullerSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,221,MullerSolver solver = new MullerSolver();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,177,"esult = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,227,"result = solver.solve2(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,183,"esult = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,233,"result = solver.solve2(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,189,"esult = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,239,"result = solver.solve2(f, min, max);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,198,nivariateRealSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,248,UnivariateRealSolver solver = new MullerSolver();
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,202,"olver.solve(1, -1);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,252,"solver.solve(f, 1, -1);"
False,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,209,"olver.solve(2, 3);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,259,"solver.solve(f, 2, 3);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,32,ublic void testSinZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,30,@Deprecated
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,31,public void testDeprecated() throws MathException {
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,50,public void testSinZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,51,DifferentiableUnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,52,double result;
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,54,UnivariateRealSolver solver = new NewtonSolver();
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,55,"result = solver.solve(f, 3, 4);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,56,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,58,"result = solver.solve(f, 1, 4);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,59,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,61,"//TODO:  create abstract solver test class, move these there"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,62,"assertEquals(result, solver.getResult(), 0);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,63,assertTrue(solver.getIterationCount() > 0);
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,55,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,56,"esult = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,73,UnivariateRealSolver solver = new NewtonSolver();
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,74,"result = solver.solve(f, -0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,59,"esult = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,77,"result = solver.solve(f, -0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,62,"esult = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,80,"result = solver.solve(f, -0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,65,"esult = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,83,"result = solver.solve(f, 0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,68,"esult = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,86,"result = solver.solve(f, 0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,71,"esult = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,89,"result = solver.solve(f, 0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,74,"esult = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,92,"result = solver.solve(f, 0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,77,"esult = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,95,"result = solver.solve(f, 0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,80,"esult = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,98,"result = solver.solve(f, 0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,83,"esult = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,101,"result = solver.solve(f, 0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,86,"esult = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,104,"result = solver.solve(f, 0.85, 5);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,97,ewtonSolver solver = new NewtonSolver(f);
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,115,NewtonSolver solver = new NewtonSolver();
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,100,"esult = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,118,"result = solver.solve(f, -0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,102,"ssertEquals(solver2.solve(-0.2, 0.2), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,120,"assertEquals(solver2.solve(f, -0.2, 0.2), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,104,"esult = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,122,"result = solver.solve(f, -0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,106,"ssertEquals(solver2.solve(-0.1, 0.3), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,124,"assertEquals(solver2.solve(f, -0.1, 0.3), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,108,"esult = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,126,"result = solver.solve(f, -0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,110,"ssertEquals(solver2.solve(-0.3, 0.45), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,128,"assertEquals(solver2.solve(f, -0.3, 0.45), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,112,"esult = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,130,"result = solver.solve(f, 0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,114,"ssertEquals(solver2.solve(0.3, 0.7), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,132,"assertEquals(solver2.solve(f, 0.3, 0.7), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,116,"esult = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,134,"result = solver.solve(f, 0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,118,"ssertEquals(solver2.solve(0.2, 0.6), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,136,"assertEquals(solver2.solve(f, 0.2, 0.6), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,120,"esult = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,138,"result = solver.solve(f, 0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,122,"ssertEquals(solver2.solve(0.05, 0.95), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,140,"assertEquals(solver2.solve(f, 0.05, 0.95), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,124,"esult = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,142,"result = solver.solve(f, 0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,126,"ssertEquals(solver2.solve(0.85, 1.25), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,144,"assertEquals(solver2.solve(f, 0.85, 1.25), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,128,"esult = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,146,"result = solver.solve(f, 0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,130,"ssertEquals(solver2.solve(0.8, 1.2), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,148,"assertEquals(solver2.solve(f, 0.8, 1.2), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,132,"esult = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,150,"result = solver.solve(f, 0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,134,"ssertEquals(solver2.solve(0.85, 1.75), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,152,"assertEquals(solver2.solve(f, 0.85, 1.75), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,136,"esult = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,154,"result = solver.solve(f, 0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,138,"ssertEquals(solver2.solve(0.55, 1.45), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,156,"assertEquals(solver2.solve(f, 0.55, 1.45), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,140,"esult = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,158,"result = solver.solve(f, 0.85, 5);"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,142,"ssertEquals(solver2.solve(0.85, 5), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,160,"assertEquals(solver2.solve(f, 0.85, 5), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,147,olver = new NewtonSolver(f);
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,165,solver = new NewtonSolver();
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,36, Test of solver for the sine function.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,36,* Test the deprecated APIs.
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,38,ublic void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,38,@Deprecated
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,39,public void testDeprecated() throws MathException {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,58,* Test of solver for the sine function.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,60,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,61,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,62,UnivariateRealSolver solver = new RiddersSolver();
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,63,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,65,min = 3.0; max = 4.0; expected = Math.PI;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,66,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,67,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,68,"result = solver.solve(f, min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,69,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,71,min = -1.0; max = 1.5; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,72,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,73,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,74,"result = solver.solve(f, min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,75,"assertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,61,nivariateRealSolver solver = new RiddersSolver(f);
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,83,UnivariateRealSolver solver = new RiddersSolver();
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,67,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,89,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,73,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,95,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,79,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,101,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,88,nivariateRealSolver solver = new RiddersSolver(f);
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,110,UnivariateRealSolver solver = new RiddersSolver();
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,94,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,116,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,100,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,122,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,106,"esult = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,128,"result = solver.solve(f, min, max);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,115,nivariateRealSolver solver = new RiddersSolver(f);
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,137,UnivariateRealSolver solver = new RiddersSolver();
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,119,"olver.solve(1, -1);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,141,"solver.solve(f, 1, -1);"
False,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,126,"olver.solve(2, 3);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,148,"solver.solve(f, 2, 3);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,31,** function */
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,32,rivate DifferentiableUnivariateRealFunction function;
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,40,unction = new SinFunction();
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,49,unction = null;
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,53,ublic void testNewBisectionSolverNull() {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,54,ry {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,55,actory.newBisectionSolver(null);
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,56,ail();
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,57, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,58,/ success
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,63,nivariateRealSolver solver = factory.newBisectionSolver(function);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,50,UnivariateRealSolver solver = factory.newBisectionSolver();
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,68,ublic void testNewNewtonSolverNull() {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,69,ry {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,70,actory.newNewtonSolver(null);
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,71,ail();
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,72, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,73,/ success
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,78,nivariateRealSolver solver = factory.newNewtonSolver(function);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,56,UnivariateRealSolver solver = factory.newNewtonSolver();
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,83,ublic void testNewBrentSolverNull() {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,84,ry {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,85,actory.newBrentSolver(null);
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,86,ail();
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,87, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,88,/ success
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,93,nivariateRealSolver solver = factory.newBrentSolver(function);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,62,UnivariateRealSolver solver = factory.newBrentSolver();
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,98,ublic void testNewSecantSolverNull() {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,99,ry {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,100,actory.newSecantSolver(null);
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,101,ail();
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,102, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,103,/ success
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,108,nivariateRealSolver solver = factory.newSecantSolver(function);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,68,UnivariateRealSolver solver = factory.newSecantSolver();

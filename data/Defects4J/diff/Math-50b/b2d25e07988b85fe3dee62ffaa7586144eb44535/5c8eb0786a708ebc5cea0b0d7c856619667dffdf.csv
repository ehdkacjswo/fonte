is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,24,import org.apache.commons.math.MaxEvaluationsExceededException;
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,43,/** Maximal number of evaluations allowed. */
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,44,private int maxEvaluations;
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,46,/** Number of evaluations already performed. */
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,47,private int evaluations;
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,49,/** Differential equations to integrate. */
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,50,private transient FirstOrderDifferentialEquations equations;
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,73,setMaxEvaluations(-1);
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,74,resetEvaluations();
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,138,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,139,public void setMaxEvaluations(int maxEvaluations) {
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,140,this.maxEvaluations = (maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations;
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,143,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,144,public int getMaxEvaluations() {
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,145,return maxEvaluations;
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,148,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,149,public int getEvaluations() {
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,150,return evaluations;
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,153,/** Reset the number of evaluations to zero.
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,155,protected void resetEvaluations() {
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,156,evaluations = 0;
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,159,/** Set the differential equations.
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,160,"* @see #computeDerivatives(double, double[], double[])"
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,162,protected void setEquations(final FirstOrderDifferentialEquations equations) {
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,163,this.equations = equations;
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,166,/** Compute the derivatives and check the number of evaluations.
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,167,* @param t current value of the independent <I>time</I> variable
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,168,* @param y array containing the current value of the state vector
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,169,* @param yDot placeholder array where to put the time derivative of the state vector
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,170,* @throws DerivativeException this exception is propagated to the caller if the
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,171,* underlying user function triggers one
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,173,"public void computeDerivatives(final double t, final double[] y, final double[] yDot)"
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,174,throws DerivativeException {
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,175,if (++evaluations > maxEvaluations) {
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,176,throw new DerivativeException(new MaxEvaluationsExceededException(maxEvaluations));
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,178,"equations.computeDerivatives(t, y, yDot);"
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,129,"inal FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,158,FirstOrderDifferentialEquations equations =
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,159,new CountingDifferentialEquations(y.length);
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,345,"/** Wrapper for differential equations, ensuring start evaluations are counted. */"
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,346,private class CountingDifferentialEquations implements FirstOrderDifferentialEquations {
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,348,/** Serializable uid. */
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,349,private static final long serialVersionUID = -6329212616396607764L;
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,351,/** Dimension of the problem. */
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,352,private final int dimension;
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,354,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,355,* @param dimension dimension of the problem
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,357,public CountingDifferentialEquations(final int dimension) {
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,358,this.dimension = dimension;
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,361,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,362,"public void computeDerivatives(double t, double[] y, double[] dot)"
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,363,throws DerivativeException {
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,364,"MultistepIntegrator.this.computeDerivatives(t, y, dot);"
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,367,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,368,public int getDimension() {
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,369,return dimension;
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,117,/** Set the maximal number of differential equations function evaluations.
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,118,* <p>The purpose of this method is to avoid infinite loops which can occur
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,119,* for example when stringent error constraints are set or when lots of
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,120,"* discrete events are triggered, thus leading to many rejected steps.</p>"
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,121,* @param maxEvaluations maximal number of function evaluations (negative
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,122,"* values are silently converted to maximal integer value, thus representing"
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,123,* almost unlimited evaluations)
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,125,void setMaxEvaluations(int maxEvaluations);
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,127,/** Get the maximal number of functions evaluations.
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,128,* @return maximal number of functions evaluations
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,130,int getMaxEvaluations();
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,132,/** Get the number of evaluations of the differential equations function.
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,133,* <p>
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,134,* The number of evaluations corresponds to the last call to the
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,135,* <code>integrate</code> method. It is 0 if the method has not been called yet.
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,136,* </p>
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,137,* @return number of evaluations of the differential equations function
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,139,int getEvaluations();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,212,setEquations(equations);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,213,resetEvaluations();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,232,ouble stopTime =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,233,"tart(previousF.length, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,234,"double stopTime = start(previousF.length, stepSize, manager, stepStart, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,267,"quations.computeDerivatives(nextStep, y, f0);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,268,"computeDerivatives(nextStep, y, f0);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,287,topTime =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,288,"tart(previousF.length, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,288,"stopTime = start(previousF.length, stepSize, manager, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,226,setEquations(equations);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,227,resetEvaluations();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,249,ouble stopTime =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,250,"tart(previousF.length, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,251,"double stopTime = start(previousF.length, stepSize, manager, stepStart, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,282,"quations.computeDerivatives(stepEnd, yTmp, f0);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,283,"computeDerivatives(stepEnd, yTmp, f0);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,296,"quations.computeDerivatives(stepEnd, yTmp, f0);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,297,"computeDerivatives(stepEnd, yTmp, f0);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,341,topTime =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,342,"tart(previousF.length, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,342,"stopTime = start(previousF.length, stepSize, manager, stepStart, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,218,"quations.computeDerivatives(t0 + h, y1, yDot1);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,218,"computeDerivatives(t0 + h, y1, yDot1);"
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,20,import org.apache.commons.math.ode.AbstractIntegrator;
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,21,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,93,"ublic void reinitialize(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,93,"public void reinitialize(final AbstractIntegrator integrator,"
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,95,"uper.reinitialize(equations, y, yDotK, forward);"
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,95,"super.reinitialize(integrator, y, yDotK, forward);"
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,25,import org.apache.commons.math.ode.AbstractIntegrator;
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,26,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,104,"ublic void reinitialize(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,104,"public void reinitialize(final AbstractIntegrator integrator,"
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,107,"uper.reinitialize(equations, y, yDotK, forward);"
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,107,"super.reinitialize(integrator, y, yDotK, forward);"
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,227,"quations.computeDerivatives(previousTime + c14 * h, yTmp, yDotKLast[0]);"
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,227,"integrator.computeDerivatives(previousTime + c14 * h, yTmp, yDotKLast[0]);"
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,237,"quations.computeDerivatives(previousTime + c15 * h, yTmp, yDotKLast[1]);"
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,237,"integrator.computeDerivatives(previousTime + c15 * h, yTmp, yDotKLast[1]);"
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,247,"quations.computeDerivatives(previousTime + c16 * h, yTmp, yDotKLast[2]);"
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,247,"integrator.computeDerivatives(previousTime + c16 * h, yTmp, yDotKLast[2]);"
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,174,setEquations(equations);
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,175,resetEvaluations();
False,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,191,"ki.reinitialize(equations, yTmp, yDotK, forward);"
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,193,"rki.reinitialize(this, yTmp, yDotK, forward);"
False,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,218,"quations.computeDerivatives(stepStart, y, yDotK[0]);"
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,220,"computeDerivatives(stepStart, y, yDotK[0]);"
False,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,249,"quations.computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);"
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,251,"computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);"
False,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,307,"quations.computeDerivatives(stepStart, y, yDotK[0]);"
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,309,"computeDerivatives(stepStart, y, yDotK[0]);"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,398, @param equations differential equations to integrate
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,414,"rivate boolean tryStep(final FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,415,"inal double t0, final double[] y0, final double step, final int k,"
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,413,"private boolean tryStep(final double t0, final double[] y0, final double step, final int k,"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,431,"quations.computeDerivatives(t, yEnd, f[1]);"
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,429,"computeDerivatives(t, yEnd, f[1]);"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,448,"quations.computeDerivatives(t, yEnd, f[j+1]);"
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,446,"computeDerivatives(t, yEnd, f[j+1]);"
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,509,setEquations(equations);
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,510,resetEvaluations();
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,602,"quations.computeDerivatives(stepStart, y, yDot0);"
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,602,"computeDerivatives(stepStart, y, yDot0);"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,638,"f ( ! tryStep(equations, stepStart, y, stepSize, k, scale, fk[k],"
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,638,"if ( ! tryStep(stepStart, y, stepSize, k, scale, fk[k],"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,776,"quations.computeDerivatives(stepStart + stepSize, y1, yDot1);"
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,776,"computeDerivatives(stepStart + stepSize, y1, yDot1);"
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,89,setEquations(equations);
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,90,resetEvaluations();
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,106,"ki.reinitialize(equations, yTmp, yDotK, forward);"
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,108,"rki.reinitialize(this, yTmp, yDotK, forward);"
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,130,"quations.computeDerivatives(stepStart, y, yDotK[0]);"
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,132,"computeDerivatives(stepStart, y, yDotK[0]);"
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,143,"quations.computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);"
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,145,"computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);"
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,182,"quations.computeDerivatives(stepStart, y, yDotK[0]);"
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,184,"computeDerivatives(stepStart, y, yDotK[0]);"
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,24,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,24,import org.apache.commons.math.ode.AbstractIntegrator;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,52,DotK     = null;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,53,quations = null;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,52,yDotK      = null;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,53,integrator = null;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,93,quations = null;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,93,integrator = null;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,111, @param equations set of differential equations being integrated
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,111,* @param integrator integrator being used
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,118,"ublic void reinitialize(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,118,"public void reinitialize(final AbstractIntegrator integrator,"
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,122,his.equations = equations;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,122,this.integrator = integrator;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,166,quations = null;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,166,integrator = null;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,180,** Reference to the differential equations being integrated. */
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,181,rotected FirstOrderDifferentialEquations equations;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,180,/** Reference to the integrator. */
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,181,protected AbstractIntegrator integrator;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,20,import java.io.IOException;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,22,mport java.io.IOException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,102,assertTrue(integ.getEvaluations() > 1000);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,103,"assertEquals(Integer.MAX_VALUE, integ.getMaxEvaluations());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,107,@Test(expected = DerivativeException.class)
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,108,"public void exceedMaxEvaluations() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,110,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,111,double range = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,112,double step = range * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,114,"AdamsBashforthIntegrator integ = new AdamsBashforthIntegrator(3, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,115,"integ.setStarterIntegrator(new DormandPrince853Integrator(0, range, 1.0e-12, 1.0e-12));"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,116,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,117,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,118,integ.setMaxEvaluations(1000);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,119,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,120,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,121,"pb.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,175,ssertTrue(bos.size() > 2800);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,176,ssertTrue(bos.size() < 2900);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,195,assertTrue(bos.size() > 2900);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,196,assertTrue(bos.size() < 3000);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,179,ssertTrue(bos.size() > 2800);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,180,ssertTrue(bos.size() < 2900);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,179,assertTrue(bos.size() > 2900);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,180,assertTrue(bos.size() < 3000);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,192,"assertEquals(integ.getEvaluations(), calls);"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,249,"assertEquals(integ.getEvaluations(), pb.getCalls());"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,120,"assertEquals(integ.getEvaluations(), calls);"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,200,"assertEquals(integ.getEvaluations(), pb.getCalls());"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,242,"assertEquals(integ.getEvaluations(), callsWithoutDenseOutput);"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,249,"assertEquals(integ.getEvaluations(), callsWithDenseOutput);"
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,31,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,45,"nterpolator.reinitialize(new DummyEquations(), y, yDot, true);"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,44,"interpolator.reinitialize(new DummyIntegrator(interpolator), y, yDot, true);"
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,67,"nterpolator.reinitialize(new DummyEquations(), y, yDot, true);"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,66,"interpolator.reinitialize(new DummyIntegrator(interpolator), y, yDot, true);"
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,101,"nterpolator.reinitialize(new DummyEquations(), y, yDot, true);"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,100,"interpolator.reinitialize(new DummyIntegrator(interpolator), y, yDot, true);"
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,175,rivate static class DummyEquations
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,176,mplements FirstOrderDifferentialEquations {
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,177,rivate static final long serialVersionUID = 291437140744677100L;
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,178,ublic int getDimension() {
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,179,eturn 0;
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,181,"ublic void computeDerivatives(double t, double[] y, double[] yDot) {"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,174,private static class DummyIntegrator extends RungeKuttaIntegrator {
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,176,private static final long serialVersionUID = -6936405965711773334L;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,178,protected DummyIntegrator(RungeKuttaStepInterpolator prototype) {
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,179,"super(""dummy"", new double[0], new double[0][0], new double[0], prototype, Double.NaN);"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,144,"assertEquals(integ.getEvaluations(), calls);"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,240,"assertEquals(integ.getEvaluations(), pb.getCalls());"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,133,"assertEquals(integ.getEvaluations(), calls);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,226,// Process normalized steps as long as they are in the current step.
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,17,package org.apache.commons.math.ode.events;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,19,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,20,import java.util.List;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,22,import org.apache.commons.math.analysis.solvers.BaseSecantSolver;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,23,import org.apache.commons.math.analysis.solvers.PegasusSolver;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,24,import org.apache.commons.math.exception.MathUserException;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,25,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,26,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,27,import org.apache.commons.math.ode.IntegratorException;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,28,import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,29,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,30,import org.junit.Test;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,32,/** Tests for overlapping state events. Also tests an event function that does
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,33,"* not converge to zero, but does have values of opposite sign around its root."
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,35,public class OverlappingEventsTest implements FirstOrderDifferentialEquations {
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,37,/** Expected event times for first event. */
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,38,"private static final double[] EVENT_TIMES1 = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0,"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,39,"7.0, 8.0, 9.0};"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,41,/** Expected event times for second event. */
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,42,"private static final double[] EVENT_TIMES2 = {0.5, 1.0, 1.5, 2.0, 2.5, 3.0,"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,43,"3.5, 4.0, 4.5, 5.0, 5.5, 6.0,"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,44,"6.5, 7.0, 7.5, 8.0, 8.5, 9.0,"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,45,9.5};
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,47,"/** Test for events that occur at the exact same time, but due to numerical"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,48,* calculations occur very close together instead. Uses event type 0. See
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,49,* {@link Event#g}.
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,50,* @throws EventException in case of event evaluation failure
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,51,* @throws IntegratorException in case of integration failure
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,52,* @throws MathUserException in case of derivative evaluation failure
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,54,@Test
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,55,"public void testOverlappingEvents0() throws MathUserException, IntegratorException, EventException {"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,56,test(0);
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,59,"/** Test for events that occur at the exact same time, but due to numerical"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,60,* calculations occur very close together instead. Uses event type 1. See
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,61,* {@link Event#g}.
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,62,* @throws EventException in case of event evaluation failure
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,63,* @throws IntegratorException in case of integration failure
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,64,* @throws MathUserException in case of derivative evaluation failure
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,66,@Test
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,67,"public void testOverlappingEvents1() throws MathUserException, IntegratorException, EventException {"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,68,test(1);
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,71,"/** Test for events that occur at the exact same time, but due to numerical"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,72,* calculations occur very close together instead.
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,73,* @param eventType the type of events to use. See {@link Event#g}
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,74,* @throws EventException in case of event evaluation failure
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,75,* @throws IntegratorException in case of integration failure
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,76,* @throws MathUserException in case of derivative evaluation failure
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,78,"public void test(int eventType) throws MathUserException, IntegratorException, EventException {"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,79,double e = 1e-15;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,80,"FirstOrderIntegrator integrator = new DormandPrince853Integrator(e, 100.0, 1e-7, 1e-7);"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,81,"BaseSecantSolver rootSolver = new PegasusSolver(e, e);"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,82,"EventHandler evt1 = new Event(0, eventType);"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,83,"EventHandler evt2 = new Event(1, eventType);"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,84,"integrator.addEventHandler(evt1, 0.1, e, 999, rootSolver);"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,85,"integrator.addEventHandler(evt2, 0.1, e, 999, rootSolver);"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,86,double t = 0.0;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,87,double tEnd = 10.0;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,88,"double[] y = {0.0, 0.0};"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,89,List<Double> events1 = new ArrayList<Double>();
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,90,List<Double> events2 = new ArrayList<Double>();
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,91,while (t < tEnd) {
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,92,"t = integrator.integrate(this, t, y, tEnd, y);"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,93,"//System.out.println(""t="" + t + "",\t\ty=["" + y[0] + "","" + y[1] + ""]"");"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,95,if (y[0] >= 1.0) {
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,96,y[0] = 0.0;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,97,events1.add(t);
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,98,"//System.out.println(""Event 1 @ t="" + t);"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,100,if (y[1] >= 1.0) {
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,101,y[1] = 0.0;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,102,events2.add(t);
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,103,"//System.out.println(""Event 2 @ t="" + t);"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,106,"Assert.assertEquals(EVENT_TIMES1.length, events1.size());"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,107,"Assert.assertEquals(EVENT_TIMES2.length, events2.size());"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,108,for(int i = 0; i < EVENT_TIMES1.length; i++) {
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,109,"Assert.assertEquals(EVENT_TIMES1[i], events1.get(i), 1e-7);"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,111,for(int i = 0; i < EVENT_TIMES2.length; i++) {
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,112,"Assert.assertEquals(EVENT_TIMES2[i], events2.get(i), 1e-7);"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,114,//System.out.println();
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,117,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,118,public int getDimension() {
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,119,return 2;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,122,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,123,"public void computeDerivatives(double t, double[] y, double[] yDot) throws MathUserException {"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,124,yDot[0] = 1.0;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,125,yDot[1] = 2.0;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,128,/** State events for this unit test. */
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,129,private class Event implements EventHandler {
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,130,/** The index of the continuous variable to use. */
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,131,private final int idx;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,133,/** The event type to use. See {@link #g}. */
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,134,private final int eventType;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,136,/** Constructor for the {@link Event} class.
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,137,* @param idx the index of the continuous variable to use
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,138,* @param eventType the type of event to use. See {@link #g}
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,140,"public Event(int idx, int eventType) {"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,141,this.idx = idx;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,142,this.eventType = eventType;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,145,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,146,"public double g(double t, double[] y) throws EventException {"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,147,return (eventType == 0) ? y[idx] >= 1.0 ? 1.0 : -1.0
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,148,: y[idx] - 1.0;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,151,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,152,"public int eventOccurred(double t, double[] y, boolean increasing) throws EventException {"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,153,return STOP;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,156,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,157,"public void resetState(double t, double[] y) throws EventException {"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,158,// Never called.

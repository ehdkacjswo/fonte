is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,243," @deprecated replaced by {@link #solve2(UnivariateRealFunction, double, double)"
True,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,243,"* @deprecated replaced by {@link #solve2(UnivariateRealFunction, double, double)}"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,74," @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double)"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,74,"* @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double)}"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,115," @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double, double)"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,115,"* @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double, double)}"
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,61, @see #getEigenValues()
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,61,* @see #getRealEigenvalues()
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,62,* @see #getImagEigenvalues()
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,41," {@link #getV()}, {@link #getVT()}, {@link #getInverse()}, {@link #solve(double[])},"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,42," {@link #solve(RealMatrix)}, {@link #solve(RealVector)} or {@link #solve(RealVectorImpl)}"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,43, methods is called.</p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,41,"* {@link #getV()}, {@link #getVT()}, {@link #getSolver()} methods is called.</p>"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,159, <p>Calling this constructor is equivalent to first call the no-arguments
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,160, constructor and then call {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,185, <p>Calling this constructor is equivalent to first call the no-arguments
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,186," constructor and then call {@link #decompose(double[], double[])}.</p>"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,351, @see #isNonSingular()
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,77, @see #getPermutation()
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,77,* @see #getP()
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,71, <p>Calling this constructor is equivalent to first call the no-arguments
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,72, constructor and then call {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,83, <p>Calling this constructor is equivalent to first call the no-arguments
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,84, constructor and then call {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,101, calls to {@link #integrate}</p>
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,101,* calls to <code>integrate</code>.</p>
False,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,112, calls to {@link #integrate}</p>
True,src/java/org/apache/commons/math/ode/ODEIntegrator.java,src/java/org/apache/commons/math/ode/ODEIntegrator.java,112,* calls to <code>integrate</code>.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,55, @see BDFIntegrator
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,55, @see BDFIntegrator
False,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,43, @see BDFIntegrator
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,62, {@inheritDoc}
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,62,"* Loads model x and y sample data, overriding any previous sample."
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,65,"* @param y the [n,1] array representing the y sample"
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,66,"* @param x the [n,k] array representing the x sample"
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,67,* @throws IllegalArgumentException if the x and y array data are not
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,68,*             compatible for the regression

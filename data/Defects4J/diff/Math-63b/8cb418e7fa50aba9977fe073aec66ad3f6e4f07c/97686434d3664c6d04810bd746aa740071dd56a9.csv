is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,18,package org.apache.commons.math.optimization.general;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,20,import org.apache.commons.math.linear.InvalidMatrixException;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,21,import org.apache.commons.math.linear.MatrixUtils;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,22,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,23,import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,24,import org.apache.commons.math.optimization.ObjectiveException;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,25,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,26,import org.apache.commons.math.optimization.SimpleVectorialValueChecker;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,27,import org.apache.commons.math.optimization.VectorialConvergenceChecker;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,28,import org.apache.commons.math.optimization.VectorialDifferentiableObjectiveFunction;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,29,import org.apache.commons.math.optimization.VectorialDifferentiableOptimizer;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,30,import org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,33,* Base class for implementing estimators.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,34,* <p>This base class handles the boilerplates methods associated to thresholds
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,35,"* settings, jacobian and error estimation.</p>"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,36,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,37,* @since 1.2
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,40,public abstract class AbstractLeastSquaresOptimizer implements VectorialDifferentiableOptimizer {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,42,/** Serializable version identifier */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,43,private static final long serialVersionUID = -3080152374642370722L;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,45,/** Default maximal number of objective function evaluations allowed. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,46,public static final int DEFAULT_MAX_EVALUATIONS = 100;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,48,/** Number of evaluations already performed for the current start. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,49,private int objectiveEvaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,51,/** Number of jacobian evaluations. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,52,private int jacobianEvaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,54,/** Maximal number of evaluations allowed. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,55,private int maxEvaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,57,/** Convergence checker. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,58,protected VectorialConvergenceChecker checker;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,61,* Jacobian matrix.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,62,* <p>This matrix is in canonical form just after the calls to
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,63,"* {@link #updateJacobian()}, but may be modified by the solver"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,64,* in the derived class (the {@link LevenbergMarquardtEstimator
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,65,* Levenberg-Marquardt estimator} does this).</p>
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,67,protected double[][] jacobian;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,69,/** Number of columns of the jacobian matrix. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,70,protected int cols;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,72,/** Number of rows of the jacobian matrix. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,73,protected int rows;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,75,/** Objective function. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,76,private VectorialDifferentiableObjectiveFunction f;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,78,/** Target value for the objective functions at optimum. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,79,protected double[] target;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,81,/** Weight for the least squares cost computation. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,82,protected double[] weights;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,84,/** Current variables set. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,85,protected double[] variables;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,87,/** Current objective function value. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,88,protected double[] objective;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,90,/** Cost value (square root of the sum of the residuals). */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,91,protected double cost;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,93,/** Simple constructor with default settings.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,94,* <p>The convergence check is set to a {@link SimpleVectorialValueChecker}
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,95,* and the maximal number of evaluation is set to its default value.</p>
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,97,protected AbstractLeastSquaresOptimizer() {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,98,setConvergenceChecker(new SimpleVectorialValueChecker());
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,99,setMaxEvaluations(DEFAULT_MAX_EVALUATIONS);
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,102,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,103,public void setMaxEvaluations(int maxEvaluations) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,104,this.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,107,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,108,public int getMaxEvaluations() {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,109,return maxEvaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,112,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,113,public int getEvaluations() {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,114,return objectiveEvaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,117,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,118,public void setConvergenceChecker(VectorialConvergenceChecker checker) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,119,this.checker = checker;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,122,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,123,public VectorialConvergenceChecker getConvergenceChecker() {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,124,return checker;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,128,* Update the jacobian matrix.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,129,* @exception ObjectiveException if the function jacobian
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,130,* cannot be evaluated or its dimension doesn't match problem dimension
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,132,protected void updateJacobian() throws ObjectiveException {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,133,incrementJacobianEvaluationsCounter();
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,134,"jacobian = f.jacobian(variables, objective);"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,135,if (jacobian.length != rows) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,136,"throw new ObjectiveException(""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,137,"jacobian.length, rows);"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,139,for (int i = 0; i < rows; i++) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,140,final double[] ji = jacobian[i];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,141,final double factor = -Math.sqrt(weights[i]);
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,142,for (int j = 0; j < cols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,143,ji[j] *= factor;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,149,* Increment the jacobian evaluations counter.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,151,protected final void incrementJacobianEvaluationsCounter() {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,152,++jacobianEvaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,156,* Update the residuals array and cost function value.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,157,* @exception ObjectiveException if the function cannot be evaluated
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,158,* or its dimension doesn't match problem dimension
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,159,* @exception OptimizationException if the number of cost evaluations
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,160,* exceeds the maximum allowed
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,162,protected void updateResidualsAndCost()
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,163,"throws ObjectiveException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,165,if (++objectiveEvaluations > maxEvaluations) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,166,throw new OptimizationException(
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,167,"""maximal number of evaluations exceeded ({0})"","
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,168,objectiveEvaluations);
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,171,objective = f.objective(variables);
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,172,if (objective.length != rows) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,173,"throw new ObjectiveException(""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,174,"objective.length, rows);"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,176,cost = 0;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,177,"for (int i = 0, index = 0; i < rows; i++, index += cols) {"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,178,final double residual = objective[i] - target[i];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,179,cost += weights[i] * residual * residual;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,181,cost = Math.sqrt(cost);
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,186,* Get the Root Mean Square value.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,187,"* Get the Root Mean Square value, i.e. the root of the arithmetic"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,188,* mean of the square of all weighted residuals. This is related to the
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,189,* criterion that is minimized by the estimator as follows: if
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,190,"* <em>c</em> if the criterion, and <em>n</em> is the number of"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,191,"* measurements, then the RMS is <em>sqrt (c/n)</em>."
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,193,* @return RMS value
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,195,public double getRMS() {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,196,double criterion = 0;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,197,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,198,final double residual = objective[i] - target[i];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,199,criterion += weights[i] * residual * residual;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,201,return Math.sqrt(criterion / rows);
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,205,* Get the Chi-Square value.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,206,* @return chi-square value
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,208,public double getChiSquare() {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,209,double chiSquare = 0;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,210,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,211,final double residual = objective[i] - target[i];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,212,chiSquare += residual * residual / weights[i];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,214,return chiSquare;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,218,* Get the covariance matrix of unbound estimated parameters.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,219,* @return covariance matrix
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,220,* @exception ObjectiveException if the function jacobian cannot
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,221,* be evaluated
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,222,* @exception OptimizationException if the covariance matrix
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,223,* cannot be computed (singular problem)
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,225,public double[][] getCovariances()
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,226,"throws ObjectiveException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,228,// set up the jacobian
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,229,updateJacobian();
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,231,"// compute transpose(J).J, avoiding building big intermediate matrices"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,232,double[][] jTj = new double[cols][cols];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,233,for (int i = 0; i < cols; ++i) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,234,final double[] ji = jacobian[i];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,235,for (int j = i; j < cols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,236,final double[] jj = jacobian[j];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,237,double sum = 0;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,238,for (int k = 0; k < rows; ++k) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,239,sum += ji[k] * jj[k];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,241,jTj[i][j] = sum;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,242,jTj[j][i] = sum;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,246,try {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,247,// compute the covariances matrix
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,248,RealMatrix inverse =
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,249,new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,250,return inverse.getData();
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,251,} catch (InvalidMatrixException ime) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,252,"throw new OptimizationException(""unable to compute covariances: singular problem"");"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,258,* Guess the errors in unbound estimated parameters.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,259,"* <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,260,* @return errors in estimated parameters
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,261,* @exception ObjectiveException if the function jacobian cannot b evaluated
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,262,* @exception OptimizationException if the covariances matrix cannot be computed
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,263,* or the number of degrees of freedom is not positive (number of measurements
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,264,* lesser or equal to number of parameters)
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,266,public double[] guessParametersErrors()
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,267,"throws ObjectiveException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,268,if (rows <= cols) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,269,throw new OptimizationException(
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,270,"""no degrees of freedom ({0} measurements, {1} parameters)"","
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,271,"rows, cols);"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,273,double[] errors = new double[cols];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,274,final double c = Math.sqrt(getChiSquare() / (rows - cols));
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,275,double[][] covar = getCovariances();
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,276,for (int i = 0; i < errors.length; ++i) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,277,errors[i] = Math.sqrt(covar[i][i]) * c;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,279,return errors;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,282,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,283,"public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,284,"final double[] target, final double[] weights,"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,285,final double[] startPoint)
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,286,"throws ObjectiveException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,288,if (target.length != weights.length) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,289,"throw new OptimizationException(""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,290,"target.length, weights.length);"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,293,// reset counters
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,294,objectiveEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,295,jacobianEvaluations  = 0;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,297,// store least squares problem characteristics
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,298,this.f         = f;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,299,this.target    = target;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,300,this.weights   = weights;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,301,this.variables = startPoint.clone();
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,303,// arrays shared with the other private methods
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,304,rows      = target.length;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,305,cols      = variables.length;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,306,jacobian  = new double[rows][cols];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,308,cost = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,310,return doOptimize();
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,314,/** Perform the bulk of optimization algorithm.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,316,abstract protected VectorialPointValuePair doOptimize()
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,317,"throws ObjectiveException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,18,package org.apache.commons.math.optimization.general;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,20,import org.apache.commons.math.linear.DenseRealMatrix;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,21,import org.apache.commons.math.linear.InvalidMatrixException;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,22,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,23,import org.apache.commons.math.linear.decomposition.DecompositionSolver;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,24,import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,25,import org.apache.commons.math.linear.decomposition.QRDecompositionImpl;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,26,import org.apache.commons.math.optimization.ObjectiveException;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,27,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,28,import org.apache.commons.math.optimization.SimpleVectorialValueChecker;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,29,import org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,32,* Gauss-Newton least-squares solver.
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,33,* <p>
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,34,* This class solve a least-square problem by solving the normal equations
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,35,* of the linearized problem at each iteration. Either LU decomposition or
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,36,* QR decomposition can be used to solve the normal equations. LU decomposition
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,37,* is faster but QR decomposition is more robust for difficult problems.
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,38,* </p>
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,40,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,41,* @since 2.0
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,45,public class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,47,/** Serializable version identifier */
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,48,private static final long serialVersionUID = 7011643996279553223L;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,50,/** Indicator for using LU decomposition. */
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,51,private final boolean useLU;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,53,/** Simple constructor with default settings.
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,54,* <p>The convergence check is set to a {@link SimpleVectorialValueChecker}
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,55,* and the maximal number of evaluation is set to
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,56,* {@link AbstractLeastSquaresOptimizer#DEFAULT_MAX_EVALUATIONS}.
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,57,"* @param useLU if true, the normal equations will be solved using LU"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,58,"* decomposition, otherwise it will be solved using QR decomposition"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,60,public GaussNewtonOptimizer(final boolean useLU) {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,61,this.useLU = useLU;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,64,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,65,public VectorialPointValuePair doOptimize()
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,66,"throws ObjectiveException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,68,// iterate until convergence is reached
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,69,VectorialPointValuePair current = null;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,70,boolean converged = false;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,71,for (int iteration = 1; ! converged; ++iteration) {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,73,// evaluate the objective function and its jacobian
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,74,VectorialPointValuePair previous = current;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,75,updateResidualsAndCost();
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,76,updateJacobian();
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,77,"current = new VectorialPointValuePair(variables, objective);"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,79,// build the linear problem
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,80,final double[]   b = new double[cols];
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,81,final double[][] a = new double[cols][cols];
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,82,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,84,final double[] grad   = jacobian[i];
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,85,final double weight   = weights[i];
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,86,final double residual = objective[i] - target[i];
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,88,// compute the normal equation
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,89,final double wr = weight * residual;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,90,for (int j = 0; j < cols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,91,b[j] += wr * grad[j];
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,94,// build the contribution matrix for measurement i
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,95,for (int k = 0; k < cols; ++k) {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,96,double[] ak = a[k];
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,97,double wgk = weight * grad[k];
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,98,for (int l = 0; l < cols; ++l) {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,99,ak[l] += wgk * grad[l];
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,105,try {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,107,// solve the linearized least squares problem
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,108,RealMatrix mA = new DenseRealMatrix(a);
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,109,DecompositionSolver solver = useLU ?
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,110,new LUDecompositionImpl(mA).getSolver() :
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,111,new QRDecompositionImpl(mA).getSolver();
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,112,final double[] dX = solver.solve(b);
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,114,// update the estimated parameters
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,115,for (int i = 0; i < cols; ++i) {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,116,variables[i] += dX[i];
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,119,} catch(InvalidMatrixException e) {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,120,"throw new OptimizationException(""unable to solve: singular problem"");"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,123,// check convergence
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,124,if (previous != null) {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,125,"converged = checker.converged(++iteration, previous, current);"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,130,// we have converged
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,131,return current;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,18,ackage org.apache.commons.math.optimization.general;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,20,mport java.util.ArrayList;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,21,mport java.util.HashSet;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,23,mport org.apache.commons.math.optimization.OptimizationException;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,26,mport junit.framework.Test;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,27,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,28,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,31, <p>Some of the unit tests are re-implementations of the MINPACK <a
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,32," href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,33," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,34, The redistribution policy for MINPACK is available <a
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,35," href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,36," convenience, it is reproduced below.</p>"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,38," <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,39, <tr><td>
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,40,    Minpack Copyright Notice (1999) University of Chicago.
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,41,    All rights reserved
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,42, </td></tr>
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,43, <tr><td>
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,44," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,45," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,46, are met:
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,47, <ol>
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,48,  <li>Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,49,"      notice, this list of conditions and the following disclaimer.</li>"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,50, <li>Redistributions in binary form must reproduce the above
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,51,"     copyright notice, this list of conditions and the following"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,52,     disclaimer in the documentation and/or other materials provided
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,53,     with the distribution.</li>
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,54," <li>The end-user documentation included with the redistribution, if any,"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,55,     must include the following acknowledgment:
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,56,     <code>This product includes software developed by the University of
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,57,"           Chicago, as Operator of Argonne National Laboratory.</code>"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,58,"     Alternately, this acknowledgment may appear in the software itself,"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,59,     if and wherever such third-party acknowledgments normally appear.</li>
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,60," <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,61,"     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,62,"     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,63,"     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,64,"     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,65,"     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,66,"     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,67,"     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,68,"     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,69,"     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,70,     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,71,"     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,72,     BE CORRECTED.</strong></li>
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,73, <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,74,"     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,75,"     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,76,"     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,77,"     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,78,"     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,79,"     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,80,"     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,81,     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,82,     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,83, <ol></td></tr>
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,84, </table>
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,86, @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,87, @author Burton S. Garbow (original fortran minpack tests)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,88, @author Kenneth E. Hillstrom (original fortran minpack tests)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,89, @author Jorge J. More (original fortran minpack tests)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,90, @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,92,ublic class GaussNewtonEstimatorTest
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,93,xtends TestCase {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,95,ublic GaussNewtonEstimatorTest(String name) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,96,uper(name);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,99,ublic void testTrivial() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,100,inearProblem problem =
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,101,ew LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,102,"ew LinearMeasurement(new double[] {2},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,103,ew EstimatedParameter[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,104,"ew EstimatedParameter(""p0"", 0)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,105,", 3.0)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,107,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,108,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,109,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,110,"ssertEquals(1.5,"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,111,"roblem.getUnboundParameters()[0].getEstimate(),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,112,.0e-10);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,115,ublic void testQRColumnsPermutation() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,117,stimatedParameter[] x = {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,118,"ew EstimatedParameter(""p0"", 0), new EstimatedParameter(""p1"", 0)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,120,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,121,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,122,"ew EstimatedParameter[] { x[0], x[1] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,123,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,124,"ew LinearMeasurement(new double[] { 2.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,125,"ew EstimatedParameter[] { x[1] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,126,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,127,"ew LinearMeasurement(new double[] { 1.0, -2.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,128,"ew EstimatedParameter[] { x[0], x[1] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,129,.0)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,132,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,133,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,134,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,135,"ssertEquals(7.0, x[0].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,136,"ssertEquals(3.0, x[1].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,140,ublic void testNoDependency() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,141,stimatedParameter[] p = new EstimatedParameter[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,142,"ew EstimatedParameter(""p0"", 0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,143,"ew EstimatedParameter(""p1"", 0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,144,"ew EstimatedParameter(""p2"", 0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,145,"ew EstimatedParameter(""p3"", 0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,146,"ew EstimatedParameter(""p4"", 0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,147,"ew EstimatedParameter(""p5"", 0)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,149,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,150,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[0] }, 0.0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,151,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[1] }, 1.1),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,152,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[2] }, 2.2),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,153,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[3] }, 3.3),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,154,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[4] }, 4.4),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,155,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[5] }, 5.5)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,157,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,158,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,159,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,160,or (int i = 0; i < p.length; ++i) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,161,"ssertEquals(0.55 * i, p[i].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,165,ublic void testOneSet() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,167,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,168,"ew EstimatedParameter(""p0"", 0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,169,"ew EstimatedParameter(""p1"", 0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,170,"ew EstimatedParameter(""p2"", 0)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,172,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,173,"ew LinearMeasurement(new double[] { 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,174,"ew EstimatedParameter[] { p[0] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,175,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,176,"ew LinearMeasurement(new double[] { -1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,177,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,178,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,179,"ew LinearMeasurement(new double[] { -1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,180,"ew EstimatedParameter[] { p[1], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,181,.0)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,184,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,185,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,186,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,187,"ssertEquals(1.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,188,"ssertEquals(2.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,189,"ssertEquals(3.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,193,ublic void testTwoSets() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,194,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,195,"ew EstimatedParameter(""p0"", 0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,196,"ew EstimatedParameter(""p1"", 1),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,197,"ew EstimatedParameter(""p2"", 2),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,198,"ew EstimatedParameter(""p3"", 3),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,199,"ew EstimatedParameter(""p4"", 4),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,200,"ew EstimatedParameter(""p5"", 5)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,203,ouble epsilon = 1.0e-7;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,204,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,206,/ 4 elements sub-problem
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,207,"ew LinearMeasurement(new double[] {  2.0,  1.0,  4.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,208,"ew EstimatedParameter[] { p[0], p[1], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,209,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,210,"ew LinearMeasurement(new double[] { -4.0, -2.0,   3.0, -7.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,211,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,212,"9.0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,213,"ew LinearMeasurement(new double[] {  4.0,  1.0,  -2.0,  8.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,214,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,215,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,216,"ew LinearMeasurement(new double[] { -3.0, -12.0, -1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,217,"ew EstimatedParameter[] { p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,218,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,220,/ 2 elements sub-problem
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,221,"ew LinearMeasurement(new double[] { epsilon, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,222,"ew EstimatedParameter[] { p[4], p[5] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,223,".0 + epsilon * epsilon),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,224,"ew LinearMeasurement(new double[] {  1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,225,"ew EstimatedParameter[] { p[4], p[5] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,226,.0)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,230,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,231,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,232,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,233,"ssertEquals( 3.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,234,"ssertEquals( 4.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,235,"ssertEquals(-1.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,236,"ssertEquals(-2.0, p[3].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,237,"ssertEquals( 1.0 + epsilon, p[4].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,238,"ssertEquals( 1.0 - epsilon, p[5].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,242,ublic void testNonInversible() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,244,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,245,"ew EstimatedParameter(""p0"", 0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,246,"ew EstimatedParameter(""p1"", 0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,247,"ew EstimatedParameter(""p2"", 0)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,249,inearMeasurement[] m = new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,250,"ew LinearMeasurement(new double[] {  1.0, 2.0, -3.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,251,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,252,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,253,"ew LinearMeasurement(new double[] {  2.0, 1.0,  3.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,254,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,255,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,256,"ew LinearMeasurement(new double[] { -3.0, -9.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,257,"ew EstimatedParameter[] { p[0], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,258,.0)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,260,inearProblem problem = new LinearProblem(m);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,262,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,263,ry {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,264,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,265,"ail(""an exception should have been caught"");"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,266, catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,267,/ expected behavior
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,268, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,269,"ail(""wrong exception type caught"");"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,273,ublic void testIllConditioned() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,274,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,275,"ew EstimatedParameter(""p0"", 0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,276,"ew EstimatedParameter(""p1"", 1),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,277,"ew EstimatedParameter(""p2"", 2),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,278,"ew EstimatedParameter(""p3"", 3)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,281,inearProblem problem1 = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,282,"ew LinearMeasurement(new double[] { 10.0, 7.0,  8.0,  7.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,283,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,284,"2.0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,285,"ew LinearMeasurement(new double[] {  7.0, 5.0,  6.0,  5.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,286,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,287,"3.0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,288,"ew LinearMeasurement(new double[] {  8.0, 6.0, 10.0,  9.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,289,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,290,"3.0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,291,"ew LinearMeasurement(new double[] {  7.0, 5.0,  9.0, 10.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,292,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,293,1.0)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,295,"aussNewtonEstimator estimator1 = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,296,stimator1.estimate(problem1);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,297,"ssertEquals(0, estimator1.getRMS(problem1), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,298,"ssertEquals(1.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,299,"ssertEquals(1.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,300,"ssertEquals(1.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,301,"ssertEquals(1.0, p[3].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,303,inearProblem problem2 = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,304,"ew LinearMeasurement(new double[] { 10.0, 7.0,  8.1,  7.2 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,305,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,306,"2.0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,307,"ew LinearMeasurement(new double[] {  7.08, 5.04,  6.0,  5.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,308,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,309,"3.0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,310,"ew LinearMeasurement(new double[] {  8.0, 5.98, 9.89,  9.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,311,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,312,"3.0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,313,"ew LinearMeasurement(new double[] {  6.99, 4.99,  9.0, 9.98 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,314,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,315,1.0)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,317,"aussNewtonEstimator estimator2 = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,318,stimator2.estimate(problem2);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,319,"ssertEquals(0, estimator2.getRMS(problem2), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,320,"ssertEquals(-81.0, p[0].getEstimate(), 1.0e-8);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,321,"ssertEquals(137.0, p[1].getEstimate(), 1.0e-8);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,322,"ssertEquals(-34.0, p[2].getEstimate(), 1.0e-8);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,323,"ssertEquals( 22.0, p[3].getEstimate(), 1.0e-8);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,327,ublic void testMoreEstimatedParametersSimple() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,329,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,330,"ew EstimatedParameter(""p0"", 7),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,331,"ew EstimatedParameter(""p1"", 6),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,332,"ew EstimatedParameter(""p2"", 5),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,333,"ew EstimatedParameter(""p3"", 4)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,335,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,336,"ew LinearMeasurement(new double[] { 3.0, 2.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,337,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,338,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,339,"ew LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,340,"ew EstimatedParameter[] { p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,341,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,342,"ew LinearMeasurement(new double[] { 2.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,343,"ew EstimatedParameter[] { p[0], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,344,.0)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,347,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,348,ry {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,349,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,350,"ail(""an exception should have been caught"");"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,351, catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,352,/ expected behavior
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,353, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,354,"ail(""wrong exception type caught"");"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,359,ublic void testMoreEstimatedParametersUnsorted() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,360,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,361,"ew EstimatedParameter(""p0"", 2),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,362,"ew EstimatedParameter(""p1"", 2),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,363,"ew EstimatedParameter(""p2"", 2),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,364,"ew EstimatedParameter(""p3"", 2),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,365,"ew EstimatedParameter(""p4"", 2),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,366,"ew EstimatedParameter(""p5"", 2)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,368,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,369,"ew LinearMeasurement(new double[] { 1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,370,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,371,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,372,"ew LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,373,"ew EstimatedParameter[] { p[2], p[3], p[4] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,374,"2.0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,375,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,376,"ew EstimatedParameter[] { p[4], p[5] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,377,"1.0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,378,"ew LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,379,"ew EstimatedParameter[] { p[3], p[2], p[5] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,380,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,381,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,382,"ew EstimatedParameter[] { p[4], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,383,.0)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,386,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,387,ry {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,388,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,389,"ail(""an exception should have been caught"");"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,390, catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,391,/ expected behavior
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,392, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,393,"ail(""wrong exception type caught"");"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,398,ublic void testRedundantEquations() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,399,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,400,"ew EstimatedParameter(""p0"", 1),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,401,"ew EstimatedParameter(""p1"", 1)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,403,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,404,"ew LinearMeasurement(new double[] { 1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,405,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,406,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,407,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,408,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,409,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,410,"ew LinearMeasurement(new double[] { 1.0, 3.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,411,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,412,.0)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,415,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,416,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,417,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,418,stimatedParameter[] all = problem.getAllParameters();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,419,or (int i = 0; i < all.length; ++i) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,420,"ssertEquals(all[i].getName().equals(""p0"") ? 2.0 : 1.0,"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,421,"ll[i].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,426,ublic void testInconsistentEquations() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,427,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,428,"ew EstimatedParameter(""p0"", 1),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,429,"ew EstimatedParameter(""p1"", 1)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,431,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,432,"ew LinearMeasurement(new double[] { 1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,433,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,434,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,435,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,436,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,437,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,438,"ew LinearMeasurement(new double[] { 1.0, 3.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,439,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,440,.0)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,443,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,444,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,445,ssertTrue(estimator.getRMS(problem) > 0.1);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,449,ublic void testBoundParameters() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,450,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,451,"ew EstimatedParameter(""unbound0"", 2, false),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,452,"ew EstimatedParameter(""unbound1"", 2, false),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,453,"ew EstimatedParameter(""bound"",    2, true)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,455,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,456,"ew LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,457,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,458,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,459,"ew LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,460,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,461,".0),"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,462,"ew LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,463,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,464,.0)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,467,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,468,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,469,ssertTrue(estimator.getRMS(problem) < 1.0e-10);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,470,ouble[][] covariances = estimator.getCovariances(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,471,"nt i0 = 0, i1 = 1;"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,472,"f (problem.getUnboundParameters()[0].getName().endsWith(""1"")) {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,473,0 = 1;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,474,1 = 0;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,476,"ssertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,477,"ssertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,478,"ssertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,479,"ssertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,481,ouble[] errors = estimator.guessParametersErrors(problem);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,482,"ssertEquals(0, errors[i0], 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,483,"ssertEquals(0, errors[i1], 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,487,ublic void testMaxIterations() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,488,"ircle circle = new Circle(98.680, 47.345);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,489,"ircle.addPoint( 30.0,  68.0);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,490,"ircle.addPoint( 50.0,  -6.0);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,491,"ircle.addPoint(110.0, -20.0);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,492,"ircle.addPoint( 35.0,  15.0);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,493,"ircle.addPoint( 45.0,  97.0);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,494,ry {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,495,"aussNewtonEstimator estimator = new GaussNewtonEstimator(4, 1.0e-14, 1.0e-14);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,496,stimator.estimate(circle);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,497,"ail(""an exception should have been caught"");"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,498, catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,499,/ expected behavior
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,500, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,501,"ail(""wrong exception type caught"");"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,505,ublic void testCircleFitting() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,506,"ircle circle = new Circle(98.680, 47.345);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,507,"ircle.addPoint( 30.0,  68.0);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,508,"ircle.addPoint( 50.0,  -6.0);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,509,"ircle.addPoint(110.0, -20.0);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,510,"ircle.addPoint( 35.0,  15.0);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,511,"ircle.addPoint( 45.0,  97.0);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,512,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-10, 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,513,stimator.estimate(circle);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,514,ouble rms = estimator.getRMS(circle);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,515,"ssertEquals(1.768262623567235,  Math.sqrt(circle.getM()) * rms,  1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,516,"ssertEquals(69.96016176931406, circle.getRadius(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,517,"ssertEquals(96.07590211815305, circle.getX(),      1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,518,"ssertEquals(48.13516790438953, circle.getY(),      1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,521,ublic void testCircleFittingBadInit() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,522,"ircle circle = new Circle(-12, -12);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,523,ouble[][] points = new double[][] {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,524,"-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,525,"-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,526,"-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,527,"-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,528," 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,529," 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,530,"-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,531,"-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,532,"-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,533,"-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,534,"-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,535," 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,536," 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,537,"-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,538,"-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,539,"-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,540,"-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,541,"-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,542," 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,543," 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,544," 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,545,"-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,546,"-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,547,"-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,548,"-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,549,"-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,550," 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,551," 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,552,"-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,554,or (int i = 0; i < points.length; ++i) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,555,"ircle.addPoint(points[i][0], points[i][1]);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,557,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,558,ry {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,559,stimator.estimate(circle);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,560,"ail(""an exception should have been caught"");"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,561, catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,562,/ expected behavior
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,563, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,564,"ail(""wrong exception type caught"");"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,568,rivate static class LinearProblem extends SimpleEstimationProblem {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,570,ublic LinearProblem(LinearMeasurement[] measurements) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,571,ashSet<EstimatedParameter> set = new HashSet<EstimatedParameter>();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,572,or (int i = 0; i < measurements.length; ++i) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,573,ddMeasurement(measurements[i]);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,574,stimatedParameter[] parameters = measurements[i].getParameters();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,575,or (int j = 0; j < parameters.length; ++j) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,576,et.add(parameters[j]);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,579,or (EstimatedParameter p : set) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,580,ddParameter(p);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,586,rivate static class LinearMeasurement extends WeightedMeasurement {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,588,"ublic LinearMeasurement(double[] factors, EstimatedParameter[] parameters,"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,589,ouble setPoint) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,590,"uper(1.0, setPoint, true);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,591,his.factors = factors;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,592,his.parameters = parameters;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,593,etIgnored(false);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,596,ublic double getTheoreticalValue() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,597,ouble v = 0;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,598,or (int i = 0; i < factors.length; ++i) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,599, += factors[i] * parameters[i].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,601,eturn v;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,604,ublic double getPartial(EstimatedParameter parameter) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,605,or (int i = 0; i < parameters.length; ++i) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,606,f (parameters[i] == parameter) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,607,eturn factors[i];
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,610,eturn 0;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,613,ublic EstimatedParameter[] getParameters() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,614,eturn parameters;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,617,rivate double[] factors;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,618,rivate EstimatedParameter[] parameters;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,619,rivate static final long serialVersionUID = -3922448707008868580L;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,623,rivate static class Circle implements EstimationProblem {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,625,"ublic Circle(double cx, double cy) {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,626,"his.cx = new EstimatedParameter(""cx"", cx);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,627,"his.cy = new EstimatedParameter(new EstimatedParameter(""cy"", cy));"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,628,oints  = new ArrayList<PointModel>();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,631,"ublic void addPoint(double px, double py) {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,632,"oints.add(new PointModel(px, py));"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,635,ublic int getM() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,636,eturn points.size();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,639,ublic WeightedMeasurement[] getMeasurements() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,640,eturn (WeightedMeasurement[]) points.toArray(new PointModel[points.size()]);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,643,ublic EstimatedParameter[] getAllParameters() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,644,"eturn new EstimatedParameter[] { cx, cy };"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,647,ublic EstimatedParameter[] getUnboundParameters() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,648,"eturn new EstimatedParameter[] { cx, cy };"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,651,ublic double getPartialRadiusX() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,652,ouble dRdX = 0;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,653,or (PointModel point : points) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,654,RdX += point.getPartialDiX();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,656,eturn dRdX / points.size();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,659,ublic double getPartialRadiusY() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,660,ouble dRdY = 0;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,661,or (PointModel point : points) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,662,RdY += point.getPartialDiY();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,664,eturn dRdY / points.size();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,667,ublic double getRadius() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,668,ouble r = 0;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,669,or (PointModel point : points) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,670, += point.getCenterDistance();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,672,eturn r / points.size();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,675,ublic double getX() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,676,eturn cx.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,679,ublic double getY() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,680,eturn cy.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,683,rivate class PointModel extends WeightedMeasurement {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,685,"ublic PointModel(double px, double py) {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,686,"uper(1.0, 0.0);"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,687,his.px = px;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,688,his.py = py;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,691,ublic double getPartial(EstimatedParameter parameter) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,692,f (parameter == cx) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,693,eturn getPartialDiX() - getPartialRadiusX();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,694, else if (parameter == cy) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,695,eturn getPartialDiY() - getPartialRadiusY();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,697,eturn 0;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,700,ublic double getCenterDistance() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,701,ouble dx = px - cx.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,702,ouble dy = py - cy.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,703,eturn Math.sqrt(dx * dx + dy * dy);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,706,ublic double getPartialDiX() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,707,eturn (cx.getEstimate() - px) / getCenterDistance();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,710,ublic double getPartialDiY() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,711,eturn (cy.getEstimate() - py) / getCenterDistance();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,714,ublic double getTheoreticalValue() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,715,eturn getCenterDistance() - getRadius();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,718,rivate double px;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,719,rivate double py;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,720,rivate static final long serialVersionUID = 1L;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,724,rivate EstimatedParameter cx;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,725,rivate EstimatedParameter cy;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,726,rivate ArrayList<PointModel> points;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,730,ublic static Test suite() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,731,eturn new TestSuite(GaussNewtonEstimatorTest.class);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,18,package org.apache.commons.math.optimization.general;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,20,import java.awt.geom.Point2D;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,21,import java.util.ArrayList;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,22,import java.util.Arrays;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,24,import junit.framework.Test;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,26,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,28,import org.apache.commons.math.linear.DenseRealMatrix;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,29,import org.apache.commons.math.linear.RealMatrix;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,30,import org.apache.commons.math.optimization.ObjectiveException;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,31,import org.apache.commons.math.optimization.OptimizationException;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,32,import org.apache.commons.math.optimization.SimpleVectorialValueChecker;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,33,import org.apache.commons.math.optimization.VectorialDifferentiableObjectiveFunction;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,34,import org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,37,* <p>Some of the unit tests are re-implementations of the MINPACK <a
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,38,"* href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,39,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,40,* The redistribution policy for MINPACK is available <a
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,41,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,42,"* convenience, it is reproduced below.</p>"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,44,"* <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,45,* <tr><td>
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,46,*    Minpack Copyright Notice (1999) University of Chicago.
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,47,*    All rights reserved
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,48,* </td></tr>
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,49,* <tr><td>
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,50,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,51,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,52,* are met:
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,53,* <ol>
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,54,*  <li>Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,55,"*      notice, this list of conditions and the following disclaimer.</li>"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,56,* <li>Redistributions in binary form must reproduce the above
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,57,"*     copyright notice, this list of conditions and the following"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,58,*     disclaimer in the documentation and/or other materials provided
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,59,*     with the distribution.</li>
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,60,"* <li>The end-user documentation included with the redistribution, if any,"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,61,*     must include the following acknowledgment:
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,62,*     <code>This product includes software developed by the University of
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,63,"*           Chicago, as Operator of Argonne National Laboratory.</code>"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,64,"*     Alternately, this acknowledgment may appear in the software itself,"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,65,*     if and wherever such third-party acknowledgments normally appear.</li>
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,66,"* <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,67,"*     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,68,"*     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,69,"*     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,70,"*     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,71,"*     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,72,"*     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,73,"*     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,74,"*     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,75,"*     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,76,*     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,77,"*     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,78,*     BE CORRECTED.</strong></li>
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,79,* <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,80,"*     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,81,"*     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,82,"*     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,83,"*     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,84,"*     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,85,"*     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,86,"*     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,87,*     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,88,*     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,89,* <ol></td></tr>
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,90,* </table>
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,92,* @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,93,* @author Burton S. Garbow (original fortran minpack tests)
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,94,* @author Kenneth E. Hillstrom (original fortran minpack tests)
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,95,* @author Jorge J. More (original fortran minpack tests)
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,96,* @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,98,public class GaussNewtonOptimizerTest
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,99,extends TestCase {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,101,public GaussNewtonOptimizerTest(String name) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,102,super(name);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,105,"public void testTrivial() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,106,LinearProblem problem =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,107,"new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,108,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,109,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,110,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,111,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,112,"optimizer.optimize(problem, problem.target, new double[] { 1 }, new double[] { 0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,113,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,114,"assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,117,"public void testColumnsPermutation() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,119,LinearProblem problem =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,120,"new LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,121,"new double[] { 4.0, 6.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,123,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,124,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,125,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,126,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,127,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,128,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,129,"assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,130,"assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,134,"public void testNoDependency() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,135,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,136,"{ 2, 0, 0, 0, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,137,"{ 0, 2, 0, 0, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,138,"{ 0, 0, 2, 0, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,139,"{ 0, 0, 0, 2, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,140,"{ 0, 0, 0, 0, 2, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,141,"{ 0, 0, 0, 0, 0, 2 }"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,142,"}, new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,143,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,144,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,145,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,146,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,147,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,148,"new double[] { 0, 0, 0, 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,149,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,150,for (int i = 0; i < problem.target.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,151,"assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,155,"public void testOneSet() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,157,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,158,"{  1,  0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,159,"{ -1,  1, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,160,"{  0, -1, 1 }"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,161,"}, new double[] { 1, 1, 1});"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,162,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,163,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,164,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,165,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,166,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,167,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,168,"assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,169,"assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,170,"assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,174,"public void testTwoSets() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,175,double epsilon = 1.0e-7;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,176,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,177,"{  2,  1,   0,  4,       0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,178,"{ -4, -2,   3, -7,       0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,179,"{  4,  1,  -2,  8,       0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,180,"{  0, -3, -12, -1,       0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,181,"{  0,  0,   0,  0, epsilon, 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,182,"{  0,  0,   0,  0,       1, 1 }"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,183,"}, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,185,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,186,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,187,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,188,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,189,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,190,"new double[] { 0, 0, 0, 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,191,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,192,"assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,193,"assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,194,"assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,195,"assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,196,"assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,197,"assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,201,public void testNonInversible() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,203,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,204,"{  1, 2, -3 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,205,"{  2, 1,  3 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,206,"{ -3, 0, -9 }"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,207,"}, new double[] { 1, 1, 1 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,208,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,209,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,210,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,211,try {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,212,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,213,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,214,} catch (OptimizationException ee) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,215,// expected behavior
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,216,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,217,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,221,"public void testIllConditioned() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,222,LinearProblem problem1 = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,223,"{ 10.0, 7.0,  8.0,  7.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,224,"{  7.0, 5.0,  6.0,  5.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,225,"{  8.0, 6.0, 10.0,  9.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,226,"{  7.0, 5.0,  9.0, 10.0 }"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,227,"}, new double[] { 32, 23, 33, 31 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,228,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,229,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,230,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,231,VectorialPointValuePair optimum1 =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,232,"optimizer.optimize(problem1, problem1.target, new double[] { 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,233,"new double[] { 0, 1, 2, 3 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,234,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,235,"assertEquals(1.0, optimum1.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,236,"assertEquals(1.0, optimum1.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,237,"assertEquals(1.0, optimum1.getPoint()[2], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,238,"assertEquals(1.0, optimum1.getPoint()[3], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,240,LinearProblem problem2 = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,241,"{ 10.00, 7.00, 8.10, 7.20 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,242,"{  7.08, 5.04, 6.00, 5.00 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,243,"{  8.00, 5.98, 9.89, 9.00 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,244,"{  6.99, 4.99, 9.00, 9.98 }"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,245,"}, new double[] { 32, 23, 33, 31 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,246,VectorialPointValuePair optimum2 =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,247,"optimizer.optimize(problem2, problem2.target, new double[] { 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,248,"new double[] { 0, 1, 2, 3 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,249,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,250,"assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,251,"assertEquals(137.0, optimum2.getPoint()[1], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,252,"assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,253,"assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,257,public void testMoreEstimatedParametersSimple() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,259,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,260,"{ 3.0, 2.0,  0.0, 0.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,261,"{ 0.0, 1.0, -1.0, 1.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,262,"{ 2.0, 0.0,  1.0, 0.0 }"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,263,"}, new double[] { 7.0, 3.0, 5.0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,265,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,266,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,267,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,268,try {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,269,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,270,"new double[] { 7, 6, 5, 4 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,271,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,272,} catch (OptimizationException ee) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,273,// expected behavior
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,274,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,275,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,280,public void testMoreEstimatedParametersUnsorted() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,281,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,282,"{ 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,283,"{ 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,284,"{ 0.0, 0.0,  0.0,  0.0, 1.0, -1.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,285,"{ 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,286,"{ 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,287,"}, new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,288,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,289,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,290,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,291,try {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,292,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,293,"new double[] { 2, 2, 2, 2, 2, 2 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,294,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,295,} catch (OptimizationException ee) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,296,// expected behavior
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,297,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,298,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,302,"public void testRedundantEquations() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,303,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,304,"{ 1.0,  1.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,305,"{ 1.0, -1.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,306,"{ 1.0,  3.0 }"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,307,"}, new double[] { 3.0, 1.0, 5.0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,309,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,310,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,311,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,312,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,313,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,314,"new double[] { 1, 1 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,315,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,316,"assertEquals(2.0, optimum.getPoint()[0], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,317,"assertEquals(1.0, optimum.getPoint()[1], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,321,"public void testInconsistentEquations() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,322,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,323,"{ 1.0,  1.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,324,"{ 1.0, -1.0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,325,"{ 1.0,  3.0 }"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,326,"}, new double[] { 3.0, 1.0, 4.0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,328,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,329,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,330,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,331,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 1, 1 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,332,assertTrue(optimizer.getRMS() > 0.1);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,336,"public void testInconsistentSizes() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,337,LinearProblem problem =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,338,"new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,339,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,340,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,341,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,343,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,344,"optimizer.optimize(problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,345,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,346,"assertEquals(-1, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,347,"assertEquals(+1, optimum.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,349,try {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,350,"optimizer.optimize(problem, problem.target,"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,351,"new double[] { 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,352,"new double[] { 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,353,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,354,} catch (OptimizationException oe) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,355,// expected behavior
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,356,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,357,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,360,try {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,361,"optimizer.optimize(problem, new double[] { 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,362,"new double[] { 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,363,"new double[] { 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,364,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,365,} catch (ObjectiveException oe) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,366,// expected behavior
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,367,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,368,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,373,public void testMaxIterations() {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,374,Circle circle = new Circle();
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,375,"circle.addPoint( 30.0,  68.0);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,376,"circle.addPoint( 50.0,  -6.0);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,377,"circle.addPoint(110.0, -20.0);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,378,"circle.addPoint( 35.0,  15.0);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,379,"circle.addPoint( 45.0,  97.0);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,380,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,381,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,382,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-15, 1.0e-15));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,383,try {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,384,"optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,385,"new double[] { 1, 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,386,"new double[] { 98.680, 47.345 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,387,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,388,} catch (OptimizationException ee) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,389,// expected behavior
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,390,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,391,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,395,"public void testCircleFitting() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,396,Circle circle = new Circle();
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,397,"circle.addPoint( 30.0,  68.0);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,398,"circle.addPoint( 50.0,  -6.0);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,399,"circle.addPoint(110.0, -20.0);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,400,"circle.addPoint( 35.0,  15.0);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,401,"circle.addPoint( 45.0,  97.0);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,402,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,403,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,404,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-13, 1.0e-13));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,405,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,406,"optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,407,"new double[] { 1, 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,408,"new double[] { 98.680, 47.345 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,409,"assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * optimizer.getRMS(),  1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,410,"Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,411,"assertEquals(69.96016175359975, circle.getRadius(center), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,412,"assertEquals(96.07590209601095, center.x, 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,413,"assertEquals(48.135167894714,   center.y, 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,416,"public void testCircleFittingBadInit() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,417,Circle circle = new Circle();
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,418,double[][] points = new double[][] {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,419,"{-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,420,"{-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,421,"{-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,422,"{-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,423,"{ 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,424,"{ 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,425,"{-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,426,"{-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,427,"{-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,428,"{-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,429,"{-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,430,"{ 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,431,"{ 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,432,"{-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,433,"{-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,434,"{-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,435,"{-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,436,"{-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,437,"{ 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,438,"{ 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,439,"{ 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,440,"{-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,441,"{-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,442,"{-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,443,"{-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,444,"{-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,445,"{ 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,446,"{ 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,447,"{-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,449,double[] target = new double[points.length];
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,450,"Arrays.fill(target, 0.0);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,451,double[] weights = new double[points.length];
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,452,"Arrays.fill(weights, 2.0);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,453,for (int i = 0; i < points.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,454,"circle.addPoint(points[i][0], points[i][1]);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,456,GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,457,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,458,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,459,try {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,460,"optimizer.optimize(circle, target, weights, new double[] { -12, -12 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,461,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,462,} catch (OptimizationException ee) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,463,// expected behavior
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,464,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,465,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,468,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,469,"optimizer.optimize(circle, target, weights, new double[] { 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,470,"assertEquals(-0.1517383071957963, optimum.getPointRef()[0], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,471,"assertEquals(0.2074999736353867,  optimum.getPointRef()[1], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,472,"assertEquals(0.04268731682389561, optimizer.getRMS(),       1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,476,private static class LinearProblem implements VectorialDifferentiableObjectiveFunction {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,478,private static final long serialVersionUID = 703247177355019415L;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,479,final RealMatrix factors;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,480,final double[] target;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,481,"public LinearProblem(double[][] factors, double[] target) {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,482,this.factors = new DenseRealMatrix(factors);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,483,this.target  = target;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,486,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,487,return factors.getData();
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,490,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,491,return factors.operate(variables);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,496,private static class Circle implements VectorialDifferentiableObjectiveFunction {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,498,private static final long serialVersionUID = -4711170319243817874L;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,500,private ArrayList<Point2D.Double> points;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,502,public Circle() {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,503,points  = new ArrayList<Point2D.Double>();
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,506,"public void addPoint(double px, double py) {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,507,"points.add(new Point2D.Double(px, py));"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,510,public int getN() {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,511,return points.size();
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,514,public double getRadius(Point2D.Double center) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,515,double r = 0;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,516,for (Point2D.Double point : points) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,517,r += point.distance(center);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,519,return r / points.size();
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,522,"public double[][] jacobian(double[] variables, double[] value)"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,523,"throws ObjectiveException, IllegalArgumentException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,525,int n = points.size();
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,526,"Point2D.Double center = new Point2D.Double(variables[0], variables[1]);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,528,// gradient of the optimal radius
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,529,double dRdX = 0;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,530,double dRdY = 0;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,531,for (Point2D.Double pk : points) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,532,double dk = pk.distance(center);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,533,dRdX += (center.x - pk.x) / dk;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,534,dRdY += (center.y - pk.y) / dk;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,536,dRdX /= n;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,537,dRdY /= n;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,539,// jacobian of the radius residuals
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,540,double[][] jacobian = new double[n][2];
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,541,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,542,Point2D.Double pi = points.get(i);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,543,double di   = pi.distance(center);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,544,jacobian[i][0] = (center.x - pi.x) / di - dRdX;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,545,jacobian[i][1] = (center.y - pi.y) / di - dRdY;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,548,return jacobian;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,552,public double[] objective(double[] variables)
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,553,"throws ObjectiveException, IllegalArgumentException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,555,"Point2D.Double center = new Point2D.Double(variables[0], variables[1]);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,556,double radius = getRadius(center);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,558,double[] residuals = new double[points.size()];
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,559,for (int i = 0; i < residuals.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,560,residuals[i] = points.get(i).distance(center) - radius;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,563,return residuals;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,569,public static Test suite() {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,570,return new TestSuite(GaussNewtonOptimizerTest.class);

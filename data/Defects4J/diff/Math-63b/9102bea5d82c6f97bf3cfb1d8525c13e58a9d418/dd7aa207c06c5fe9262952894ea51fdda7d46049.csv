is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,29,* @deprecated in 2.2 (to be removed in 3.0). Please use
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,30,* {@link IterativeAlgorithm} instead.
True,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,26,* @deprecated in 2.2 (to be removed in 3.0).
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,18,package org.apache.commons.math.optimization;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,20,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,23,* Base class for all convergence checker implementations.
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,25,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,26,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,28,public abstract class AbstractConvergenceChecker<T>
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,29,implements ConvergenceChecker<T> {
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,31,* Default relative threshold.
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,33,private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,35,* Default absolute threshold.
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,37,private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,39,* Relative tolerance threshold.
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,41,private final double relativeThreshold;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,43,* Absolute tolerance threshold.
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,45,private final double absoluteThreshold;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,48,* Build an instance with default thresholds.
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,50,public AbstractConvergenceChecker() {
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,51,this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,52,this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,56,* Build an instance with a specified thresholds.
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,58,* @param relativeThreshold relative tolerance threshold
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,59,* @param absoluteThreshold absolute tolerance threshold
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,61,"public AbstractConvergenceChecker(final double relativeThreshold,"
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,62,final double absoluteThreshold) {
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,63,this.relativeThreshold = relativeThreshold;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,64,this.absoluteThreshold = absoluteThreshold;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,68,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,70,public double getRelativeThreshold() {
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,71,return relativeThreshold;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,75,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,77,public double getAbsoluteThreshold() {
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,78,return absoluteThreshold;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,82,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,84,"public abstract boolean converged(int iteration, T ... points);"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,18,package org.apache.commons.math.optimization;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,21,import java.util.Comparator;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,23,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,24,import org.apache.commons.math.exception.MathIllegalStateException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,25,import org.apache.commons.math.exception.ConvergenceException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,26,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,27,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,28,import org.apache.commons.math.random.RandomVectorGenerator;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,31,* Base class for all implementations of a multi-start optimizer.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,33,* This interface is mainly intended to enforce the internal coherence of
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,34,* Commons-Math. Users of the API are advised to base their code on
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,35,* {@link MultiStartMultivariateRealOptimizer} or on
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,36,* {@link MultiStartDifferentiableMultivariateRealOptimizer}.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,38,* @param <FUNC> Type of the objective function to be optimized.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,40,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,41,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,43,public class BaseMultiStartMultivariateRealOptimizer<FUNC extends MultivariateRealFunction>
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,44,implements BaseMultivariateRealOptimizer<FUNC> {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,45,/** Underlying classical optimizer. */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,46,private final BaseMultivariateRealOptimizer<FUNC> optimizer;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,47,/** Maximal number of evaluations allowed. */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,48,private int maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,49,/** Number of evaluations already performed for all starts. */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,50,private int totalEvaluations;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,51,/** Number of starts to go. */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,52,private int starts;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,53,/** Random generator for multi-start. */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,54,private RandomVectorGenerator generator;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,55,/** Found optima. */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,56,private RealPointValuePair[] optima;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,59,* Create a multi-start optimizer from a single-start optimizer.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,61,* @param optimizer Single-start optimizer to wrap.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,62,* @param starts Number of starts to perform (including the
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,63,"* first one), multi-start is disabled if value is less than or"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,64,* equal to 1.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,65,* @param generator Random vector generator to use for restarts.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,67,"protected BaseMultiStartMultivariateRealOptimizer(final BaseMultivariateRealOptimizer<FUNC> optimizer,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,68,"final int starts,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,69,final RandomVectorGenerator generator) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,70,this.optimizer = optimizer;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,71,this.starts = starts;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,72,this.generator = generator;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,76,* Get all the optima found during the last call to {@link
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,77,"* #optimize(FUNC,GoalType,double[]) optimize}."
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,78,* The optimizer stores all the optima found during a set of
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,79,"* restarts. The {@link #optimize(FUNC,GoalType,double[])"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,80,* optimize} method returns the best point only. This method
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,81,"* returns all the points found at the end of each starts,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,82,* including the best one already returned by the {@link
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,83,"* #optimize(FUNC,GoalType,double[]) optimize} method."
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,84,* <br/>
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,85,* The returned array as one element for each start as specified
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,86,* in the constructor. It is ordered with the results from the
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,87,"* runs that did converge first, sorted from best to worst"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,88,* objective value (i.e in ascending order if minimizing and in
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,89,"* descending order if maximizing), followed by and null elements"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,90,* corresponding to the runs that did not converge. This means all
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,91,"* elements will be null if the {@link #optimize(FUNC,GoalType,double[])"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,92,* optimize} method did throw a {@link ConvergenceException}).
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,93,"* This also means that if the first element is not {@code null}, it"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,94,* is the best point found across all starts.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,96,* @return an array containing the optima.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,97,* @throws MathIllegalStateException if {@link
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,98,"* #optimize(FUNC,GoalType,double[]) optimize} has not been called."
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,100,public RealPointValuePair[] getOptima() {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,101,if (optima == null) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,102,throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,104,return optima.clone();
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,107,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,108,public int getMaxEvaluations() {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,109,return maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,112,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,113,public int getEvaluations() {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,114,return totalEvaluations;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,117,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,118,public void setMaxEvaluations(int maxEvaluations) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,119,this.maxEvaluations = maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,120,optimizer.setMaxEvaluations(maxEvaluations);
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,123,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,124,public void setConvergenceChecker(ConvergenceChecker<RealPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,125,optimizer.setConvergenceChecker(checker);
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,128,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,129,public ConvergenceChecker<RealPointValuePair> getConvergenceChecker() {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,130,return optimizer.getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,134,* @param f Function to optimize.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,135,* @param goal Goal type ({@link GoalType#MINIMIZE} or
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,136,* {@link GoalType#MAXIMIZE}).
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,137,* @param startPoint Start point.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,139,"public RealPointValuePair optimize(final FUNC f,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,140,"final GoalType goal,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,141,double[] startPoint)
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,142,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,143,optima = new RealPointValuePair[starts];
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,145,// Multi-start loop.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,146,for (int i = 0; i < starts; ++i) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,148,try {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,149,"optima[i] = optimizer.optimize(f, goal,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,150,(i == 0 ? startPoint :
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,151,generator.nextVector()));
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,152,} catch (FunctionEvaluationException fee) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,153,optima[i] = null;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,154,} catch (ConvergenceException oe) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,155,optima[i] = null;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,158,final int usedEvaluations = optimizer.getEvaluations();
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,159,optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,160,totalEvaluations += usedEvaluations;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,163,sortPairs(goal);
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,165,if (optima[0] == null) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,166,"throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,167,starts);
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,170,// Return the found point given the best objective function value.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,171,return optima[0];
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,175,"* Sort the optima from best to worst, followed by {@code null} elements."
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,177,* @param goal Goal type.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,179,private void sortPairs(final GoalType goal) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,180,"Arrays.sort(optima, new Comparator<RealPointValuePair>() {"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,181,"public int compare(final RealPointValuePair o1,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,182,final RealPointValuePair o2) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,183,if (o1 == null) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,184,return (o2 == null) ? 0 : 1;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,185,} else if (o2 == null) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,186,return -1;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,188,final double v1 = o1.getValue();
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,189,final double v2 = o2.getValue();
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,190,return (goal == GoalType.MINIMIZE) ?
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,191,"Double.compare(v1, v2) : Double.compare(v2, v1);"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,18,package org.apache.commons.math.optimization;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,21,import java.util.Comparator;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,23,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,24,import org.apache.commons.math.exception.MathIllegalStateException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,25,import org.apache.commons.math.exception.ConvergenceException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,26,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,27,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,28,import org.apache.commons.math.random.RandomVectorGenerator;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,31,* Base class for all implementations of a multi-start optimizer.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,33,* This interface is mainly intended to enforce the internal coherence of
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,34,* Commons-Math. Users of the API are advised to base their code on
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,35,* {@link MultiStartDifferentiableMultivariateVectorialOptimizer}.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,37,* @param <FUNC> Type of the objective function to be optimized.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,39,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,40,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,42,public class BaseMultiStartMultivariateVectorialOptimizer<FUNC extends MultivariateVectorialFunction>
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,43,implements BaseMultivariateVectorialOptimizer<FUNC> {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,44,/** Underlying classical optimizer. */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,45,private final BaseMultivariateVectorialOptimizer<FUNC> optimizer;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,46,/** Maximal number of evaluations allowed. */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,47,private int maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,48,/** Number of evaluations already performed for all starts. */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,49,private int totalEvaluations;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,50,/** Number of starts to go. */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,51,private int starts;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,52,/** Random generator for multi-start. */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,53,private RandomVectorGenerator generator;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,54,/** Found optima. */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,55,private VectorialPointValuePair[] optima;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,58,* Create a multi-start optimizer from a single-start optimizer.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,60,* @param optimizer Single-start optimizer to wrap.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,61,* @param starts Number of starts to perform (including the
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,62,"* first one), multi-start is disabled if value is less than or"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,63,* equal to 1.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,64,* @param generator Random vector generator to use for restarts.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,66,"protected BaseMultiStartMultivariateVectorialOptimizer(final BaseMultivariateVectorialOptimizer<FUNC> optimizer,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,67,"final int starts,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,68,final RandomVectorGenerator generator) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,69,this.optimizer = optimizer;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,70,this.starts = starts;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,71,this.generator = generator;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,75,* Get all the optima found during the last call to {@link
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,76,"* #optimize(FUNC,double[],double[],double[]) optimize}."
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,77,* The optimizer stores all the optima found during a set of
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,78,"* restarts. The {@link #optimize(FUNC,double[],double[],double[])"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,79,* optimize} method returns the best point only. This method
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,80,"* returns all the points found at the end of each starts, including"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,81,* the best one already returned by the {@link
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,82,"* #optimize(FUNC,double[],double[],double[]) optimize} method."
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,83,* <br/>
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,84,* The returned array as one element for each start as specified
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,85,* in the constructor. It is ordered with the results from the
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,86,"* runs that did converge first, sorted from best to worst"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,87,* objective value (i.e. in ascending order if minimizing and in
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,88,"* descending order if maximizing), followed by and null elements"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,89,* corresponding to the runs that did not converge. This means all
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,90,* elements will be null if the {@link
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,91,"* #optimize(FUNC,double[],double[],double[]) optimize} method did"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,92,* throw a {@link ConvergenceException}). This also means that if
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,93,"* the first element is not {@code null}, it is the best point found"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,94,* across all starts.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,96,* @return array containing the optima
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,97,* @throws MathIllegalStateException if {@link
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,98,"* #optimize(FUNC,double[],double[],double[]) optimize} has not been"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,99,* called.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,101,public VectorialPointValuePair[] getOptima() {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,102,if (optima == null) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,103,throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,105,return optima.clone();
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,108,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,109,public int getMaxEvaluations() {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,110,return maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,113,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,114,public int getEvaluations() {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,115,return totalEvaluations;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,118,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,119,public void setMaxEvaluations(int maxEvaluations) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,120,this.maxEvaluations = maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,121,optimizer.setMaxEvaluations(maxEvaluations);
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,124,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,125,public void setConvergenceChecker(ConvergenceChecker<VectorialPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,126,optimizer.setConvergenceChecker(checker);
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,129,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,130,public ConvergenceChecker<VectorialPointValuePair> getConvergenceChecker() {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,131,return optimizer.getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,135,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,137,"public VectorialPointValuePair optimize(final FUNC f,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,138,"double[] target, double[] weights,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,139,double[] startPoint)
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,140,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,142,optima = new VectorialPointValuePair[starts];
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,144,// Multi-start loop.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,145,for (int i = 0; i < starts; ++i) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,147,try {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,148,"optima[i] = optimizer.optimize(f, target, weights,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,149,(i == 0 ? startPoint :
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,150,generator.nextVector()));
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,151,} catch (FunctionEvaluationException fee) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,152,optima[i] = null;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,153,} catch (ConvergenceException oe) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,154,optima[i] = null;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,157,final int usedEvaluations = optimizer.getEvaluations();
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,158,optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,159,totalEvaluations += usedEvaluations;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,162,"sortPairs(target, weights);"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,164,if (optima[0] == null) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,165,"throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,166,starts);
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,169,// Return the found point given the best objective function value.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,170,return optima[0];
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,174,"* Sort the optima from best to worst, followed by {@code null} elements."
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,176,* @param target Target value for the objective functions at optimum.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,177,* @param weights Weights for the least-squares cost computation.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,179,"private void sortPairs(final double[] target,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,180,final double[] weights) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,181,"Arrays.sort(optima, new Comparator<VectorialPointValuePair>() {"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,182,"public int compare(final VectorialPointValuePair o1,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,183,final VectorialPointValuePair o2) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,184,if (o1 == null) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,185,return (o2 == null) ? 0 : 1;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,186,} else if (o2 == null) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,187,return -1;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,189,"return Double.compare(weightedResidual(o1), weightedResidual(o2));"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,191,private double weightedResidual(final VectorialPointValuePair pv) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,192,final double[] value = pv.getValueRef();
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,193,double sum = 0;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,194,for (int i = 0; i < value.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,195,final double ri = value[i] - target[i];
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,196,sum += weights[i] * ri * ri;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,198,return sum;
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,24, Optimization algorithms find the input point set that either {@link GoalType
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,25, maximize or minimize} an objective function.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,28, {@link MultivariateRealOptimizer} or on
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,29, {@link DifferentiableMultivariateRealOptimizer}.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,30, @param <T> the type of the objective function to be optimized
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,26,* the following interfaces:
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,27,* <ul>
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,28,*  <li>{@link org.apache.commons.math.optimization.MultivariateRealOptimizer}</li>
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,29,*  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer}</li>
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,30,* </ul>
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,32,* @param <FUNC> Type of the objective function to be optimized.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,32, @see MultivariateRealOptimizer
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,33, @see DifferentiableMultivariateRealOptimizer
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,35, @since 2.2
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,35,* @since 3.0
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,37,ublic interface BaseMultivariateRealOptimizer<T extends MultivariateRealFunction> {
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,39, Set the maximal number of iterations of the algorithm.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,41, @param maxIterations Maximal number of algorithm iterations.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,43,oid setMaxIterations(int maxIterations);
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,46, Get the maximal number of iterations of the algorithm.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,48, @return the maximal number of iterations.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,50,nt getMaxIterations();
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,53, Set the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,55, @param maxEvaluations Maximal number of function evaluations.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,57,oid setMaxEvaluations(int maxEvaluations);
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,60, Get the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,62, @return the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,64,nt getMaxEvaluations();
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,67, Get the number of iterations realized by the algorithm.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,68, The number of iterations corresponds to the last call to the
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,69, {@code optimize} method. It is 0 if the method has not been
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,70, called yet.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,72, @return the number of iterations.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,74,nt getIterations();
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,77, Get the number of evaluations of the objective function.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,78, The number of evaluations corresponds to the last call to the
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,79, {@code optimize} method. It is 0 if the method has not been
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,80, called yet.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,82, @return the number of evaluations of the objective function.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,84,nt getEvaluations();
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,87, Set the convergence checker.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,89, @param checker Object to use to check for convergence.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,91,oid setConvergenceChecker(RealConvergenceChecker checker);
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,94, Get the convergence checker.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,96, @return the object used to check for convergence.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,98,ealConvergenceChecker getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,37,public interface BaseMultivariateRealOptimizer<FUNC extends MultivariateRealFunction>
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,38,extends BaseOptimizer<RealPointValuePair> {
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,104, @param goalType Type of optimization goal: either {@link GoalType#MAXIMIZE}
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,105, or {@link GoalType#MINIMIZE}.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,43,* @param goalType Type of optimization goal: either
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,44,* {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,107, @return the point/value pair giving the optimal value for objective function.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,108, @throws FunctionEvaluationException if the objective function throws one during
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,109, the search.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,110, @throws OptimizationException if the algorithm failed to converge.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,111, @throws IllegalArgumentException if the start point dimension is wrong.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,113,"ealPointValuePair optimize(T f, GoalType goalType, double[] startPoint)"
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,114,"hrows FunctionEvaluationException, OptimizationException;"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,46,* @return the point/value pair giving the optimal value for objective
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,47,* function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,48,* @throws FunctionEvaluationException if the objective function throws one
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,49,* during the search.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,50,* @throws DimensionMismatchException if the start point dimension is wrong.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,51,* @throws TooManyEvaluationsException if the maximal number of evaluations is
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,52,* exceeded.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,54,"RealPointValuePair optimize(FUNC f, GoalType goalType, double[] startPoint)"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,55,throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,18,package org.apache.commons.math.optimization;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,21,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,24,* This interface is mainly intended to enforce the internal coherence of
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,25,* Commons-Math. Users of the API are advised to base their code on
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,26,* the following interfaces:
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,27,* <ul>
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,28,*  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer}</li>
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,29,* </ul>
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,31,* @param <FUNC> Type of the objective function to be optimized.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,33,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,34,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,36,public interface BaseMultivariateVectorialOptimizer<FUNC extends MultivariateVectorialFunction>
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,37,extends BaseOptimizer<VectorialPointValuePair> {
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,39,* Optimize an objective function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,40,* Optimization is considered to be a weighted least-squares minimization.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,41,* The cost function to be minimized is
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,42,* <code>&sum;weight<sub>i</sub>(objective<sub>i</sub> - target<sub>i</sub>)<sup>2</sup></code>
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,44,* @param f Objective function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,45,* @param target Target value for the objective functions at optimum.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,46,* @param weight Weights for the least squares cost computation.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,47,* @param startPoint Start point for optimization.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,48,* @return the point/value pair giving the optimal value for objective
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,49,* function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,50,* @throws FunctionEvaluationException if the objective function throws one
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,51,* during the search.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,52,* @throws DimensionMismatchException if the start point dimension is wrong.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,53,* @throws TooManyEvaluationsException if the maximal number of evaluations is
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,54,* exceeded.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,56,"VectorialPointValuePair optimize(FUNC f, double[] target, double[] weight,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,57,double[] startPoint)
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,58,throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,18,package org.apache.commons.math.optimization;
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,21,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,24,* This interface is mainly intended to enforce the internal coherence of
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,25,* Commons-Math. Users of the API are advised to base their code on
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,26,* the following interfaces:
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,27,* <ul>
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,28,*  <li>{@link org.apache.commons.math.optimization.MultivariateRealOptimizer}</li>
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,29,*  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer}</li>
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,30,*  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer}</li>
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,31,*  <li>{@link org.apache.commons.math.optimization.univariate.UnivariateRealOptimizer}</li>
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,32,* </ul>
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,34,* @param <PAIR> Type of the point/objective pair.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,36,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,37,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,39,public interface BaseOptimizer<PAIR> {
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,41,* Set the maximal number of function evaluations.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,43,* @param maxEvaluations Maximal number of function evaluations.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,45,void setMaxEvaluations(int maxEvaluations);
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,48,* Get the maximal number of function evaluations.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,50,* @return the maximal number of function evaluations.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,52,int getMaxEvaluations();
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,55,* Get the number of evaluations of the objective function.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,56,* The number of evaluations corresponds to the last call to the
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,57,* {@code optimize} method. It is 0 if the method has not been
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,58,* called yet.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,60,* @return the number of evaluations of the objective function.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,62,int getEvaluations();
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,65,* Set the convergence checker.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,67,* @param checker Object to use to check for convergence.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,69,void setConvergenceChecker(ConvergenceChecker<PAIR> checker);
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,72,* Get the convergence checker.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,74,* @return the object used to check for convergence.
True,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,76,ConvergenceChecker<PAIR> getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,18,package org.apache.commons.math.optimization;
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,21,* This interface specifies how to check if an optimization algorithm has
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,22,* converged.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,23,* Deciding if convergence has been reached is a problem-dependent issue. The
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,24,* user should provide a class implementing this interface to allow the
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,25,* optimization algorithm to stop its search according to the problem at hand.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,27,"* @param <PAIR> Type of the (point, objective value) pair."
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,29,* @see org.apache.commons.math.optimization.SimpleScalarValueChecker
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,30,* @see org.apache.commons.math.optimization.SimpleRealPointChecker
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,32,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,33,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,35,public interface ConvergenceChecker<PAIR> {
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,37,* Check if the optimization algorithm has converged.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,39,* @param iteration Current iteration.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,40,* @param points Data used for checking the convergence.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,41,* @return {@code true} if the algorithm is considered to have converged.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,43,"boolean converged(int iteration, PAIR ... points);"
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,46,* Get the relative tolerance.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,48,* @return the relative threshold.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,50,double getRelativeThreshold();
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,53,* Get the absolute tolerance.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,55,* @return the absolute threshold.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,57,double getAbsoluteThreshold();
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,35,xtends BaseMultivariateRealOptimizer<DifferentiableMultivariateRealFunction> {
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,37, Get the number of evaluations of the objective function gradient.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,38, The number of evaluations corresponds to the last call to the
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,39, {@code optimize} method (see {@link BaseMultivariateRealOptimizer}).
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,40, It is 0 if the method has not been called yet.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,42, @return the number of evaluations of the objective function gradient.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,44,nt getGradientEvaluations();
True,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,36,extends BaseMultivariateRealOptimizer<DifferentiableMultivariateRealFunction> {}
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,24, This interface represents an optimization algorithm for {@link DifferentiableMultivariateVectorialFunction
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,25, vectorial differentiable objective functions}.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,26, <p>Optimization algorithms find the input point set that either {@link GoalType
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,27, maximize or minimize} an objective function.</p>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,28, @see MultivariateRealOptimizer
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,29, @see DifferentiableMultivariateRealOptimizer
True,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,24,* This interface represents an optimization algorithm for
True,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,25,* {@link DifferentiableMultivariateVectorialFunction vectorial differentiable
True,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,26,* objective functions}.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,31, @since 2.0
True,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,29,* @since 3.0
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,33,ublic interface DifferentiableMultivariateVectorialOptimizer {
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,35,** Set the maximal number of iterations of the algorithm.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,36, @param maxIterations maximal number of function calls
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,39,oid setMaxIterations(int maxIterations);
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,41,** Get the maximal number of iterations of the algorithm.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,42, @return maximal number of iterations
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,44,nt getMaxIterations();
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,46,** Get the number of iterations realized by the algorithm.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,47, @return number of iterations
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,49,nt getIterations();
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,51,** Set the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,52, @param maxEvaluations maximal number of function evaluations
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,54,oid setMaxEvaluations(int maxEvaluations);
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,56,** Get the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,57, @return maximal number of functions evaluations
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,59,nt getMaxEvaluations();
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,61,** Get the number of evaluations of the objective function.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,62, <p>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,63, The number of evaluation correspond to the last call to the
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,64," {@link #optimize(DifferentiableMultivariateVectorialFunction,"
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,65," double[], double[], double[]) optimize} method. It is 0 if"
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,66, the method has not been called yet.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,67, </p>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,68, @return number of evaluations of the objective function
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,70,nt getEvaluations();
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,72,** Get the number of evaluations of the objective function jacobian .
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,73, <p>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,74, The number of evaluation correspond to the last call to the
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,75," {@link #optimize(DifferentiableMultivariateVectorialFunction,"
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,76," double[], double[], double[]) optimize} method. It is 0 if"
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,77, the method has not been called yet.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,78, </p>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,79, @return number of evaluations of the objective function jacobian
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,81,nt getJacobianEvaluations();
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,83,** Set the convergence checker.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,84, @param checker object to use to check for convergence
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,86,oid setConvergenceChecker(VectorialConvergenceChecker checker);
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,88,** Get the convergence checker.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,89, @return object used to check for convergence
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,91,ectorialConvergenceChecker getConvergenceChecker();
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,93,** Optimizes an objective function.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,94, <p>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,95, Optimization is considered to be a weighted least-squares minimization.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,96, The cost function to be minimized is
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,97, &sum;weight<sub>i</sub>(objective<sub>i</sub>-target<sub>i</sub>)<sup>2</sup>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,98, </p>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,99, @param f objective function
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,100, @param target target value for the objective functions at optimum
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,101, @param weights weight for the least squares cost computation
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,102, @param startPoint the start point for optimization
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,103, @return the point/value pair giving the optimal value for objective function
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,104, @exception FunctionEvaluationException if the objective function throws one during
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,105, the search
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,106, @exception OptimizationException if the algorithm failed to converge
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,107, @exception IllegalArgumentException if the start point dimension is wrong
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,109,"ectorialPointValuePair optimize(DifferentiableMultivariateVectorialFunction f,"
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,110,"ouble[] target, double[] weights,"
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,111,ouble[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,112,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
True,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,31,public interface DifferentiableMultivariateVectorialOptimizer
True,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,32,extends BaseMultivariateVectorialOptimizer<DifferentiableMultivariateVectorialFunction> {}
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,24,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,24,import org.apache.commons.math.exception.MathIllegalStateException;
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,25,import org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,30, Special implementation of the {@link DifferentiableMultivariateRealOptimizer} interface adding
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,31, multi-start features to an existing optimizer.
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,32, <p>
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,31,* Special implementation of the {@link DifferentiableMultivariateRealOptimizer}
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,32,* interface adding multi-start features to an existing optimizer.
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,36, </p>
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,42,extends BaseMultiStartMultivariateRealOptimizer<DifferentiableMultivariateRealFunction>
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,43,** Underlying classical optimizer. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,44,rivate final DifferentiableMultivariateRealOptimizer optimizer;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,46,** Maximal number of iterations allowed. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,47,rivate int maxIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,49,** Number of iterations already performed for all starts. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,50,rivate int totalIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,52,** Maximal number of evaluations allowed. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,53,rivate int maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,55,** Number of evaluations already performed for all starts. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,56,rivate int totalEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,58,** Number of gradient evaluations already performed for all starts. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,59,rivate int totalGradientEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,61,** Number of starts to go. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,62,rivate int starts;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,64,** Random generator for multi-start. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,65,rivate RandomVectorGenerator generator;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,67,** Found optima. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,68,rivate RealPointValuePair[] optima;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,71, Create a multi-start optimizer from a single-start optimizer
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,72, @param optimizer single-start optimizer to wrap
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,73, @param starts number of starts to perform (including the
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,45,* Create a multi-start optimizer from a single-start optimizer.
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,47,* @param optimizer Single-start optimizer to wrap.
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,48,* @param starts Number of starts to perform (including the
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,75, equal to 1
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,76, @param generator random vector generator to use for restarts
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,50,* equal to 1.
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,51,* @param generator Random vector generator to use for restarts.
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,81,his.optimizer                = optimizer;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,82,his.totalIterations          = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,83,his.totalEvaluations         = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,84,his.totalGradientEvaluations = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,85,his.starts                   = starts;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,86,his.generator                = generator;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,87,his.optima                   = null;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,88,etMaxIterations(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,89,etMaxEvaluations(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,92,** Get all the optima found during the last call to {@link
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,93," #optimize(DifferentiableMultivariateRealFunction, GoalType, double[])"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,94, optimize}.
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,95, <p>The optimizer stores all the optima found during a set of
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,96," restarts. The {@link #optimize(DifferentiableMultivariateRealFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,97," GoalType, double[]) optimize} method returns the best point only. This"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,98," method returns all the points found at the end of each starts,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,99, including the best one already returned by the {@link
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,100," #optimize(DifferentiableMultivariateRealFunction, GoalType, double[])"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,101, optimize} method.
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,102, </p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,103, <p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,104, The returned array as one element for each start as specified
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,105, in the constructor. It is ordered with the results from the
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,106," runs that did converge first, sorted from best to worst"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,107, objective value (i.e in ascending order if minimizing and in
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,108," descending order if maximizing), followed by and null elements"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,109, corresponding to the runs that did not converge. This means all
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,110," elements will be null if the {@link #optimize(DifferentiableMultivariateRealFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,111," GoalType, double[]) optimize} method did throw a {@link"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,112, org.apache.commons.math.ConvergenceException ConvergenceException}).
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,113," This also means that if the first element is non null, it is the best"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,114, point found across all starts.</p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,115, @return array containing the optima
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,116," @exception IllegalStateException if {@link #optimize(DifferentiableMultivariateRealFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,117," GoalType, double[]) optimize} has not been called"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,119,ublic RealPointValuePair[] getOptima() throws IllegalStateException {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,120,f (optima == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,121,hrow MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,123,eturn optima.clone();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,126,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,127,ublic void setMaxIterations(int maxIterations) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,128,his.maxIterations = maxIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,131,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,132,ublic int getMaxIterations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,133,eturn maxIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,136,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,137,ublic int getIterations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,138,eturn totalIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,141,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,142,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,143,his.maxEvaluations = maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,56,"super(optimizer, starts, generator);"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,146,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,147,ublic int getMaxEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,148,eturn maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,151,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,152,ublic int getEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,153,eturn totalEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,156,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,157,ublic int getGradientEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,158,eturn totalGradientEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,161,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,162,ublic void setConvergenceChecker(RealConvergenceChecker checker) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,163,ptimizer.setConvergenceChecker(checker);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,166,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,167,ublic RealConvergenceChecker getConvergenceChecker() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,168,eturn optimizer.getConvergenceChecker();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,171,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,172,"ublic RealPointValuePair optimize(final DifferentiableMultivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,173,"inal GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,174,ouble[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,175,"hrows FunctionEvaluationException, OptimizationException {"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,177,ptima                   = new RealPointValuePair[starts];
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,178,otalIterations          = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,179,otalEvaluations         = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,180,otalGradientEvaluations = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,182,/ multi-start loop
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,183,or (int i = 0; i < starts; ++i) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,185,ry {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,186,ptimizer.setMaxIterations(maxIterations - totalIterations);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,187,ptimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,188,"ptima[i] = optimizer.optimize(f, goalType,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,189,i == 0) ? startPoint : generator.nextVector());
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,190, catch (FunctionEvaluationException fee) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,191,ptima[i] = null;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,192, catch (OptimizationException oe) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,193,ptima[i] = null;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,196,otalIterations          += optimizer.getIterations();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,197,otalEvaluations         += optimizer.getEvaluations();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,198,otalGradientEvaluations += optimizer.getGradientEvaluations();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,202,"/ sort the optima from best to worst, followed by null elements"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,203,"rrays.sort(optima, new Comparator<RealPointValuePair>() {"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,204,"ublic int compare(final RealPointValuePair o1, final RealPointValuePair o2) {"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,205,f (o1 == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,206,eturn (o2 == null) ? 0 : +1;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,207, else if (o2 == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,208,eturn -1;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,210,inal double v1 = o1.getValue();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,211,inal double v2 = o2.getValue();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,212,eturn (goalType == GoalType.MINIMIZE) ?
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,213,"ouble.compare(v1, v2) : Double.compare(v2, v1);"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,217,f (optima[0] == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,218,hrow new OptimizationException(
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,219,"ocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,220,tarts);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,223,/ return the found point given the best objective function value
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,224,eturn optima[0];
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,21,mport java.util.Comparator;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,23,mport org.apache.commons.math.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,24,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,26,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,30, Special implementation of the {@link DifferentiableMultivariateVectorialOptimizer} interface adding
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,31, multi-start features to an existing optimizer.
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,32, <p>
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,24,* Special implementation of the {@link DifferentiableMultivariateVectorialOptimizer}
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,25,* interface addind multi-start features to an existing optimizer.
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,36, </p>
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,35,extends BaseMultiStartMultivariateVectorialOptimizer<DifferentiableMultivariateVectorialFunction>
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,43,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,44,rivate static final long serialVersionUID = 9206382258980561530L;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,46,** Underlying classical optimizer. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,47,rivate final DifferentiableMultivariateVectorialOptimizer optimizer;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,49,** Maximal number of iterations allowed. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,50,rivate int maxIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,52,** Number of iterations already performed for all starts. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,53,rivate int totalIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,55,** Maximal number of evaluations allowed. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,56,rivate int maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,58,** Number of evaluations already performed for all starts. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,59,rivate int totalEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,61,** Number of jacobian evaluations already performed for all starts. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,62,rivate int totalJacobianEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,64,** Number of starts to go. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,65,rivate int starts;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,67,** Random generator for multi-start. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,68,rivate RandomVectorGenerator generator;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,70,** Found optima. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,71,rivate VectorialPointValuePair[] optima;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,74, Create a multi-start optimizer from a single-start optimizer
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,75, @param optimizer single-start optimizer to wrap
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,76, @param starts number of starts to perform (including the
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,38,* Create a multi-start optimizer from a single-start optimizer.
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,40,* @param optimizer Single-start optimizer to wrap.
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,41,* @param starts Number of starts to perform (including the
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,78, equal to 1
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,79, @param generator random vector generator to use for restarts
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,43,* equal to 1.
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,44,* @param generator Random vector generator to use for restarts.
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,85,his.optimizer                = optimizer;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,86,his.totalIterations          = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,87,his.totalEvaluations         = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,88,his.totalJacobianEvaluations = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,89,his.starts                   = starts;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,90,his.generator                = generator;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,91,his.optima                   = null;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,92,etMaxIterations(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,93,etMaxEvaluations(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,96,** Get all the optima found during the last call to {@link
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,97," #optimize(DifferentiableMultivariateVectorialFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,98," double[], double[], double[]) optimize}."
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,99, <p>The optimizer stores all the optima found during a set of
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,100," restarts. The {@link #optimize(DifferentiableMultivariateVectorialFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,101," double[], double[], double[]) optimize} method returns the"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,102, best point only. This method returns all the points found at the
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,103," end of each starts, including the best one already returned by the {@link"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,104," #optimize(DifferentiableMultivariateVectorialFunction, double[],"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,105," double[], double[]) optimize} method."
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,106, </p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,107, <p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,108, The returned array as one element for each start as specified
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,109, in the constructor. It is ordered with the results from the
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,110," runs that did converge first, sorted from best to worst"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,111, objective value (i.e in ascending order if minimizing and in
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,112," descending order if maximizing), followed by and null elements"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,113, corresponding to the runs that did not converge. This means all
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,114," elements will be null if the {@link #optimize(DifferentiableMultivariateVectorialFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,115," double[], double[], double[]) optimize} method did throw a {@link"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,116, org.apache.commons.math.ConvergenceException ConvergenceException}).
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,117," This also means that if the first element is non null, it is the best"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,118, point found across all starts.</p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,119, @return array containing the optima
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,120," @exception IllegalStateException if {@link #optimize(DifferentiableMultivariateVectorialFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,121," double[], double[], double[]) optimize} has not been called"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,123,ublic VectorialPointValuePair[] getOptima() throws IllegalStateException {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,124,f (optima == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,125,hrow MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,127,eturn optima.clone();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,130,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,131,ublic void setMaxIterations(int maxIterations) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,132,his.maxIterations = maxIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,135,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,136,ublic int getMaxIterations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,137,eturn maxIterations;
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,50,"super(optimizer, starts, generator);"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,140,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,141,ublic int getIterations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,142,eturn totalIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,145,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,146,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,147,his.maxEvaluations = maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,150,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,151,ublic int getMaxEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,152,eturn maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,155,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,156,ublic int getEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,157,eturn totalEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,160,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,161,ublic int getJacobianEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,162,eturn totalJacobianEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,165,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,166,ublic void setConvergenceChecker(VectorialConvergenceChecker checker) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,167,ptimizer.setConvergenceChecker(checker);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,170,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,171,ublic VectorialConvergenceChecker getConvergenceChecker() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,172,eturn optimizer.getConvergenceChecker();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,175,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,176,"ublic VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,177,"inal double[] target, final double[] weights,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,178,inal double[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,179,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,181,ptima                   = new VectorialPointValuePair[starts];
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,182,otalIterations          = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,183,otalEvaluations         = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,184,otalJacobianEvaluations = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,186,/ multi-start loop
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,187,or (int i = 0; i < starts; ++i) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,189,ry {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,190,ptimizer.setMaxIterations(maxIterations - totalIterations);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,191,ptimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,192,"ptima[i] = optimizer.optimize(f, target, weights,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,193,i == 0) ? startPoint : generator.nextVector());
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,194, catch (FunctionEvaluationException fee) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,195,ptima[i] = null;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,196, catch (OptimizationException oe) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,197,ptima[i] = null;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,200,otalIterations          += optimizer.getIterations();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,201,otalEvaluations         += optimizer.getEvaluations();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,202,otalJacobianEvaluations += optimizer.getJacobianEvaluations();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,206,"/ sort the optima from best to worst, followed by null elements"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,207,"rrays.sort(optima, new Comparator<VectorialPointValuePair>() {"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,208,"ublic int compare(final VectorialPointValuePair o1, final VectorialPointValuePair o2) {"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,209,f (o1 == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,210,eturn (o2 == null) ? 0 : +1;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,211, else if (o2 == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,212,eturn -1;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,214,"eturn Double.compare(weightedResidual(o1), weightedResidual(o2));"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,216,rivate double weightedResidual(final VectorialPointValuePair pv) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,217,inal double[] value = pv.getValueRef();
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,218,ouble sum = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,219,or (int i = 0; i < value.length; ++i) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,220,inal double ri = value[i] - target[i];
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,221,um += weights[i] * ri * ri;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,223,eturn sum;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,227,f (optima[0] == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,228,hrow new OptimizationException(
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,229,"ocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,230,tarts);
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,233,/ return the found point given the best objective function value
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,234,eturn optima[0];
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,21,mport java.util.Comparator;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,23,mport org.apache.commons.math.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,24,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,26,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,32, <p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,36, </p>
True,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,35,extends BaseMultiStartMultivariateRealOptimizer<MultivariateRealFunction>
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,43,** Underlying classical optimizer. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,44,rivate final MultivariateRealOptimizer optimizer;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,46,** Maximal number of iterations allowed. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,47,rivate int maxIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,49,** Maximal number of evaluations allowed. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,50,rivate int maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,52,** Number of iterations already performed for all starts. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,53,rivate int totalIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,55,** Number of evaluations already performed for all starts. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,56,rivate int totalEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,58,** Number of starts to go. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,59,rivate int starts;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,61,** Random generator for multi-start. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,62,rivate RandomVectorGenerator generator;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,64,** Found optima. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,65,rivate RealPointValuePair[] optima;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,68, Create a multi-start optimizer from a single-start optimizer
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,69, @param optimizer single-start optimizer to wrap
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,70, @param starts number of starts to perform (including the
True,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,38,* Create a multi-start optimizer from a single-start optimizer.
True,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,40,* @param optimizer Single-start optimizer to wrap.
True,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,41,* @param starts Number of starts to perform (including the
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,72, equal to 1
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,73, @param generator random vector generator to use for restarts
True,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,43,* equal to 1.
True,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,44,* @param generator Random vector generator to use for restarts.
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,78,his.optimizer        = optimizer;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,79,his.totalIterations  = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,80,his.totalEvaluations = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,81,his.starts           = starts;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,82,his.generator        = generator;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,83,his.optima           = null;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,84,etMaxIterations(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,85,etMaxEvaluations(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,88,** Get all the optima found during the last call to {@link
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,89," #optimize(MultivariateRealFunction, GoalType, double[]) optimize}."
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,90, <p>The optimizer stores all the optima found during a set of
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,91," restarts. The {@link #optimize(MultivariateRealFunction, GoalType,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,92, double[]) optimize} method returns the best point only. This
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,93," method returns all the points found at the end of each starts,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,94, including the best one already returned by the {@link
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,95," #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,96, method.
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,97, </p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,98, <p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,99, The returned array as one element for each start as specified
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,100, in the constructor. It is ordered with the results from the
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,101," runs that did converge first, sorted from best to worst"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,102, objective value (i.e in ascending order if minimizing and in
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,103," descending order if maximizing), followed by and null elements"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,104, corresponding to the runs that did not converge. This means all
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,105," elements will be null if the {@link #optimize(MultivariateRealFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,106," GoalType, double[]) optimize} method did throw a {@link"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,107, org.apache.commons.math.ConvergenceException ConvergenceException}).
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,108," This also means that if the first element is non null, it is the best"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,109, point found across all starts.</p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,110, @return array containing the optima
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,111," @exception IllegalStateException if {@link #optimize(MultivariateRealFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,112," GoalType, double[]) optimize} has not been called"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,114,ublic RealPointValuePair[] getOptima() throws IllegalStateException {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,115,f (optima == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,116,hrow MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,118,eturn optima.clone();
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,121,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,122,ublic void setMaxIterations(int maxIterations) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,123,his.maxIterations = maxIterations;
True,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,49,"super(optimizer, starts, generator);"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,126,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,127,ublic int getMaxIterations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,128,eturn maxIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,131,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,132,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,133,his.maxEvaluations = maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,136,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,137,ublic int getMaxEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,138,eturn maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,141,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,142,ublic int getIterations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,143,eturn totalIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,146,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,147,ublic int getEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,148,eturn totalEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,151,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,152,ublic void setConvergenceChecker(RealConvergenceChecker checker) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,153,ptimizer.setConvergenceChecker(checker);
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,156,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,157,ublic RealConvergenceChecker getConvergenceChecker() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,158,eturn optimizer.getConvergenceChecker();
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,161,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,162,"ublic RealPointValuePair optimize(final MultivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,163,"inal GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,164,ouble[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,165,"hrows FunctionEvaluationException, OptimizationException {"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,167,ptima           = new RealPointValuePair[starts];
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,168,otalIterations  = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,169,otalEvaluations = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,171,/ multi-start loop
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,172,or (int i = 0; i < starts; ++i) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,174,ry {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,175,ptimizer.setMaxIterations(maxIterations - totalIterations);
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,176,ptimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,177,"ptima[i] = optimizer.optimize(f, goalType,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,178,i == 0) ? startPoint : generator.nextVector());
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,179, catch (FunctionEvaluationException fee) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,180,ptima[i] = null;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,181, catch (OptimizationException oe) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,182,ptima[i] = null;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,185,otalIterations  += optimizer.getIterations();
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,186,otalEvaluations += optimizer.getEvaluations();
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,190,"/ sort the optima from best to worst, followed by null elements"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,191,"rrays.sort(optima, new Comparator<RealPointValuePair>() {"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,192,"ublic int compare(final RealPointValuePair o1, final RealPointValuePair o2) {"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,193,f (o1 == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,194,eturn (o2 == null) ? 0 : +1;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,195, else if (o2 == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,196,eturn -1;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,198,inal double v1 = o1.getValue();
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,199,inal double v2 = o2.getValue();
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,200,eturn (goalType == GoalType.MINIMIZE) ?
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,201,"ouble.compare(v1, v2) : Double.compare(v2, v1);"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,205,f (optima[0] == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,206,hrow new OptimizationException(
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,207,"ocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,208,tarts);
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,211,/ return the found point given the best objective function value
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,212,eturn optima[0];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,18,ackage org.apache.commons.math.optimization;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,20,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,21,mport org.apache.commons.math.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,22,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,23,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,24,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,25,mport org.apache.commons.math.random.RandomGenerator;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,26,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,29, Special implementation of the {@link UnivariateRealOptimizer} interface adding
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,30, multi-start features to an existing optimizer.
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,31, <p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,32, This class wraps a classical optimizer to use it several times in
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,33, turn with different starting points in order to avoid being trapped
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,34, into a local extremum when looking for a global one.
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,35, </p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,36, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,37, @since 2.0
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,39,ublic class MultiStartUnivariateRealOptimizer implements UnivariateRealOptimizer {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,41,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,42,rivate static final long serialVersionUID = 5983375963110961019L;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,44,** Underlying classical optimizer. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,45,rivate final UnivariateRealOptimizer optimizer;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,47,** Maximal number of iterations allowed. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,48,rivate int maxIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,50,** Maximal number of evaluations allowed. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,51,rivate int maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,53,** Number of iterations already performed for all starts. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,54,rivate int totalIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,56,** Number of evaluations already performed for all starts. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,57,rivate int totalEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,59,** Number of starts to go. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,60,rivate int starts;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,62,** Random generator for multi-start. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,63,rivate RandomGenerator generator;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,65,** Found optima. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,66,rivate double[] optima;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,68,** Found function values at optima. */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,69,rivate double[] optimaValues;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,72, Create a multi-start optimizer from a single-start optimizer
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,73, @param optimizer single-start optimizer to wrap
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,74, @param starts number of starts to perform (including the
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,75," first one), multi-start is disabled if value is less than or"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,76, equal to 1
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,77, @param generator random generator to use for restarts
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,79,"ublic MultiStartUnivariateRealOptimizer(final UnivariateRealOptimizer optimizer,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,80,"inal int starts,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,81,inal RandomGenerator generator) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,82,his.optimizer        = optimizer;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,83,his.totalIterations  = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,84,his.starts           = starts;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,85,his.generator        = generator;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,86,his.optima           = null;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,87,etMaximalIterationCount(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,88,etMaxEvaluations(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,91,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,92,ublic double getFunctionValue() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,93,eturn optimaValues[0];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,96,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,97,ublic double getResult() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,98,eturn optima[0];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,101,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,102,ublic double getAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,103,eturn optimizer.getAbsoluteAccuracy();
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,106,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,107,ublic int getIterationCount() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,108,eturn totalIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,111,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,112,ublic int getMaximalIterationCount() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,113,eturn maxIterations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,116,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,117,ublic int getMaxEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,118,eturn maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,121,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,122,ublic int getEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,123,eturn totalEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,126,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,127,ublic double getRelativeAccuracy() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,128,eturn optimizer.getRelativeAccuracy();
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,131,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,132,ublic void resetAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,133,ptimizer.resetAbsoluteAccuracy();
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,136,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,137,ublic void resetMaximalIterationCount() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,138,ptimizer.resetMaximalIterationCount();
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,141,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,142,ublic void resetRelativeAccuracy() {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,143,ptimizer.resetRelativeAccuracy();
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,146,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,147,ublic void setAbsoluteAccuracy(double accuracy) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,148,ptimizer.setAbsoluteAccuracy(accuracy);
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,151,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,152,ublic void setMaximalIterationCount(int count) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,153,his.maxIterations = count;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,156,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,157,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,158,his.maxEvaluations = maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,161,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,162,ublic void setRelativeAccuracy(double accuracy) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,163,ptimizer.setRelativeAccuracy(accuracy);
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,166,** Get all the optima found during the last call to {@link
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,167," #optimize(UnivariateRealFunction, GoalType, double, double) optimize}."
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,168, <p>The optimizer stores all the optima found during a set of
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,169," restarts. The {@link #optimize(UnivariateRealFunction, GoalType,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,170," double, double) optimize} method returns the best point only. This"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,171," method returns all the points found at the end of each starts,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,172, including the best one already returned by the {@link
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,173," #optimize(UnivariateRealFunction, GoalType, double, double) optimize}"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,174, method.
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,175, </p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,176, <p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,177, The returned array as one element for each start as specified
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,178, in the constructor. It is ordered with the results from the
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,179," runs that did converge first, sorted from best to worst"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,180, objective value (i.e in ascending order if minimizing and in
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,181," descending order if maximizing), followed by Double.NaN elements"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,182, corresponding to the runs that did not converge. This means all
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,183," elements will be NaN if the {@link #optimize(UnivariateRealFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,184," GoalType, double, double) optimize} method did throw a {@link"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,185, ConvergenceException ConvergenceException}). This also means that
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,186," if the first element is not NaN, it is the best point found across"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,187, all starts.</p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,188, @return array containing the optima
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,189," @exception IllegalStateException if {@link #optimize(UnivariateRealFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,190," GoalType, double, double) optimize} has not been called"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,191, @see #getOptimaValues()
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,193,ublic double[] getOptima() throws IllegalStateException {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,194,f (optima == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,195,hrow MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,197,eturn optima.clone();
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,200,** Get all the function values at optima found during the last call to {@link
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,201," #optimize(UnivariateRealFunction, GoalType, double, double) optimize}."
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,202, <p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,203, The returned array as one element for each start as specified
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,204, in the constructor. It is ordered with the results from the
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,205," runs that did converge first, sorted from best to worst"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,206, objective value (i.e in ascending order if minimizing and in
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,207," descending order if maximizing), followed by Double.NaN elements"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,208, corresponding to the runs that did not converge. This means all
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,209," elements will be NaN if the {@link #optimize(UnivariateRealFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,210," GoalType, double, double) optimize} method did throw a {@link"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,211, ConvergenceException ConvergenceException}). This also means that
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,212," if the first element is not NaN, it is the best point found across"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,213, all starts.</p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,214, @return array containing the optima
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,215," @exception IllegalStateException if {@link #optimize(UnivariateRealFunction,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,216," GoalType, double, double) optimize} has not been called"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,217, @see #getOptima()
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,219,ublic double[] getOptimaValues() throws IllegalStateException {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,220,f (optimaValues == null) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,221,hrow MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,223,eturn optimaValues.clone();
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,226,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,227,"ublic double optimize(final UnivariateRealFunction f, final GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,228,"inal double min, final double max)"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,229,"hrows ConvergenceException,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,230,unctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,232,ptima           = new double[starts];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,233,ptimaValues     = new double[starts];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,234,otalIterations  = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,235,otalEvaluations = 0;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,237,/ multi-start loop
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,238,or (int i = 0; i < starts; ++i) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,240,ry {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,241,ptimizer.setMaximalIterationCount(maxIterations - totalIterations);
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,242,ptimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,243,inal double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,244,inal double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,245,"ptima[i]       = optimizer.optimize(f, goalType,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,246,"astMath.min(bound1, bound2),"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,247,"astMath.max(bound1, bound2));"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,248,ptimaValues[i] = optimizer.getFunctionValue();
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,249, catch (FunctionEvaluationException fee) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,250,ptima[i]       = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,251,ptimaValues[i] = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,252, catch (ConvergenceException ce) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,253,ptima[i]       = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,254,ptimaValues[i] = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,257,otalIterations  += optimizer.getIterationCount();
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,258,otalEvaluations += optimizer.getEvaluations();
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,262,"/ sort the optima from best to worst, followed by NaN elements"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,263,nt lastNaN = optima.length;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,264,or (int i = 0; i < lastNaN; ++i) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,265,f (Double.isNaN(optima[i])) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,266,ptima[i] = optima[--lastNaN];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,267,ptima[lastNaN + 1] = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,268,ptimaValues[i] = optimaValues[--lastNaN];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,269,ptimaValues[lastNaN + 1] = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,273,ouble currX = optima[0];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,274,ouble currY = optimaValues[0];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,275,or (int j = 1; j < lastNaN; ++j) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,276,inal double prevY = currY;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,277,urrX = optima[j];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,278,urrY = optimaValues[j];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,279,f ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY)) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,280,/ the current element should be inserted closer to the beginning
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,281,nt i = j - 1;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,282,ouble mIX = optima[i];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,283,ouble mIY = optimaValues[i];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,284,hile ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,285,ptima[i + 1]       = mIX;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,286,ptimaValues[i + 1] = mIY;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,287,f (i-- != 0) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,288,IX = optima[i];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,289,IY = optimaValues[i];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,290, else {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,291,IX = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,292,IY = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,295,ptima[i + 1]       = currX;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,296,ptimaValues[i + 1] = currY;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,297,urrX = optima[j];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,298,urrY = optimaValues[j];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,302,f (Double.isNaN(optima[0])) {
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,303,hrow new OptimizationException(
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,304,"ocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,305,tarts);
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,308,/ return the found point given the best objective function value
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,309,eturn optima[0];
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,313,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,314,"ublic double optimize(final UnivariateRealFunction f, final GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,315,"inal double min, final double max, final double startValue)"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,316,"hrows ConvergenceException, FunctionEvaluationException {"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,317,"eturn optimize(f, goalType, min, max);"
True,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,35,* @deprecated To be removed in 3.0.
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,20,mport org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,21,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,24, Simple implementation of the {@link RealConvergenceChecker} interface using
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,25,* Simple implementation of the {@link ConvergenceChecker} interface using
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,26, <p>
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,31, </p>
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,33, @since 2.0
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,34,* @since 3.0
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,35,ublic class SimpleRealPointChecker implements RealConvergenceChecker {
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,37,** Default relative threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,38,rivate static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,40,** Default absolute threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,41,rivate static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,43,** Relative tolerance threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,44,rivate final double relativeThreshold;
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,46,** Absolute tolerance threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,47,rivate final double absoluteThreshold;
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,49,** Build an instance with default threshold.
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,36,public class SimpleRealPointChecker
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,37,extends AbstractConvergenceChecker<RealPointValuePair> {
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,39,* Build an instance with default threshold.
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,51,ublic SimpleRealPointChecker() {
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,52,his.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,53,his.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,41,public SimpleRealPointChecker() {}
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,56,** Build an instance with a specified threshold.
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,57, <p>
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,44,* Build an instance with specified thresholds.
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,61, </p>
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,66,inal double absoluteThreshold) {
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,67,his.relativeThreshold = relativeThreshold;
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,68,his.absoluteThreshold = absoluteThreshold;
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,53,final double absoluteThreshold) {
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,54,"super(relativeThreshold, absoluteThreshold);"
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,71,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,58,* Check if the optimization algorithm has converged considering the
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,59,* last two points.
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,60,* This method may be called several time from the same algorithm
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,61,* iteration with different points. This can be detected by checking the
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,62,* iteration number at each call if needed. Each time this method is
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,63,"* called, the previous and current point correspond to points with the"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,64,"* same role at each iteration, so they can be compared. As an example,"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,65,"* simplex-based algorithms call this method for all points of the simplex,"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,66,* not only for the best or worst ones.
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,68,* @param iteration Index of current iteration
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,69,* @param points Points used for checking convergence. The list must
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,70,* contain two elements:
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,71,* <ul>
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,72,"*  <li>the previous best point,</li>"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,73,*  <li>the current best point.</li>
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,74,* </ul>
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,75,* @return {@code true} if the algorithm has converged.
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,76,* @throws DimensionMismatchException if the length of the {@code points}
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,77,* list is not equal to 2.
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,73,"inal RealPointValuePair previous,"
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,74,inal RealPointValuePair current) {
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,75,inal double[] p        = previous.getPoint();
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,76,inal double[] c        = current.getPoint();
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,80,final RealPointValuePair ... points) {
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,81,if (points.length != 2) {
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,82,"throw new DimensionMismatchException(points.length, 2);"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,85,final double[] p = points[0].getPoint();
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,86,final double[] c = points[1].getPoint();
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,79,"inal double size       = FastMath.max(FastMath.abs(p[i]), FastMath.abs(c[i]));"
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,80,f ((difference > (size * relativeThreshold)) && (difference > absoluteThreshold)) {
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,89,"final double size = FastMath.max(FastMath.abs(p[i]), FastMath.abs(c[i]));"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,90,if (difference > size * getRelativeThreshold() &&
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,91,difference > getAbsoluteThreshold()) {
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,20,mport org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,21,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,24, Simple implementation of the {@link RealConvergenceChecker} interface using
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,25,* Simple implementation of the {@link ConvergenceChecker} interface using
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,26, <p>
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,31, </p>
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,33, @since 2.0
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,34,* @since 3.0
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,35,ublic class SimpleScalarValueChecker implements RealConvergenceChecker {
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,37,** Default relative threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,38,rivate static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,40,** Default absolute threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,41,rivate static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,43,** Relative tolerance threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,44,rivate final double relativeThreshold;
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,46,** Absolute tolerance threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,47,rivate final double absoluteThreshold;
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,49,** Build an instance with default threshold.
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,36,public class SimpleScalarValueChecker
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,37,extends AbstractConvergenceChecker<RealPointValuePair> {
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,39,* Build an instance with default thresholds.
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,51,ublic SimpleScalarValueChecker() {
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,52,his.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,53,his.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,41,public SimpleScalarValueChecker() {}
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,56,** Build an instance with a specified threshold.
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,57, <p>
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,43,/** Build an instance with specified thresholds.
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,61, </p>
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,67,his.relativeThreshold = relativeThreshold;
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,68,his.absoluteThreshold = absoluteThreshold;
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,54,"super(relativeThreshold, absoluteThreshold);"
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,71,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,58,* Check if the optimization algorithm has converged considering the
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,59,* last two points.
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,60,* This method may be called several time from the same algorithm
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,61,* iteration with different points. This can be detected by checking the
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,62,* iteration number at each call if needed. Each time this method is
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,63,"* called, the previous and current point correspond to points with the"
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,64,"* same role at each iteration, so they can be compared. As an example,"
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,65,"* simplex-based algorithms call this method for all points of the simplex,"
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,66,* not only for the best or worst ones.
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,68,* @param iteration Index of current iteration
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,69,* @param points Points used for checking convergence. The list must
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,70,* contain two elements:
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,71,* <ul>
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,72,"*  <li>the previous best point,</li>"
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,73,*  <li>the current best point.</li>
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,74,* </ul>
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,75,* @return {@code true} if the algorithm has converged.
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,76,* @throws DimensionMismatchException if the length of the {@code points}
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,77,* list is not equal to 2.
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,73,"inal RealPointValuePair previous,"
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,74,inal RealPointValuePair current) {
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,75,inal double p          = previous.getValue();
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,76,inal double c          = current.getValue();
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,80,final RealPointValuePair ... points) {
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,81,if (points.length != 2) {
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,82,"throw new DimensionMismatchException(points.length, 2);"
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,85,final double p = points[0].getValue();
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,86,final double c = points[1].getValue();
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,78,"inal double size       = FastMath.max(FastMath.abs(p), FastMath.abs(c));"
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,79,eturn (difference <= (size * relativeThreshold)) || (difference <= absoluteThreshold);
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,88,"final double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));"
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,89,return (difference <= size * getRelativeThreshold() ||
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,90,difference <= getAbsoluteThreshold());
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,20,mport org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,21,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,24, Simple implementation of the {@link VectorialConvergenceChecker} interface using
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,24,* Simple implementation of the {@link ConvergenceChecker} interface using
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,26, <p>
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,31, </p>
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,33, @since 2.0
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,33,* @since 3.0
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,35,ublic class SimpleVectorialPointChecker implements VectorialConvergenceChecker {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,37,** Default relative threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,38,rivate static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,40,** Default absolute threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,41,rivate static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,43,** Relative tolerance threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,44,rivate final double relativeThreshold;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,46,** Absolute tolerance threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,47,rivate final double absoluteThreshold;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,49,** Build an instance with default threshold.
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,35,public class SimpleVectorialPointChecker
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,36,extends AbstractConvergenceChecker<VectorialPointValuePair> {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,38,* Build an instance with default threshold.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,51,ublic SimpleVectorialPointChecker() {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,52,his.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,53,his.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,40,public SimpleVectorialPointChecker() {}
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,56,** Build an instance with a specified threshold.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,57, <p>
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,43,* Build an instance with a specified threshold.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,61, </p>
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,67,his.relativeThreshold = relativeThreshold;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,68,his.absoluteThreshold = absoluteThreshold;
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,54,"super(relativeThreshold, absoluteThreshold);"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,71,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,58,* Check if the optimization algorithm has converged considering the
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,59,* last two points.
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,60,* This method may be called several time from the same algorithm
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,61,* iteration with different points. This can be detected by checking the
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,62,* iteration number at each call if needed. Each time this method is
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,63,"* called, the previous and current point correspond to points with the"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,64,"* same role at each iteration, so they can be compared. As an example,"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,65,"* simplex-based algorithms call this method for all points of the simplex,"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,66,* not only for the best or worst ones.
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,68,* @param iteration Index of current iteration
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,69,* @param points Points used for checking convergence. The list must
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,70,* contain two elements:
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,71,* <ul>
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,72,"*  <li>the previous best point,</li>"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,73,*  <li>the current best point.</li>
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,74,* </ul>
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,75,* @return {@code true} if the algorithm has converged.
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,76,* @throws DimensionMismatchException if the length of the {@code points}
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,77,* list is not equal to 2.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,73,"inal VectorialPointValuePair previous,"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,74,inal VectorialPointValuePair current) {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,75,inal double[] p = previous.getPointRef();
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,76,inal double[] c = current.getPointRef();
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,80,final VectorialPointValuePair ... points) {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,81,if (points.length != 2) {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,82,"throw new DimensionMismatchException(points.length, 2);"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,85,final double[] p = points[0].getPointRef();
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,86,final double[] c = points[1].getPointRef();
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,78,inal double pi         = p[i];
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,79,inal double ci         = c[i];
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,80,inal double difference = FastMath.abs(pi - ci);
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,81,"inal double size       = FastMath.max(FastMath.abs(pi), FastMath.abs(ci));"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,82,f ((difference > (size * relativeThreshold)) &&
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,83,difference > absoluteThreshold)) {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,88,final double pi = p[i];
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,89,final double ci = c[i];
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,90,final double difference = Math.abs(pi - ci);
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,91,"final double size = Math.max(Math.abs(pi), Math.abs(ci));"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,92,if (difference > size * getRelativeThreshold() &&
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,93,difference > getAbsoluteThreshold()) {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,24, Simple implementation of the {@link VectorialConvergenceChecker} interface using
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,25,* Simple implementation of the {@link ConvergenceChecker} interface using
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,26, <p>
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,31, </p>
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,33, @since 2.0
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,34,* @since 3.0
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,35,ublic class SimpleVectorialValueChecker implements VectorialConvergenceChecker {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,37,** Default relative threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,38,rivate static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,40,** Default absolute threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,41,rivate static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,43,** Relative tolerance threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,44,rivate final double relativeThreshold;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,46,** Absolute tolerance threshold. */
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,47,rivate final double absoluteThreshold;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,49,** Build an instance with default threshold.
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,36,public class SimpleVectorialValueChecker
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,37,extends AbstractConvergenceChecker<VectorialPointValuePair> {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,39,* Build an instance with default thresholds.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,51,ublic SimpleVectorialValueChecker() {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,52,his.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,53,his.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,41,public SimpleVectorialValueChecker() {}
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,56,** Build an instance with a specified threshold.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,57, <p>
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,44,* Build an instance with specified thresholds.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,61, </p>
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,67,his.relativeThreshold = relativeThreshold;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,68,his.absoluteThreshold = absoluteThreshold;
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,55,"super(relativeThreshold, absoluteThreshold);"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,71,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,59,* Check if the optimization algorithm has converged considering the
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,60,* last two points.
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,61,* This method may be called several time from the same algorithm
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,62,* iteration with different points. This can be detected by checking the
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,63,* iteration number at each call if needed. Each time this method is
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,64,"* called, the previous and current point correspond to points with the"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,65,"* same role at each iteration, so they can be compared. As an example,"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,66,"* simplex-based algorithms call this method for all points of the simplex,"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,67,* not only for the best or worst ones.
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,69,* @param iteration Index of current iteration
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,70,* @param points Points used for checking convergence. The list must
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,71,* contain two elements:
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,72,* <ul>
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,73,"*  <li>the previous best point,</li>"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,74,*  <li>the current best point.</li>
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,75,* </ul>
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,76,* @return {@code true} if the algorithm has converged.
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,77,* @throws DimensionMismatchException if the length of the {@code points}
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,78,* list is not equal to 2.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,73,"inal VectorialPointValuePair previous,"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,74,inal VectorialPointValuePair current) {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,75,inal double[] p        = previous.getValueRef();
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,76,inal double[] c        = current.getValueRef();
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,81,final VectorialPointValuePair ... points) {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,82,if (points.length != 2) {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,83,"throw new DimensionMismatchException(points.length, 2);"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,86,final double[] p = points[0].getValueRef();
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,87,final double[] c = points[1].getValueRef();
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,82,f ((difference > (size * relativeThreshold)) &&
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,83,difference > absoluteThreshold)) {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,93,if (difference > size * getRelativeThreshold() &&
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,94,difference > getAbsoluteThreshold()) {
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,17,ackage org.apache.commons.math.optimization;
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,19,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,20,mport org.apache.commons.math.ConvergingAlgorithm;
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,21,mport org.apache.commons.math.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,22,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,26, Interface for (univariate real) optimization algorithms.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,28, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,29, @since 2.0
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,31,ublic interface UnivariateRealOptimizer extends ConvergingAlgorithm {
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,33,** Set the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,34, @param maxEvaluations maximal number of function evaluations
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,36,oid setMaxEvaluations(int maxEvaluations);
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,38,** Get the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,39, @return the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,41,nt getMaxEvaluations();
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,43,** Get the number of evaluations of the objective function.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,44, <p>
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,45, The number of evaluations corresponds to the last call to the
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,46," {@link #optimize(UnivariateRealFunction, GoalType, double, double) optimize}"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,47, method. It is 0 if the method has not been called yet.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,48, </p>
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,49, @return the number of evaluations of the objective function.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,51,nt getEvaluations();
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,54, Find an optimum in the given interval.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,55, <p>
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,56, An optimizer may require that the interval brackets a single optimum.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,57, </p>
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,58, @param f the function to optimize.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,59, @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,60, or {@link GoalType#MINIMIZE}.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,61, @param min the lower bound for the interval.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,62, @param max the upper bound for the interval.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,63, @return a value where the function is optimum.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,64, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,65, or the optimizer detects convergence problems otherwise.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,66, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,67, function.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,68, @throws IllegalArgumentException if min > max or the endpoints do not
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,69, satisfy the requirements specified by the optimizer.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,71,"ouble optimize(UnivariateRealFunction f, GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,72,"ouble min, double max)"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,73,"hrows ConvergenceException, FunctionEvaluationException;"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,76," Find an optimum in the given interval, start at startValue."
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,77, <p>
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,78, An optimizer may require that the interval brackets a single optimum.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,79, </p>
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,80, @param f the function to optimize.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,81, @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,82, or {@link GoalType#MINIMIZE}.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,83, @param min the lower bound for the interval.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,84, @param max the upper bound for the interval.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,85, @param startValue the start value to use.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,86, @return a value where the function is optimum.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,87, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,88, or the optimizer detects convergence problems otherwise.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,89, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,90, function.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,91, @throws IllegalArgumentException if min > max or the arguments do not
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,92, satisfy the requirements specified by the optimizer.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,94,"ouble optimize(UnivariateRealFunction f, GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,95,"ouble min, double max, double startValue)"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,96,"hrows ConvergenceException, FunctionEvaluationException;"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,99, Get the result of the last run of the optimizer.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,101, @return the optimum.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,102," @throws IllegalStateException if there is no result available, either"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,103, because no result was yet computed or the last attempt failed.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,105,ouble getResult();
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,108, Get the result of the last run of the optimizer.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,110, @return the value of the function at the optimum.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,111," @throws IllegalStateException if there is no result available, either"
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,112, because no result was yet computed or the last attempt failed.
False,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,114,ouble getFunctionValue();
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,25,mport org.apache.commons.math.MaxEvaluationsExceededException;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,26,mport org.apache.commons.math.MaxIterationsExceededException;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,25,import org.apache.commons.math.util.Incrementor;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,27,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,28,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,29,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,32,mport org.apache.commons.math.optimization.RealConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,34,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,37,import org.apache.commons.math.optimization.general.AbstractScalarOptimizer;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,70," <p>If {@link #setConvergenceChecker(RealConvergenceChecker)} is not called,"
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,73,"* <p>If {@link #setConvergenceChecker(ConvergenceChecker)} is not called,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,89,ublic abstract class DirectSearchOptimizer implements MultivariateRealOptimizer {
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,92,public abstract class DirectSearchOptimizer
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,93,extends AbstractScalarOptimizer
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,94,implements MultivariateRealOptimizer {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,94,** Objective function. */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,95,rivate MultivariateRealFunction f;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,97,** Convergence checker. */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,98,rivate RealConvergenceChecker checker;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,100,** Maximal number of iterations allowed. */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,101,rivate int maxIterations;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,103,** Number of iterations already performed. */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,104,rivate int iterations;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,106,** Maximal number of evaluations allowed. */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,107,rivate int maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,109,** Number of evaluations already performed. */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,110,rivate int evaluations;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,115,** Simple constructor.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,101,* Default constructor.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,119,etMaxIterations(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,120,etMaxEvaluations(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,123,** Set start configuration for simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,108,* Set start configuration for simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,135," @param steps steps along the canonical axes representing box edges,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,136, they may be negative but not null
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,137, @exception IllegalArgumentException if one step is null
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,122,* @param steps Steps along the canonical axes representing box edges. They
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,123,* may be negative but not zero.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,124,* @throws IllegalArgumentException if one step is zero.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,157,** Set start configuration for simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,158, <p>The real initial simplex will be set up by moving the reference
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,145,* Set start configuration for simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,146,* The real initial simplex will be set up by moving the reference
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,160, optimization.</p>
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,161, @param referenceSimplex reference simplex
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,162, @exception IllegalArgumentException if the reference simplex does not
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,148,* optimization.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,150,* @param referenceSimplex Reference simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,151,* @throws IllegalArgumentException if the reference simplex does not
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,164, in the reference simplex or if one of its vertices is duplicated
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,153,* in the reference simplex or if one of its vertices is duplicated.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,186,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,187,"ocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, refI.length, n);"
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,175,"throw new DimensionMismatchException(refI.length, n);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,216,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,217,ublic void setMaxIterations(int maxIterations) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,218,his.maxIterations = maxIterations;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,221,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,222,ublic int getMaxIterations() {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,223,eturn maxIterations;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,226,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,227,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,228,his.maxEvaluations = maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,231,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,232,ublic int getMaxEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,233,eturn maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,236,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,237,ublic int getIterations() {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,238,eturn iterations;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,241,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,242,ublic int getEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,243,eturn evaluations;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,246,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,247,ublic void setConvergenceChecker(RealConvergenceChecker convergenceChecker) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,248,his.checker = convergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,251,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,252,ublic RealConvergenceChecker getConvergenceChecker() {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,253,eturn checker;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,257,"ublic RealPointValuePair optimize(final MultivariateRealFunction function,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,258,"inal GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,259,inal double[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,260,"hrows FunctionEvaluationException, OptimizationException,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,261,llegalArgumentException {
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,203,protected RealPointValuePair doOptimize()
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,204,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,206,final double[] startPoint = getStartPoint();
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,265,/ no initial configuration has been set up for simplex
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,266,/ build a default one from a unit hypercube
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,209,// No initial configuration has been set up for simplex
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,210,// build a default one from a unit hypercube.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,216,final boolean isMinim = (getGoalType() == GoalType.MINIMIZE);
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,217,final Comparator<RealPointValuePair> comparator
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,218,= new Comparator<RealPointValuePair>() {
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,219,"public int compare(final RealPointValuePair o1,"
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,220,final RealPointValuePair o2) {
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,221,final double v1 = o1.getValue();
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,222,final double v2 = o2.getValue();
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,223,"return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,272,his.f = function;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,273,inal Comparator<RealPointValuePair> comparator =
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,274,ew Comparator<RealPointValuePair>() {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,275,"ublic int compare(final RealPointValuePair o1,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,276,inal RealPointValuePair o2) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,277,inal double v1 = o1.getValue();
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,278,inal double v2 = o2.getValue();
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,279,eturn (goalType == GoalType.MINIMIZE) ?
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,280,"ouble.compare(v1, v2) : Double.compare(v2, v1);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,284,/ initialize search
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,285,terations  = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,286,valuations = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,227,// Initialize search.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,232,int iteration = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,233,final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,293,f (iterations > 0) {
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,235,if (iteration > 0) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,296,"onverged &= checker.converged(iterations, previous[i], simplex[i]);"
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,238,"converged &= checker.converged(iteration, previous[i], simplex[i]);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,304,/ we still need to search
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,246,// We still need to search.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,249,++iteration;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,312,** Increment the iterations counter by 1.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,313, @exception OptimizationException if the maximal number
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,314, of iterations is exceeded
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,316,rotected void incrementIterationsCounter()
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,317,hrows OptimizationException {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,318,f (++iterations > maxIterations) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,319,hrow new OptimizationException(new MaxIterationsExceededException(maxIterations));
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,323,** Compute the next simplex of the algorithm.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,324, @param comparator comparator to use to sort simplex vertices from best to worst
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,325, @exception FunctionEvaluationException if the function cannot be evaluated at
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,326, some point
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,327, @exception OptimizationException if the algorithm fails to converge
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,328, @exception IllegalArgumentException if the start point dimension is wrong
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,254,* Compute the next simplex of the algorithm.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,256,* @param comparator Comparator to use to sort simplex vertices from best to worst.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,257,* @throws FunctionEvaluationException if the function cannot be evaluated at
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,258,* some point.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,259,* @throws TooManyEvaluationsException if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,260,* @throws DimensionMismatchException if the start point dimension is wrong.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,331,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,333,** Evaluate the objective function on one point.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,334, <p>A side effect of this method is to count the number of
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,335, function evaluations</p>
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,336, @param x point on which the objective function should be evaluated
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,337, @return objective function value at the given point
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,338, @exception FunctionEvaluationException if no value can be computed for the
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,339, parameters or if the maximal number of evaluations is exceeded
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,340, @exception IllegalArgumentException if the start point dimension is wrong
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,263,throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,266,* Build an initial simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,268,* @param startPoint Start point for optimization.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,269,* @throws DimensionMismatchException if the start point does not match
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,270,* simplex dimension.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,342,rotected double evaluate(final double[] x)
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,343,"hrows FunctionEvaluationException, IllegalArgumentException {"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,344,f (++evaluations > maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,345,"hrow new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,346,);
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,348,eturn f.value(x);
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,351,** Build an initial simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,352, @param startPoint the start point for optimization
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,353, @exception IllegalArgumentException if the start point does not match
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,354, simplex dimension
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,356,rivate void buildSimplex(final double[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,357,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,272,private void buildSimplex(final double[] startPoint) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,361,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,362,"ocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, n, startConfiguration.length);"
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,276,"throw new DimensionMismatchException(n, startConfiguration.length);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,371,inal double[] confI   = startConfiguration[i];
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,285,final double[] confI = startConfiguration[i];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,381,** Evaluate all the non-evaluated points of the simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,382, @param comparator comparator to use to sort simplex vertices from best to worst
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,383, @exception FunctionEvaluationException if no value can be computed for the parameters
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,384, @exception OptimizationException if the maximal number of evaluations is exceeded
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,295,* Evaluate all the non-evaluated points of the simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,297,* @param comparator Comparator to use to sort simplex vertices from best to worst.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,298,* @throws FunctionEvaluationException if no value can be computed for the parameters.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,299,* @throws TooManyEvaluationsException if the maximal number of evaluations is exceeded.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,387,"hrows FunctionEvaluationException, OptimizationException {"
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,302,throws FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,389,/ evaluate the objective function at all non-evaluated simplex points
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,304,// Evaluate the objective function at all non-evaluated simplex points.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,394,"implex[i] = new RealPointValuePair(point, evaluate(point), false);"
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,309,"simplex[i] = new RealPointValuePair(point, computeObjectiveValue(point), false);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,398,/ sort the simplex from best to worst
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,313,// Sort the simplex from best to worst.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,403,** Replace the worst point of the simplex by a new point.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,404, @param pointValuePair point to insert
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,405, @param comparator comparator to use to sort simplex vertices from best to worst
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,318,* Replace the worst point of the simplex by a new point.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,320,* @param pointValuePair Point to insert.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,321,* @param comparator Comparator to use to sort simplex vertices from best to worst.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,413,implex[i]         = pointValuePair;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,414,ointValuePair     = tmp;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,329,simplex[i] = pointValuePair;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,330,pointValuePair = tmp;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,23,mport org.apache.commons.math.optimization.OptimizationException;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,24,mport org.apache.commons.math.optimization.RealConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,23,import org.apache.commons.math.optimization.ConvergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,62,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,61,throws FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,64,inal RealConvergenceChecker checker = getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,63,final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,64,int iteration = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,66,++iteration;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,67,ncrementIterationsCounter();
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,69,/ save the original vertex
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,68,// Save the original vertex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,73,/ perform a reflection step
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,72,// Perform a reflection step.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,77,/ compute the expanded simplex
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,76,// Compute the expanded simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,81,/ accept the reflected simplex
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,80,// Accept the reflected simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,89,/ compute the contracted simplex
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,87,// Compute the contracted simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,92,/ accept the contracted simplex
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,90,// Accept the contracted simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,96,/ check convergence
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,97,inal int iter = getIterations();
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,94,// Check convergence.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,100,"onverged &= checker.converged(iter, original[i], simplex[i]);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,97,"converged &= checker.converged(iteration, original[i], simplex[i]);"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,110,** Compute and evaluate a new simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,111, @param original original simplex (to be preserved)
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,112, @param coeff linear coefficient
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,113, @param comparator comparator to use to sort simplex vertices from best to poorest
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,114, @return best point in the transformed simplex
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,115, @exception FunctionEvaluationException if the function cannot be evaluated at
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,116, some point
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,117, @exception OptimizationException if the maximal number of evaluations is exceeded
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,106,* Compute and evaluate a new simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,108,* @param original Original simplex (to be preserved).
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,109,* @param coeff Linear coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,110,* @param comparator Comparator to use to sort simplex vertices from best
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,111,* to poorest.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,112,* @return the best point in the transformed simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,113,* @exception FunctionEvaluationException if the function cannot be
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,114,* evaluated at some point.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,115,* @exception TooManyEvaluationsException if the maximal number of
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,116,* evaluations is exceeded.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,122,"hrows FunctionEvaluationException, OptimizationException {"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,121,throws FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,127,/ create the linearly transformed simplex
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,126,// Create the linearly transformed simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,139,/ evaluate it
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,138,// Evaluate the simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,23,mport org.apache.commons.math.optimization.OptimizationException;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,75,"hrows FunctionEvaluationException, OptimizationException {"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,77,ncrementIterationsCounter();
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,74,throws FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,107,"inal RealPointValuePair reflected = new RealPointValuePair(xR, evaluate(xR), false);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,104,final RealPointValuePair reflected
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,105,"= new RealPointValuePair(xR, computeObjectiveValue(xR), false);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,122,"inal RealPointValuePair expanded = new RealPointValuePair(xE, evaluate(xE), false);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,120,final RealPointValuePair expanded
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,121,"= new RealPointValuePair(xE, computeObjectiveValue(xE), false);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,141,"inal RealPointValuePair outContracted = new RealPointValuePair(xC, evaluate(xC), false);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,140,final RealPointValuePair outContracted
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,141,"= new RealPointValuePair(xC, computeObjectiveValue(xC), false);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,156,"inal RealPointValuePair inContracted = new RealPointValuePair(xC, evaluate(xC), false);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,156,final RealPointValuePair inContracted
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,157,"= new RealPointValuePair(xC, computeObjectiveValue(xC), false);"
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,27,mport org.apache.commons.math.optimization.OptimizationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,123, @exception OptimizationException if the algorithm failed to converge
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,124, @exception IllegalArgumentException if the start point dimension is wrong
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,122,* @exception ConvergenceException if the algorithm failed to converge
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,123,* @exception IllegalArgumentException if the start point dimension is wrong.
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,128,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,127,throws FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,24,mport org.apache.commons.math.optimization.OptimizationException;
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,24,import org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,72, @exception OptimizationException if the algorithm failed to converge
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,72,* @exception ConvergenceException if the algorithm failed to converge
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,74,ublic PolynomialFunction fit()
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,75,hrows OptimizationException {
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,74,public PolynomialFunction fit() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,21,mport org.apache.commons.math.MaxEvaluationsExceededException;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,22,mport org.apache.commons.math.MaxIterationsExceededException;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,21,import org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,30,mport org.apache.commons.math.optimization.OptimizationException;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,32,mport org.apache.commons.math.optimization.VectorialConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,30,import org.apache.commons.math.optimization.ConvergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,39, <p>This base class handles the boilerplate methods associated to thresholds
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,40," settings, jacobian and error estimation.</p>"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,37,"* It handles the boilerplate methods associated to thresholds settings,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,38,* jacobian and error estimation.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,45,ublic abstract class AbstractLeastSquaresOptimizer implements DifferentiableMultivariateVectorialOptimizer {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,47,** Default maximal number of iterations allowed. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,48,ublic static final int DEFAULT_MAX_ITERATIONS = 100;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,50,** Convergence checker. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,51,rotected VectorialConvergenceChecker checker;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,44,public abstract class AbstractLeastSquaresOptimizer
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,45,extends BaseAbstractVectorialOptimizer<DifferentiableMultivariateVectorialFunction>
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,46,implements DifferentiableMultivariateVectorialOptimizer {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,55, <p>This matrix is in canonical form just after the calls to
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,49,* This matrix is in canonical form just after the calls to
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,58, Levenberg-Marquardt optimizer} does this).</p>
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,52,* Levenberg-Marquardt optimizer} does this).
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,69, Target value for the objective functions at optimum.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,70, @since 2.1
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,72,rotected double[] targetValues;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,75, Weight for the least squares cost computation.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,76, @since 2.1
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,78,rotected double[] residualsWeights;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,63,/** Current residuals. */
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,64,protected double[] residuals;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,92,** Maximal number of iterations allowed. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,93,rivate int maxIterations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,95,** Number of iterations already performed. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,96,rivate int iterations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,98,** Maximal number of evaluations allowed. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,99,rivate int maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,101,** Number of evaluations already performed. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,102,rivate int objectiveEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,104,** Number of jacobian evaluations. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,105,rivate int jacobianEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,107,** Objective function. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,108,rivate DifferentiableMultivariateVectorialFunction function;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,71,/** Number of evaluations of the Jacobian. */
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,72,private int jacobianEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,113,** Simple constructor with default settings.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,114, <p>The convergence check is set to a {@link SimpleVectorialValueChecker}
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,115, and the maximal number of evaluation is set to its default value.</p>
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,75,* Simple constructor with default settings.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,76,* The convergence check is set to a {@link SimpleVectorialValueChecker}.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,117,rotected AbstractLeastSquaresOptimizer() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,118,etConvergenceChecker(new SimpleVectorialValueChecker());
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,119,etMaxIterations(DEFAULT_MAX_ITERATIONS);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,120,etMaxEvaluations(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,123,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,124,ublic void setMaxIterations(int maxIterations) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,125,his.maxIterations = maxIterations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,128,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,129,ublic int getMaxIterations() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,130,eturn maxIterations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,133,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,134,ublic int getIterations() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,135,eturn iterations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,138,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,139,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,140,his.maxEvaluations = maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,143,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,144,ublic int getMaxEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,145,eturn maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,148,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,149,ublic int getEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,150,eturn objectiveEvaluations;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,78,protected AbstractLeastSquaresOptimizer() {}
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,80,* @param checker Convergence checker.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,81,* @param maxEvaluations Maximal number of function evaluations.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,83,"protected AbstractLeastSquaresOptimizer(ConvergenceChecker<VectorialPointValuePair> checker,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,84,int maxEvaluations) {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,85,"super(checker, maxEvaluations);"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,153,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,89,* @return the number of evaluations of the Jacobian function.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,158,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,159,ublic void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,160,his.checker = convergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,163,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,164,ublic VectorialConvergenceChecker getConvergenceChecker() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,165,eturn checker;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,168,** Increment the iterations counter by 1.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,169, @exception OptimizationException if the maximal number
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,170, of iterations is exceeded
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,172,rotected void incrementIterationsCounter()
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,173,hrows OptimizationException {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,174,f (++iterations > maxIterations) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,175,hrow new OptimizationException(new MaxIterationsExceededException(maxIterations));
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,108,final double[] residualsWeights = getWeightRef();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,207,rotected void updateResidualsAndCost()
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,208,hrows FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,210,f (++objectiveEvaluations > maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,211,"hrow new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,212,oint);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,214,bjective = function.value(point);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,126,protected void updateResidualsAndCost() throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,127,objective = computeObjectiveValue(point);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,133,final double[] targetValues = getTargetRef();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,134,final double[] residualsWeights = getWeightRef();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,252,eturn cost*cost;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,168,return cost * cost;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,260, @exception OptimizationException if the covariance matrix
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,176,* @exception ConvergenceException if the covariance matrix
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,264,"hrows FunctionEvaluationException, OptimizationException {"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,180,throws FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,288,hrow new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,204,throw new ConvergenceException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,298, @exception OptimizationException if the covariances matrix cannot be computed
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,214,* @exception ConvergenceException if the covariances matrix cannot be computed
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,303,"hrows FunctionEvaluationException, OptimizationException {"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,219,throws FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,305,hrow new OptimizationException(
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,306,"ocalizedFormats.NO_DEGREES_OF_FREEDOM,"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,307,"ows, cols);"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,221,"throw new ConvergenceException(LocalizedFormats.NO_DEGREES_OF_FREEDOM,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,222,"rows, cols);"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,322,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,324,f (target.length != weights.length) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,325,"hrow new OptimizationException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,326,"arget.length, weights.length);"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,329,/ reset counters
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,330,terations           = 0;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,331,bjectiveEvaluations = 0;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,332,acobianEvaluations  = 0;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,237,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,238,// Reset counter.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,239,jacobianEvaluations = 0;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,334,/ store least squares problem characteristics
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,335,unction         = f;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,336,F               = f.jacobian();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,337,argetValues     = target.clone();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,338,esidualsWeights = weights.clone();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,339,his.point       = startPoint.clone();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,241,// Store least squares problem characteristics.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,242,jF = f.jacobian();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,243,this.residuals = new double[target.length];
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,341,/ arrays shared with the other private methods
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,342,ows      = target.length;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,343,ols      = point.length;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,245,// Arrays shared with the other private methods.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,246,point = startPoint.clone();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,247,rows = target.length;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,248,cols = point.length;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,350,eturn doOptimize();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,255,"return super.optimize(f, target, weights, startPoint);"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,354,** Perform the bulk of optimization algorithm.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,355, @return the point/value pair giving the optimal value for objective function
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,356, @exception FunctionEvaluationException if the objective function throws one during
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,357, the search
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,358, @exception OptimizationException if the algorithm failed to converge
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,359, @exception IllegalArgumentException if the start point dimension is wrong
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,361,rotected abstract VectorialPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,362,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,25,mport org.apache.commons.math.optimization.OptimizationException;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,26,mport org.apache.commons.math.optimization.RealConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,25,import org.apache.commons.math.optimization.ConvergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,41,** Convergence checker.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,42, @deprecated in 2.2 (to be removed in 3.0). Please use the accessor
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,43, {@link BaseAbstractScalarOptimizer#getConvergenceChecker()} instead.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,45,rotected RealConvergenceChecker checker;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,47, Type of optimization.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,48, @since 2.1
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,49, @deprecated in 2.2 (to be removed in 3.0). Please use the accessor
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,50, {@link BaseAbstractScalarOptimizer#getGoalType()} instead.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,52,rotected GoalType goal;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,53,** Current point set.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,54, @deprecated in 2.2 (to be removed in 3.0).
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,40,* Objective function gradient.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,56,rotected double[] point;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,58,** Number of gradient evaluations. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,59,rivate int gradientEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,61,** Objective function gradient. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,66," The convergence check is set to a {@link org.apache.commons.math.optimization.SimpleScalarValueChecker},"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,67, the allowed number of iterations and evaluations are set to their
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,68, default values.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,46,* The convergence check is set to a
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,47,* {@link org.apache.commons.math.optimization.SimpleScalarValueChecker
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,48,* SimpleScalarValueChecker}.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,73, @param maxIterations Maximum number of iterations.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,74, @param maxEvaluations Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,53,* @param maxEvaluations Maximum number of function evaluations.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,76,"rotected AbstractScalarDifferentiableOptimizer(RealConvergenceChecker checker,"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,77,"nt maxIterations,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,55,"protected AbstractScalarDifferentiableOptimizer(ConvergenceChecker<RealPointValuePair> checker,"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,79,"uper(checker, maxIterations, maxEvaluations);"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,80,his.checker = checker; // Do not use (deprecated).
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,83,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,84,ublic int getGradientEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,85,eturn gradientEvaluations;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,57,"super(checker, maxEvaluations);"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,90, @param evaluationPoint point at which the gradient must be evaluated
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,91, @return gradient at the specified point
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,92, @exception FunctionEvaluationException if the function gradient
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,63,* @param evaluationPoint Point at which the gradient must be evaluated.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,64,* @return the gradient at the specified point.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,65,* @throws FunctionEvaluationException if the function gradient cannot be
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,66,* evaluated.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,67,* @throws TooManyEvaluationsException if the allowed number of evaluations
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,68,* is exceeded.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,96,+gradientEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,104,"hrows FunctionEvaluationException,"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,105,ptimizationException {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,106,/ reset counters
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,107,radientEvaluations = 0;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,109,/ store optimization problem characteristics
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,79,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,80,// Store optimization problem characteristics.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,112,oal = goalType; // Do not use (deprecated).
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,113,oint = startPoint.clone(); // Do not use (deprecated).
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,22,mport org.apache.commons.math.optimization.RealConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,22,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,23,import org.apache.commons.math.optimization.RealPointValuePair;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,36," The convergence check is set to a {@link org.apache.commons.math.optimization.SimpleScalarValueChecker},"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,37, the allowed number of iterations and evaluations are set to their
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,38, default values.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,37,* The convergence check is set to a
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,38,* {@link org.apache.commons.math.optimization.SimpleScalarValueChecker}.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,43, @param maxIterations Maximum number of iterations.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,44, @param maxEvaluations Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,43,* @param maxEvaluations Maximum number of function evaluations.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,46,"rotected AbstractScalarOptimizer(RealConvergenceChecker checker,"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,47,"nt maxIterations,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,45,"protected AbstractScalarOptimizer(ConvergenceChecker<RealPointValuePair> checker,"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,49,"uper(checker, maxIterations, maxEvaluations);"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,47,"super(checker, maxEvaluations);"
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,21,mport org.apache.commons.math.MaxEvaluationsExceededException;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,22,mport org.apache.commons.math.MaxIterationsExceededException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,21,import org.apache.commons.math.util.Incrementor;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,22,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,23,import org.apache.commons.math.exception.TooManyEvaluationsException;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,27,mport org.apache.commons.math.optimization.RealConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,28,import org.apache.commons.math.optimization.ConvergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,47,** Default maximal number of iterations allowed ({@value}). */
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,48,ublic static final int DEFAULT_MAX_ITERATIONS = 1000;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,49,** Default maximal number of iterations allowed ({@value}). */
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,50,ublic static final int DEFAULT_MAX_EVALUATIONS = 10000;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,49,/** Evaluations counter. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,50,protected final Incrementor evaluations = new Incrementor();
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,53,rivate RealConvergenceChecker checker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,52,private ConvergenceChecker<RealPointValuePair> checker;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,58,** Maximal number of iterations allowed. */
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,59,rivate int maxIterations;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,60,** Number of iterations already performed. */
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,61,rivate int iterations;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,62,** Maximal number of evaluations allowed. */
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,63,rivate int maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,64,** Number of evaluations already performed. */
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,65,rivate int evaluations;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,71," The convergence check is set to a {@link SimpleScalarValueChecker},"
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,72, the allowed number of iterations and evaluations are set to their
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,73, default values.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,62,* The convergence check is set to a {@link SimpleScalarValueChecker} and
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,63,* the allowed number of evaluations is set to {@link Integer#MAX_VALUE}.
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,76,"his(new SimpleScalarValueChecker(),"
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,77,"EFAULT_MAX_ITERATIONS,"
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,78,EFAULT_MAX_EVALUATIONS);
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,66,"this(new SimpleScalarValueChecker(), Integer.MAX_VALUE);"
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,82, @param maxIterations Maximum number of iterations.
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,83, @param maxEvaluations Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,70,* @param maxEvaluations Maximum number of function evaluations.
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,85,"rotected BaseAbstractScalarOptimizer(RealConvergenceChecker checker,"
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,86,"nt maxIterations,"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,72,"protected BaseAbstractScalarOptimizer(ConvergenceChecker<RealPointValuePair> checker,"
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,89,his.maxIterations = maxIterations;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,90,his.maxEvaluations = maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,93,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,94,ublic void setMaxIterations(int maxIterations) {
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,95,his.maxIterations = maxIterations;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,98,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,99,ublic int getMaxIterations() {
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,100,eturn maxIterations;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,103,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,104,ublic int getIterations() {
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,105,eturn iterations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,75,evaluations.setMaximalCount(maxEvaluations);
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,110,his.maxEvaluations = maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,80,evaluations.setMaximalCount(maxEvaluations);
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,115,eturn maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,85,return evaluations.getMaximalCount();
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,120,eturn evaluations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,90,return evaluations.getCount();
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,124,ublic void setConvergenceChecker(RealConvergenceChecker convergenceChecker) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,94,public void setConvergenceChecker(ConvergenceChecker<RealPointValuePair> convergenceChecker) {
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,129,ublic RealConvergenceChecker getConvergenceChecker() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,99,public ConvergenceChecker<RealPointValuePair> getConvergenceChecker() {
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,134, Increment the iterations counter by 1.
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,135, @throws OptimizationException if the maximal number
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,136, of iterations is exceeded
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,138,rotected void incrementIterationsCounter()
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,139,hrows OptimizationException {
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,140,f (++iterations > maxIterations) {
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,141,hrow new OptimizationException(new MaxIterationsExceededException(maxIterations));
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,147, @param evaluationPoint point at which the objective function must be evaluated
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,148, @return objective function value at specified point
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,149, @throws FunctionEvaluationException if the function cannot be evaluated
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,150, or its dimension doesn't match problem dimension or the maximal number
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,151, of iterations is exceeded
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,106,* @param point Point at which the objective function must be evaluated.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,107,* @return the objective function value at the specified point.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,108,* @throws FunctionEvaluationException if the function cannot be evaluated.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,109,* @throws TooManyEvaluationsException if the maximal number of evaluations is
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,110,* exceeded.
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,153,rotected double computeObjectiveValue(double[] evaluationPoint)
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,112,protected double computeObjectiveValue(double[] point)
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,155,f (++evaluations > maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,156,"hrow new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),"
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,157,valuationPoint);
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,114,try {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,115,evaluations.incrementCount();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,116,} catch (MaxCountExceededException e) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,117,throw new TooManyEvaluationsException(e.getMax());
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,159,eturn function.value(evaluationPoint);
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,119,return function.value(point);
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,166,"hrows FunctionEvaluationException, OptimizationException {"
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,168,/ reset counters
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,169,terations = 0;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,170,valuations = 0;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,126,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,127,// Reset.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,128,evaluations.resetCount();
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,172,/ store optimization problem characteristics
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,130,// Store optimization problem characteristics.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,135,// Perform computation.
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,195, Perform the bulk of optimization algorithm.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,154,* Perform the bulk of the optimization algorithm.
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,199, @throws OptimizationException if the algorithm failed to converge
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,200, @throws IllegalArgumentException if the start point dimension is wrong
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,203,"hrows FunctionEvaluationException, OptimizationException;"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,161,throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,18,package org.apache.commons.math.optimization.general;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,21,import org.apache.commons.math.util.Incrementor;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,22,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,23,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,24,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,25,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,26,import org.apache.commons.math.optimization.BaseMultivariateVectorialOptimizer;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,27,import org.apache.commons.math.optimization.GoalType;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,28,import org.apache.commons.math.optimization.OptimizationException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,29,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,30,import org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,31,import org.apache.commons.math.optimization.SimpleVectorialValueChecker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,34,* Base class for implementing optimizers for multivariate scalar functions.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,35,* This base class handles the boiler-plate methods associated to thresholds
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,36,"* settings, iterations and evaluations counting."
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,38,* @param <FUNC> the type of the objective function to be optimized
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,40,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,41,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,43,public abstract class BaseAbstractVectorialOptimizer<FUNC extends MultivariateVectorialFunction>
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,44,implements BaseMultivariateVectorialOptimizer<FUNC> {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,45,/** Evaluations counter. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,46,protected final Incrementor evaluations = new Incrementor();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,47,/** Convergence checker. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,48,private ConvergenceChecker<VectorialPointValuePair> checker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,49,/** Target value for the objective functions at optimum. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,50,private double[] target;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,51,/** Weight for the least squares cost computation. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,52,private double[] weight;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,53,/** Initial guess. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,54,private double[] start;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,55,/** Objective function. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,56,private MultivariateVectorialFunction function;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,59,* Simple constructor with default settings.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,60,* The convergence check is set to a {@link SimpleVectorialValueChecker} and
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,61,* the allowed number of evaluations is set to {@link Integer#MAX_VALUE}.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,63,protected BaseAbstractVectorialOptimizer() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,64,"this(new SimpleVectorialValueChecker(),  Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,67,* @param checker Convergence checker.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,68,* @param maxEvaluations Maximum number of function evaluations.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,70,"protected BaseAbstractVectorialOptimizer(ConvergenceChecker<VectorialPointValuePair> checker,"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,71,int maxEvaluations) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,72,this.checker = checker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,73,evaluations.setMaximalCount(maxEvaluations);
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,76,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,77,public void setMaxEvaluations(int maxEvaluations) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,78,evaluations.setMaximalCount(maxEvaluations);
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,81,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,82,public int getMaxEvaluations() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,83,return evaluations.getMaximalCount();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,86,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,87,public int getEvaluations() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,88,return evaluations.getCount();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,91,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,92,public void setConvergenceChecker(ConvergenceChecker<VectorialPointValuePair> convergenceChecker) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,93,this.checker = convergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,96,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,97,public ConvergenceChecker<VectorialPointValuePair> getConvergenceChecker() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,98,return checker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,102,* Compute the objective function value.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,104,* @param point Point at which the objective function must be evaluated.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,105,* @return the objective function value at the specified point.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,106,* @throws FunctionEvaluationException if the function cannot be evaluated.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,107,* @throws TooManyEvaluationsException if the maximal number of evaluations is
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,108,* exceeded.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,110,protected double[] computeObjectiveValue(double[] point)
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,111,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,112,try {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,113,evaluations.incrementCount();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,114,} catch (MaxCountExceededException e) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,115,throw new TooManyEvaluationsException(e.getMax());
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,117,return function.value(point);
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,120,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,121,"public VectorialPointValuePair optimize(FUNC f,"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,122,"double[] target, double[] weight,"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,123,double[] startPoint)
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,124,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,126,if (target.length != weight.length) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,127,"throw new DimensionMismatchException(target.length, weight.length);"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,130,// Reset.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,131,evaluations.resetCount();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,133,// Store optimization problem characteristics.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,134,function = f;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,135,this.target = target.clone();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,136,this.weight = weight.clone();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,137,start = startPoint.clone();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,139,// Perform computation.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,140,return doOptimize();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,144,* @return the initial guess.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,146,public double[] getStartPoint() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,147,return start.clone();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,151,* Perform the bulk of the optimization algorithm.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,153,* @return the point/value pair giving the optimal value for objective function
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,154,* @throws FunctionEvaluationException if the objective function throws one during
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,155,* the search
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,157,protected abstract VectorialPointValuePair doOptimize()
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,158,throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,161,* @return a reference to the {@link #target array}.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,163,protected double[] getTargetRef() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,164,return target;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,167,* @return a reference to the {@link #weight array}.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,169,protected double[] getWeightRef() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,170,return weight;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,28,mport org.apache.commons.math.optimization.OptimizationException;
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,28,import org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,50,** Simple constructor with default settings.
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,51, <p>The convergence check is set to a {@link
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,52, org.apache.commons.math.optimization.SimpleVectorialValueChecker}
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,53, and the maximal number of evaluation is set to
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,54, {@link AbstractLeastSquaresOptimizer#DEFAULT_MAX_ITERATIONS}.
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,55," @param useLU if true, the normal equations will be solved using LU"
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,56," decomposition, otherwise they will be solved using QR decomposition"
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,50,* Simple constructor with default settings.
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,51,* The convergence check is set to a {@link
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,52,* org.apache.commons.math.optimization.SimpleVectorialValueChecker}.
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,54,"* @param useLU if {@code true}, the normal equations will be solved"
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,55,"* using LU decomposition, otherwise they will be solved using QR"
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,56,* decomposition.
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,65,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,65,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,69,int iter = 0;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,71,ncrementIterationsCounter();
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,71,++iter;
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,79,final double[] targetValues = getTargetRef();
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,80,final double[] residualsWeights = getWeightRef();
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,119, catch(InvalidMatrixException e) {
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,120,hrow new OptimizationException(LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM);
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,119,} catch (InvalidMatrixException e) {
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,120,throw new ConvergenceException(LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM);
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,125,"onverged = checker.converged(getIterations(), previous, current);"
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,125,"converged = getConvergenceChecker().converged(iter, previous, current);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,22,import org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,23,mport org.apache.commons.math.optimization.OptimizationException;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,25,import org.apache.commons.math.optimization.ConvergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,153,    <li>{@link #setConvergenceChecker(VectorialConvergenceChecker) vectorial convergence checker}: null</li>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,154,*    <li>{@link #setConvergenceChecker(ConvergenceChecker) vectorial convergence checker}: null</li>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,155,    <li>{@link #setMaxIterations(int) maximal iterations}: 1000</li>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,169,/ set up the superclass with a default  max cost evaluations setting
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,170,etMaxIterations(1000);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,242,rotected VectorialPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,243,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,237,protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,266,int iter = 0;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,267,final ConvergenceChecker<VectorialPointValuePair> checker = getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,269,++iter;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,276,ncrementIterationsCounter();
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,428,Norm    += xK * xK;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,423,xNorm += xK * xK;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,435,/ we use the vectorial convergence checker
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,436,"f (checker.converged(getIterations(), previous, current)) {"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,437,eturn current;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,430,// we use the vectorial convergence checker
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,431,"if (checker.converged(iter, previous, current)) {"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,432,return current;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,465,"hrow new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,460,"throw new ConvergenceException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,468,"hrow new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,463,"throw new ConvergenceException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,471,"hrow new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,466,"throw new ConvergenceException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,796, @exception OptimizationException if the decomposition cannot be performed
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,785,* @exception ConvergenceException if the decomposition cannot be performed
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,798,rivate void qrDecomposition() throws OptimizationException {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,787,private void qrDecomposition() throws ConvergenceException {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,824,"hrow new OptimizationException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,813,"throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,"
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,20,mport org.apache.commons.math.ConvergenceException;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,21,import org.apache.commons.math.exception.MathIllegalStateException;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,22,import org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,27,mport org.apache.commons.math.optimization.OptimizationException;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,57,** Simple constructor with default settings.
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,58, <p>The convergence check is set to a {@link
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,59, org.apache.commons.math.optimization.SimpleVectorialValueChecker}
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,60, and the maximal number of iterations is set to
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,61, {@link AbstractScalarDifferentiableOptimizer#DEFAULT_MAX_ITERATIONS}.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,58,* Simple constructor with default settings.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,59,* The convergence check is set to a {@link
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,60,* org.apache.commons.math.optimization.SimpleVectorialValueChecker}.
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,113,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,114,ry {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,115,/ initialization
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,116,f (preconditioner == null) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,117,reconditioner = new IdentityPreconditioner();
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,119,f (solver == null) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,120,olver = new BrentSolver();
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,122,oint = getStartPoint();
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,123,inal GoalType goal = getGoalType();
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,124,inal int n = point.length;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,125,ouble[] r = computeObjectiveGradient(point);
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,126,f (goal == GoalType.MINIMIZE) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,127,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,128,[i] = -r[i];
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,132,/ initial search direction
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,133,"ouble[] steepestDescent = preconditioner.precondition(point, r);"
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,134,ouble[] searchDirection = steepestDescent.clone();
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,136,ouble delta = 0;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,113,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,114,// Initialization.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,115,if (preconditioner == null) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,116,preconditioner = new IdentityPreconditioner();
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,118,if (solver == null) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,119,solver = new BrentSolver();
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,121,point = getStartPoint();
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,122,final GoalType goal = getGoalType();
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,123,final int n = point.length;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,124,double[] r = computeObjectiveGradient(point);
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,125,if (goal == GoalType.MINIMIZE) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,138,elta += r[i] * searchDirection[i];
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,127,r[i] = -r[i];
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,141,ealPointValuePair current = null;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,142,hile (true) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,144,inal double objective = computeObjectiveValue(point);
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,145,ealPointValuePair previous = current;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,146,"urrent = new RealPointValuePair(point, objective);"
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,147,f (previous != null) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,148,"f (getConvergenceChecker().converged(getIterations(), previous, current)) {"
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,149,/ we have found an optimum
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,150,eturn current;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,131,// Initial search direction.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,132,"double[] steepestDescent = preconditioner.precondition(point, r);"
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,133,double[] searchDirection = steepestDescent.clone();
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,154,ncrementIterationsCounter();
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,135,double delta = 0;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,136,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,137,delta += r[i] * searchDirection[i];
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,156,ouble dTd = 0;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,157,or (final double di : searchDirection) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,158,Td += di * di;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,140,RealPointValuePair current = null;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,141,int iter = 0;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,142,while (true) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,143,++iter;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,145,final double objective = computeObjectiveValue(point);
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,146,RealPointValuePair previous = current;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,147,"current = new RealPointValuePair(point, objective);"
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,148,if (previous != null) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,149,"if (getConvergenceChecker().converged(iter, previous, current)) {"
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,150,// We have found an optimum.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,151,return current;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,155,double dTd = 0;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,156,for (final double di : searchDirection) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,157,dTd += di * di;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,161,/ find the optimal step in the search direction
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,162,inal UnivariateRealFunction lsf = new LineSearchFunction(searchDirection);
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,160,// Find the optimal step in the search direction.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,161,final UnivariateRealFunction lsf = new LineSearchFunction(searchDirection);
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,162,try {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,165,/ validate new point
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,165,// Validate new point.
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,169, = computeObjectiveGradient(point);
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,170,f (goal == GoalType.MINIMIZE) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,171,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,172,[i] = -r[i];
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,169,} catch (org.apache.commons.math.ConvergenceException e) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,170,throw new ConvergenceException(); // XXX ugly workaround.
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,176,/ compute beta
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,177,inal double deltaOld = delta;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,178,"inal double[] newSteepestDescent = preconditioner.precondition(point, r);"
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,179,elta = 0;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,173,r = computeObjectiveGradient(point);
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,174,if (goal == GoalType.MINIMIZE) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,181,elta += r[i] * newSteepestDescent[i];
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,176,r[i] = -r[i];
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,184,inal double beta;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,185,f (updateFormula == ConjugateGradientFormula.FLETCHER_REEVES) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,186,eta = delta / deltaOld;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,187, else {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,188,ouble deltaMid = 0;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,189,or (int i = 0; i < r.length; ++i) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,190,eltaMid += r[i] * steepestDescent[i];
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,192,eta = (delta - deltaMid) / deltaOld;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,180,// Compute beta.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,181,final double deltaOld = delta;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,182,"final double[] newSteepestDescent = preconditioner.precondition(point, r);"
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,183,delta = 0;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,184,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,185,delta += r[i] * newSteepestDescent[i];
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,188,final double beta;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,189,if (updateFormula == ConjugateGradientFormula.FLETCHER_REEVES) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,190,beta = delta / deltaOld;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,191,} else {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,192,double deltaMid = 0;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,193,for (int i = 0; i < r.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,194,deltaMid += r[i] * steepestDescent[i];
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,194,teepestDescent = newSteepestDescent;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,196,/ compute conjugate search direction
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,197,f ((getIterations() % n == 0) || (beta < 0)) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,198,/ break conjugation: reset search direction
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,199,earchDirection = steepestDescent.clone();
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,200, else {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,201,/ compute new conjugate search direction
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,202,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,203,earchDirection[i] = steepestDescent[i] + beta * searchDirection[i];
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,196,beta = (delta - deltaMid) / deltaOld;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,198,steepestDescent = newSteepestDescent;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,200,// Compute conjugate search direction.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,201,if (iter % n == 0 ||
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,202,beta < 0) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,203,// Break conjugation: reset search direction.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,204,searchDirection = steepestDescent.clone();
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,205,} else {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,206,// Compute new conjugate search direction.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,207,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,208,searchDirection[i] = steepestDescent[i] + beta * searchDirection[i];
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,209, catch (ConvergenceException ce) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,210,hrow new OptimizationException(ce);
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,221, @exception OptimizationException if no bracket can be found
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,221,* @exception MathIllegalStateException if no bracket can be found
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,222,"* @deprecated in 2.2 (must be replaced with ""BracketFinder"")."
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,225,"hrows FunctionEvaluationException, OptimizationException {"
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,226,throws FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,235,hrow new OptimizationException(LocalizedFormats.UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH);
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,236,throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH);
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,23,mport org.apache.commons.math.MaxIterationsExceededException;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,26,mport org.apache.commons.math.optimization.OptimizationException;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,26,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,30,import org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,37,* <br/>
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,38,* The user is responsible for calling {@link
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,39,* #setConvergenceChecker(ConvergenceChecker) ConvergenceChecker}
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,40,* prior to using the optimizer.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,44, Default relative tolerance for line search ({@value}).
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,46,ublic static final double DEFAULT_LS_RELATIVE_TOLERANCE = 1e-7;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,48, Default absolute tolerance for line search ({@value}).
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,50,ublic static final double DEFAULT_LS_ABSOLUTE_TOLERANCE = 1e-11;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,54,rivate final LineSearch line;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,50,private LineSearch line = new LineSearch();
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,57, Constructor with default line search tolerances (see the
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,58," {@link #PowellOptimizer(double,double) other constructor})."
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,60,ublic PowellOptimizer() {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,61,"his(DEFAULT_LS_RELATIVE_TOLERANCE,"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,62,EFAULT_LS_ABSOLUTE_TOLERANCE);
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,66, Constructor with default absolute line search tolerances (see
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,67," the {@link #PowellOptimizer(double,double) other constructor})."
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,53,* Set the convergence checker.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,54,* It also indirectly sets the line search tolerances to the square-root
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,55,* of the correponding tolerances in the checker.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,69, @param lsRelativeTolerance Relative error tolerance for
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,70, the line search algorithm ({@link BrentOptimizer}).
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,57,* @param checker Convergence checker.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,72,ublic PowellOptimizer(double lsRelativeTolerance) {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,73,"his(lsRelativeTolerance,"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,74,EFAULT_LS_ABSOLUTE_TOLERANCE);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,59,public void setConvergenceChecker(ConvergenceChecker<RealPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,60,super.setConvergenceChecker(checker);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,62,// Line search tolerances can be much lower than the tolerances
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,63,// required for the optimizer itself.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,64,final double minTol = 1e-4;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,65,"final double rel = Math.min(Math.sqrt(checker.getRelativeThreshold()), minTol);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,66,"final double abs = Math.min(Math.sqrt(checker.getAbsoluteThreshold()), minTol);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,67,"line.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(rel, abs));"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,78, @param lsRelativeTolerance Relative error tolerance for
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,79, the line search algorithm ({@link BrentOptimizer}).
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,80, @param lsAbsoluteTolerance Relative error tolerance for
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,81, the line search algorithm ({@link BrentOptimizer}).
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,83,"ublic PowellOptimizer(double lsRelativeTolerance,"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,84,ouble lsAbsoluteTolerance) {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,85,"ine = new LineSearch(lsRelativeTolerance,"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,86,sAbsoluteTolerance);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,70,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,71,@Override
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,72,public void setMaxEvaluations(int maxEvaluations) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,73,super.setMaxEvaluations(maxEvaluations);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,75,// We must allow at least as many iterations to the underlying line
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,76,// search optimizer. Because the line search inner class will call
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,77,"// ""computeObjectiveValue"" in this class, we ensure that this class"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,78,"// will be the first to eventually throw ""TooManyEvaluationsException""."
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,79,line.setMaxEvaluations(maxEvaluations);
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,92,"hrows FunctionEvaluationException,"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,93,ptimizationException {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,85,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,98,int iter = 0;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,107,ncrementIterationsCounter();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,100,++iter;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,120,"ine.search(x, d);"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,121,Val = line.getValueAtOptimum();
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,122,lphaMin = line.getOptimum();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,113,"final UnivariateRealPointValuePair optimum = line.search(x, d);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,114,fVal = optimum.getValue();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,115,alphaMin = optimum.getPoint();
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,134,"f (getConvergenceChecker().converged(getIterations(), previous, current)) {"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,127,"if (getConvergenceChecker().converged(iter, previous, current)) {"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,160,"ine.search(x, d);"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,161,Val = line.getValueAtOptimum();
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,162,lphaMin = line.getOptimum();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,153,"final UnivariateRealPointValuePair optimum = line.search(x, d);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,154,fVal = optimum.getValue();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,155,alphaMin = optimum.getPoint();
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,203,rivate class LineSearch {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,205, Optimizer.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,207,rivate final AbstractUnivariateRealOptimizer optim = new BrentOptimizer();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,196,private class LineSearch extends BrentOptimizer {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,215,rivate double optimum = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,217, Value of the objective function at the optimum.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,219,rivate double valueAtOptimum = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,222, @param relativeTolerance Relative tolerance.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,223, @param absoluteTolerance Absolute tolerance.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,225,"ublic LineSearch(double relativeTolerance,"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,226,ouble absoluteTolerance) {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,227,ptim.setRelativeAccuracy(relativeTolerance);
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,228,ptim.setAbsoluteAccuracy(absoluteTolerance);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,204,private UnivariateRealPointValuePair optimum;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,236, @throws OptimizationException if function cannot be evaluated at some test point
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,237, or algorithm fails to converge
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,239,"ublic void search(final double[] p,"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,240,inal double[] d)
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,241,hrows OptimizationException {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,243,/ Reset.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,244,ptimum = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,245,alueAtOptimum = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,247,ry {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,248,inal int n = p.length;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,249,inal UnivariateRealFunction f = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,250,ublic double value(double alpha)
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,251,hrows FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,253,inal double[] x = new double[n];
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,254,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,255,[i] = p[i] + alpha * d[i];
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,257,inal double obj = computeObjectiveValue(x);
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,258,eturn obj;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,262,inal GoalType goal = getGoalType();
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,263,"racket.search(f, goal, 0, 1);"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,264,"ptimum = optim.optimize(f, goal,"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,265,"racket.getLo(),"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,266,"racket.getHi(),"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,267,racket.getMid());
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,268,alueAtOptimum = optim.getFunctionValue();
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,269, catch (FunctionEvaluationException e) {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,270,hrow new OptimizationException(e);
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,271, catch (MaxIterationsExceededException e) {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,272,hrow new OptimizationException(e);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,212,* @throws FunctionEvaluationException if the function evaluation
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,213,* fails.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,214,* @throws TooManyEvaluationsException if the number of evaluations is
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,215,* exceeded.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,279,ublic double getOptimum() {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,280,eturn optimum;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,283, @return the value of the function at the optimum.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,285,ublic double getValueAtOptimum() {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,286,eturn valueAtOptimum;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,217,"public UnivariateRealPointValuePair search(final double[] p,"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,218,final double[] d)
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,219,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,221,final int n = p.length;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,222,final UnivariateRealFunction f = new UnivariateRealFunction() {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,223,public double value(double alpha)
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,224,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,226,final double[] x = new double[n];
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,227,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,228,x[i] = p[i] + alpha * d[i];
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,230,final double obj = PowellOptimizer.this.computeObjectiveValue(x);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,231,return obj;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,235,final GoalType goal = PowellOptimizer.this.getGoalType();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,236,"bracket.search(f, goal, 0, 1);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,237,"return optimize(f, goal, bracket.getLo(), bracket.getHi(),"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,238,bracket.getMid());
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,20,mport org.apache.commons.math.ConvergingAlgorithmImpl;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,22,mport org.apache.commons.math.MaxEvaluationsExceededException;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,23,mport org.apache.commons.math.MaxIterationsExceededException;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,21,import org.apache.commons.math.util.Incrementor;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,22,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,23,import org.apache.commons.math.exception.TooManyEvaluationsException;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,25,mport org.apache.commons.math.exception.NoDataException;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,27,mport org.apache.commons.math.optimization.UnivariateRealOptimizer;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,26,import org.apache.commons.math.optimization.ConvergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,37,xtends ConvergingAlgorithmImpl implements UnivariateRealOptimizer {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,38,** Indicates where a root has been computed. */
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,39,rivate boolean resultComputed;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,40,** The last computed root. */
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,41,rivate double result;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,42,** Value of the function at the last computed result. */
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,43,rivate double functionValue;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,44,** Maximal number of evaluations allowed. */
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,45,rivate int maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,46,** Number of evaluations already performed. */
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,47,rivate int evaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,36,implements UnivariateRealOptimizer {
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,37,/** Convergence checker. */
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,38,private ConvergenceChecker<UnivariateRealPointValuePair> checker;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,39,/** Evaluations counter. */
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,40,private final Incrementor evaluations = new Incrementor();
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,49,rivate GoalType optimizationGoal;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,42,private GoalType goal;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,60, Construct a solver with given iteration count and accuracy.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,61, FunctionEvaluationExceptionFunctionEvaluationException
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,62, @param defaultAbsoluteAccuracy maximum absolute error
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,63, @param defaultMaximalIterationCount maximum number of iterations
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,64, @throws IllegalArgumentException if f is null or the
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,65, defaultAbsoluteAccuracy is not valid
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,66," @deprecated in 2.2. Please use the ""setter"" methods to assign meaningful"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,67," values to the maximum numbers of iterations and evaluations, and to the"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,68, absolute and relative accuracy thresholds.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,70,"rotected AbstractUnivariateRealOptimizer(final int defaultMaximalIterationCount,"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,71,inal double defaultAbsoluteAccuracy) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,72,"uper(defaultMaximalIterationCount, defaultAbsoluteAccuracy);"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,73,esultComputed = false;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,74,etMaxEvaluations(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,78, Default constructor.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,79, To be removed once the single non-default one has been removed.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,81,rotected AbstractUnivariateRealOptimizer() {}
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,84, Check whether a result has been computed.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,85, @throws NoDataException if no result has been computed
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,86, @deprecated in 2.2 (no alternative).
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,88,rotected void checkResultComputed() {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,89,f (!resultComputed) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,90,hrow new NoDataException();
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,94,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,95,ublic double getResult() {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,96,f (!resultComputed) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,97,hrow new NoDataException();
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,99,eturn result;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,102,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,103,ublic double getFunctionValue() {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,104,f (functionValue == Double.NaN) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,105,inal double opt = getResult();
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,106,ry {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,107,unctionValue = function.value(opt);
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,108, catch (FunctionEvaluationException e) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,109,hrow new RuntimeException(e);
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,112,eturn functionValue;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,116, Convenience function for implementations.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,118, @param x the result to set
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,119, @param fx the result to set
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,120, @param iterationCount the iteration count to set
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,121, @deprecated in 2.2 (no alternative).
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,123,"rotected final void setResult(final double x, final double fx,"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,124,inal int iterationCount) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,125,his.result         = x;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,126,his.functionValue  = fx;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,127,his.iterationCount = iterationCount;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,128,his.resultComputed = true;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,132, Convenience function for implementations.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,133, @deprecated in 2.2 (no alternative).
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,135,rotected final void clearResult() {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,136,his.resultComputed = false;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,141,his.maxEvaluations = maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,54,evaluations.setMaximalCount(maxEvaluations);
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,146,eturn maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,59,return evaluations.getMaximalCount();
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,151,eturn evaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,64,return evaluations.getCount();
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,158,eturn optimizationGoal;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,71,return goal;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,161, @return the lower of the search interval.
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,74,* @return the lower end of the search interval.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,167, @return the higher of the search interval.
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,80,* @return the higher end of the search interval.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,180, Compute the objective function value.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,181, @param f objective function
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,182, @param point point at which the objective function must be evaluated
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,183, @return objective function value at specified point
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,184, @exception FunctionEvaluationException if the function cannot be evaluated
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,185, or the maximal number of iterations is exceeded
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,186, @deprecated in 2.2. Use this {@link #computeObjectiveValue(double)
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,187, replacement} instead.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,189,"rotected double computeObjectiveValue(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,190,inal double point)
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,191,hrows FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,192,f (++evaluations > maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,193,"hrow new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,194,oint);
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,196,eturn f.value(point);
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,204, @exception FunctionEvaluationException if the function cannot be evaluated
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,205, or the maximal number of iterations is exceeded.
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,97,* @throws FunctionEvaluationException if the function cannot be
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,98,* evaluated.
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,99,* @throws TooManyEvaluationsException if the maximal number of evaluations
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,100,* is exceeded.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,209,f (++evaluations > maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,210,esultComputed = false;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,211,"hrow new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,212,oint);
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,104,try {
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,105,evaluations.incrementCount();
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,106,} catch (MaxCountExceededException e) {
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,107,throw new TooManyEvaluationsException(e.getMax());
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,218,"ublic double optimize(UnivariateRealFunction f, GoalType goal,"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,219,"ouble min, double max, double startValue)"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,220,"hrows MaxIterationsExceededException, FunctionEvaluationException {"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,221,/ Initialize.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,222,his.searchMin = min;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,223,his.searchMax = max;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,224,his.searchStart = startValue;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,225,his.optimizationGoal = goal;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,226,his.function = f;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,113,"public UnivariateRealPointValuePair optimize(UnivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,114,"GoalType goalType,"
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,115,"double min, double max,"
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,116,double startValue)
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,117,throws FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,229,unctionValue = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,230,valuations = 0;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,231,esetIterationsCounter();
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,119,searchMin = min;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,120,searchMax = max;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,121,searchStart = startValue;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,122,goal = goalType;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,123,function = f;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,124,evaluations.resetCount();
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,234,esult = doOptimize();
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,235,esultComputed = true;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,127,return doOptimize();
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,237,eturn result;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,130,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,131,"public UnivariateRealPointValuePair optimize(UnivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,132,"GoalType goal,"
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,133,"double min, double max)"
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,134,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,135,"return optimize(f, goal, min, max, min + 0.5 * (max - min));"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,241, Set the value at the optimum.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,243, @param functionValue Value of the objective function at the optimum.
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,139,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,245,rotected void setFunctionValue(double functionValue) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,246,his.functionValue = functionValue;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,141,public void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,142,this.checker = checker;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,249,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,250,"ublic double optimize(UnivariateRealFunction f, GoalType goal,"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,251,"ouble min, double max)"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,252,"hrows MaxIterationsExceededException, FunctionEvaluationException {"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,253,"eturn optimize(f, goal, min, max, min + 0.5 * (max - min));"
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,146,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,148,public ConvergenceChecker<UnivariateRealPointValuePair> getConvergenceChecker() {
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,149,return checker;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,260, @return the optimum.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,261, @throws MaxIterationsExceededException if the maximum iteration count
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,156,* @return the optimum and its corresponding function value.
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,157,* @throws TooManyEvaluationsException if the maximal number of evaluations
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,266,rotected abstract double doOptimize()
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,267,"hrows MaxIterationsExceededException, FunctionEvaluationException;"
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,162,protected abstract UnivariateRealPointValuePair doOptimize()
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,163,throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,18,package org.apache.commons.math.optimization.univariate;
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,21,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,22,import org.apache.commons.math.optimization.BaseOptimizer;
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,23,import org.apache.commons.math.optimization.GoalType;
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,26,* This interface is mainly intended to enforce the internal coherence of
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,27,* Commons-Math. Users of the API are advised to base their code on
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,28,* the following interfaces:
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,29,* <ul>
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,30,*  <li>{@link org.apache.commons.math.optimization.univariate.UnivariateRealOptimizer}</li>
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,31,* </ul>
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,33,* @param <FUNC> Type of the objective function to be optimized.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,35,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,36,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,38,public interface BaseUnivariateRealOptimizer<FUNC extends UnivariateRealFunction>
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,39,extends BaseOptimizer<UnivariateRealPointValuePair> {
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,41,* Find an optimum in the given interval.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,43,* An optimizer may require that the interval brackets a single optimum.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,45,* @param f Function to optimize.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,46,* @param goalType Type of optimization goal: either
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,47,* {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,48,* @param min Lower bound for the interval.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,49,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,50,"* @return a (point, value) pair where the function is optimum."
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,51,* @throws {@link org.apache.commons.math.exception.TooManyEvaluationsException}
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,52,* if the maximum evaluation count is exceeded.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,53,* @throws {@link org.apache.commons.math.exception.ConvergenceException}
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,54,* if the optimizer detects a convergence problem.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,55,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,56,* function.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,57,* @throws IllegalArgumentException if {@code min > max} or the endpoints
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,58,* do not satisfy the requirements specified by the optimizer.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,60,"UnivariateRealPointValuePair optimize(FUNC f, GoalType goalType,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,61,"double min, double max)"
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,62,throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,65,"* Find an optimum in the given interval, start at startValue."
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,66,* An optimizer may require that the interval brackets a single optimum.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,68,* @param f Function to optimize.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,69,* @param goalType Type of optimization goal: either
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,70,* {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,71,* @param min Lower bound for the interval.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,72,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,73,* @param startValue Start value to use.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,74,"* @return a (point, value) pair where the function is optimum."
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,75,* @throws {@link org.apache.commons.math.exception.TooManyEvaluationsException}
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,76,* if the maximum evaluation count is exceeded.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,77,* @throws {@link org.apache.commons.math.exception.ConvergenceException}
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,78,* if the optimizer detects a convergence problem.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,79,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,80,* function.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,81,* @throws IllegalArgumentException if {@code min > max} or the endpoints
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,82,* do not satisfy the requirements specified by the optimizer.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,84,"UnivariateRealPointValuePair optimize(FUNC f, GoalType goalType,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,85,"double min, double max,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,86,double startValue)
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,87,throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,19,import org.apache.commons.math.util.Incrementor;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,21,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,22,import org.apache.commons.math.exception.MaxCountExceededException;
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,21,mport org.apache.commons.math.MaxIterationsExceededException;
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,44, Maximum number of iterations.
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,46,rivate final int maxIterations;
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,48, Number of iterations.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,47,* Counter for function evaluations.
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,50,rivate int iterations;
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,52, Number of function evaluations.
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,54,rivate int evaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,49,private final Incrementor evaluations = new Incrementor();
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,92, @param maxIterations Maximum number of iterations allowed for finding
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,87,* @param maxEvaluations Maximum number of evaluations allowed for finding
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,96,nt maxIterations) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,91,int maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,100,f (maxIterations <= 0) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,101,hrow new NotStrictlyPositiveException(maxIterations);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,95,if (maxEvaluations <= 0) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,96,throw new NotStrictlyPositiveException(maxEvaluations);
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,105,his.maxIterations = maxIterations;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,100,evaluations.setMaximalCount(maxEvaluations);
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,115, @throws MaxIterationsExceededException if the maximum iteration count
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,110,* @throws TooManyEvaluationsException if the maximum number of evaluations
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,124,"hrows MaxIterationsExceededException,"
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,125,unctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,126,eset();
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,119,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,120,evaluations.resetCount();
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,147,f (++iterations > maxIterations) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,148,hrow new MaxIterationsExceededException(maxIterations);
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,190, = xC + GOLD * (xC -xB);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,181,w = xC + GOLD * (xC - xB);
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,201,B = xC;
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,202,C = w;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,193,xB = xC;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,195,xC = w;
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,209,id = xB;
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,210,i = xC;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,201,mid = xB;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,203,hi = xC;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,206,if (lo > hi) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,207,double tmp = lo;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,208,lo = hi;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,209,hi = tmp;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,211,tmp = fLo;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,212,fLo = fHi;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,213,fHi = tmp;
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,217, @return the number of iterations.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,218,* @return the number of evalutations.
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,219,ublic int getIterations() {
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,220,eturn iterations;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,220,public int getMaxEvaluations() {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,221,return evaluations.getMaximalCount();
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,226,eturn evaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,228,return evaluations.getCount();
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,231, @see #getFLow()
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,233,* @see #getFLo()
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,241,ublic double getFLow() {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,243,public double getFLo() {
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,281, @throws FunctionEvaluationException if function cannot be evaluated at x
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,283,* @throws FunctionEvaluationException if function cannot be evaluated.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,284,* @throws TooManyEvaluationsException if the maximal number of evaluations is
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,285,* exceeded.
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,287,+evaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,290,try {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,291,evaluations.incrementCount();
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,292,} catch (MaxCountExceededException e) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,293,throw new TooManyEvaluationsException(e.getMax());
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,292, Reset internal state.
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,294,rivate void reset() {
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,295,terations = 0;
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,296,valuations = 0;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,20,mport org.apache.commons.math.MaxIterationsExceededException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,20,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,21,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,23,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,25,import org.apache.commons.math.exception.MathUnsupportedOperationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,26,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,27,import org.apache.commons.math.optimization.AbstractConvergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,23,mport org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,35,"* If the function is defined on some interval {@code (lo, hi)}, then"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,36,* this method finds an approximation {@code x} to the point at which
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,37,* the function attains its minimum.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,38,* <br/>
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,39,* The user is responsible for calling {@link
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,40,* #setConvergenceChecker(ConvergenceChecker) ConvergenceChecker}
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,41,* prior to using the optimizer.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,41, Construct a solver.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,53,* Convergence checker that implements the original stopping criterion
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,54,* of Brent's algorithm.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,55,* {@code abs} and {@code rel} define a tolerance
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,56,* {@code tol = rel |x| + abs}. {@code rel} should be no smaller than
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,57,"* <em>2 macheps</em> and preferably not much less than <em>sqrt(macheps)</em>,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,58,* where <em>macheps</em> is the relative machine precision. {@code abs} must
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,59,* be positive.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,61,* @since 3.0
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,43,ublic BrentOptimizer() {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,44,etMaxEvaluations(1000);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,45,etMaximalIterationCount(100);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,46,etAbsoluteAccuracy(1e-11);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,47,etRelativeAccuracy(1e-9);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,63,public static class BrentConvergenceChecker
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,64,extends AbstractConvergenceChecker<UnivariateRealPointValuePair> {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,66,* Minimum relative tolerance.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,68,private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,50,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,51,rotected double doOptimize()
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,52,"hrows MaxIterationsExceededException, FunctionEvaluationException {"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,53,"eturn localMin(getGoalType() == GoalType.MINIMIZE,"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,54,"etMin(), getStartValue(), getMax(),"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,55,"etRelativeAccuracy(), getAbsoluteAccuracy());"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,71,* Build an instance with specified thresholds.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,73,* @param rel Relative tolerance threshold
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,74,* @param abs Absolute tolerance threshold
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,76,"public BrentConvergenceChecker(final double rel,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,77,final double abs) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,78,"super(rel, abs);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,80,if (rel < MIN_RELATIVE_TOLERANCE) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,81,"throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,83,if (abs <= 0) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,84,throw new NotStrictlyPositiveException(abs);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,89,* Convergence criterion.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,91,* @param iteration Current iteration.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,92,* @param points Points used for checking the stopping criterion. The list
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,93,* must contain 3 points (in the following order):
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,94,* <ul>
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,95,*  <li>the lower end of the current interval</li>
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,96,*  <li>the current best point</li>
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,97,*  <li>the higher end of the current interval</li>
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,98,* </ul>
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,99,* @return {@code true} if the stopping criterion is satisfied.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,100,* @throws DimensionMismatchException if the length of the {@code points}
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,101,* list is not equal to 3.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,103,"public boolean converged(final int iteration,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,104,final UnivariateRealPointValuePair ... points) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,105,if (points.length != 3) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,106,"throw new DimensionMismatchException(points.length, 3);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,109,final double a = points[0].getPoint();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,110,final double x = points[1].getPoint();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,111,final double b = points[2].getPoint();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,113,final double tol1 = getRelativeThreshold() * FastMath.abs(x) + getAbsoluteThreshold();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,114,final double tol2 = 2 * tol1;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,116,final double m = 0.5 * (a + b);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,117,return FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,59," Find the minimum of the function within the interval {@code (lo, hi)}."
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,122,* Set the convergence checker.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,123,"* Since this algorithm requires a specific checker, this method will throw"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,124,* an {@code UnsupportedOperationexception} if the argument type is not
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,125,* {@link BrentConvergenceChecker}.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,61," If the function is defined on the interval {@code (lo, hi)}, then"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,62, this method finds an approximation {@code x} to the point at which
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,63, the function attains its minimum.<br/>
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,64, {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t}
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,65, and the function is never evaluated at two points closer together than
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,66, {@code tol}. {@code eps} should be no smaller than <em>2 macheps</em> and
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,67," preferable not much less than <em>sqrt(macheps)</em>, where"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,68, <em>macheps</em> is the relative machine precision. {@code t} should be
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,69, positive.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,70, @param isMinim {@code true} when minimizing the function.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,71, @param lo Lower bound of the interval.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,72," @param mid Point inside the interval {@code [lo, hi]}."
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,73, @param hi Higher bound of the interval.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,74, @param eps Relative accuracy.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,75, @param t Absolute accuracy.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,76, @return the optimum point.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,77, @throws MaxIterationsExceededException if the maximum iteration count
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,78, is exceeded.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,79, @throws FunctionEvaluationException if an error occurs evaluating
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,80, the function.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,127,* @throws MathUnsupportedOperationexception if the checker is not an
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,128,* instance of {@link BrentConvergenceChecker}.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,82,"rivate double localMin(boolean isMinim,"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,83,"ouble lo, double mid, double hi,"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,84,"ouble eps, double t)"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,85,"hrows MaxIterationsExceededException, FunctionEvaluationException {"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,86,f (eps <= 0) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,87,hrow new NotStrictlyPositiveException(eps);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,89,f (t <= 0) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,90,hrow new NotStrictlyPositiveException(t);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,130,@Override
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,131,public void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,132,if (checker instanceof BrentConvergenceChecker) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,133,super.setConvergenceChecker(checker);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,134,} else {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,135,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,139,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,140,protected UnivariateRealPointValuePair doOptimize()
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,141,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,142,final boolean isMinim = (getGoalType() == GoalType.MINIMIZE);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,143,final double lo = getMin();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,144,final double mid = getStartValue();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,145,final double hi = getMax();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,147,final ConvergenceChecker<UnivariateRealPointValuePair> checker
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,148,= getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,149,final double eps = checker.getRelativeThreshold();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,150,final double t = checker.getAbsoluteThreshold();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,174,int iter = 0;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,120,f (FastMath.abs(x - m) > tol2 - 0.5 * (b - a)) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,181,"// This test will work only if the ""checker"" is an instance of"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,182,"// ""BrentOptimizer.BrentConvergenceChecker""."
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,183,"if (!getConvergenceChecker().converged(iter,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,184,"new UnivariateRealPointValuePair(a, Double.NaN),"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,185,"new UnivariateRealPointValuePair(x, Double.NaN),"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,186,"new UnivariateRealPointValuePair(b, Double.NaN))) {"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,220, else { // termination
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,221,etFunctionValue(isMinim ? fx : -fx);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,222,eturn x;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,286,} else { // Termination.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,287,"return new UnivariateRealPointValuePair(x, (isMinim ? fx : -fx));"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,224,ncrementIterationsCounter();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,289,++iter;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,18,package org.apache.commons.math.optimization.univariate;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,21,import java.util.Comparator;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,23,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,24,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,25,import org.apache.commons.math.exception.MathIllegalStateException;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,26,import org.apache.commons.math.exception.ConvergenceException;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,27,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,28,import org.apache.commons.math.random.RandomGenerator;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,29,import org.apache.commons.math.optimization.GoalType;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,30,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,31,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,34,* Special implementation of the {@link UnivariateRealOptimizer} interface
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,35,* adding multi-start features to an existing optimizer.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,37,* This class wraps a classical optimizer to use it several times in
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,38,* turn with different starting points in order to avoid being trapped
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,39,* into a local extremum when looking for a global one.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,41,* @param <FUNC> Type of the objective function to be optimized.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,43,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,44,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,46,public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFunction>
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,47,implements BaseUnivariateRealOptimizer<FUNC> {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,48,/** Underlying classical optimizer. */
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,49,private final BaseUnivariateRealOptimizer<FUNC> optimizer;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,50,/** Maximal number of evaluations allowed. */
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,51,private int maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,52,/** Number of evaluations already performed for all starts. */
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,53,private int totalEvaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,54,/** Number of starts to go. */
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,55,private int starts;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,56,/** Random generator for multi-start. */
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,57,private RandomGenerator generator;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,58,/** Found optima. */
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,59,private UnivariateRealPointValuePair[] optima;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,62,* Create a multi-start optimizer from a single-start optimizer.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,64,* @param optimizer Single-start optimizer to wrap.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,65,* @param starts Number of starts to perform (including the
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,66,"* first one), multi-start is disabled if value is less than or"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,67,* equal to 1.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,68,* @param generator Random generator to use for restarts.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,70,"public MultiStartUnivariateRealOptimizer(final BaseUnivariateRealOptimizer<FUNC> optimizer,"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,71,"final int starts,"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,72,final RandomGenerator generator) {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,73,this.optimizer = optimizer;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,74,this.starts = starts;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,75,this.generator = generator;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,79,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,81,public void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,82,optimizer.setConvergenceChecker(checker);
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,86,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,88,public ConvergenceChecker<UnivariateRealPointValuePair> getConvergenceChecker() {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,89,return optimizer.getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,92,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,93,public int getMaxEvaluations() {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,94,return maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,97,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,98,public int getEvaluations() {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,99,return totalEvaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,102,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,103,public void setMaxEvaluations(int maxEvaluations) {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,104,this.maxEvaluations = maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,105,optimizer.setMaxEvaluations(maxEvaluations);
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,109,* Get all the optima found during the last call to {@link
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,110,"* #optimize(FUNC,GoalType,double,double) optimize}."
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,111,* The optimizer stores all the optima found during a set of
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,112,"* restarts. The {@link #optimize(FUNC,GoalType,double,double) optimize}"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,113,* method returns the best point only. This method returns all the points
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,114,"* found at the end of each starts, including the best one already"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,115,"* returned by the {@link #optimize(FUNC,GoalType,double,double) optimize}"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,116,* method.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,117,* <br/>
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,118,* The returned array as one element for each start as specified
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,119,* in the constructor. It is ordered with the results from the
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,120,"* runs that did converge first, sorted from best to worst"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,121,* objective value (i.e in ascending order if minimizing and in
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,122,"* descending order if maximizing), followed by {@code null} elements"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,123,* corresponding to the runs that did not converge. This means all
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,124,* elements will be {@code null} if the {@link
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,125,"* #optimize(FUNC,GoalType,double,double) optimize} method did throw a"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,126,* {@link ConvergenceException}). This also means that if the first
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,127,"* element is not {@code null}, it is the best point found across all"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,128,* starts.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,130,* @return an array containing the optima.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,131,* @throws MathIllegalStateException if {@link
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,132,"* #optimize(FUNC,GoalType,double,double) optimize} has not been called."
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,134,public UnivariateRealPointValuePair[] getOptima() {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,135,if (optima == null) {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,136,throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,138,return optima.clone();
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,141,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,142,"public UnivariateRealPointValuePair optimize(final FUNC f,"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,143,"final GoalType goal,"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,144,"final double min, final double max)"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,145,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,147,optima = new UnivariateRealPointValuePair[starts];
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,148,totalEvaluations = 0;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,150,// Multi-start loop.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,151,for (int i = 0; i < starts; ++i) {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,152,try {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,153,final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,154,final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,155,"optima[i] = optimizer.optimize(f, goal,"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,156,"FastMath.min(bound1, bound2),"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,157,"FastMath.max(bound1, bound2));"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,158,} catch (FunctionEvaluationException fee) {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,159,optima[i] = null;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,160,} catch (ConvergenceException ce) {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,161,optima[i] = null;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,164,final int usedEvaluations = optimizer.getEvaluations();
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,165,optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,166,totalEvaluations += usedEvaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,169,sortPairs(goal);
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,171,if (optima[0] == null) {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,172,"throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,173,starts);
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,176,// Return the point with the best objective function value.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,177,return optima[0];
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,180,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,181,"public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goalType,"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,182,"final double min, final double max,"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,183,final double startValue)
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,184,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,185,"// XXX Main code should be here, using ""startValue"" for the first start."
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,186,"// XXX This method should set ""startValue"" to min + 0.5 * (max - min)"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,187,"return optimize(f, goalType, min, max);"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,191,"* Sort the optima from best to worst, followed by {@code null} elements."
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,193,* @param goal Goal type.
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,195,private void sortPairs(final GoalType goal) {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,196,"Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,197,"public int compare(final UnivariateRealPointValuePair o1,"
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,198,final UnivariateRealPointValuePair o2) {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,199,if (o1 == null) {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,200,return (o2 == null) ? 0 : 1;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,201,} else if (o2 == null) {
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,202,return -1;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,204,final double v1 = o1.getValue();
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,205,final double v2 = o2.getValue();
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,206,return (goal == GoalType.MINIMIZE) ?
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,207,"Double.compare(v1, v2) : Double.compare(v2, v1);"
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,17,package org.apache.commons.math.optimization.univariate;
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,19,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,22,* Interface for univariate optimization algorithms.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,24,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,25,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,27,public interface UnivariateRealOptimizer
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,28,extends BaseUnivariateRealOptimizer<UnivariateRealFunction> {}
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,18,package org.apache.commons.math.optimization.univariate;
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,23,* This class holds a point and the value of an objective function at this
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,24,* point.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,25,* This is a simple immutable container.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,27,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,28,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,30,public class UnivariateRealPointValuePair implements Serializable {
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,31,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,32,private static final long serialVersionUID = 1003888396256744753L;
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,33,/** Point. */
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,34,private final double point;
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,35,/** Value of the objective function at the point. */
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,36,private final double value;
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,39,* Build a point/objective function value pair.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,41,* @param point Point.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,42,* @param value Value of an objective function at the point
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,44,"public UnivariateRealPointValuePair(final double point,"
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,45,final double value) {
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,46,this.point = point;
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,47,this.value = value;
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,51,* Get the point.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,53,* @return the point.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,55,public double getPoint() {
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,56,return point;
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,60,* Get the value of the objective function.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,62,* @return the stored value of the objective function.
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,64,public double getValue() {
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java,65,return value;
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,42,"ublic void testCircleFitting() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,42,public void testCircleFitting() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,58,ptimizer.setMaxIterations(100);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,59,"ssertEquals(100, optimizer.getMaxIterations());"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,64,olver.setAbsoluteAccuracy(1.0e-13);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,65,olver.setRelativeAccuracy(1.0e-15);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,75,ssertTrue(optimizer.getGradientEvaluations() > 650);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,76,ssertTrue(optimizer.getGradientEvaluations() < 700);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,79,ssertTrue(optimizer.getIterations() > 70);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,80,ssertTrue(optimizer.getIterations() < 90);
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,27,import org.apache.commons.math.exception.ConvergenceException;
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,115,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,116,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,137,ssertTrue(optimizer.getIterations() > 20);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,138,ssertTrue(optimizer.getIterations() < 50);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,139,ssertTrue(optimizer.getJacobianEvaluations() > 20);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,140,ssertTrue(optimizer.getJacobianEvaluations() < 50);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,141,"ssertEquals(100, optimizer.getMaxIterations());"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,138,"assertEquals(100, optimizer.getMaxEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,144,Test(expected = OptimizationException.class)
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,141,@Test(expected = ConvergenceException.class)
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,155,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,152,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,51,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,51,optimizer.setMaxEvaluations(1100);
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,56,ssertTrue(optimizer.getEvaluations() > 20);
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,57,ssertTrue(optimizer.getEvaluations() < 250);
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,56,assertTrue(optimizer.getEvaluations() > 900);
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,57,assertTrue(optimizer.getEvaluations() < 1200);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,94,ptimizer.setMaxIterations(200);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,94,optimizer.setMaxEvaluations(200);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,149,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,149,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,183,ptimizer.setMaxIterations(1000);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,183,optimizer.setMaxEvaluations(1000);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,199,ultiDirectional.setMaxIterations(100);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,26,mport org.apache.commons.math.ConvergenceException;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,28,mport org.apache.commons.math.MathException;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,29,mport org.apache.commons.math.MaxEvaluationsExceededException;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,30,mport org.apache.commons.math.MaxIterationsExceededException;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,27,import org.apache.commons.math.exception.TooManyEvaluationsException;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,37,mport org.apache.commons.math.optimization.OptimizationException;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,41,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,46,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,47,ublic void testFunctionEvaluationExceptions() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,48,ultivariateRealFunction wrong =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,49,ew MultivariateRealFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,50,rivate static final long serialVersionUID = 4751314470965489371L;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,51,ublic double value(double[] x) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,52,f (x[0] < 0) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,53,"hrow new FunctionEvaluationException(x, ""{0}"", ""oops"");"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,54, else if (x[0] > 1) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,55,"hrow new FunctionEvaluationException(new RuntimeException(""oops""), x);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,56, else {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,57,eturn x[0] * (1 - x[0]);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,40,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,41,public void testFunctionEvaluationExceptions() {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,42,MultivariateRealFunction wrong =
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,43,new MultivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,44,private static final long serialVersionUID = 4751314470965489371L;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,45,public double value(double[] x) throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,46,if (x[0] < 0) {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,47,"throw new FunctionEvaluationException(x, ""{0}"", ""oops"");"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,48,} else if (x[0] > 1) {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,49,"throw new FunctionEvaluationException(new RuntimeException(""oops""), x);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,50,} else {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,51,return x[0] * (1 - x[0]);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,61,ry {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,62,"elderMead optimizer = new NelderMead(0.9, 1.9, 0.4, 0.6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,63,"ptimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { -1.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,64,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,65, catch (FunctionEvaluationException ce) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,66,/ expected behavior
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,67,ssertNull(ce.getCause());
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,68, catch (Exception e) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,69,"ail(""wrong exception caught: "" + e.getMessage());"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,71,ry {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,72,"elderMead optimizer = new NelderMead(0.9, 1.9, 0.4, 0.6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,73,"ptimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { +2.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,74,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,75, catch (FunctionEvaluationException ce) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,76,/ expected behavior
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,77,ssertNotNull(ce.getCause());
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,78, catch (Exception e) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,79,"ail(""wrong exception caught: "" + e.getMessage());"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,83,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,84,ublic void testMinimizeMaximize()
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,85,"hrows FunctionEvaluationException, ConvergenceException {"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,87,/ the following function has 4 local extrema:
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,88,inal double xM        = -3.841947088256863675365;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,89,inal double yM        = -1.391745200270734924416;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,90,inal double xP        =  0.2286682237349059125691;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,91,inal double yP        = -yM;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,92,inal double valueXmYm =  0.2373295333134216789769; // local  maximum
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,93,inal double valueXmYp = -valueXmYm;                // local  minimum
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,94,inal double valueXpYm = -0.7290400707055187115322; // global minimum
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,95,inal double valueXpYp = -valueXpYm;                // global maximum
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,96,ultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,97,rivate static final long serialVersionUID = -7039124064449091152L;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,98,ublic double value(double[] variables) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,99,inal double x = variables[0];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,100,inal double y = variables[1];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,101,eturn ((x == 0) || (y == 0)) ? 0 : (FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y));
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,105,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,106,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-10, 1.0e-30));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,107,ptimizer.setMaxIterations(100);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,108,"ptimizer.setStartConfiguration(new double[] { 0.2, 0.2 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,109,ealPointValuePair optimum;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,111,/ minimization
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,112,"ptimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3.0, 0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,113,"ssertEquals(xM,        optimum.getPoint()[0], 2.0e-7);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,114,"ssertEquals(yP,        optimum.getPoint()[1], 2.0e-5);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,115,"ssertEquals(valueXmYp, optimum.getValue(),    6.0e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,116,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,117,ssertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,119,"ptimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { +1, 0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,120,"ssertEquals(xP,        optimum.getPoint()[0], 5.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,121,"ssertEquals(yM,        optimum.getPoint()[1], 6.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,122,"ssertEquals(valueXpYm, optimum.getValue(),    1.0e-11);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,123,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,124,ssertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,126,/ maximization
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,127,"ptimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,128,"ssertEquals(xM,        optimum.getPoint()[0], 1.0e-5);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,129,"ssertEquals(yM,        optimum.getPoint()[1], 3.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,130,"ssertEquals(valueXmYm, optimum.getValue(),    3.0e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,131,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,132,ssertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,134,"ptimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { +1, 0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,135,"ssertEquals(xP,        optimum.getPoint()[0], 4.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,136,"ssertEquals(yP,        optimum.getPoint()[1], 5.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,137,"ssertEquals(valueXpYp, optimum.getValue(),    7.0e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,138,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,139,ssertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,143,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,144,ublic void testRosenbrock()
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,145,"hrows FunctionEvaluationException, ConvergenceException {"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,147,osenbrock rosenbrock = new Rosenbrock();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,148,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,149,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1, 1.0e-3));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,150,ptimizer.setMaxIterations(100);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,151,ptimizer.setStartConfiguration(new double[][] {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,152," -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,154,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,155,"ptimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,157,"ssertEquals(rosenbrock.getCount(), optimizer.getEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,158,ssertTrue(optimizer.getEvaluations() > 40);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,159,ssertTrue(optimizer.getEvaluations() < 50);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,160,ssertTrue(optimum.getValue() < 8.0e-4);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,164,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,165,ublic void testPowell()
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,166,"hrows FunctionEvaluationException, ConvergenceException {"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,168,owell powell = new Powell();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,169,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,170,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,171,ptimizer.setMaxIterations(200);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,172,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,173,"ptimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,174,"ssertEquals(powell.getCount(), optimizer.getEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,175,ssertTrue(optimizer.getEvaluations() > 110);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,176,ssertTrue(optimizer.getEvaluations() < 130);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,177,ssertTrue(optimum.getValue() < 2.0e-3);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,181,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,182,ublic void testLeastSquares1()
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,183,"hrows FunctionEvaluationException, ConvergenceException {"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,185,inal RealMatrix factors =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,186,ew Array2DRowRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,187," 1.0, 0.0 },"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,188," 0.0, 1.0 }"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,189,", false);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,190,eastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,191,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,192,eturn factors.operate(variables);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,194,", new double[] { 2.0, -3.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,195,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,196,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-6));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,197,ptimizer.setMaxIterations(200);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,198,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,199,"ptimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10.0, 10.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,200,"ssertEquals( 2.0, optimum.getPointRef()[0], 3.0e-5);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,201,"ssertEquals(-3.0, optimum.getPointRef()[1], 4.0e-4);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,202,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,203,ssertTrue(optimizer.getEvaluations() < 80);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,204,ssertTrue(optimum.getValue() < 1.0e-6);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,207,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,208,ublic void testLeastSquares2()
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,209,"hrows FunctionEvaluationException, ConvergenceException {"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,211,inal RealMatrix factors =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,212,ew Array2DRowRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,213," 1.0, 0.0 },"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,214," 0.0, 1.0 }"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,215,", false);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,216,eastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,217,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,218,eturn factors.operate(variables);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,220,", new double[] { 2.0, -3.0 }, new double[] { 10.0, 0.1 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,221,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,222,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-6));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,223,ptimizer.setMaxIterations(200);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,224,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,225,"ptimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10.0, 10.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,226,"ssertEquals( 2.0, optimum.getPointRef()[0], 5.0e-5);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,227,"ssertEquals(-3.0, optimum.getPointRef()[1], 8.0e-4);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,228,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,229,ssertTrue(optimizer.getEvaluations() < 80);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,230,ssertTrue(optimum.getValue() < 1.0e-6);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,233,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,234,ublic void testLeastSquares3()
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,235,"hrows FunctionEvaluationException, ConvergenceException {"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,237,inal RealMatrix factors =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,238,ew Array2DRowRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,239," 1.0, 0.0 },"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,240," 0.0, 1.0 }"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,241,", false);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,242,eastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,243,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,244,eturn factors.operate(variables);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,246,", new double[] { 2.0, -3.0 }, new Array2DRowRealMatrix(new double [][] {"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,247," 1.0, 1.2 }, { 1.2, 2.0 }"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,249,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,250,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-6));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,251,ptimizer.setMaxIterations(200);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,252,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,253,"ptimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10.0, 10.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,254,"ssertEquals( 2.0, optimum.getPointRef()[0], 2.0e-3);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,255,"ssertEquals(-3.0, optimum.getPointRef()[1], 8.0e-4);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,256,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,257,ssertTrue(optimizer.getEvaluations() < 80);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,258,ssertTrue(optimum.getValue() < 1.0e-6);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,261,Test(expected = MaxIterationsExceededException.class)
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,262,ublic void testMaxIterations() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,263,ry {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,264,owell powell = new Powell();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,265,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,266,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,267,ptimizer.setMaxIterations(20);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,268,"ptimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,269, catch (OptimizationException oe) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,270,f (oe.getCause() instanceof ConvergenceException) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,271,hrow (ConvergenceException) oe.getCause();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,273,hrow oe;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,277,Test(expected = MaxEvaluationsExceededException.class)
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,278,ublic void testMaxEvaluations() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,279,ry {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,280,owell powell = new Powell();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,281,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,282,"ptimizer.setConvergenceChecker(new SimpleRealPointChecker(-1.0, 1.0e-3));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,283,ptimizer.setMaxEvaluations(20);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,284,"ptimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,285, catch (FunctionEvaluationException fee) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,286,f (fee.getCause() instanceof ConvergenceException) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,287,hrow (ConvergenceException) fee.getCause();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,289,hrow fee;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,293,rivate static class Rosenbrock implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,295,rivate int count;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,297,ublic Rosenbrock() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,298,ount = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,301,ublic double value(double[] x) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,302,+count;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,303,ouble a = x[1] - x[0] * x[0];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,304,ouble b = 1.0 - x[0];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,305,eturn 100 * a * a + b * b;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,308,ublic int getCount() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,309,eturn count;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,314,rivate static class Powell implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,316,rivate int count;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,318,ublic Powell() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,319,ount = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,322,ublic double value(double[] x) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,323,+count;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,324,ouble a = x[0] + 10 * x[1];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,325,ouble b = x[2] - x[3];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,326,ouble c = x[1] - 2 * x[2];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,327,ouble d = x[0] - x[3];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,328,eturn a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,331,ublic int getCount() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,332,eturn count;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,55,try {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,56,"NelderMead optimizer = new NelderMead(0.9, 1.9, 0.4, 0.6);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,57,"optimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { -1.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,58,"fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,59,} catch (FunctionEvaluationException ce) {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,60,// expected behavior
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,61,assertNull(ce.getCause());
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,62,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,63,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,65,try {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,66,"NelderMead optimizer = new NelderMead(0.9, 1.9, 0.4, 0.6);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,67,"optimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { +2.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,68,"fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,69,} catch (FunctionEvaluationException ce) {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,70,// expected behavior
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,71,assertNotNull(ce.getCause());
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,72,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,73,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,77,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,78,public void testMinimizeMaximize()
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,79,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,81,// the following function has 4 local extrema:
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,82,final double xM        = -3.841947088256863675365;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,83,final double yM        = -1.391745200270734924416;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,84,final double xP        =  0.2286682237349059125691;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,85,final double yP        = -yM;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,86,final double valueXmYm =  0.2373295333134216789769; // local  maximum
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,87,final double valueXmYp = -valueXmYm;                // local  minimum
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,88,final double valueXpYm = -0.7290400707055187115322; // global minimum
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,89,final double valueXpYp = -valueXpYm;                // global maximum
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,90,MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,91,private static final long serialVersionUID = -7039124064449091152L;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,92,public double value(double[] variables) throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,93,final double x = variables[0];
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,94,final double y = variables[1];
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,95,return ((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,99,NelderMead optimizer = new NelderMead();
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,100,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-10, 1.0e-30));"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,101,optimizer.setMaxEvaluations(100);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,102,"optimizer.setStartConfiguration(new double[] { 0.2, 0.2 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,103,RealPointValuePair optimum;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,105,// minimization
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,106,"optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3.0, 0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,107,"assertEquals(xM,        optimum.getPoint()[0], 2.0e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,108,"assertEquals(yP,        optimum.getPoint()[1], 2.0e-5);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,109,"assertEquals(valueXmYp, optimum.getValue(),    6.0e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,110,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,111,assertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,113,"optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { +1, 0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,114,"assertEquals(xP,        optimum.getPoint()[0], 5.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,115,"assertEquals(yM,        optimum.getPoint()[1], 6.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,116,"assertEquals(valueXpYm, optimum.getValue(),    1.0e-11);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,117,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,118,assertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,120,// maximization
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,121,"optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,122,"assertEquals(xM,        optimum.getPoint()[0], 1.0e-5);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,123,"assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,124,"assertEquals(valueXmYm, optimum.getValue(),    3.0e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,125,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,126,assertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,128,"optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { +1, 0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,129,"assertEquals(xP,        optimum.getPoint()[0], 4.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,130,"assertEquals(yP,        optimum.getPoint()[1], 5.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,131,"assertEquals(valueXpYp, optimum.getValue(),    7.0e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,132,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,133,assertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,136,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,137,public void testRosenbrock()
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,138,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,140,Rosenbrock rosenbrock = new Rosenbrock();
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,141,NelderMead optimizer = new NelderMead();
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,142,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1, 1.0e-3));"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,143,optimizer.setMaxEvaluations(100);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,144,optimizer.setStartConfiguration(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,145,"{ -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,147,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,148,"optimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,150,"assertEquals(rosenbrock.getCount(), optimizer.getEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,151,assertTrue(optimizer.getEvaluations() > 40);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,152,assertTrue(optimizer.getEvaluations() < 50);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,153,assertTrue(optimum.getValue() < 8.0e-4);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,156,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,157,public void testPowell()
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,158,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,160,Powell powell = new Powell();
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,161,NelderMead optimizer = new NelderMead();
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,162,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,163,optimizer.setMaxEvaluations(200);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,164,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,165,"optimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,166,"assertEquals(powell.getCount(), optimizer.getEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,167,assertTrue(optimizer.getEvaluations() > 110);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,168,assertTrue(optimizer.getEvaluations() < 130);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,169,assertTrue(optimum.getValue() < 2.0e-3);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,172,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,173,public void testLeastSquares1()
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,174,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,176,final RealMatrix factors =
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,177,new Array2DRowRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,178,"{ 1.0, 0.0 },"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,179,"{ 0.0, 1.0 }"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,180,"}, false);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,181,LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,182,public double[] value(double[] variables) {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,183,return factors.operate(variables);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,185,"}, new double[] { 2.0, -3.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,186,NelderMead optimizer = new NelderMead();
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,187,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-6));"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,188,optimizer.setMaxEvaluations(200);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,189,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,190,"optimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10.0, 10.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,191,"assertEquals( 2.0, optimum.getPointRef()[0], 3.0e-5);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,192,"assertEquals(-3.0, optimum.getPointRef()[1], 4.0e-4);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,193,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,194,assertTrue(optimizer.getEvaluations() < 80);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,195,assertTrue(optimum.getValue() < 1.0e-6);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,198,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,199,public void testLeastSquares2()
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,200,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,202,final RealMatrix factors =
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,203,new Array2DRowRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,204,"{ 1.0, 0.0 },"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,205,"{ 0.0, 1.0 }"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,206,"}, false);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,207,LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,208,public double[] value(double[] variables) {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,209,return factors.operate(variables);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,211,"}, new double[] { 2.0, -3.0 }, new double[] { 10.0, 0.1 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,212,NelderMead optimizer = new NelderMead();
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,213,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-6));"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,214,optimizer.setMaxEvaluations(200);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,215,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,216,"optimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10.0, 10.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,217,"assertEquals( 2.0, optimum.getPointRef()[0], 5.0e-5);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,218,"assertEquals(-3.0, optimum.getPointRef()[1], 8.0e-4);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,219,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,220,assertTrue(optimizer.getEvaluations() < 80);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,221,assertTrue(optimum.getValue() < 1.0e-6);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,224,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,225,public void testLeastSquares3()
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,226,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,228,final RealMatrix factors =
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,229,new Array2DRowRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,230,"{ 1.0, 0.0 },"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,231,"{ 0.0, 1.0 }"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,232,"}, false);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,233,LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,234,public double[] value(double[] variables) {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,235,return factors.operate(variables);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,237,"}, new double[] { 2.0, -3.0 }, new Array2DRowRealMatrix(new double [][] {"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,238,"{ 1.0, 1.2 }, { 1.2, 2.0 }"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,240,NelderMead optimizer = new NelderMead();
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,241,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-6));"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,242,optimizer.setMaxEvaluations(200);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,243,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,244,"optimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10.0, 10.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,245,"assertEquals( 2.0, optimum.getPointRef()[0], 2.0e-3);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,246,"assertEquals(-3.0, optimum.getPointRef()[1], 8.0e-4);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,247,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,248,assertTrue(optimizer.getEvaluations() < 80);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,249,assertTrue(optimum.getValue() < 1.0e-6);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,252,@Test(expected = TooManyEvaluationsException.class)
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,253,public void testMaxIterations() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,254,Powell powell = new Powell();
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,255,NelderMead optimizer = new NelderMead();
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,256,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,257,optimizer.setMaxEvaluations(20);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,258,"optimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,261,private static class Rosenbrock implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,262,private int count;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,264,public Rosenbrock() {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,265,count = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,268,public double value(double[] x) throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,269,++count;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,270,double a = x[1] - x[0] * x[0];
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,271,double b = 1.0 - x[0];
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,272,return 100 * a * a + b * b;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,275,public int getCount() {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,276,return count;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,280,private static class Powell implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,281,private int count;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,283,public Powell() {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,284,count = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,287,public double value(double[] x) throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,288,++count;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,289,double a = x[0] + 10 * x[1];
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,290,double b = x[2] - x[3];
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,291,double c = x[1] - 2 * x[2];
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,292,double d = x[0] - x[3];
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,293,return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,296,public int getCount() {
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,297,return count;
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,26,import org.apache.commons.math.exception.ConvergenceException;
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,27,mport org.apache.commons.math.optimization.OptimizationException;
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,36,ublic void testNoError() throws OptimizationException {
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,36,public void testNoError() {
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,60,ublic void testSmallError() throws OptimizationException {
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,60,public void testSmallError() {
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,119, catch(OptimizationException e) {
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,119,} catch(ConvergenceException e) {
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,28,import org.apache.commons.math.exception.ConvergenceException;
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,29,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,30,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,32,mport org.apache.commons.math.optimization.OptimizationException;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,107,"ublic void testTrivial() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,109,public void testTrivial() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,111,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,113,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,120,"ublic void testColumnsPermutation() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,122,public void testColumnsPermutation() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,127,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,129,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,140,"ublic void testNoDependency() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,142,public void testNoDependency() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,150,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,152,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,161,"ublic void testOneSet() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,163,public void testOneSet() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,169,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,171,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,180,"ublic void testTwoSets() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,182,public void testTwoSets() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,192,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,194,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,215,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,217,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,220, catch (OptimizationException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,222,} catch (ConvergenceException ee) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,227,"ublic void testIllConditioned() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,229,public void testIllConditioned() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,235,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,237,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,272,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,274,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,278, catch (OptimizationException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,280,} catch (ConvergenceException ee) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,295,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,297,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,301, catch (OptimizationException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,303,} catch (ConvergenceException ee) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,308,"ublic void testRedundantEquations() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,310,public void testRedundantEquations() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,316,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,318,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,327,"ublic void testInconsistentEquations() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,329,public void testInconsistentEquations() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,335,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,337,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,342,"ublic void testInconsistentSizes() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,344,public void testInconsistentSizes() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,346,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,348,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,360, catch (OptimizationException oe) {
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,362,} catch (DimensionMismatchException oe) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,379,ublic void testMaxIterations() {
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,381,public void testMaxEvaluations() {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,387,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,389,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,394, catch (OptimizationException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,396,} catch (TooManyEvaluationsException ee) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,401,"ublic void testCircleFitting() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,403,public void testCircleFitting() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,409,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,411,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,422,"ublic void testCircleFittingBadInit() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,424,public void testCircleFittingBadInit() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,463,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,465,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,468, catch (OptimizationException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,470,} catch (ConvergenceException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,29,import org.apache.commons.math.exception.ConvergenceException;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,30,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,31,import org.apache.commons.math.exception.TooManyEvaluationsException;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,33,mport org.apache.commons.math.optimization.OptimizationException;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,107,"ublic void testTrivial() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,109,public void testTrivial() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,117, catch (OptimizationException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,119,} catch (ConvergenceException ee) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,126,"ublic void testQRColumnsPermutation() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,128,public void testQRColumnsPermutation() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,144,"ublic void testNoDependency() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,146,public void testNoDependency() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,163,"ublic void testOneSet() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,165,public void testOneSet() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,180,"ublic void testTwoSets() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,182,public void testTwoSets() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,205,"ublic void testNonInversible() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,207,public void testNonInversible() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,219, catch (OptimizationException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,221,} catch (ConvergenceException ee) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,227,"ublic void testIllConditioned() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,229,public void testIllConditioned() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,261,"ublic void testMoreEstimatedParametersSimple() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,263,public void testMoreEstimatedParametersSimple() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,276,"ublic void testMoreEstimatedParametersUnsorted() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,278,public void testMoreEstimatedParametersUnsorted() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,297,"ublic void testRedundantEquations() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,299,public void testRedundantEquations() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,314,"ublic void testInconsistentEquations() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,316,public void testInconsistentEquations() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,327,"ublic void testInconsistentSizes() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,329,public void testInconsistentSizes() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,343, catch (OptimizationException oe) {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,345,} catch (DimensionMismatchException oe) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,383,ptimizer.setMaxIterations(maxCostEval);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,385,optimizer.setMaxEvaluations(maxCostEval);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,389,ssertTrue(! shouldFail);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,390, catch (OptimizationException ee) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,391,ssertTrue(shouldFail);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,391,assertTrue(!shouldFail);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,394,} catch (TooManyEvaluationsException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,395,assertTrue(shouldFail);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,399,"ublic void testCircleFitting() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,401,public void testCircleFitting() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,448,"ublic void testCircleFittingBadInit() throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,450,public void testCircleFittingBadInit() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,516, catch (OptimizationException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,518,} catch (ConvergenceException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,26,import org.apache.commons.math.exception.TooManyEvaluationsException;
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,28,mport org.apache.commons.math.optimization.OptimizationException;
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,493,ptimizer.setMaxIterations(100 * (function.getN() + 1));
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,493,optimizer.setMaxEvaluations(400 * (function.getN() + 1));
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,506, catch (OptimizationException lsse) {
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,506,} catch (TooManyEvaluationsException e) {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,112,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,112,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,128,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,128,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,149,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,149,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,167,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,167,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,190,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,190,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,225,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,225,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,241,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,241,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,280,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,280,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,299,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,299,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,315,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,315,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,333,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,333,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,350,ptimizer.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,350,optimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,51,"/ doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-5, 1e-9, 1e-7);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,51,"doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-9, 1e-7);"
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,57,"oTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-5, 1e-9, 1e-7);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,57,"doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-9, 1e-7);"
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,83,"oTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-5, 1e-9, 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,83,"doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,89,"oTest(func, minPoint, init, GoalType.MINIMIZE, 1e-5, 1e-9, 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,89,"doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,115,"oTest(func, maxPoint, init,  GoalType.MAXIMIZE, 1e-5, 1e-9, 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,115,"doTest(func, maxPoint, init,  GoalType.MAXIMIZE, 1e-9, 1e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,121,"oTest(func, maxPoint, init, GoalType.MAXIMIZE, 1e-5, 1e-9, 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,121,"doTest(func, maxPoint, init, GoalType.MAXIMIZE, 1e-9, 1e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,129, @param xTol Tolerance (relative error on the objective function) for
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,130," ""Brent"" line search algorithm used by ""Powell""."
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,139,"ouble xTol,"
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,143,inal MultivariateRealOptimizer optim = new PowellOptimizer(xTol);
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,144,"ptim.setConvergenceChecker(new SimpleScalarValueChecker(fTol, -1));"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,140,final MultivariateRealOptimizer optim = new PowellOptimizer();
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,141,optim.setMaxEvaluations(1000);
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,142,"optim.setConvergenceChecker(new SimpleScalarValueChecker(fTol, Math.ulp(1d)));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,28,* Test for {@link BracketFinder}.
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,77,@Test
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,78,public void testMinimumIsOnIntervalBoundary() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,79,final UnivariateRealFunction func = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,80,public double value(double x)
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,81,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,82,return x * x;
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,86,final BracketFinder bFind = new BracketFinder();
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,88,"bFind.search(func, GoalType.MINIMIZE, 0, 1);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,89,Assert.assertTrue(bFind.getLo() <= 0);
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,90,Assert.assertTrue(0 <= bFind.getHi());
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,92,"bFind.search(func, GoalType.MINIMIZE, -1, 0);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,93,Assert.assertTrue(bFind.getLo() <= 0);
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,94,Assert.assertTrue(0 <= bFind.getHi());
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,97,@Test
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,98,public void testIntervalBoundsOrdering() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,99,final UnivariateRealFunction func = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,100,public double value(double x)
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,101,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,102,return x * x;
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,106,final BracketFinder bFind = new BracketFinder();
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,108,"bFind.search(func, GoalType.MINIMIZE, -1, 1);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,109,Assert.assertTrue(bFind.getLo() <= 0);
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,110,Assert.assertTrue(0 <= bFind.getHi());
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,112,"bFind.search(func, GoalType.MINIMIZE, 1, -1);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,113,Assert.assertTrue(bFind.getLo() <= 0);
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,114,Assert.assertTrue(0 <= bFind.getHi());
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,116,"bFind.search(func, GoalType.MINIMIZE, 1, 2);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,117,Assert.assertTrue(bFind.getLo() <= 0);
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,118,Assert.assertTrue(0 <= bFind.getHi());
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,120,"bFind.search(func, GoalType.MINIMIZE, 2, 1);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,121,Assert.assertTrue(bFind.getLo() <= 0);
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,122,Assert.assertTrue(0 <= bFind.getHi());
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,23,mport org.apache.commons.math.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,25,mport org.apache.commons.math.MaxIterationsExceededException;
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,26,mport org.apache.commons.math.exception.NoDataException;
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,24,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,25,import org.apache.commons.math.exception.TooManyEvaluationsException;
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,31,mport org.apache.commons.math.optimization.UnivariateRealOptimizer;
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,33,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,44,nivariateRealOptimizer minimizer = new BrentOptimizer();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,45,inimizer.setMaxEvaluations(200);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,46,"ssertEquals(200, minimizer.getMaxEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,47,ry {
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,48,inimizer.getResult();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,49,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,50, catch (NoDataException ise) {
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,51,/ expected
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,52, catch (Exception e) {
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,53,"ail(""wrong exception caught"");"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,55,"ssertEquals(3 * FastMath.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,56,ssertTrue(minimizer.getIterationCount() <= 50);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,57,"ssertEquals(3 * FastMath.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,58,ssertTrue(minimizer.getIterationCount() <= 50);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,59,ssertTrue(minimizer.getEvaluations()    <= 100);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,60,ssertTrue(minimizer.getEvaluations()    >=  15);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,61,inimizer.setMaxEvaluations(10);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,41,UnivariateRealOptimizer optimizer = new BrentOptimizer();
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,42,"optimizer.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-10, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,43,optimizer.setMaxEvaluations(200);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,44,"assertEquals(200, optimizer.getMaxEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,45,"assertEquals(3 * Math.PI / 2, optimizer.optimize(f, GoalType.MINIMIZE, 4, 5).getPoint(),"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,46,100 * optimizer.getConvergenceChecker().getRelativeThreshold());
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,47,assertTrue(optimizer.getEvaluations() <= 50);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,48,"assertEquals(3 * Math.PI / 2, optimizer.optimize(f, GoalType.MINIMIZE, 1, 5).getPoint(),"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,49,100 * optimizer.getConvergenceChecker().getRelativeThreshold());
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,50,assertTrue(optimizer.getEvaluations() <= 100);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,51,assertTrue(optimizer.getEvaluations() >= 15);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,52,optimizer.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,63,"inimizer.optimize(f, GoalType.MINIMIZE, 4, 5);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,54,"optimizer.optimize(f, GoalType.MINIMIZE, 4, 5);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,65, catch (FunctionEvaluationException fee) {
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,56,} catch (TooManyEvaluationsException fee) {
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,76,nivariateRealOptimizer minimizer = new BrentOptimizer();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,77,"ssertEquals(-0.27195613, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,78,"ssertEquals( 0.82221643, minimizer.optimize(f, GoalType.MINIMIZE,  0.3,  0.9), 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,79,ssertTrue(minimizer.getIterationCount() <= 50);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,67,UnivariateRealOptimizer optimizer = new BrentOptimizer();
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,68,"optimizer.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-10, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,69,optimizer.setMaxEvaluations(200);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,70,"assertEquals(-0.27195613, optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2).getPoint(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,71,"assertEquals( 0.82221643, optimizer.optimize(f, GoalType.MINIMIZE,  0.3,  0.9).getPoint(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,72,assertTrue(optimizer.getEvaluations() <= 50);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,82,"ssertEquals(-0.27195613, minimizer.optimize(f, GoalType.MINIMIZE, -1.0, 0.2), 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,83,ssertTrue(minimizer.getIterationCount() <= 50);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,75,"assertEquals(-0.27195613, optimizer.optimize(f, GoalType.MINIMIZE, -1.0, 0.2).getPoint(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,76,assertTrue(optimizer.getEvaluations() <= 50);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,90,nivariateRealOptimizer minimizer = new BrentOptimizer();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,91,inimizer.setRelativeAccuracy(1e-10);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,92,inimizer.setAbsoluteAccuracy(1e-11);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,83,UnivariateRealOptimizer optimizer = new BrentOptimizer();
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,84,"optimizer.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-12, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,85,optimizer.setMaxEvaluations(40);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,94,inal DescriptiveStatistics[] stat = new DescriptiveStatistics[3];
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,87,final DescriptiveStatistics[] stat = new DescriptiveStatistics[2];
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,105,"tat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,106,tat[1].addValue(minimizer.getIterationCount());
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,107,tat[2].addValue(minimizer.getEvaluations());
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,98,"stat[0].addValue(optimizer.optimize(f, GoalType.MINIMIZE, min, max, start).getPoint());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,99,stat[1].addValue(optimizer.getEvaluations());
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,111,inal double medianIter = stat[1].getPercentile(50);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,112,inal double medianEval = stat[2].getPercentile(50);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,113,ssertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,114,"ssertEquals(medianIter, 17, FastMath.ulp(1d));"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,115,"ssertEquals(medianEval, 18, FastMath.ulp(1d));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,103,final double medianEval = stat[1].getPercentile(50);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,104,assertTrue(meanOptValue > -0.2719561281 && meanOptValue < -0.2719561280);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,105,"assertEquals((int) medianEval, 27);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,118,Test
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,108,@Test(expected = TooManyEvaluationsException.class)
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,123,nivariateRealOptimizer minimizer = new BrentOptimizer();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,124,"ssertEquals(0.27195613, minimizer.optimize(f, GoalType.MAXIMIZE, 0.2, 0.3), 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,125,inimizer.setMaximalIterationCount(5);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,113,UnivariateRealOptimizer optimizer = new BrentOptimizer();
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,114,"optimizer.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-12, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,115,"assertEquals(0.27195613, optimizer.optimize(f, GoalType.MAXIMIZE, 0.2, 0.3).getPoint(), 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,116,optimizer.setMaxEvaluations(5);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,127,"inimizer.optimize(f, GoalType.MAXIMIZE, 0.2, 0.3);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,118,"optimizer.optimize(f, GoalType.MAXIMIZE, 0.2, 0.3);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,129, catch (MaxIterationsExceededException miee) {
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,120,} catch (TooManyEvaluationsException miee) {
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,139,nivariateRealOptimizer solver = new BrentOptimizer();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,141,olver.setRelativeAccuracy(1e-8);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,130,UnivariateRealOptimizer optimizer = new BrentOptimizer();
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,131,"optimizer.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-8, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,132,optimizer.setMaxEvaluations(50);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,144,"ouble result = solver.optimize(f, GoalType.MINIMIZE, 3 * FastMath.PI / 2, 5);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,145,"ssertEquals(3 * FastMath.PI / 2, result, 10 * solver.getRelativeAccuracy());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,135,"double result = optimizer.optimize(f, GoalType.MINIMIZE, 3 * Math.PI / 2, 5).getPoint();"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,136,"assertEquals(3 * Math.PI / 2, result, 100 * optimizer.getConvergenceChecker().getRelativeThreshold());"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,147,"esult = solver.optimize(f, GoalType.MINIMIZE, 4, 3 * FastMath.PI / 2);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,148,"ssertEquals(3 * FastMath.PI / 2, result, 10 * solver.getRelativeAccuracy());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,138,"result = optimizer.optimize(f, GoalType.MINIMIZE, 4, 3 * Math.PI / 2).getPoint();"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,139,"assertEquals(3 * Math.PI / 2, result, 100 * optimizer.getConvergenceChecker().getRelativeThreshold());"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,18,ackage org.apache.commons.math.optimization;
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,18,package org.apache.commons.math.optimization.univariate;
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,29,import org.apache.commons.math.optimization.GoalType;
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,40,"underlying.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-10, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,41,underlying.setMaxEvaluations(300);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,41,ultiStartUnivariateRealOptimizer minimizer =
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,44,MultiStartUnivariateRealOptimizer optimizer =
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,43,"inimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,44,ouble[] optima = minimizer.getOptima();
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,45,ouble[] optimaValues = minimizer.getOptimaValues();
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,46,"optimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,47,UnivariateRealPointValuePair[] optima = optimizer.getOptima();
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,47,ouble d = (optima[i] - optima[i-1]) / (2 * FastMath.PI);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,49,double d = (optima[i].getPoint() - optima[i-1].getPoint()) / (2 * FastMath.PI);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,49,"ssertEquals(-1.0, f.value(optima[i]), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,50,"ssertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,51,"assertEquals(-1.0, f.value(optima[i].getPoint()), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,52,"assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,52,ssertTrue(minimizer.getEvaluations() > 150);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,53,ssertTrue(minimizer.getEvaluations() < 250);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,54,assertTrue(optimizer.getEvaluations() > 150);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,55,assertTrue(optimizer.getEvaluations() < 250);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,62,nderlying.setRelativeAccuracy(1e-15);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,64,"underlying.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-9, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,65,underlying.setMaxEvaluations(300);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,65,ultiStartUnivariateRealOptimizer minimizer =
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,68,MultiStartUnivariateRealOptimizer optimizer =
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,67,inimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,68,inimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,70,ry {
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,71,inimizer.getOptima();
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,72,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,73, catch (IllegalStateException ise) {
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,74,/ expected
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,75, catch (Exception e) {
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,76,"ail(""wrong exception caught"");"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,78,ry {
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,79,inimizer.getOptimaValues();
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,80,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,81, catch (IllegalStateException ise) {
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,82,/ expected
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,83, catch (Exception e) {
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,84,"ail(""wrong exception caught"");"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,87,"ouble result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,88,"ssertEquals(-0.2719561270319131, result, 1.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,89,"ssertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,90,"ssertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,71,UnivariateRealPointValuePair optimum
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,72,"= optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,73,"assertEquals(-0.2719561271, optimum.getPoint(), 1e-9);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,74,"assertEquals(-0.0443342695, optimum.getValue(), 1e-9);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,92,ouble[] optima = minimizer.getOptima();
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,93,ouble[] optimaValues = minimizer.getOptimaValues();
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,76,UnivariateRealPointValuePair[] optima = optimizer.getOptima();
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,95,"ssertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,78,"assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,97,ssertTrue(minimizer.getEvaluations()    >= 120);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,98,ssertTrue(minimizer.getEvaluations()    <= 170);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,99,ssertTrue(minimizer.getIterationCount() >= 120);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,100,ssertTrue(minimizer.getIterationCount() <= 170);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,80,assertTrue(optimizer.getEvaluations() >= 110);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,81,assertTrue(optimizer.getEvaluations() <= 150);

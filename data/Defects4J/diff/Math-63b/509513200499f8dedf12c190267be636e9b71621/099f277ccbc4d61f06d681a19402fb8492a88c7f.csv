is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,26, @version $Revision: 1.11 $ $Date: 2004/06/17 21:37:05 $
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,26,* @version $Revision: 1.12 $ $Date: 2004/06/18 22:10:35 $
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,59,public void testSpecialValues() {
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,60,"double[] testArray = {0d, Double.NaN, Double.POSITIVE_INFINITY,"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,61,Double.NEGATIVE_INFINITY};
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,62,Min min = new Min();
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,63,assertTrue(Double.isNaN(min.getResult()));
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,64,min.increment(testArray[0]);
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,65,"assertEquals(0d, min.getResult(), 0);"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,66,min.increment(testArray[1]);
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,67,"assertEquals(0d, min.getResult(), 0);"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,68,min.increment(testArray[2]);
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,69,"assertEquals(0d, min.getResult(), 0);"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,70,min.increment(testArray[3]);
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,71,"assertEquals(Double.NEGATIVE_INFINITY, min.getResult(), 0);"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,72,"assertEquals(Double.NEGATIVE_INFINITY, min.evaluate(testArray), 0);"

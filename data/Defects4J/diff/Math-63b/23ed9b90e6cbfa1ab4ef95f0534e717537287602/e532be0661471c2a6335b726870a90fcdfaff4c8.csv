is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,79,public void testModelsMerging()
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,80,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,82,"// theoretical solution: y[0] = cos(t), y[1] = sin(t)"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,83,FirstOrderDifferentialEquations problem =
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,84,new FirstOrderDifferentialEquations() {
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,85,"public void computeDerivatives(double t, double[] y, double[] dot)"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,86,throws DerivativeException {
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,87,dot[0] = -y[1];
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,88,dot[1] =  y[0];
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,90,public int getDimension() {
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,91,return 2;
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,95,// integrate backward from &pi; to 0;
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,96,ContinuousOutputModel cm1 = new ContinuousOutputModel();
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,97,FirstOrderIntegrator integ1 =
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,98,"new DormandPrince853Integrator(0, 1.0, 1.0e-8, 1.0e-8);"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,99,integ1.setStepHandler(cm1);
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,100,"integ1.integrate(problem, Math.PI, new double[] { -1.0, 0.0 },"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,101,"0, new double[2]);"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,103,// integrate backward from 2&pi; to &pi;
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,104,ContinuousOutputModel cm2 = new ContinuousOutputModel();
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,105,FirstOrderIntegrator integ2 =
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,106,"new DormandPrince853Integrator(0, 0.1, 1.0e-12, 1.0e-12);"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,107,integ2.setStepHandler(cm2);
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,108,"integ2.integrate(problem, 2.0 * Math.PI, new double[] { 1.0, 0.0 },"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,109,"Math.PI, new double[2]);"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,111,// merge the two half circles
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,112,ContinuousOutputModel cm = new ContinuousOutputModel();
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,113,cm.append(cm2);
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,114,cm.append(new ContinuousOutputModel());
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,115,cm.append(cm1);
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,117,// check circle
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,118,"assertEquals(2.0 * Math.PI, cm.getInitialTime(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,119,"assertEquals(0, cm.getFinalTime(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,120,"assertEquals(cm.getFinalTime(), cm.getInterpolatedTime(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,121,for (double t = 0; t < 2.0 * Math.PI; t += 0.1) {
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,122,cm.setInterpolatedTime(t);
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,123,double[] y = cm.getInterpolatedState();
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,124,"assertEquals(Math.cos(t), y[0], 1.0e-7);"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,125,"assertEquals(Math.sin(t), y[1], 1.0e-7);"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,130,public void testErrorConditions()
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,131,throws DerivativeException {
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,133,ContinuousOutputModel cm = new ContinuousOutputModel();
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,134,"cm.handleStep(buildInterpolator(0, new double[] { 0.0, 1.0, -2.0 }, 1), true);"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,136,// dimension mismatch
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,137,"assertTrue(checkAppendError(cm, 1.0, new double[] { 0.0, 1.0 }, 2.0));"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,139,// hole between time ranges
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,140,"assertTrue(checkAppendError(cm, 10.0, new double[] { 0.0, 1.0, -2.0 }, 20.0));"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,142,// propagation direction mismatch
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,143,"assertTrue(checkAppendError(cm, 1.0, new double[] { 0.0, 1.0, -2.0 }, 0.0));"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,145,// no errors
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,146,"assertFalse(checkAppendError(cm, 1.0, new double[] { 0.0, 1.0, -2.0 }, 2.0));"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,150,"private boolean checkAppendError(ContinuousOutputModel cm,"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,151,"double t0, double[] y0, double t1)"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,152,throws DerivativeException {
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,153,try {
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,154,ContinuousOutputModel otherCm = new ContinuousOutputModel();
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,155,"otherCm.handleStep(buildInterpolator(t0, y0, t1), true);"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,156,cm.append(otherCm);
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,157,} catch(IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,158,//expected behavior
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,159,return true;
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,161,return false;
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,164,"private StepInterpolator buildInterpolator(double t0, double[] y0, double t1) {"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,165,"DummyStepInterpolator interpolator  = new DummyStepInterpolator(y0, t1 >= t0);"
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,166,interpolator.storeTime(t0);
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,167,interpolator.shift();
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,168,interpolator.storeTime(t1);
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,169,return interpolator;

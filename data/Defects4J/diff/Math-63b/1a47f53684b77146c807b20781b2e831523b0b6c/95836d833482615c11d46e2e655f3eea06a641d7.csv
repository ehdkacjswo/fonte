is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,73,// org.apache.commons.math.optimization.direct.DirectSearchOptimizer
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,109,/ org.apache.commons.math.optimization.general.AbstractEstimator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,110,// org.apache.commons.math.optimization.MultiStartOptimizer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,111,"{ ""no optimum computed yet"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,112,"""aucun optimum n''a encore \u00e9t\u00e9 calcul\u00e9"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,114,// org.apache.commons.math.optimization.direct.DirectSearchOptimizer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,115,"{ ""simplex must contain at least one point"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,116,"""le simplex doit contenir au moins un point"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,117,"{ ""equals vertices {0} and {1} in simplex configuration"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,118,"""sommets {0} et {1} \u00e9gaux dans la configuration du simplex"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,122,// org.apache.commons.math.optimization.general.AbstractEstimator
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,20,mport org.apache.commons.math.optimization.direct.DirectSearchOptimizer;
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,20,import java.io.Serializable;
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,23,** This interface specifies how to check if a {@link
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,24, DirectSearchOptimizer direct search method} has converged.
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,22,/** This interface specifies how to check if an {@link Optimizer optimization
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,23,* algorithm} has converged.
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,32, @since 1.2
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,31,* @since 2.0
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,35,ublic interface ConvergenceChecker {
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,34,public interface ConvergenceChecker extends Serializable {
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,37,** Check if the optimization algorithm has converged on the simplex.
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,36,/** Check if the optimization algorithm has converged considering the last points.
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,39," When this method is called, all points in the simplex have been evaluated"
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,40, and are sorted from lowest to largest value. The values are either the
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,41, original objective function values if the optimizer was configured for
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,42," minimization, or the opposites of the original objective function values"
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,43, if the optimizer was configured for maximization.
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,38,* This method may be called several time from the same algorithm iteration with
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,39,* different points. This can be detected by checking the iteration number at each
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,40,"* call if needed. Each time this method is called, the previous and current point"
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,41,"* correspond to points with the same role at each iteration, so they can be"
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,42,"* compared. As an example, simplex-based algorithms call this method for all"
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,43,"* points of the simplex, not only for the best or worst ones."
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,45, @param simplex ordered simplex
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,45,* @param iteration index of current iteration
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,46,* @param previous point from previous iteration
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,47,* @param current point from current iteration
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,48,oolean converged(PointValuePair[] simplex);
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,50,"boolean converged(int iteration, PointValuePair previous, PointValuePair current);"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,20,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,27," residuals, i.e. differences between a theoretical result computed from a"
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,28, variables set applied to a model and a reference. Residuals are intended to be
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,29, minimized in order to get the variables set that best fit the model to the
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,30, reference. The reference may be obtained for example from physical measurements
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,31, whether the model is built from theoretical considerations.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,28,* a theoretical result computed from a variables set applied to a model and
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,29,* the models variables must be adjusted to fit the theoretical result to some
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,30,* reference observations. The observations may be obtained for example from
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,31,* physical measurements whether the model is built from theoretical
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,32,* considerations.
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,35, a scalar value. It implements the {@link ObjectiveFunction} interface and can
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,36, therefore be minimized by any optimizer supporting scalar objectives functions.
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,37, This correspond to a least square estimation.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,36,* a scalar value. The residuals are the difference between the theoretical model
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,37,* (i.e. the output of the vectorial objective function) and the observations. The
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,38,* class implements the {@link ObjectiveFunction} interface and can therefore be
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,39,* minimized by any optimizer supporting scalar objectives functions.This is one way
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,40,* to perform a least square estimation. There are other ways to do this without using
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,41,"* this converter, as some optimization algorithms directly support vectorial objective"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,42,* functions.
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,52,rivate static final long serialVersionUID = -5174886571116126798L;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,57,private static final long serialVersionUID = 2424320989874772110L;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,62,/** Observations to be compared to objective function to compute residuals. */
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,63,private final double[] observations;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,73,* @param observations observations to be compared to objective function to compute residuals
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,66,ublic LeastSquaresConverter (final MultiObjectiveFunction function) {
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,67,his.function = function;
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,68,his.weights  = null;
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,69,his.scale    = null;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,75,"public LeastSquaresConverter (final MultiObjectiveFunction function,"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,76,final double[] observations) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,77,this.function     = function;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,78,this.observations = observations.clone();
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,79,this.weights      = null;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,80,this.scale        = null;
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,76, objective = &sum;(weight<sub>i</sub>residual<sub>i</sub>)<sup>2</sup>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,87,* objective = &sum;weight<sub>i</sub>(observation<sub>i</sub>-objective<sub>i</sub>)<sup>2</sup>
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,81," deviations. As an example, consider a 2000 elements residuals array in which"
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,82, even elements are angular measurements in degrees with a 0.01&deg; standard
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,83, deviation and off elements are distance measurements in meters with a 15m
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,84," standard deviation. In this case, the weights array should be initialized with"
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,85, value 1.0/0.01 in the even elements and 1.0/15.0 in the odd elements.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,92,"* deviations. As an example, consider a residuals array in which even elements"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,93,* are angular measurements in degrees with a 0.01&deg; standard deviation and
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,94,* odd elements are distance measurements in meters with a 15m standard deviation.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,95,"* In this case, the weights array should be initialized with value"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,96,* 1.0/(0.01<sup>2</sup>) in the even elements and 1.0/(15.0<sup>2</sup>) in the
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,97,* odd elements (i.e. reciprocals of variances).
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,88, The residuals array computed by the function and the weights array must
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,89, have consistent sizes or a {@link ObjectiveException} will be triggered while
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,90, computing the scalar objective.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,100,"* The array computed by the objective function, the observations array and the"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,101,* weights array must have consistent sizes or a {@link ObjectiveException} will be
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,102,* triggered while computing the scalar objective.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,105,* @param observations observations to be compared to objective function to compute residuals
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,107,* @exception IllegalArgumentException if the observations vector and the weights
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,108,* vector dimensions don't match (objective function dimension is checked only when
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,109,* the {@link #objective} method is called)
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,96,inal double[] weights) {
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,97,his.function = function;
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,98,his.weights  = weights.clone();
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,99,his.scale    = null;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,112,"final double[] observations, final double[] weights)"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,113,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,114,if (observations.length != weights.length) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,115,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,116,"""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,117,"observations.length, weights.length);"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,119,this.function     = function;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,120,this.observations = observations.clone();
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,121,this.weights      = weights.clone();
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,122,this.scale        = null;
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,102,** Build a simple convertor for correlated residuals with the specific weights.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,125,/** Build a simple converter for correlated residuals with the specific weights.
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,106, objective = &sum;(y<sub>i</sub>)<sup>2</sup> with y = scale&times;residual
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,129,* objective = y<sup>T</sup>y with y = scale&times;(observation-objective)
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,110, The residuals array computed by the function and the scaling matrix must
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,111, have consistent sizes or a {@link ObjectiveException} will be triggered while
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,112, computing the scalar objective.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,133,"* The array computed by the objective function, the observations array and the"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,134,* the scaling matrix must have consistent sizes or a {@link ObjectiveException}
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,135,* will be triggered while computing the scalar objective.
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,115, @param scale scaling matrix (
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,138,* @param observations observations to be compared to objective function to compute residuals
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,139,* @param scale scaling matrix
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,140,* @exception IllegalArgumentException if the observations vector and the scale
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,141,* matrix dimensions don't match (objective function dimension is checked only when
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,142,* the {@link #objective} method is called)
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,118,inal RealMatrix scale) {
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,119,his.function = function;
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,120,his.weights  = null;
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,121,his.scale    = scale.copy();
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,145,"final double[] observations, final RealMatrix scale)"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,146,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,147,if (observations.length != scale.getColumnDimension()) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,148,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,149,"""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,150,"observations.length, scale.getColumnDimension());"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,152,this.function     = function;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,153,this.observations = observations.clone();
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,154,this.weights      = null;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,155,this.scale        = scale.copy();
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,161,// compute residuals
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,128,ouble sumSquares = 0;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,163,if (residuals.length != observations.length) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,164,"throw new ObjectiveException(""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,165,"residuals.length, observations.length);"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,167,for (int i = 0; i < residuals.length; ++i) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,168,residuals[i] -= observations[i];
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,171,// compute sum of squares
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,172,double sumSquares = 0;
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,131,f (weights.length != residuals.length) {
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,132,"hrow new ObjectiveException(""dimension mismatch {0} != {1}"","
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,133,"eights.length, residuals.length);"
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,135,or (int i = 0; i < weights.length; ++i) {
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,136,inal double ai = residuals[i] * weights[i];
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,137,umSquares += ai * ai;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,174,for (int i = 0; i < residuals.length; ++i) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,175,final double ri = residuals[i];
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,176,sumSquares +=  weights[i] * ri * ri;
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,140,f (scale.getColumnDimension() != residuals.length) {
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,141,"hrow new ObjectiveException(""dimension mismatch {0} != {1}"","
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,142,"cale.getColumnDimension(), residuals.length);"
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,35,* @exception IllegalArgumentException if variables dimension is wrong
False,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,36,ouble[] objective(double[] variables) throws ObjectiveException;
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,37,double[] objective(double[] variables)
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,38,"throws ObjectiveException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,21,import java.util.Comparator;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,23,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,24,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,25,import org.apache.commons.math.random.RandomVectorGenerator;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,28,* Special implementation of the {@link Optimizer} interface adding
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,29,* multi-start features to an existing optimizer.
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,30,* <p>
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,31,* This class wraps a classical optimizer to use it several times in
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,32,* turn with different starting points in order to avoid being trapped
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,33,* into a local extremum when looking for a global one.
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,34,* </p>
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,35,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,36,* @since 2.0
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,38,public class MultiStartOptimizer implements Optimizer {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,40,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,41,private static final long serialVersionUID = 6648351778723282863L;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,43,/** Underlying classical optimizer. */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,44,private final Optimizer optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,46,/** Number of evaluations already performed for all starts. */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,47,private int totalEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,49,/** Maximal number of evaluations allowed. */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,50,private int maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,52,/** Number of starts to go. */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,53,private int starts;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,55,/** Random generator for multi-start. */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,56,private RandomVectorGenerator generator;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,58,/** Found optima. */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,59,private PointValuePair[] optima;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,62,* Create a multi-start optimizer from a single-start optimizer
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,63,* @param optimizer single-start optimizer to wrap
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,64,* @param starts number of starts to perform (including the
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,65,"* first one), multi-start is disabled if value is less than or"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,66,* equal to 1
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,67,* @param generator random vector generator to use for restarts
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,69,"public MultiStartOptimizer(final Optimizer optimizer, final int starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,70,final RandomVectorGenerator generator) {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,71,this.optimizer        = optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,72,this.totalEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,73,this.maxEvaluations   = Integer.MAX_VALUE;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,74,this.starts           = starts;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,75,this.generator        = generator;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,76,this.optima           = null;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,79,/** Get all the optima found during the last call to {@link
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,80,"* #optimize(ObjectiveFunction, GoalType, double[]) optimize}."
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,81,* <p>The optimizer stores all the optima found during a set of
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,82,"* restarts. The {@link #optimize(ObjectiveFunction, GoalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,83,* double[]) optimize} method returns the best point only. This
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,84,"* method returns all the points found at the end of each starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,85,* including the best one already returned by the {@link
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,86,"* #optimize(ObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,87,* method.
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,88,* </p>
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,89,* <p>
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,90,* The returned array as one element for each start as specified
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,91,* in the constructor. It is ordered with the results from the
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,92,"* runs that did converge first, sorted from best to worst"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,93,* objective value (i.e in ascending order if minimizing and in
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,94,"* descending order if maximizing), followed by and null elements"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,95,* corresponding to the runs that did not converge. This means all
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,96,"* elements will be null if the {@link #optimize(ObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,97,"* GoalType, double[]) optimize} method did throw a {@link"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,98,* ConvergenceException ConvergenceException}). This also means that
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,99,"* if the first element is non null, it is the best point found across"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,100,* all starts.</p>
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,101,* @return array containing the optima
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,102,"* @exception IllegalStateException if {@link #optimize(ObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,103,"* GoalType, double[]) optimize} has not been called"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,105,public PointValuePair[] getOptima() throws IllegalStateException {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,106,if (optima == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,107,"throw MathRuntimeException.createIllegalStateException(""no optimum computed yet"");"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,109,return (PointValuePair[]) optima.clone();
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,112,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,113,public int getEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,114,return totalEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,117,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,118,public void setMaxEvaluations(int maxEvaluations) {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,119,this.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,122,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,123,public int getMaxEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,124,return maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,127,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,128,public void setConvergenceChecker(ConvergenceChecker checker) {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,129,optimizer.setConvergenceChecker(checker);
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,132,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,133,public ConvergenceChecker getConvergenceChecker() {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,134,return optimizer.getConvergenceChecker();
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,137,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,138,"public PointValuePair optimize(final ObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,139,"final GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,140,double[] startPoint)
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,141,"throws ObjectiveException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,143,optima = new PointValuePair[starts];
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,144,totalEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,146,// multi-start loop
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,147,for (int i = 0; i < starts; ++i) {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,149,try {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,150,optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,151,"optima[i] = optimizer.optimize(f, goalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,152,(i == 0) ? startPoint : generator.nextVector());
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,153,} catch (ObjectiveException obe) {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,154,optima[i] = null;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,155,} catch (OptimizationException ope) {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,156,optima[i] = null;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,159,totalEvaluations += optimizer.getEvaluations();
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,163,"// sort the optima from best to worst, followed by null elements"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,164,"Arrays.sort(optima, new Comparator<PointValuePair>() {"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,165,"public int compare(final PointValuePair o1, final PointValuePair o2) {"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,166,if (o1 == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,167,return (o2 == null) ? 0 : +1;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,168,} else if (o2 == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,169,return -1;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,171,final double v1 = o1.getValue();
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,172,final double v2 = o2.getValue();
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,173,return (goalType == GoalType.MINIMIZE) ?
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,174,"Double.compare(v1, v2) : Double.compare(v2, v1);"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,178,if (optima[0] == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,179,throw new OptimizationException(
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,180,"""none of the {0} start points lead to convergence"","
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,181,starts);
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,184,// return the found point given the best objective function value
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,185,return optima[0];
True,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,34,* @exception IllegalArgumentException if variables dimension is wrong
False,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,35,ouble objective(double[] variables) throws ObjectiveException;
True,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,36,double objective(double[] variables)
True,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,37,"throws ObjectiveException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,20,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,23,* Special implementation of the {@link ConvergenceChecker} interface using
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,24,* only objective function values.
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,25,* <p>
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,26,* Convergence is considered to have been reached if either the relative
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,27,* difference between the objective function values is smaller than a
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,28,* threshold or if either the absolute difference between the objective
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,29,* function values is smaller than another threshold.
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,30,* </p>
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,31,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,32,* @since 2.0
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,34,public class ObjectiveValueChecker implements ConvergenceChecker {
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,36,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,37,private static final long serialVersionUID = 2490271385513842607L;
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,39,/** Default relative threshold. */
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,40,private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,42,/** Default absolute threshold. */
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,43,private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,45,/** Relative tolerance threshold. */
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,46,private final double relativeThreshold;
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,48,/** Absolute tolerance threshold. */
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,49,private final double absoluteThreshold;
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,51,/** Build an instance with default threshold.
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,53,public ObjectiveValueChecker() {
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,54,this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,55,this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,58,/** Build an instance with a specified threshold.
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,59,* <p>
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,60,"* In order to perform only relative checks, the absolute tolerance"
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,61,* must be set to a negative value. In order to perform only absolute
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,62,"* checks, the relative tolerance must be set to a negative value."
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,63,* </p>
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,64,* @param relativeThreshold relative tolerance threshold
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,65,* @param absoluteThreshold absolute tolerance threshold
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,67,"public ObjectiveValueChecker(final double relativeThreshold,"
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,68,final double absoluteThreshold) {
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,69,this.relativeThreshold = relativeThreshold;
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,70,this.absoluteThreshold = absoluteThreshold;
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,73,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,74,"public boolean converged(final int iteration,"
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,75,"final PointValuePair previous,"
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,76,final PointValuePair current) {
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,77,final double p          = previous.getValue();
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,78,final double c          = current.getValue();
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,79,final double difference = Math.abs(p - c);
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,80,"final double size       = Math.max(Math.abs(p), Math.abs(c));"
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,81,return (difference <= (size * relativeThreshold)) || (difference <= absoluteThreshold);
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,30, @param maxEvaluations maximal number of function calls for each
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,31, start (note that the number may be checked <em>after</em>
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,32," a few related calls have been made, this means that in some"
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,33," cases this number will be exceeded by a few units, depending on"
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,34, the dimension of the problem and kind of optimizer).
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,30,* <p>
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,31,* The number of objective function calls may be checked <em>after</em> a few
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,32,* related calls have been made. This implies that in some cases this number may
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,33,"* be exceeded by a few units, depending on the dimension of the problem and kind"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,34,* of optimizer.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,35,* </p>
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,36,* @param maxEvaluations maximal number of function calls
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,41,/** Get the maximal number of objective function calls.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,42,* <p>
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,43,* The number of objective function calls may be checked <em>after</em> a few
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,44,* related calls have been made. This implies that in some cases this number may
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,45,"* be exceeded by a few units, depending on the dimension of the problem and kind"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,46,* of optimizer.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,47,* </p>
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,48,* @return maximal number of function calls
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,50,int getMaxEvaluations();
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,57,/** Get the convergence checker.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,58,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,60,ConvergenceChecker getConvergenceChecker();
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,66,* @param startPoint the start point for optimization
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,71,* @exception IllegalArgumentException if the start point dimension is wrong
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,73,"PointValuePair optimize(ObjectiveFunction f, GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,74,double[] startPoint)
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,75,"throws ObjectiveException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,77,/** Get the number of evaluations of the objective function.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,78,* <p>
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,79,* The number of evaluation correspond to the last call to the
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,80,"* {@link #optimize(ObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,81,* method. It is 0 if the method has not been called yet.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,82,* </p>
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,83,* @return number of evaluations of the objective function
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,52,"ointValuePair optimize(final ObjectiveFunction f, final GoalType goalType)"
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,53,"hrows ObjectiveException, OptimizationException;"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,85,int getEvaluations();
False,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,33,rivate static final long serialVersionUID = 2254035971797977063L;
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,32,private static final long serialVersionUID = 1003888396256744753L;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,24,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,25,mport org.apache.commons.math.DimensionMismatchException;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,27,mport org.apache.commons.math.linear.RealMatrix;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,28,mport org.apache.commons.math.linear.decomposition.NotPositiveDefiniteMatrixException;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,25,import org.apache.commons.math.optimization.GoalType;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,28,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,29,import org.apache.commons.math.optimization.Optimizer;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,33,mport org.apache.commons.math.random.CorrelatedRandomVectorGenerator;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,34,mport org.apache.commons.math.random.JDKRandomGenerator;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,35,mport org.apache.commons.math.random.RandomGenerator;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,36,mport org.apache.commons.math.random.RandomVectorGenerator;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,37,mport org.apache.commons.math.random.UncorrelatedRandomVectorGenerator;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,38,mport org.apache.commons.math.random.UniformRandomGenerator;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,39,mport org.apache.commons.math.stat.descriptive.moment.VectorialCovariance;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,40,mport org.apache.commons.math.stat.descriptive.moment.VectorialMean;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,31,import org.apache.commons.math.optimization.ObjectiveValueChecker;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,52," functions, unpredictable dicontinuities) or difficult (complexity,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,43,"* functions, unpredictable discontinuities) or difficult (complexity,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,61, steps.</p>
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,52,* steps.<p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,63, <p>Optimization can be attempted either in single-start or in
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,64, multi-start mode. Multi-start is a traditional way to try to avoid
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,65, being trapped in a local optimum and miss the global optimum of a
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,66, function. It can also be used to verify the convergence of an
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,67, algorithm. The various multi-start-enabled <code>optimize</code>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,68," methods return the best optimum found after all starts, and the"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,69, {@link #getOptimum getOptimum} method can be used to retrieve all
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,70, optima from all starts (including the one already provided by the
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,71," {@link #optimize(ObjectiveFunction, int, ConvergenceChecker, double[],"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,72, double[]) optimize} method).</p>
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,54,* <p>The initial configuration of the simplex can be set using either
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,55,* {@link #setStartConfiguration(double[])} or {@link
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,56,* #setStartConfiguration(double[][])}. If neither method has been called
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,57,"* before optimization is attempted, an explicit call to the first method"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,58,"* with all steps set to +1 is triggered, thus building a default"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,59,* configuration from a unit hypercube. Each call to {@link
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,60,"* #optimize(ObjectiveFunction, GoalType, double[]) optimize} will reuse"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,61,* the current start configuration and move it such that its first vertex
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,62,* is at the provided start point of the optimization. If the same optimizer
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,63,"* is used to solve different problems and the number of parameters change,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,64,* the start configuration <em>must</em> be reset or a dimension mismatch
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,65,* will occur.</p>
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,67,"* <p>If {@link #setConvergenceChecker(ConvergenceChecker)} is not called,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,68,* a default {@link ObjectiveValueChecker} is used.</p>
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,70,* <p>Convergence is checked by providing the <em>worst</em> points of
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,71,"* previous and current simplex to the convergence checker, not the best ones.</p>"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,85,ublic abstract class DirectSearchOptimizer implements Serializable {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,84,public abstract class DirectSearchOptimizer implements Optimizer {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,88,rivate static final long serialVersionUID = -3913013760494455466L;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,90,** Comparator for {@link PointValuePair} objects. */
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,91,rivate static final Comparator<PointValuePair> PAIR_COMPARATOR =
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,92,ew Comparator<PointValuePair>() {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,93,"ublic int compare(PointValuePair o1, PointValuePair o2) {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,94,f (o1 == null) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,95,eturn (o2 == null) ? 0 : +1;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,96, else if (o2 == null) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,97,eturn -1;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,99,eturn (o1.getValue() < o2.getValue()) ? -1 : ((o1 == o2) ? 0 : +1);
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,87,private static final long serialVersionUID = 4299910390345933369L;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,109,** Indicator for minimization. */
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,110,rivate boolean minimizing;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,95,/** Convergence checker. */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,96,private ConvergenceChecker checker;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,115,** Number of evaluations already performed for all starts. */
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,116,rivate int totalEvaluations;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,118,** Number of starts to go. */
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,119,rivate int starts;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,101,/** Maximal number of evaluations allowed. */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,102,private int maxEvaluations;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,121,** Random generator for multi-start. */
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,122,rivate RandomVectorGenerator generator;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,124,** Found optima. */
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,125,rivate PointValuePair[] optima;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,104,/** Start simplex configuration. */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,105,private double[][] startConfiguration;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,110,setConvergenceChecker(new ObjectiveValueChecker());
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,132,** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,133, <p>The initial simplex is built from two vertices that are
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,134, considered to represent two opposite vertices of a box parallel
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,135, to the canonical axes of the space. The simplex is the subset of
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,136, vertices encountered while going from vertexA to vertexB
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,137, traveling along the box edges only. This can be seen as a scaled
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,138, regular simplex using the projected separation between the given
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,139, points as the scaling factor along each coordinate axis.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,140, <p>The optimization is performed in single-start mode.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,141, @param f objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,142, @param maxEvaluations maximal number of function calls for each
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,143, start (note that the number will be checked <em>after</em>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,144," complete simplices have been evaluated, this means that in some"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,145," cases this number will be exceeded by a few units, depending on"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,146, the dimension of the problem)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,147, @param checker object to use to check for convergence
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,148," @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,149, @param vertexA first vertex
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,150, @param vertexB last vertex
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,151, @return the point/value pairs giving the optimal value for objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,152, @exception ObjectiveException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,153, the search
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,154, @exception ConvergenceException if none of the starts did
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,155, converge (it is not thrown if at least one start did converge)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,157,"ublic PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,158,"inal ConvergenceChecker checker, final boolean minimizing,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,159,"inal double[] vertexA, final double[] vertexB)"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,160,"hrows ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,162,/ set up optimizer
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,163,"uildSimplex(vertexA, vertexB);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,164,etSingleStart();
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,166,/ compute optimum
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,167,"eturn optimize(f, maxEvaluations, checker, minimizing);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,171,** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,172, <p>The initial simplex is built from two vertices that are
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,173, considered to represent two opposite vertices of a box parallel
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,174, to the canonical axes of the space. The simplex is the subset of
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,175, vertices encountered while going from vertexA to vertexB
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,176, traveling along the box edges only. This can be seen as a scaled
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,177, regular simplex using the projected separation between the given
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,178, points as the scaling factor along each coordinate axis.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,179, <p>The optimization is performed in multi-start mode.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,180, @param f objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,181, @param maxEvaluations maximal number of function calls for each
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,182, start (note that the number will be checked <em>after</em>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,183," complete simplices have been evaluated, this means that in some"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,184," cases this number will be exceeded by a few units, depending on"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,185, the dimension of the problem)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,186, @param checker object to use to check for convergence
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,187," @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,188, @param vertexA first vertex
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,189, @param vertexB last vertex
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,190, @param starts number of starts to perform (including the
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,191," first one), multi-start is disabled if value is less than or"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,192, equal to 1
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,193, @param seed seed for the random vector generator
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,194, @return the point/value pairs giving the optimal value for objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,195, @exception ObjectiveException if the obective function throws one during
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,196, the search
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,197, @exception ConvergenceException if none of the starts did
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,198, converge (it is not thrown if at least one start did converge)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,200,"ublic PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,201,"inal ConvergenceChecker checker, final boolean minimizing,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,202,"inal double[] vertexA, final double[] vertexB,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,203,"inal int starts, final long seed)"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,204,"hrows ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,206,/ set up the simplex traveling around the box
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,207,"uildSimplex(vertexA, vertexB);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,209,/ we consider the simplex could have been produced by a generator
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,210,"/ having its mean value at the center of the box, the standard"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,211,/ deviation along each axe being the corresponding half size
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,212,inal double[] mean              = new double[vertexA.length];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,213,inal double[] standardDeviation = new double[vertexA.length];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,214,or (int i = 0; i < vertexA.length; ++i) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,215,ean[i]              = 0.5 * (vertexA[i] + vertexB[i]);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,216,tandardDeviation[i] = 0.5 * Math.abs(vertexA[i] - vertexB[i]);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,219,inal RandomGenerator rg = new JDKRandomGenerator();
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,220,g.setSeed(seed);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,221,inal UniformRandomGenerator urg = new UniformRandomGenerator(rg);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,222,inal RandomVectorGenerator rvg =
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,223,"ew UncorrelatedRandomVectorGenerator(mean, standardDeviation, urg);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,224,"etMultiStart(starts, rvg);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,226,/ compute optimum
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,227,"eturn optimize(f, maxEvaluations, checker, minimizing);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,231,** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,232, <p>The simplex is built from all its vertices.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,233, <p>The optimization is performed in single-start mode.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,234, @param f objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,235, @param maxEvaluations maximal number of function calls for each
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,236, start (note that the number will be checked <em>after</em>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,237," complete simplices have been evaluated, this means that in some"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,238," cases this number will be exceeded by a few units, depending on"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,239, the dimension of the problem)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,240, @param checker object to use to check for convergence
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,241," @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,242, @param vertices array containing all vertices of the simplex
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,243, @return the point/value pairs giving the optimal value for objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,244, @exception ObjectiveException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,245, the search
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,246, @exception ConvergenceException if none of the starts did
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,247, converge (it is not thrown if at least one start did converge)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,249,"ublic PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,250,"inal ConvergenceChecker checker, final boolean minimizing,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,251,inal double[][] vertices)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,252,"hrows ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,254,/ set up optimizer
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,255,uildSimplex(vertices);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,256,etSingleStart();
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,258,/ compute optimum
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,259,"eturn optimize(f, maxEvaluations, checker, minimizing);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,263,** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,264, <p>The simplex is built from all its vertices.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,265, <p>The optimization is performed in multi-start mode.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,266, @param f objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,267, @param maxEvaluations maximal number of function calls for each
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,268, start (note that the number will be checked <em>after</em>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,269," complete simplices have been evaluated, this means that in some"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,270," cases this number will be exceeded by a few units, depending on"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,271, the dimension of the problem)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,272, @param checker object to use to check for convergence
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,273," @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,274, @param vertices array containing all vertices of the simplex
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,275, @param starts number of starts to perform (including the
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,276," first one), multi-start is disabled if value is less than or"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,277, equal to 1
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,278, @param seed seed for the random vector generator
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,279, @return the point/value pairs giving the optimal value for objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,280, @exception NotPositiveDefiniteMatrixException if the vertices
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,281, array is degenerated
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,282, @exception ObjectiveException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,283, the search
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,284, @exception ConvergenceException if none of the starts did
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,285, converge (it is not thrown if at least one start did converge)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,113,/** Set start configuration for simplex.
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,114,* <p>The start configuration for simplex is built from a box parallel to
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,115,* the canonical axes of the space. The simplex is the subset of vertices
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,116,* of a box parallel to the canonical axes. It is built as the path followed
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,117,* while traveling from one vertex of the box to the diagonally opposite
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,118,* vertex moving only along the box edges. The first vertex of the box will
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,119,* be located at the start point of the optimization.</p>
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,120,"* <p>As an example, in dimension 3 a simplex has 4 vertices. Setting the"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,121,"* steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,122,"* start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }."
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,123,"* The first vertex would be set to the start point at (1, 1, 1) and the"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,124,"* last vertex would be set to the diagonally opposite vertex at (2, 11, 3).</p>"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,125,"* @param steps steps along the canonical axes representing box edges,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,126,* they may be negative but not null
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,127,* @exception IllegalArgumentException if one step is null
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,287,"ublic PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,288,"inal ConvergenceChecker checker, final boolean minimizing,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,289,"inal double[][] vertices,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,290,"inal int starts, final long seed)"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,291,"hrows NotPositiveDefiniteMatrixException, ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,293,ry {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,294,/ store the points into the simplex
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,295,uildSimplex(vertices);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,297,/ compute the statistical properties of the simplex points
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,298,inal VectorialMean meanStat = new VectorialMean(vertices[0].length);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,299,"inal VectorialCovariance covStat = new VectorialCovariance(vertices[0].length, true);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,300,or (int i = 0; i < vertices.length; ++i) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,301,eanStat.increment(vertices[i]);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,302,ovStat.increment(vertices[i]);
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,129,public void setStartConfiguration(final double[] steps)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,130,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,131,// only the relative position of the n final vertices with respect
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,132,// to the first one are stored
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,133,final int n = steps.length;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,134,startConfiguration = new double[n][n];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,135,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,136,final double[] vertexI = startConfiguration[i];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,137,for (int j = 0; j < i + 1; ++j) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,138,if (steps[j] == 0.0) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,139,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,140,"""equals vertices {0} and {1} in simplex configuration"","
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,141,"j, j + 1);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,143,"System.arraycopy(steps, 0, vertexI, 0, j + 1);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,304,inal double[] mean = meanStat.getResult();
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,305,inal RealMatrix covariance = covStat.getResult();
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,308,inal RandomGenerator rg = new JDKRandomGenerator();
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,309,g.setSeed(seed);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,310,inal RandomVectorGenerator rvg =
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,311,"ew CorrelatedRandomVectorGenerator(mean,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,312,"ovariance, 1.0e-12 * covariance.getNorm(),"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,313,ew UniformRandomGenerator(rg));
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,314,"etMultiStart(starts, rvg);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,316,/ compute optimum
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,317,"eturn optimize(f, maxEvaluations, checker, minimizing);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,319, catch (DimensionMismatchException dme) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,320,/ this should not happen
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,321,"hrow new MathRuntimeException(dme, ""unexpected exception caught"");"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,326,** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,327, <p>The simplex is built randomly.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,328, <p>The optimization is performed in single-start mode.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,329, @param f objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,330, @param maxEvaluations maximal number of function calls for each
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,331, start (note that the number will be checked <em>after</em>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,332," complete simplices have been evaluated, this means that in some"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,333," cases this number will be exceeded by a few units, depending on"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,334, the dimension of the problem)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,335, @param checker object to use to check for convergence
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,336," @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,337, @param generator random vector generator
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,338, @return the point/value pairs giving the optimal value for objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,339, @exception ObjectiveException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,340, the search
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,341, @exception ConvergenceException if none of the starts did
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,342, converge (it is not thrown if at least one start did converge)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,344,"ublic PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,345,"inal ConvergenceChecker checker, final boolean minimizing,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,346,inal RandomVectorGenerator generator)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,347,"hrows ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,349,/ set up optimizer
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,350,uildSimplex(generator);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,351,etSingleStart();
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,353,/ compute optimum
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,354,"eturn optimize(f, maxEvaluations, checker, minimizing);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,358,** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,359, <p>The simplex is built randomly.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,360, <p>The optimization is performed in multi-start mode.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,361, @param f objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,362, @param maxEvaluations maximal number of function calls for each
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,363, start (note that the number will be checked <em>after</em>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,364," complete simplices have been evaluated, this means that in some"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,365," cases this number will be exceeded by a few units, depending on"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,366, the dimension of the problem)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,367, @param checker object to use to check for convergence
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,368," @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,369, @param generator random vector generator
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,370, @param starts number of starts to perform (including the
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,371," first one), multi-start is disabled if value is less than or"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,372, equal to 1
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,373, @return the point/value pairs giving the optimal value for objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,374, @exception ObjectiveException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,375, the search
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,376, @exception ConvergenceException if none of the starts did
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,377, converge (it is not thrown if at least one start did converge)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,148,/** Set start configuration for simplex.
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,149,* <p>The real initial simplex will be set up by moving the reference
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,150,* simplex such that its first point is located at the start point of the
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,151,* optimization.</p>
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,152,* @param referenceSimplex reference simplex
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,153,* @exception IllegalArgumentException if the reference simplex does not
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,154,"* contain at least one point, or if there is a dimension mismatch"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,155,* in the reference simplex or if one of its vertices is duplicated
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,379,"ublic PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,380,"inal ConvergenceChecker checker, final boolean minimizing,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,381,"inal RandomVectorGenerator generator,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,382,inal int starts)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,383,"hrows ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,385,/ set up optimizer
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,386,uildSimplex(generator);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,387,"etMultiStart(starts, generator);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,389,/ compute optimum
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,390,"eturn optimize(f, maxEvaluations, checker, minimizing);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,157,public void setStartConfiguration(final double[][] referenceSimplex)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,158,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,160,// only the relative position of the n final vertices with respect
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,161,// to the first one are stored
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,162,final int n = referenceSimplex.length - 1;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,163,if (n < 0) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,164,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,165,"""simplex must contain at least one point"");"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,167,startConfiguration = new double[n][n];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,168,final double[] ref0 = referenceSimplex[0];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,394,** Build a simplex from two extreme vertices.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,395, <p>The two vertices are considered to represent two opposite
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,396, vertices of a box parallel to the canonical axes of the
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,397, space. The simplex is the subset of vertices encountered while
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,398, going from vertexA to vertexB traveling along the box edges
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,399, only. This can be seen as a scaled regular simplex using the
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,400, projected separation between the given points as the scaling
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,401, factor along each coordinate axis.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,402, @param vertexA first vertex
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,403, @param vertexB last vertex
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,405,"rivate void buildSimplex(final double[] vertexA, final double[] vertexB) {"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,170,// vertices loop
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,171,for (int i = 0; i < n + 1; ++i) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,407,inal int n = vertexA.length;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,408,implex = new PointValuePair[n + 1];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,173,final double[] refI = referenceSimplex[i];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,410,/ set up the simplex traveling around the box
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,411,or (int i = 0; i <= n; ++i) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,412,inal double[] vertex = new double[n];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,413,f (i > 0) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,414,"ystem.arraycopy(vertexB, 0, vertex, 0, i);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,175,// safety checks
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,176,if (refI.length != n) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,177,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,178,"""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,179,"refI.length, n);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,416,f (i < n) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,417,"ystem.arraycopy(vertexA, i, vertex, i, n - i);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,181,for (int j = 0; j < i; ++j) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,182,final double[] refJ = referenceSimplex[j];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,183,boolean allEquals = true;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,184,for (int k = 0; k < n; ++k) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,185,if (refI[k] != refJ[k]) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,186,allEquals = false;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,187,break;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,190,if (allEquals) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,191,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,192,"""equals vertices {0} and {1} in simplex configuration"","
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,193,"i, j);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,419,"implex[i] = new PointValuePair(vertex, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,197,// store vertex i position relative to vertex 0 position
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,198,if (i > 0) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,199,final double[] confI = startConfiguration[i - 1];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,200,for (int k = 0; k < n; ++k) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,201,confI[k] = refI[k] - ref0[k];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,424,** Build a simplex from all its points.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,425, @param vertices array containing all vertices of the simplex
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,427,rivate void buildSimplex(final double[][] vertices) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,428,inal int n = vertices.length - 1;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,429,implex = new PointValuePair[n + 1];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,430,or (int i = 0; i <= n; ++i) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,431,"implex[i] = new PointValuePair(vertices[i], Double.NaN);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,435,** Build a simplex randomly.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,436, @param generator random vector generator
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,438,rivate void buildSimplex(final RandomVectorGenerator generator) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,440,/ use first vector size to compute the number of points
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,441,inal double[] vertex = generator.nextVector();
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,442,inal int n = vertex.length;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,443,implex = new PointValuePair[n + 1];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,444,"implex[0] = new PointValuePair(vertex, Double.NaN);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,446,/ fill up the vertex
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,447,or (int i = 1; i <= n; ++i) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,448,"implex[i] = new PointValuePair(generator.nextVector(), Double.NaN);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,209,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,210,public void setMaxEvaluations(int maxEvaluations) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,211,this.maxEvaluations = maxEvaluations;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,453,** Set up single-start mode.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,455,rivate void setSingleStart() {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,456,tarts    = 1;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,457,enerator = null;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,458,ptima    = null;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,214,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,215,public int getMaxEvaluations() {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,216,return maxEvaluations;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,461,** Set up multi-start mode.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,462, @param starts number of starts to perform (including the
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,463," first one), multi-start is disabled if value is less than or"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,464, equal to 1
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,465, @param generator random vector generator to use for restarts
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,467,"rivate void setMultiStart(final int starts, final RandomVectorGenerator generator) {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,468,f (starts < 2) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,469,his.starts    = 1;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,470,his.generator = null;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,471,ptima         = null;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,472, else {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,473,his.starts    = starts;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,474,his.generator = generator;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,475,ptima         = null;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,219,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,220,public void setConvergenceChecker(ConvergenceChecker checker) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,221,this.checker = checker;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,479,** Get all the optima found during the last call to {@link
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,480," #optimize(ObjectiveFunction, int, ConvergenceChecker, double[], double[])"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,481, minimize}.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,482, <p>The optimizer stores all the optima found during a set of
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,483, restarts when multi-start mode is enabled. The {@link
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,484," #optimize(ObjectiveFunction, int, ConvergenceChecker, double[], double[])"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,485, optimize} method returns the best point only. This method
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,486," returns all the points found at the end of each starts, including"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,487," the best one already returned by the {@link #optimize(ObjectiveFunction,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,488," int, ConvergenceChecker, double[], double[]) optimize} method."
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,489, The array as one element for each start as specified in the constructor
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,490, (it has one element only if optimizer has been set up for single-start).</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,491, <p>The array containing the optimum is ordered with the results
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,492," from the runs that did converge first, sorted from lowest to"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,493," highest objective value if minimizing (from highest to lowest if maximizing),"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,494, and null elements corresponding to the runs that did not converge. This means
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,495," all elements will be null if the {@link #optimize(ObjectiveFunction, int,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,496," ConvergenceChecker, double[], double[]) optimize} method did throw a {@link"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,497, ConvergenceException ConvergenceException}). This also means that if the first
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,498," element is non null, it is the best point found accross all starts.</p>"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,499," @return array containing the optima, or null if {@link"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,500," #optimize(ObjectiveFunction, int, ConvergenceChecker, double[], double[])"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,501, optimize} has not been called
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,503,ublic PointValuePair[] getOptima() {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,504,eturn (PointValuePair[]) optima.clone();
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,224,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,225,public ConvergenceChecker getConvergenceChecker() {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,226,return checker;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,507,** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,508, @param f objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,509, @param maxEvaluations maximal number of function calls for each
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,510, start (note that the number will be checked <em>after</em>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,511," complete simplices have been evaluated, this means that in some"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,512," cases this number will be exceeded by a few units, depending on"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,513, the dimension of the problem)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,514, @param checker object to use to check for convergence
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,515," @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,516, @return the point/value pairs giving the optimal value for objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,517, @exception ObjectiveException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,518, the search
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,519, @exception ConvergenceException if none of the starts did
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,520, converge (it is not thrown if at least one start did converge)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,522,"rivate PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,523,"inal ConvergenceChecker checker, final boolean minimizing)"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,524,"hrows ObjectiveException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,229,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,230,"public PointValuePair optimize(final ObjectiveFunction f, final GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,231,final double[] startPoint)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,232,"throws ObjectiveException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,234,if (startConfiguration == null) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,235,// no initial configuration has been set up for simplex
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,236,// build a default one from a unit hypercube
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,237,final double[] unit = new double[startPoint.length];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,238,"Arrays.fill(unit, 1.0);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,239,setStartConfiguration(unit);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,526,his.f          = f;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,527,his.minimizing = minimizing;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,528,ptima = new PointValuePair[starts];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,529,otalEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,242,this.f = f;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,243,final Comparator<PointValuePair> comparator = new Comparator<PointValuePair>() {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,244,"public int compare(final PointValuePair o1, final PointValuePair o2) {"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,245,final double v1 = o1.getValue();
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,246,final double v2 = o2.getValue();
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,247,return (goalType == GoalType.MINIMIZE) ?
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,248,"Double.compare(v1, v2) : Double.compare(v2, v1);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,531,/ multi-start loop
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,532,or (int i = 0; i < starts; ++i) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,252,// initialize search
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,253,evaluations = 0;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,254,buildSimplex(startPoint);
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,255,evaluateSimplex(comparator);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,534,valuations = 0;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,535,valuateSimplex();
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,257,PointValuePair[] previous = new PointValuePair[simplex.length];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,258,int iterations = 0;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,259,while (evaluations <= maxEvaluations) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,537,or (boolean loop = true; loop;) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,538,f (checker.converged(simplex)) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,261,if (++iterations > 1) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,262,boolean converged = true;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,263,for (int i = 0; i < simplex.length; ++i) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,264,"converged &= checker.converged(iterations, previous[i], simplex[i]);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,266,if (converged) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,540,ptima[i] = simplex[0];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,541,oop = false;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,542, else if (evaluations >= maxEvaluations) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,543,"/ this start did not converge, try a new one"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,544,ptima[i] = null;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,545,oop = false;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,546, else {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,547,terateSimplex();
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,268,return simplex[0];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,551,otalEvaluations += evaluations;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,553,f (i < (starts - 1)) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,554,/ restart
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,555,uildSimplex(generator);
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,272,// we still need to search
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,273,"System.arraycopy(simplex, 0, previous, 0, simplex.length);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,274,iterateSimplex(comparator);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,560,"/ sort the optima from best to poorest, followed by"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,561,/ null elements
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,562,"rrays.sort(optima, PAIR_COMPARATOR);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,564,f (!minimizing) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,565,/ revert objective function sign to match user original definition
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,566,or (int i = 0; i < optima.length; ++i) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,567,inal PointValuePair current = optima[i];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,568,f (current != null) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,569,"ptima[i] = new PointValuePair(current.getPoint(), -current.getValue());"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,574,/ return the found point given the best objective function value
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,575,f (optima[0] == null) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,576,hrow new ConvergenceException(
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,577,"none of the {0} start points lead to convergence"","
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,578,tarts);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,580,eturn optima[0];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,278,throw new OptimizationException(
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,279,"""maximal number of evaluations exceeded ({0})"","
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,280,evaluations);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,584,** Get the total number of evaluations of the objective function.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,585, <p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,586, The total number of evaluations includes all evaluations for all
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,587, starts if in optimization was done in multi-start mode.
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,588, </p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,589, @return total number of evaluations of the objective function
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,591,ublic int getTotalEvaluations() {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,592,eturn totalEvaluations;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,284,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,285,public int getEvaluations() {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,286,return evaluations;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,290,* @param comparator comparator to use to sort simplex vertices from best to worst
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,293,* @exception OptimizationException if the algorithm failed to converge
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,294,* @exception IllegalArgumentException if the start point dimension is wrong
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,599,rotected abstract void iterateSimplex() throws ObjectiveException;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,296,protected abstract void iterateSimplex(final Comparator<PointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,297,"throws ObjectiveException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,305,* @exception IllegalArgumentException if the start point dimension is wrong
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,608,rotected double evaluate(final double[] x) throws ObjectiveException {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,307,protected double evaluate(final double[] x)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,308,"throws ObjectiveException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,610,eturn minimizing ? f.objective(x) : -f.objective(x);
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,310,return f.objective(x);
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,313,/** Build an initial simplex.
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,314,* @param startPoint the start point for optimization
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,315,* @exception IllegalArgumentException
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,317,private void buildSimplex(final double[] startPoint)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,318,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,320,final int n = startPoint.length;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,321,if (n != startConfiguration.length) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,322,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,323,"""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,324,"n, simplex.length);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,327,// set first vertex
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,328,simplex = new PointValuePair[n + 1];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,329,"simplex[0] = new PointValuePair(startPoint, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,331,// set remaining vertices
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,332,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,333,final double[] confI   = startConfiguration[i];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,334,final double[] vertexI = new double[n];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,335,for (int k = 0; k < n; ++k) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,336,vertexI[k] = startPoint[k] + confI[k];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,338,"simplex[i + 1] = new PointValuePair(vertexI, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,344,* @param comparator comparator to use to sort simplex vertices from best to worst
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,616,rotected void evaluateSimplex() throws ObjectiveException {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,347,protected void evaluateSimplex(final Comparator<PointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,348,throws ObjectiveException {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,620,ointValuePair pair = simplex[i];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,621,f (Double.isNaN(pair.getValue())) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,622,"implex[i] = new PointValuePair(pair.getPoint(), evaluate(pair.getPoint()));"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,352,final PointValuePair vertex = simplex[i];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,353,final double[] point = vertex.getPoint();
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,354,if (Double.isNaN(vertex.getValue())) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,355,"simplex[i] = new PointValuePair(point, evaluate(point));"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,626,/ sort the simplex from best to poorest
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,627,"rrays.sort(simplex, PAIR_COMPARATOR);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,359,// sort the simplex from best to worst
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,360,"Arrays.sort(simplex, comparator);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,366,* @param comparator comparator to use to sort simplex vertices from best to worst
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,634,rotected void replaceWorstPoint(PointValuePair pointValuePair) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,368,"protected void replaceWorstPoint(PointValuePair pointValuePair,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,369,final Comparator<PointValuePair> comparator) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,637,f (simplex[i].getValue() > pointValuePair.getValue()) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,372,"if (comparator.compare(simplex[i], pointValuePair) > 0) {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,639,implex[i]        = pointValuePair;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,374,simplex[i]         = pointValuePair;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,20,import java.util.Comparator;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,23,import org.apache.commons.math.optimization.OptimizationException;
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,58,** Compute the next simplex of the algorithm.
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,59, @exception ObjectiveException if the function cannot be evaluated at
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,60, some point
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,62,rotected void iterateSimplex() throws ObjectiveException {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,61,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,62,protected void iterateSimplex(final Comparator<PointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,63,"throws ObjectiveException, OptimizationException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,64,hile (true) {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,65,final int max = getMaxEvaluations();
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,66,while (getEvaluations() < max) {
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,68,inal double originalValue = original[0].getValue();
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,70,final PointValuePair best = original[0];
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,71,"inal double reflectedValue = evaluateNewSimplex(original, 1.0);"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,72,f (reflectedValue < originalValue) {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,73,"final PointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,74,"if (comparator.compare(reflected, best) < 0) {"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,75,inal PointValuePair[] reflected = simplex;
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,76,"inal double expandedValue = evaluateNewSimplex(original, khi);"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,77,f (reflectedValue <= expandedValue) {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,77,final PointValuePair[] reflectedSimplex = simplex;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,78,"final PointValuePair expanded = evaluateNewSimplex(original, khi, comparator);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,79,"if (comparator.compare(reflected, expanded) <= 0) {"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,79,implex = reflected;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,81,simplex = reflectedSimplex;
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,87,"inal double contractedValue = evaluateNewSimplex(original, gamma);"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,88,f (contractedValue < originalValue) {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,89,"final PointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,90,"if (comparator.compare(contracted, best) < 0) {"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,97,throw new OptimizationException(
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,98,"""maximal number of evaluations exceeded ({0})"","
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,99,getEvaluations());
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,100, @return smallest value in the transformed simplex
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,106,* @param comparator comparator to use to sort simplex vertices from best to poorest
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,107,* @return best point in the transformed simplex
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,104,"rivate double evaluateNewSimplex(final PointValuePair[] original,"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,105,inal double coeff)
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,111,"private PointValuePair evaluateNewSimplex(final PointValuePair[] original,"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,112,"final double coeff,"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,113,final Comparator<PointValuePair> comparator)
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,124,valuateSimplex();
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,125,eturn simplex[0].getValue();
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,132,evaluateSimplex(comparator);
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,133,return simplex[0];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,20,import java.util.Comparator;
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,73,rotected void iterateSimplex() throws ObjectiveException {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,75,protected void iterateSimplex(final Comparator<PointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,76,throws ObjectiveException {
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,79,inal double   smallest      = simplex[0].getValue();
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,80,inal double   secondLargest = simplex[n-1].getValue();
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,81,inal double   largest       = simplex[n].getValue();
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,82,inal double[] xLargest      = simplex[n].getPoint();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,82,final PointValuePair best       = simplex[0];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,83,final PointValuePair secondBest = simplex[n-1];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,84,final PointValuePair worst      = simplex[n];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,85,final double[] xWorst = worst.getPoint();
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,101,R[j] = centroid[j] + rho * (centroid[j] - xLargest[j]);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,104,xR[j] = centroid[j] + rho * (centroid[j] - xWorst[j]);
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,103,inal double valueR = evaluate(xR);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,106,"final PointValuePair reflected = new PointValuePair(xR, evaluate(xR));"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,105,f ((smallest <= valueR) && (valueR < secondLargest)) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,108,"if ((comparator.compare(best, reflected) <= 0) &&"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,109,"(comparator.compare(reflected, secondBest) < 0)) {"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,108,"eplaceWorstPoint(new PointValuePair(xR, valueR));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,112,"replaceWorstPoint(reflected, comparator);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,110, else if (valueR < smallest) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,114,"} else if (comparator.compare(reflected, best) < 0) {"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,117,inal double valueE = evaluate(xE);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,121,"final PointValuePair expanded = new PointValuePair(xE, evaluate(xE));"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,119,f (valueE < valueR) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,123,"if (comparator.compare(expanded, reflected) < 0) {"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,121,"eplaceWorstPoint(new PointValuePair(xE, valueE));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,125,"replaceWorstPoint(expanded, comparator);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,124,"eplaceWorstPoint(new PointValuePair(xR, valueR));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,128,"replaceWorstPoint(reflected, comparator);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,129,f (valueR < largest) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,133,"if (comparator.compare(reflected, worst) < 0) {"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,136,inal double valueC = evaluate(xC);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,140,"final PointValuePair outContracted = new PointValuePair(xC, evaluate(xC));"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,138,f (valueC <= valueR) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,142,"if (comparator.compare(outContracted, reflected) <= 0) {"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,140,"eplaceWorstPoint(new PointValuePair(xC, valueC));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,144,"replaceWorstPoint(outContracted, comparator);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,149,C[j] = centroid[j] - gamma * (centroid[j] - xLargest[j]);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,153,xC[j] = centroid[j] - gamma * (centroid[j] - xWorst[j]);
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,151,inal double valueC = evaluate(xC);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,155,"final PointValuePair inContracted = new PointValuePair(xC, evaluate(xC));"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,153,f (valueC < largest) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,157,"if (comparator.compare(inContracted, worst) < 0) {"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,155,"eplaceWorstPoint(new PointValuePair(xC, valueC));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,159,"replaceWorstPoint(inContracted, comparator);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,170,valuateSimplex();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,174,evaluateSimplex(comparator);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,24,import org.apache.commons.math.ConvergenceException;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,21,mport org.apache.commons.math.optimization.ConvergenceChecker;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,26,import org.apache.commons.math.optimization.GoalType;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,25,mport org.apache.commons.math.ConvergenceException;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,27,mport junit.framework.*;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,30,import org.apache.commons.math.optimization.ObjectiveValueChecker;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,51,"ew MultiDirectional(1.9, 0.4).optimize(wrong, 10, new ValueChecker(1.0e-3), true,"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,52,"ew double[] { -0.5 }, new double[] { 0.5 });"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,54,"MultiDirectional optimizer = new MultiDirectional(0.9, 1.9);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,55,"optimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { -1.0 });"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,61,"ew MultiDirectional(1.9, 0.4).optimize(wrong, 10, new ValueChecker(1.0e-3), true,"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,62,"ew double[] { 0.5 }, new double[] { 1.5 });"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,64,"MultiDirectional optimizer = new MultiDirectional(0.9, 1.9);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,65,"optimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { +2.0 });"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,89,eturn Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,92,return ((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,93,ultiDirectional md = new MultiDirectional();
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,96,MultiDirectional optimizer = new MultiDirectional();
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,97,"optimizer.setConvergenceChecker(new ObjectiveValueChecker(1.0e-10, 1.0e-30));"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,98,optimizer.setMaxEvaluations(200);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,99,"optimizer.setStartConfiguration(new double[] { 0.2, 0.2 });"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,100,PointValuePair optimum;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,96,"d.optimize(fourExtrema, 200, new ValueChecker(1.0e-8), true,"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,97,"ew double[] { -4, -2 }, new double[] { 1, 2 }, 10, 38821113105892l);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,98,ointValuePair[] optima = md.getOptima();
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,99,"ssertEquals(10, optima.length);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,100,nt localCount  = 0;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,101,nt globalCount = 0;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,102,or (PointValuePair optimum : optima) {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,103,f (optimum != null) {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,104,f (optimum.getPoint()[0] < 0) {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,105,/ this should be the local minimum
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,106,+localCount;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,107,"ssertEquals(xM,        optimum.getPoint()[0], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,108,"ssertEquals(yP,        optimum.getPoint()[1], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,109,"ssertEquals(valueXmYp, optimum.getValue(),     3.0e-8);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,110, else {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,111,/ this should be the global minimum
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,112,+globalCount;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,113,"ssertEquals(xP,        optimum.getPoint()[0], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,114,"ssertEquals(yM,        optimum.getPoint()[1], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,115,"ssertEquals(valueXpYm, optimum.getValue(),     3.0e-8);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,119,ssertTrue(localCount  > 0);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,120,ssertTrue(globalCount > 0);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,121,ssertTrue(md.getTotalEvaluations() > 1400);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,122,ssertTrue(md.getTotalEvaluations() < 1700);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,124,/ minimization
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,125,"d.optimize(fourExtrema, 200, new ValueChecker(1.0e-8), false,"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,126,"ew double[] { -3.5, -1 }, new double[] { 0.5, 1.5 }, 10, 38821113105892l);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,127,ptima = md.getOptima();
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,128,"ssertEquals(10, optima.length);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,129,ocalCount  = 0;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,130,lobalCount = 0;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,131,or (PointValuePair optimum : optima) {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,132,f (optimum != null) {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,133,f (optimum.getPoint()[0] < 0) {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,134,/ this should be the local maximum
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,135,+localCount;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,136,"ssertEquals(xM,        optimum.getPoint()[0], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,137,"ssertEquals(yM,        optimum.getPoint()[1], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,138,"ssertEquals(valueXmYm, optimum.getValue(),     4.0e-8);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,139, else {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,140,/ this should be the global maximum
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,141,+globalCount;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,142,"ssertEquals(xP,        optimum.getPoint()[0], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,143,"ssertEquals(yP,        optimum.getPoint()[1], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,144,"ssertEquals(valueXpYp, optimum.getValue(),     4.0e-8);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,148,ssertTrue(localCount  > 0);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,149,ssertTrue(globalCount > 0);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,150,ssertTrue(md.getTotalEvaluations() > 1400);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,151,ssertTrue(md.getTotalEvaluations() < 1700);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,103,"optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3.0, 0 });"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,104,"assertEquals(xM,        optimum.getPoint()[0], 4.0e-6);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,105,"assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,106,"assertEquals(valueXmYp, optimum.getValue(),    8.0e-13);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,107,assertTrue(optimizer.getEvaluations() > 120);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,108,assertTrue(optimizer.getEvaluations() < 150);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,110,"optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { +1, 0 });"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,111,"assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,112,"assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,113,"assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,114,assertTrue(optimizer.getEvaluations() > 120);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,115,assertTrue(optimizer.getEvaluations() < 150);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,117,// maximization
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,118,"optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,119,"assertEquals(xM,        optimum.getPoint()[0], 7.0e-7);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,120,"assertEquals(yM,        optimum.getPoint()[1], 3.0e-7);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,121,"assertEquals(valueXmYm, optimum.getValue(),    2.0e-14);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,122,assertTrue(optimizer.getEvaluations() > 120);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,123,assertTrue(optimizer.getEvaluations() < 150);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,125,"optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { +1, 0 });"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,126,"assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,127,"assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,128,"assertEquals(valueXpYp, optimum.getValue(),    2.0e-12);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,129,assertTrue(optimizer.getEvaluations() > 120);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,130,assertTrue(optimizer.getEvaluations() < 150);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,149,MultiDirectional optimizer = new MultiDirectional();
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,150,"optimizer.setConvergenceChecker(new ObjectiveValueChecker(-1, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,151,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,152,optimizer.setStartConfiguration(new double[][] {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,153,"{ -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,171,"ew MultiDirectional().optimize(rosenbrock, 100, new ValueChecker(1.0e-3), true,"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,172,ew double[][] {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,173," -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,156,"optimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1.0 });"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,176,ssertTrue(count > 60);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,177,ssertTrue(optimum.getValue() > 0.01);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,158,"assertEquals(count, optimizer.getEvaluations());"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,159,assertTrue(optimizer.getEvaluations() > 70);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,160,assertTrue(optimizer.getEvaluations() < 100);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,161,assertTrue(optimum.getValue() > 1.0e-2);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,182,MultiDirectional optimizer = new MultiDirectional();
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,183,"optimizer.setConvergenceChecker(new ObjectiveValueChecker(-1.0, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,184,optimizer.setMaxEvaluations(1000);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,199,"ew MultiDirectional().optimize(powell, 1000, new ValueChecker(1.0e-3), true,"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,200,"ew double[] {  3.0, -1.0, 0.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,201,"ew double[] {  4.0,  0.0, 1.0, 2.0 });"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,202,ssertTrue(count > 850);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,203,ssertTrue(optimum.getValue() > 0.015);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,186,"optimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,187,"assertEquals(count, optimizer.getEvaluations());"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,188,assertTrue(optimizer.getEvaluations() > 800);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,189,assertTrue(optimizer.getEvaluations() < 900);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,190,assertTrue(optimum.getValue() > 1.0e-2);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,207,rivate static class ValueChecker implements ConvergenceChecker {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,209,ublic ValueChecker(double threshold) {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,210,his.threshold = threshold;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,213,ublic boolean converged(PointValuePair[] simplex) {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,214,ointValuePair smallest = simplex[0];
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,215,ointValuePair largest  = simplex[simplex.length - 1];
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,216,eturn (largest.getValue() - smallest.getValue()) < threshold;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,219,rivate double threshold;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,24,import org.apache.commons.math.ConvergenceException;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,21,mport org.apache.commons.math.optimization.ConvergenceChecker;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,26,import org.apache.commons.math.optimization.GoalType;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,25,mport org.apache.commons.math.ConvergenceException;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,26,mport org.apache.commons.math.random.JDKRandomGenerator;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,27,mport org.apache.commons.math.random.RandomGenerator;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,28,mport org.apache.commons.math.random.RandomVectorGenerator;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,29,mport org.apache.commons.math.random.UncorrelatedRandomVectorGenerator;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,30,mport org.apache.commons.math.random.UniformRandomGenerator;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,32,mport junit.framework.*;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,30,import org.apache.commons.math.optimization.ObjectiveValueChecker;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,44,rivate static final long serialVersionUID = 2624035220997628868L;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,42,private static final long serialVersionUID = 4751314470965489371L;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,56,"ew NelderMead(0.9, 1.9, 0.4, 0.6).optimize(wrong, 10, new ValueChecker(1.0e-3), true,"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,57,"ew double[] { -0.5 }, new double[] { 0.5 });"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,54,"NelderMead optimizer = new NelderMead(0.9, 1.9, 0.4, 0.6);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,55,"optimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { -1.0 });"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,66,"ew NelderMead(0.9, 1.9, 0.4, 0.6).optimize(wrong, 10, new ValueChecker(1.0e-3), true,"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,67,"ew double[] { 0.5 }, new double[] { 1.5 });"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,64,"NelderMead optimizer = new NelderMead(0.9, 1.9, 0.4, 0.6);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,65,"optimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { +2.0 });"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,90,rivate static final long serialVersionUID = -7039124064449091152L;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,91,ublic double objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,88,private static final long serialVersionUID = -7039124064449091152L;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,89,public double objective(double[] variables) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,94,eturn Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,92,return ((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,98,elderMead nm = new NelderMead();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,96,NelderMead optimizer = new NelderMead();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,97,"optimizer.setConvergenceChecker(new ObjectiveValueChecker(1.0e-10, 1.0e-30));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,98,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,99,"optimizer.setStartConfiguration(new double[] { 0.2, 0.2 });"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,100,PointValuePair optimum;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,101,"m.optimize(fourExtrema, 100, new ValueChecker(1.0e-8), true,"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,102,"ew double[] { -5, -5 }, new double[] { 5, 5 }, 10, 38821113105892l);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,103,ointValuePair[] optima = nm.getOptima();
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,104,"ssertEquals(10, optima.length);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,105,nt localCount  = 0;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,106,nt globalCount = 0;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,107,or (PointValuePair optimum : optima) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,108,f (optimum != null) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,109,f (optimum.getPoint()[0] < 0) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,110,/ this should be the local minimum
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,111,+localCount;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,112,"ssertEquals(xM,        optimum.getPoint()[0], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,113,"ssertEquals(yP,        optimum.getPoint()[1], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,114,"ssertEquals(valueXmYp, optimum.getValue(),     2.0e-8);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,115, else {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,116,/ this should be the global minimum
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,117,+globalCount;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,118,"ssertEquals(xP,        optimum.getPoint()[0], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,119,"ssertEquals(yM,        optimum.getPoint()[1], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,120,"ssertEquals(valueXpYm, optimum.getValue(),     2.0e-8);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,124,ssertTrue(localCount  > 0);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,125,ssertTrue(globalCount > 0);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,126,ssertTrue(nm.getTotalEvaluations() > 600);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,127,ssertTrue(nm.getTotalEvaluations() < 800);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,129,/ minimization
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,130,"m.optimize(fourExtrema, 100, new ValueChecker(1.0e-8), false,"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,131,"ew double[] { -5, -5 }, new double[] { 5, 5 }, 10, 38821113105892l);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,132,ptima = nm.getOptima();
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,133,"ssertEquals(10, optima.length);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,134,ocalCount  = 0;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,135,lobalCount = 0;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,136,or (PointValuePair optimum : optima) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,137,f (optimum != null) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,138,f (optimum.getPoint()[0] < 0) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,139,/ this should be the local maximum
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,140,+localCount;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,141,"ssertEquals(xM,        optimum.getPoint()[0], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,142,"ssertEquals(yM,        optimum.getPoint()[1], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,143,"ssertEquals(valueXmYm, optimum.getValue(),     2.0e-8);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,144, else {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,145,/ this should be the global maximum
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,146,+globalCount;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,147,"ssertEquals(xP,        optimum.getPoint()[0], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,148,"ssertEquals(yP,        optimum.getPoint()[1], 1.0e-3);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,149,"ssertEquals(valueXpYp, optimum.getValue(),     2.0e-8);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,153,ssertTrue(localCount  > 0);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,154,ssertTrue(globalCount > 0);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,155,ssertTrue(nm.getTotalEvaluations() > 600);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,156,ssertTrue(nm.getTotalEvaluations() < 800);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,103,"optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3.0, 0 });"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,104,"assertEquals(xM,        optimum.getPoint()[0], 2.0e-7);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,105,"assertEquals(yP,        optimum.getPoint()[1], 2.0e-5);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,106,"assertEquals(valueXmYp, optimum.getValue(),    6.0e-12);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,107,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,108,assertTrue(optimizer.getEvaluations() < 90);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,110,"optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { +1, 0 });"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,111,"assertEquals(xP,        optimum.getPoint()[0], 5.0e-6);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,112,"assertEquals(yM,        optimum.getPoint()[1], 6.0e-6);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,113,"assertEquals(valueXpYm, optimum.getValue(),    1.0e-11);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,114,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,115,assertTrue(optimizer.getEvaluations() < 90);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,117,// maximization
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,118,"optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,119,"assertEquals(xM,        optimum.getPoint()[0], 1.0e-5);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,120,"assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,121,"assertEquals(valueXmYm, optimum.getValue(),    3.0e-12);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,122,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,123,assertTrue(optimizer.getEvaluations() < 90);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,125,"optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { +1, 0 });"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,126,"assertEquals(xP,        optimum.getPoint()[0], 4.0e-6);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,127,"assertEquals(yP,        optimum.getPoint()[1], 5.0e-6);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,128,"assertEquals(valueXpYp, optimum.getValue(),    7.0e-12);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,129,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,130,assertTrue(optimizer.getEvaluations() < 90);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,161,"hrows ObjectiveException, ConvergenceException, NotPositiveDefiniteMatrixException {"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,135,"throws ObjectiveException, ConvergenceException {"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,165,rivate static final long serialVersionUID = -7039124064449091152L;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,139,private static final long serialVersionUID = -9044950469615237490L;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,175,elderMead nm = new NelderMead();
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,176,ry {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,177,"m.optimize(rosenbrock, 100, new ValueChecker(1.0e-3), true,"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,178,ew double[][] {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,179," -1.2, 1.0 }, { 3.5, -2.3 }, { 0.4, 1.5 }"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,180,", 1, 5384353l);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,181,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,182, catch (ConvergenceException ce) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,183,/ expected behavior
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,184, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,185,.printStackTrace(System.err);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,186,"ail(""wrong exception caught: "" + e.getMessage());"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,189,ount = 0;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,149,NelderMead optimizer = new NelderMead();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,150,"optimizer.setConvergenceChecker(new ObjectiveValueChecker(-1, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,151,optimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,152,optimizer.setStartConfiguration(new double[][] {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,153,"{ -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,191,"m.optimize(rosenbrock, 100, new ValueChecker(1.0e-3), true,"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,192,ew double[][] {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,193," -1.2, 1.0 }, { 0.9, 1.2 }, { 3.5, -2.3 }"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,194,", 10, 1642738l);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,156,"optimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1.0 });"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,196,ssertTrue(count > 700);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,197,ssertTrue(count < 800);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,198,"ssertEquals(0.0, optimum.getValue(), 5.0e-5);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,199,"ssertEquals(1.0, optimum.getPoint()[0], 0.01);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,200,"ssertEquals(1.0, optimum.getPoint()[1], 0.01);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,202,ointValuePair[] minima = nm.getOptima();
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,203,"ssertEquals(10, minima.length);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,204,ssertNotNull(minima[0]);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,205,ssertNull(minima[minima.length - 1]);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,206,or (int i = 0; i < minima.length; ++i) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,207,f (minima[i] == null) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,208,f ((i + 1) < minima.length) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,209,ssertTrue(minima[i+1] == null);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,211, else {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,212,f (i > 0) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,213,ssertTrue(minima[i-1].getValue() <= minima[i].getValue());
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,218,andomGenerator rg = new JDKRandomGenerator();
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,219,g.setSeed(64453353l);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,220,andomVectorGenerator rvg =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,221,"ew UncorrelatedRandomVectorGenerator(new double[] { 0.9, 1.1 },"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,222,"ew double[] { 0.2, 0.2 },"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,223,ew UniformRandomGenerator(rg));
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,224,ptimum =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,225,"m.optimize(rosenbrock, 100, new ValueChecker(1.0e-3), true, rvg);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,226,"ssertEquals(0.0, optimum.getValue(), 2.0e-4);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,227,ptimum =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,228,"m.optimize(rosenbrock, 100, new ValueChecker(1.0e-3), true, rvg, 3);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,229,"ssertEquals(0.0, optimum.getValue(), 3.0e-5);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,158,"assertEquals(count, optimizer.getEvaluations());"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,159,assertTrue(optimizer.getEvaluations() > 40);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,160,assertTrue(optimizer.getEvaluations() < 50);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,161,assertTrue(optimum.getValue() < 8.0e-4);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,238,rivate static final long serialVersionUID = -7681075710859391520L;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,170,private static final long serialVersionUID = -832162886102041840L;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,250,elderMead nm = new NelderMead();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,182,NelderMead optimizer = new NelderMead();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,183,"optimizer.setConvergenceChecker(new ObjectiveValueChecker(-1.0, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,184,optimizer.setMaxEvaluations(200);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,252,"m.optimize(powell, 200, new ValueChecker(1.0e-3), true,"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,253,"ew double[] {  3.0, -1.0, 0.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,254,"ew double[] {  4.0,  0.0, 1.0, 2.0 },"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,255,", 1642738l);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,256,ssertTrue(count < 150);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,257,"ssertEquals(0.0, optimum.getValue(), 6.0e-4);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,258,"ssertEquals(0.0, optimum.getPoint()[0], 0.07);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,259,"ssertEquals(0.0, optimum.getPoint()[1], 0.07);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,260,"ssertEquals(0.0, optimum.getPoint()[2], 0.07);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,261,"ssertEquals(0.0, optimum.getPoint()[3], 0.07);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,186,"optimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,187,"assertEquals(count, optimizer.getEvaluations());"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,188,assertTrue(optimizer.getEvaluations() > 110);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,189,assertTrue(optimizer.getEvaluations() < 130);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,190,assertTrue(optimum.getValue() < 2.0e-3);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,265,rivate static class ValueChecker implements ConvergenceChecker {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,267,ublic ValueChecker(double threshold) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,268,his.threshold = threshold;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,271,ublic boolean converged(PointValuePair[] simplex) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,272,ointValuePair smallest = simplex[0];
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,273,ointValuePair largest  = simplex[simplex.length - 1];
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,274,eturn (largest.getValue() - smallest.getValue()) < threshold;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,277,rivate double threshold;

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,25, Provide the bisection algorithm for solving for zeros of real univariate
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,26, functions.  It will only search for one zero in the given interval.  The
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,27, function is supposed to be continuous but not necessarily smooth.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,28, @version $Revision: 1.11 $ $Date: 2004/02/18 03:24:19 $
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,25,"* Implements the <a href=""http://mathworld.wolfram.com/Bisection.html"">bisection algorithm</a>"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,26,*  for finding zeros of univariate real functions.  This algorithm will find only one zero in the given interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,27,* The function should be continuous but not necessarily smooth.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,28,* @version $Revision: 1.12 $ $Date: 2004/02/20 06:22:39 $
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,40, Solve for a zero in the given interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,40,* Find a zero in the given interval.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,55, Solve for a zero root in the given interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,55,* Find a zero root in the given interval.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,92,"hrow new MathException(""Maximal iteration number exceeded"");"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,92,"throw new MathException(""Maximum number of iterations exceeded"");"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,25, Provide the Brent algorithm for solving for zeros of real univariate
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,26, functions.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,27, It will only search for one zero in the given interval.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,28, The function is supposed to be continuous but not necessarily smooth.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,25,"* Implements the <a href=""http://mathworld.wolfram.com/BrentsMethod.html"">Brent algorithm</a>"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,26,* for  finding zeros of real univariate
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,27,* functions. This algorithm will find only one zero in the given interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,28,* The function should be continuous but not necessarily smooth.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,30, @version $Revision: 1.12 $ $Date: 2004/02/18 03:24:19 $
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,30,* @version $Revision: 1.13 $ $Date: 2004/02/20 06:22:39 $
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,42, Solve for a zero in the given interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,42,* Find a zero in the given interval.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,57, Solve for a zero root in the given interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,57,* Find a zero in the given interval.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,162,"hrow new MathException(""Maximal iteration number exceeded."");"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,162,"throw new MathException(""Maximum number of iterations exceeded."");"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,26, Represents a cubic spline function.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,27, Spline functions map a certain interval of real numbers to real numbers.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,28," A cubic spline consists of segments of cubic functions. For this class,"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,29, polynominal coefficents are used.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,30, Arguments outside of the domain cause an IllegalArgumentException.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,26,"* Represents a <a href=""http://mathworld.wolfram.com/CubicSpline.html"">cubic spline function</a>."
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,27,* Arguments outside of the domain determined by the x values array passed to the constructor
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,28,* cause an IllegalArgumentException.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,32, @version $Revision: 1.12 $ $Date: 2004/02/18 03:24:19 $
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,30,* @version $Revision: 1.13 $ $Date: 2004/02/20 06:22:39 $
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,55,"// Should also verify that xval[] is in correct order, and arrays have correct lengths"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,83, It is recommended to provide this method only if the first derivative is
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,84, analytical. Numerical derivatives may be acceptable in some cases.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,85, An implementation should throw an UnsupportedOperationException if
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,86, this method is not implemented.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,59, Provide an interface univariate real functions.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,60, The object may held temporary data which is shared between calculations
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,61, of the value and the derivatives for the same argument. It is not guaranteed
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,62," that derivatives are evaluated after the value, the evaluation algorithm"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,63, should throw an InvalidStateException if it can't cope with this.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,59,* An interface representing a univariate real function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,65, @version $Revision: 1.10 $ $Date: 2004/01/29 00:49:00 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,61,* @version $Revision: 1.11 $ $Date: 2004/02/20 06:22:39 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,59, Interface for interpolating a data set.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,59,* Interface representing a univariate real interpolating function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,61, @version $Revision: 1.8 $ $Date: 2004/01/29 00:49:00 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,61,* @version $Revision: 1.9 $ $Date: 2004/02/20 06:22:39 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,59, Provide an interface to algorithms for solving for zeros of real univariate
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,60, functions.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,61, An implementation will only search for one zero in the given interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,59,* Interface for (univariate real) rootfinding algorithms.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,60,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,61,* Implementations will search for only one zero in the given interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,63, @version $Revision: 1.9 $ $Date: 2004/01/29 00:49:00 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,63,* @version $Revision: 1.10 $ $Date: 2004/02/20 06:22:39 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,71," the ""reasonable value"" varies widely for different solvers, users are"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,71,"* the ""reasonable value"" varies widely for different solvers.  Users are"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,99, The default is usually choosen so taht roots in the interval
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,100, -10..-0.1 and +0.1..+10 can be found wit a reasonable accuracy. If the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,99,* The default is usually choosen so that roots in the interval
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,100,* -10..-0.1 and +0.1..+10 can be found with a reasonable accuracy. If the

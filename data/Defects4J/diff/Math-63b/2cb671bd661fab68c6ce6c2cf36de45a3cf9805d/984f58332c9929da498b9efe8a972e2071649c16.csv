is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,16,package org.apache.commons.math.random;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,19,* Abstract class implementing the {@link  RandomGenerator} interface.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,20,* Default implementations for all methods other than {@link #nextDouble()} and
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,21,* {@link #setSeed(long)} are provided.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,22,* <p>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,23,* All data generation methods are based on <code>nextDouble().</code>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,24,* Concrete implementations <strong>must</strong> overrride
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,25,* this method and <strong>should</strong> provide better / more
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,26,* performant implementations of the other methods if the underlying PRNG
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,27,* supplies them.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,29,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,31,public abstract class AbstractRandomGenerator implements RandomGenerator {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,34,* Cached random normal value.  The default implementation for
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,35,* {@link #nextGaussian} generates pairs of values and this field caches the
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,36,* second value so that the full algorithm is not executed for every
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,37,* activation.  The value <code>Double.NaN</code> signals that there is
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,38,* no cached value.  Use {@link #clear} to clear the cached value.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,40,private double cachedNormalDeviate = Double.NaN;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,43,* Construct a RandomGenerator.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,45,public AbstractRandomGenerator() {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,46,super();
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,51,* Clears the cache used by the default implementation of {@link #nextGaussian}.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,52,* Implemementations that do not override the default
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,53,* implementation of <code>nextGaussian</code> should call this method
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,54,* in the implementation of {@link #setSeed(long)}
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,56,public void clear() {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,57,cachedNormalDeviate = Double.NaN;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,61,* Sets the seed of the underyling random number generator using a
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,62,* <code>long</code> seed.  Sequences of values generated starting with the
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,63,* same seeds should be identical.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,64,* <p>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,65,* Implementations that do not override the default implementation of
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,66,* <code>nextGaussian</code> should include a call to {@link #clear} in the
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,67,* implementation of this method.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,69,* @param seed the seed value
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,71,public abstract void setSeed(long seed);
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,74,* Generates random bytes and places them into a user-supplied
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,75,* byte array.  The number of random bytes produced is equal to
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,76,* the length of the byte array.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,77,* <p>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,78,* The default implementation provided here fills the array with bytes
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,79,* extracted from random integers generated using {@link #nextInt}.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,81,* @param bytes the non-null byte array in which to put the
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,82,* random bytes
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,84,public void nextBytes(byte[] bytes) {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,85,int bytesOut = 0;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,86,while (bytesOut < bytes.length) {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,87,int randInt = nextInt();
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,88,for (int i = 0; i < 3; i++) {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,89,if ( i > 0) {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,90,randInt = randInt >> 8;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,92,bytes[bytesOut++] = (byte) randInt;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,93,if (bytesOut == bytes.length) {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,94,return;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,101,"* Returns the next pseudorandom, uniformly distributed <code>int</code>"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,102,* value from this random number generator's sequence.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,103,"* All 2<font size=""-1""><sup>32</sup></font> possible <tt>int</tt> values"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,104,* should be produced with  (approximately) equal probability.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,105,* <p>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,106,* The default implementation provided here returns
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,107,* <pre>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,108,* <code>(int) (nextDouble() * Integer.MAX_VALUE)</code>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,109,* </pre>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,111,"* @return the next pseudorandom, uniformly distributed <code>int</code>"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,112,*  value from this random number generator's sequence
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,114,public int nextInt() {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,115,return (int) (nextDouble() * Integer.MAX_VALUE);
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,119,"* Returns a pseudorandom, uniformly distributed <tt>int</tt> value"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,120,"* between 0 (inclusive) and the specified value (exclusive), drawn from"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,121,* this random number generator's sequence.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,122,* <p>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,123,* The default implementation provided here returns
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,124,* <pre>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,125,* <code>(int) (nextDouble() * n</code>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,126,* </pre>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,128,* @param n the bound on the random number to be returned.  Must be
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,129,* positive.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,130,"* @return  a pseudorandom, uniformly distributed <tt>int</tt>"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,131,* value between 0 (inclusive) and n (exclusive).
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,132,* @throws IllegalArgumentException if n is not positive.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,134,public int nextInt(int n) {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,135,if (n <= 0 ) {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,136,"throw new IllegalArgumentException(""upper bound must be positive"");"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,138,int result = (int) (nextDouble() * n);
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,139,return result < n ? result : n - 1;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,143,"* Returns the next pseudorandom, uniformly distributed <code>long</code>"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,144,* value from this random number generator's sequence.  All
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,145,"* 2<font size=""-1""><sup>64</sup></font> possible <tt>long</tt> values"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,146,* should be produced with (approximately) equal probability.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,147,* <p>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,148,* The default implementation provided here returns
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,149,* <pre>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,150,* <code>(long) (nextDouble() * Long.MAX_VALUE)</code>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,151,* </pre>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,153,"* @return  the next pseudorandom, uniformly distributed <code>long</code>"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,154,*value from this random number generator's sequence
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,156,public long nextLong() {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,157,return (long) (nextDouble() * Long.MAX_VALUE);
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,161,"* Returns the next pseudorandom, uniformly distributed"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,162,* <code>boolean</code> value from this random number generator's
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,163,* sequence.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,164,* <p>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,165,* The default implementation provided here returns
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,166,* <pre>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,167,* <code>nextDouble() <= 0.5</code>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,168,* </pre>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,170,"* @return  the next pseudorandom, uniformly distributed"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,171,* <code>boolean</code> value from this random number generator's
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,172,* sequence
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,174,public boolean nextBoolean() {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,175,return nextDouble() <= 0.5;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,179,"* Returns the next pseudorandom, uniformly distributed <code>float</code>"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,180,* value between <code>0.0</code> and <code>1.0</code> from this random
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,181,* number generator's sequence.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,182,* <p>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,183,* The default implementation provided here returns
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,184,* <pre>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,185,* <code>(float) nextDouble() </code>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,186,* </pre>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,188,"* @return  the next pseudorandom, uniformly distributed <code>float</code>"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,189,* value between <code>0.0</code> and <code>1.0</code> from this
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,190,* random number generator's sequence
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,192,public float nextFloat() {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,193,return (float) nextDouble();
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,197,"* Returns the next pseudorandom, uniformly distributed"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,198,* <code>double</code> value between <code>0.0</code> and
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,199,* <code>1.0</code> from this random number generator's sequence.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,200,* <p>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,201,* This method provides the underlying source of random data used by the
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,202,* other methods.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,204,"* @return  the next pseudorandom, uniformly distributed"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,205,*  <code>double</code> value between <code>0.0</code> and
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,206,*  <code>1.0</code> from this random number generator's sequence
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,208,public abstract double nextDouble();
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,211,"* Returns the next pseudorandom, Gaussian (""normally"") distributed"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,212,* <code>double</code> value with mean <code>0.0</code> and standard
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,213,* deviation <code>1.0</code> from this random number generator's sequence.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,214,* <p>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,215,* The default implementation provided here uses the <em>Polar Method</em>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,216,"* due to G.E.P. Box, M.E. Muller and G. Marsaglia, as described in"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,217,"* D. Knuth, <u>The Art of Computer Programming</u>, 3.4.1C."
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,218,* <p>
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,219,* The algorithm generates a pair of independent random values.  One of
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,220,"* these is cached for reuse, so the full algorithm is not executed on each"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,221,* activation.  Implementations that do not override this method should
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,222,* make sure to call {@link #clear} to clear the cached value in the
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,223,* implementation of {@link #setSeed(long)}.
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,225,"* @return  the next pseudorandom, Gaussian (""normally"") distributed"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,226,* <code>double</code> value with mean <code>0.0</code> and
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,227,* standard deviation <code>1.0</code> from this random number
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,228,*  generator's sequence
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,230,public double nextGaussian() {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,231,if (!Double.isNaN(cachedNormalDeviate)) {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,232,double dev = cachedNormalDeviate;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,233,cachedNormalDeviate = Double.NaN;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,234,return dev;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,236,double v1 =0;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,237,double v2 = 0;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,238,double s = 1;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,239,while (s >=1 ) {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,240,v1 = 2 * nextDouble() - 1;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,241,v2 = 2 * nextDouble() - 1;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,242,s = v1 * v1 + v2 * v2;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,244,if (s != 0) {
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,245,s = Math.sqrt(-2 * Math.log(s)/s);
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,247,cachedNormalDeviate = v2 * s;
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,248,return v1 * s;
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,16,package org.apache.commons.math.random;
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,18,import java.util.Random;
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,21,* Extension of <code>java.util.Random</code> to implement
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,22,* {@link RandomGenerator}.
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,24,* @version $Revision:$ $Date$
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,26,public class JDKRandomGenerator extends Random implements RandomGenerator {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,24,mport java.util.Random;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,28, Implements the {@link RandomData} interface using
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,29, {@link java.util.Random} and {@link java.util.Random.SecureRandom} instances
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,30, to generate data.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,27,* Implements the {@link RandomData} interface using a {@link RandomGenerator}
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,28,* instance to generate non-secure data and a
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,29,* {@link java.security.SecureRandom} instance to provide data for the
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,30,* <code>nextSecureXxx</code> methods.  If no <code>RandomGenerator</code>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,31,"* is provided in the constructor, the default is to use a generator based on"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,32,"* {@link java.util.Random}.   To plug in a different implementation,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,33,* either implement <code>RandomGenerator</code> directly or extend
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,34,* {@link AbstractRandomGenerator}.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,36," For details on the PRNGs, see {@link java.util.Random} and"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,37, {@link java.util.Random.SecureRandom}.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,40,"* For details on the default PRNGs, see {@link java.util.Random} and"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,41,* {@link java.security.SecureRandom}.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,41, Instance variables are used to maintain <code>Random</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,45,* Instance variables are used to maintain <code>RandomGenerator</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,55, number generators are <strong>not</strong> intialized.  The first call to a
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,56," data generation method, or to a <code>reSeed()</code> method instantiates"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,57," the appropriate generator.  If you do not explicitly seed the generator, it"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,58, is by default seeded with the current time in milliseconds</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,59,* number generators are <strong>not</strong> intialized.  If you do not
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,60,"* explicitly seed the default non-secure generator, it is seeded with the current time"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,61,* in milliseconds on first use.  The same holds for the secure generator.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,62,"* If you provide a <code>RandomGenerator</code> to the constructor, however,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,63,* this generator is not reseeded by the constructor nor is it reseeded on
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,64,* first use. </li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,61, to the corresponding methods on the underlying <code>Random</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,62," <code>SecureRandom</code> instances.  Therefore, the contracts of these"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,63," methods are as defined in the JDK documentation.  In particular,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,67,* to the corresponding methods on the underlying <code>RandomGenerator</code>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,68,"* and<code>SecureRandom</code> instances.  Therefore,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,82,rivate Random rand = null;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,87,private RandomGenerator rand = null;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,99,* Construct a RandomDataImpl using the supplied {@link RandomGenerator}
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,100,* as the source of (non-secure) random data.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,102,* @param rand  the source of (non-secure) random data
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,104,public RandomDataImpl(RandomGenerator rand) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,105,super();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,106,this.rand = rand;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,109,andom ran = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,125,RandomGenerator ran = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,151,andom rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,167,RandomGenerator rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,168,andom rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,184,RandomGenerator rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,294,andom rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,310,RandomGenerator rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,320,andom rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,336,RandomGenerator rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,341,andom rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,357,RandomGenerator rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,357, @return the random value.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,374,"* @return a uniformly distributed random value from the interval (lower, upper)"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,364,andom rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,381,RandomGenerator rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,366,/ insure nextDouble() isn't 0.0
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,383,// ensure nextDouble() isn't 0.0
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,376, Returns the static Random used to generate random data.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,393,* Returns the RandomGenerator used to generate non-secure
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,394,* random data.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,378, Creates and initializes if null.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,396,* Creates and initializes a default generator if null.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,380, @return the static Random used to generate random data
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,398,* @return the Random used to generate random data
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,382,rivate Random getRan() {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,400,private RandomGenerator getRan() {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,384,and = new Random();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,402,rand = new JDKRandomGenerator();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,391, Returns the static SecureRandom used to generate secure random data.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,409,* Returns the SecureRandom used to generate secure random data.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,395, @return the static SecureRandom used to generate secure random data
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,413,* @return the SecureRandom used to generate secure random data
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,414,and = new Random();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,432,rand = new JDKRandomGenerator();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,452,and = new Random();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,470,rand = new JDKRandomGenerator();
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,16,package org.apache.commons.math.random;
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,19,* Interface extracted from <code>java.util.Random</code>.  This interface is
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,20,* implemented by {@link AbstractRandomGenerator}.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,22,* @version $Revision:$ $Date$
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,24,public interface RandomGenerator {
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,27,* Sets the seed of the underyling random number generator using a
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,28,* <code>long</code> seed.  Sequences of values generated starting with the
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,29,* same seeds should be identical.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,31,* @param seed the seed value
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,33,void setSeed(long seed);
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,36,* Generates random bytes and places them into a user-supplied
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,37,* byte array.  The number of random bytes produced is equal to
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,38,* the length of the byte array.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,40,* @param bytes the non-null byte array in which to put the
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,41,* random bytes
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,43,void nextBytes(byte[] bytes);
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,46,"* Returns the next pseudorandom, uniformly distributed <code>int</code>"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,47,* value from this random number generator's sequence.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,48,"* All 2<font size=""-1""><sup>32</sup></font> possible <tt>int</tt> values"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,49,* should be produced with  (approximately) equal probability.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,51,"* @return the next pseudorandom, uniformly distributed <code>int</code>"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,52,*  value from this random number generator's sequence
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,54,int nextInt();
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,57,"* Returns a pseudorandom, uniformly distributed <tt>int</tt> value"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,58,"* between 0 (inclusive) and the specified value (exclusive), drawn from"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,59,* this random number generator's sequence.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,61,* @param n the bound on the random number to be returned.  Must be
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,62,* positive.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,63,"* @return  a pseudorandom, uniformly distributed <tt>int</tt>"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,64,* value between 0 (inclusive) and n (exclusive).
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,65,* @throws IllegalArgumentException  if n is not positive.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,67,int nextInt(int n);
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,70,"* Returns the next pseudorandom, uniformly distributed <code>long</code>"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,71,* value from this random number generator's sequence.  All
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,72,"* 2<font size=""-1""><sup>64</sup></font> possible <tt>long</tt> values"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,73,* should be produced with (approximately) equal probability.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,75,"* @return  the next pseudorandom, uniformly distributed <code>long</code>"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,76,*value from this random number generator's sequence
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,78,long nextLong();
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,81,"* Returns the next pseudorandom, uniformly distributed"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,82,* <code>boolean</code> value from this random number generator's
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,83,* sequence.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,85,"* @return  the next pseudorandom, uniformly distributed"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,86,* <code>boolean</code> value from this random number generator's
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,87,* sequence
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,89,boolean nextBoolean();
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,92,"* Returns the next pseudorandom, uniformly distributed <code>float</code>"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,93,* value between <code>0.0</code> and <code>1.0</code> from this random
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,94,* number generator's sequence.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,96,"* @return  the next pseudorandom, uniformly distributed <code>float</code>"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,97,* value between <code>0.0</code> and <code>1.0</code> from this
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,98,* random number generator's sequence
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,100,float nextFloat();
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,103,"* Returns the next pseudorandom, uniformly distributed"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,104,* <code>double</code> value between <code>0.0</code> and
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,105,* <code>1.0</code> from this random number generator's sequence.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,107,"* @return  the next pseudorandom, uniformly distributed"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,108,*  <code>double</code> value between <code>0.0</code> and
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,109,*  <code>1.0</code> from this random number generator's sequence
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,111,double nextDouble();
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,114,"* Returns the next pseudorandom, Gaussian (""normally"") distributed"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,115,* <code>double</code> value with mean <code>0.0</code> and standard
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,116,* deviation <code>1.0</code> from this random number generator's sequence.
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,118,"* @return  the next pseudorandom, Gaussian (""normally"") distributed"
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,119,* <code>double</code> value with mean <code>0.0</code> and
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,120,* standard deviation <code>1.0</code> from this random number
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,121,*  generator's sequence
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,123,double nextGaussian();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,65,rivate RandomDataImpl randomData = new RandomDataImpl();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,65,private RandomData randomData = new RandomDataImpl();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,357,* Construct a ValueServer instance using a RandomData as its source
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,358,* of random data.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,360,* @param randomData the RandomData instance used to source random data
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,362,public ValueServer(RandomData randomData) {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,363,super();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,364,this.randomData = randomData;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,16,package org.apache.commons.math.random;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,17,import junit.framework.Test;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,18,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,21,* Test cases for the AbstractRandomGenerator class
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,23,* @version $Revision:$ $Date$
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,26,public class AbstractRandomGeneratorTest extends RandomDataTest {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,27,public AbstractRandomGeneratorTest(String name) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,28,super(name);
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,29,randomData = new RandomDataImpl(new TestRandomGenerator());
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,32,public static Test suite() {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,33,TestSuite suite = new TestSuite(AbstractRandomGeneratorTest.class);
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,34,"suite.setName(""AbstractRandomGenerator Tests"");"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,35,return suite;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,35,ublic final class RandomDataTest extends RetryTestCase {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,35,public class RandomDataTest extends RetryTestCase {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,39,randomData = new RandomDataImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,47,rivate RandomDataImpl randomData = new RandomDataImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,48,protected RandomDataImpl randomData = null;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,403,oSuchAlgorithmException{
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,404,NoSuchAlgorithmException {
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,16,package org.apache.commons.math.random;
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,17,import java.util.Random;
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,20,* Dummy AbstractRandomGenerator concrete subclass that just wraps a
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,21,* java.util.Random instance.  Used by AbstractRandomGeneratorTest to test
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,22,* default implementations in AbstractRandomGenerator.
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,24,* @version $Revision:$ $Date$
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,26,public class TestRandomGenerator extends AbstractRandomGenerator {
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,27,private Random random = new Random();
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,29,public void setSeed(long seed) {
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,30,clear();
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,31,random.setSeed(seed);
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,34,public double nextDouble() {
True,src/test/org/apache/commons/math/random/TestRandomGenerator.java,src/test/org/apache/commons/math/random/TestRandomGenerator.java,35,return random.nextDouble();

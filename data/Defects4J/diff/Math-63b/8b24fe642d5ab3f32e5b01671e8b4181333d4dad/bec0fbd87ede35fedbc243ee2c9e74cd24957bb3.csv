is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,28, @version $Revision: 1.7 $ $Date: 2004/09/05 01:19:23 $
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,28,* @version $Revision: 1.8 $ $Date: 2004/10/25 02:21:20 $
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,155,* Gets a submatrix. Rows and columns are indicated
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,156,* counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,158,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,159,* @param endRow Final row index
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,160,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,161,* @param endColumn Final column index
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,162,* @return The subMatrix containing the data of the
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,163,*         specified rows and columns
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,164,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,166,"BigMatrix getSubMatrix(int startRow, int endRow, int startColumn,"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,167,int endColumn) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,170,* Gets a submatrix. Rows and columns are indicated
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,171,* counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,173,* @param selectedRows Array of row indices.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,174,* @param selectedColumns Array of column indices.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,175,* @return The subMatrix containing the data in the
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,176,*         specified rows and columns
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,177,* @exception MatrixIndexException if row or column selections are not valid
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,179,"BigMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,180,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,183,* Returns the entries in row number <code>row</code>
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,184,* as a row matrix.  Row indices start at 0.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,186,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,187,* @return row matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,188,* @throws MatrixIndexException if the specified row index is invalid
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,190,BigMatrix getRowMatrix(int row) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,193,* Returns the entries in column number <code>column</code>
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,194,* as a column matrix.  Column indices start at 0.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,196,* @param column the column to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,197,* @return column matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,198,* @throws MatrixIndexException if the specified column index is invalid
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,200,BigMatrix getColumnMatrix(int column) throws MatrixIndexException;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,46, @version $Revision: 1.6 $ $Date: 2004/09/05 01:19:23 $
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,46,* @version $Revision: 1.7 $ $Date: 2004/10/25 02:21:20 $
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,433,* Gets a submatrix. Rows and columns are indicated
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,434,* counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,436,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,437,* @param endRow Final row index
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,438,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,439,* @param endColumn Final column index
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,440,* @return The subMatrix containing the data of the
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,441,*         specified rows and columns
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,442,* @exception MatrixIndexException if row or column selections are not valid
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,444,"public BigMatrix getSubMatrix(int startRow, int endRow, int startColumn,"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,445,int endColumn) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,446,if (startRow < 0 || startRow > endRow || endRow > data.length ||
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,447,startColumn < 0 || startColumn > endColumn ||
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,448,endColumn > data[0].length ) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,449,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,450,"""invalid row or column index selection"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,452,"BigMatrixImpl subMatrix = new BigMatrixImpl(endRow - startRow+1,"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,453,endColumn - startColumn+1);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,454,BigDecimal[][] subMatrixData = subMatrix.getDataRef();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,455,for (int i = startRow; i <= endRow; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,456,for (int j = startColumn; j <= endColumn; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,457,subMatrixData[i - startRow][j - startColumn] = data[i][j];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,460,return subMatrix;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,464,* Gets a submatrix. Rows and columns are indicated
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,465,* counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,467,* @param selectedRows Array of row indices must be non-empty
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,468,* @param selectedColumns Array of column indices must be non-empty
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,469,* @return The subMatrix containing the data in the
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,470,*     specified rows and columns
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,471,* @exception MatrixIndexException  if supplied row or column index arrays
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,472,*     are not valid
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,474,"public BigMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,475,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,476,if (selectedRows.length * selectedColumns.length == 0) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,477,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,478,"""selected row and column index arrays must be non-empty"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,480,"BigMatrixImpl subMatrix = new BigMatrixImpl(selectedRows.length,"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,481,selectedColumns.length);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,482,BigDecimal[][] subMatrixData = subMatrix.getDataRef();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,483,try  {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,484,for (int i = 0; i < selectedRows.length; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,485,for (int j = 0; j < selectedColumns.length; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,486,subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,490,catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,491,"throw new MatrixIndexException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,493,return subMatrix;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,497,* Returns the entries in row number <code>row</code>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,498,* as a row matrix.  Row indices start at 0.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,500,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,501,* @return row matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,502,* @throws MatrixIndexException if the specified row index is invalid
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,504,public BigMatrix getRowMatrix(int row) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,505,"if ( !isValidCoordinate( row, 0)) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,506,"throw new MatrixIndexException(""illegal row argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,508,int ncols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,509,BigDecimal[][] out = new BigDecimal[1][ncols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,510,"System.arraycopy(data[row], 0, out[0], 0, ncols);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,511,return new BigMatrixImpl(out);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,515,* Returns the entries in column number <code>column</code>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,516,* as a column matrix.  Column indices start at 0.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,518,* @param column the column to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,519,* @return column matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,520,* @throws MatrixIndexException if the specified column index is invalid
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,522,public BigMatrix getColumnMatrix(int column) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,523,"if ( !isValidCoordinate( 0, column)) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,524,"throw new MatrixIndexException(""illegal column argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,526,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,527,BigDecimal[][] out = new BigDecimal[nRows][1];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,528,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,529,out[row][0] = data[row][column];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,531,return new BigMatrixImpl(out);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1008,or (int i = 0; i < data.length; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1009,f (i > 0)
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1010,"es.append("","");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1011,"es.append(""{"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1012,or (int j = 0; j < data[0].length; j++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1013,f (j > 0)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1110,if (data != null) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1111,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1112,if (i > 0)
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1015,es.append(data[i][j]);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1016, //for
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1017,"es.append(""}"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1018, //for
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1114,"res.append(""{"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1115,for (int j = 0; j < data[0].length; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1116,if (j > 0)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1117,"res.append("","");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1118,res.append(data[i][j]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1120,"res.append(""}"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1021, //toString
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1128,* Returns true iff <code>object</code> is a
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1129,* <code>BigMatrixImpl</code> instance with the same dimensions as this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1130,* and all corresponding matrix entries are equal.  BigDecimal.equals
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1131,* is used to compare corresponding entries.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1133,* @param object the object to test equality against.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1134,* @return true if object equals this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1136,public boolean equals(Object object) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1137,if (object == this ) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1138,return true;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1140,if (object instanceof BigMatrixImpl == false) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1141,return false;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1143,BigMatrix m = (BigMatrix) object;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1144,int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1145,int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1146,if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1147,return false;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1149,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1150,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1151,"if (!data[row][col].equals(m.getEntry(row, col))) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1152,return false;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1156,return true;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1160,* Computes a hashcode for the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1162,* @return hashcode for matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1164,public int hashCode() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1165,int ret = 7;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1166,int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1167,int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1168,ret = ret * 31 + nRows;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1169,ret = ret * 31 + nCols;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1170,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1171,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1172,ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1173,data[row][col].hashCode();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1176,return ret;

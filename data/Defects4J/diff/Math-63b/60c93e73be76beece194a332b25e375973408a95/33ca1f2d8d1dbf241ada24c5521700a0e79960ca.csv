is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,21,mport java.util.Iterator;
False,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,49,arameters   = new ArrayList();
False,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,50,easurements = new ArrayList();
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,48,parameters   = new ArrayList<EstimatedParameter>();
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,49,measurements = new ArrayList<WeightedMeasurement>();
False,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,68,ist unbound = new ArrayList(parameters.size());
False,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,69,or (Iterator iterator = parameters.iterator(); iterator.hasNext();) {
False,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,70,stimatedParameter p = (EstimatedParameter) iterator.next();
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,67,List<EstimatedParameter> unbound = new ArrayList<EstimatedParameter>(parameters.size());
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,68,for (EstimatedParameter p : parameters) {
False,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,105,rivate final List parameters;
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,103,private final List<EstimatedParameter> parameters;
False,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,108,rivate final List measurements;
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,106,private final List<WeightedMeasurement> measurements;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,28,ublic class Fraction extends Number implements Comparable {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,28,public class Fraction extends Number implements Comparable<Fraction> {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,37,rivate static final long serialVersionUID = -8958519416450949235L;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,37,private static final long serialVersionUID = -5731055832688548463L;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,249,ublic int compareTo(Object object) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,249,public int compareTo(Fraction object) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,253,raction other = (Fraction)object;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,255,ouble second = other.doubleValue();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,254,double second = object.doubleValue();
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,166,"witchesHandler.add(function, maxCheckInterval, convergence, maxIterationCount);"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,166,"switchesHandler.addSwitchingFunction(function, maxCheckInterval, convergence, maxIterationCount);"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,174,ublic Collection getSwitchingFunctions() {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,174,public Collection<SwitchState> getSwitchingFunctions() {
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,21,mport java.util.Iterator;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,48, <p>If problem modelization is done with several separate
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,47,* <p>If problem modeling is done with several separate
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,55, another more complex model including thrusters modelization and
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,54,* another more complex model including thrusters modeling and
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,89,teps = new ArrayList();
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,88,steps = new ArrayList<StepInterpolator>();
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,132,or (Iterator iter = model.steps.iterator(); iter.hasNext(); ) {
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,133,teps.add(((AbstractStepInterpolator) iter.next()).copy());
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,131,for (StepInterpolator interpolator : model.steps) {
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,132,steps.add(interpolator.copy());
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,174,bstractStepInterpolator ai = (AbstractStepInterpolator) interpolator;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,181,teps.add(ai.copy());
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,178,steps.add(interpolator.copy());
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,184,inalTime = ai.getCurrentTime();
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,181,finalTime = interpolator.getCurrentTime();
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,213,eturn ((StepInterpolator) steps.get(index)).getInterpolatedTime();
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,210,return steps.get(index).getInterpolatedTime();
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,233,tepInterpolator sMin = (StepInterpolator) steps.get(iMin);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,230,StepInterpolator sMin = steps.get(iMin);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,237,tepInterpolator sMax = (StepInterpolator) steps.get(iMax);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,234,StepInterpolator sMax = steps.get(iMax);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,257,tepInterpolator si = (StepInterpolator) steps.get(index);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,254,StepInterpolator si = steps.get(index);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,273,tepInterpolator sMed = (StepInterpolator) steps.get(iMed);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,270,StepInterpolator sMed = steps.get(iMed);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,309,hile ((index <= iMax) &&
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,310,"locatePoint(time, (StepInterpolator) steps.get(index)) > 0)) {"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,306,"while ((index <= iMax) && (locatePoint(time, steps.get(index)) > 0)) {"
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,314,tepInterpolator si = (StepInterpolator) steps.get(index);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,316,i.setInterpolatedTime(time);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,310,steps.get(index).setInterpolatedTime(time);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,330,eturn ((StepInterpolator) steps.get(index)).getInterpolatedState();
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,324,return steps.get(index).getInterpolatedState();
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,372,rivate List steps;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,366,private List<StepInterpolator> steps;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,375,rivate static final long serialVersionUID = 2259286184268533249L;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,369,private static final long serialVersionUID = -1417964919405031606L;
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,77,ublic Collection getSwitchingFunctions();
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,77,public Collection<SwitchState> getSwitchingFunctions();
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,108,"witchesHandler.add(function, maxCheckInterval, convergence, maxIterationCount);"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,108,"switchesHandler.addSwitchingFunction(function, maxCheckInterval, convergence, maxIterationCount);"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,116,ublic Collection getSwitchingFunctions() {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,116,public Collection<SwitchState> getSwitchingFunctions() {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,23,mport java.util.Iterator;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,42,unctions   = new ArrayList();
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,41,functions   = new ArrayList<SwitchState>();
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,58,"ublic void add(SwitchingFunction function, double maxCheckInterval,"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,59,"ouble convergence, int maxIterationCount) {"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,57,"public void addSwitchingFunction(SwitchingFunction function, double maxCheckInterval,"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,58,"double convergence, int maxIterationCount) {"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,66," @see #add(SwitchingFunction, double, double, int)"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,65,"* @see #addSwitchingFunction(SwitchingFunction, double, double, int)"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,69,ublic Collection getSwitchingFunctions() {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,68,public Collection<SwitchState> getSwitchingFunctions() {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,74," @see #add(SwitchingFunction, double, double, int)"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,73,"* @see #addSwitchingFunction(SwitchingFunction, double, double, int)"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,117,or (Iterator iter = functions.iterator(); iter.hasNext();) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,118,"(SwitchState) iter.next()).reinitializeBegin(t0, y);"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,116,for (SwitchState state : functions) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,117,"state.reinitializeBegin(t0, y);"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,126,or (Iterator iter = functions.iterator(); iter.hasNext();) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,125,for (SwitchState state : functions) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,128,witchState state = (SwitchState) iter.next();
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,179,or (Iterator iter = functions.iterator(); iter.hasNext();) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,180,"(SwitchState) iter.next()).stepAccepted(t, y);"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,177,for (SwitchState state : functions) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,178,"state.stepAccepted(t, y);"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,192,or (Iterator iter = functions.iterator(); iter.hasNext();) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,193,f (((SwitchState) iter.next()).stop()) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,190,for (SwitchState state : functions) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,191,if (state.stop()) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,212,or (Iterator iter = functions.iterator(); iter.hasNext();) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,213,"f (((SwitchState) iter.next()).reset(t, y)) {"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,210,for (SwitchState state : functions) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,211,"if (state.reset(t, y)) {"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,224,rivate List functions;
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,222,private List<SwitchState> functions;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,574,rivate static Comparator pointCostPairComparator = new Comparator() {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,575,"ublic int compare(Object o1, Object o2) {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,574,private static Comparator<PointCostPair> pointCostPairComparator =
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,575,new Comparator<PointCostPair>() {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,576,"public int compare(PointCostPair o1, PointCostPair o2) {"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,581,ouble cost1 = ((PointCostPair) o1).getCost();
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,582,ouble cost2 = ((PointCostPair) o2).getCost();
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,583,eturn (cost1 < cost2) ? -1 : ((o1 == o2) ? 0 : +1);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,582,return (o1.getCost() < o2.getCost()) ? -1 : ((o1 == o2) ? 0 : +1);
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,26,import org.apache.commons.math.stat.descriptive.SummaryStatistics;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,121,ist getBinStats();
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,122,List<SummaryStatistics> getBinStats();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,64,rivate static final long serialVersionUID = -6773236347582113490L;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,64,private static final long serialVersionUID = 5729073523949762654L;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,67,rivate List binStats = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,67,private List<SummaryStatistics> binStats = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,88,inStats = new ArrayList();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,88,binStats = new ArrayList<SummaryStatistics>();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,98,inStats = new ArrayList();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,98,binStats = new ArrayList<SummaryStatistics>();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,257,ummaryStatistics stats =
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,258,"SummaryStatistics) binStats.get(findBin(min, val, delta));"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,257,"SummaryStatistics stats = binStats.get(findBin(min, val, delta));"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,322,SummaryStatistics) binStats.get(
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,323,"indBin(min, inputArray[i], delta));"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,321,"binStats.get(findBin(min, inputArray[i], delta));"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,372,(double)((SummaryStatistics)binStats.get(0)).getN())/
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,373,double)sampleStats.getN();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,370,((double) binStats.get(0).getN()) / (double) sampleStats.getN();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,376,(double)((SummaryStatistics)binStats.get(i)).getN())/
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,377,double)sampleStats.getN();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,373,((double) binStats.get(i).getN()) / (double) sampleStats.getN();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,414,ummaryStatistics stats = (SummaryStatistics)binStats.get(i);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,410,SummaryStatistics stats = binStats.get(i);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,456,ublic List getBinStats() {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,452,public List<SummaryStatistics> getBinStats() {
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,271,"bject[] nextSample(Collection c, int k);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,271,"Object[] nextSample(Collection<?> c, int k);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,548,"ublic Object[] nextSample(Collection c, int k) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,548,"public Object[] nextSample(Collection<?> c, int k) {"
False,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,53,ublic double anovaFValue(Collection categoryData)
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,53,public double anovaFValue(Collection<double[]> categoryData)
False,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,74,ublic double anovaPValue(Collection categoryData)
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,74,public double anovaPValue(Collection<double[]> categoryData)
False,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,99,"ublic boolean anovaTest(Collection categoryData, double alpha)"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,99,"public boolean anovaTest(Collection<double[]> categoryData, double alpha)"
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,19,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,20,mport org.apache.commons.math.stat.descriptive.summary.Sum;
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,21,mport org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,19,import java.util.Collection;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,21,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,26,mport java.util.Collection;
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,27,mport java.util.Iterator;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,24,import org.apache.commons.math.stat.descriptive.summary.Sum;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,25,import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,68,ublic double anovaFValue(Collection categoryData)
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,66,public double anovaFValue(Collection<double[]> categoryData)
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,84,ublic double anovaPValue(Collection categoryData)
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,82,public double anovaPValue(Collection<double[]> categoryData)
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,102,"ublic boolean anovaTest(Collection categoryData, double alpha)"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,100,"public boolean anovaTest(Collection<double[]> categoryData, double alpha)"
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,121,rivate AnovaStats anovaStats(Collection categoryData)
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,119,private AnovaStats anovaStats(Collection<double[]> categoryData)
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,131,or (Iterator iterator = categoryData.iterator(); iterator.hasNext();) {
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,132,ouble[] array;
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,133,ry {
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,134,rray = (double[])iterator.next();
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,135, catch (ClassCastException ex) {
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,136,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,137,"ANOVA: categoryData contains non-double[] elements."");"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,129,for (double[] array : categoryData) {
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,151,or (Iterator iterator = categoryData.iterator(); iterator.hasNext();) {
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,152,ouble[] data = (double[])iterator.next();
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,142,for (double[] data : categoryData) {
False,src/java/org/apache/commons/math/stat/inference/TestUtils.java,src/java/org/apache/commons/math/stat/inference/TestUtils.java,385,ublic static double oneWayAnovaFValue(Collection categoryData)
True,src/java/org/apache/commons/math/stat/inference/TestUtils.java,src/java/org/apache/commons/math/stat/inference/TestUtils.java,385,public static double oneWayAnovaFValue(Collection<double[]> categoryData)
False,src/java/org/apache/commons/math/stat/inference/TestUtils.java,src/java/org/apache/commons/math/stat/inference/TestUtils.java,395,ublic static double oneWayAnovaPValue(Collection categoryData)
True,src/java/org/apache/commons/math/stat/inference/TestUtils.java,src/java/org/apache/commons/math/stat/inference/TestUtils.java,395,public static double oneWayAnovaPValue(Collection<double[]> categoryData)
False,src/java/org/apache/commons/math/stat/inference/TestUtils.java,src/java/org/apache/commons/math/stat/inference/TestUtils.java,405,"ublic static boolean oneWayAnovaTest(Collection categoryData, double alpha)"
True,src/java/org/apache/commons/math/stat/inference/TestUtils.java,src/java/org/apache/commons/math/stat/inference/TestUtils.java,405,"public static boolean oneWayAnovaTest(Collection<double[]> categoryData, double alpha)"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,37,rivate static final long serialVersionUID = -942772950698439883L;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,37,private static final long serialVersionUID = 4605318041528645258L;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,47,rivate Map map = null;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,47,"private Map<Class<?>, NumberTransformer> map = null;"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,50,* Build a map containing only the default transformer.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,53,ap = new HashMap();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,53,"map = new HashMap<Class<?>, NumberTransformer>();"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,62,ublic boolean containsClass(Class key) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,62,public boolean containsClass(Class<?> key) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,81,ublic NumberTransformer getTransformer(Class key) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,81,public NumberTransformer getTransformer(Class<?> key) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,93,"ublic Object putTransformer(Class key, NumberTransformer transformer) {"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,93,"public NumberTransformer putTransformer(Class<?> key, NumberTransformer transformer) {"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,103,ublic Object removeTransformer(Class key) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,103,public NumberTransformer removeTransformer(Class<?> key) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,118,ublic Set classes() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,118,public Set<Class<?>> classes() {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,127,ublic Collection transformers() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,127,public Collection<NumberTransformer> transformers() {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,22,mport java.util.Iterator;
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,24,mport org.apache.commons.math.estimation.EstimatedParameter;
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,25,mport org.apache.commons.math.estimation.EstimationException;
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,26,mport org.apache.commons.math.estimation.EstimationProblem;
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,27,mport org.apache.commons.math.estimation.GaussNewtonEstimator;
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,28,mport org.apache.commons.math.estimation.WeightedMeasurement;
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,30,mport junit.framework.*;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,23,import junit.framework.Test;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,25,import junit.framework.TestSuite;
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,573,ashSet set = new HashSet();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,568,HashSet<EstimatedParameter> set = new HashSet<EstimatedParameter>();
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,581,or (Iterator iterator = set.iterator(); iterator.hasNext();) {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,582,ddParameter((EstimatedParameter) iterator.next());
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,576,for (EstimatedParameter p : set) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,577,addParameter(p);
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,630,oints  = new ArrayList();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,625,points  = new ArrayList<PointModel>();
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,655,or (Iterator iterator = points.iterator(); iterator.hasNext();) {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,656,RdX += ((PointModel) iterator.next()).getPartialDiX();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,650,for (PointModel point : points) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,651,dRdX += point.getPartialDiX();
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,663,or (Iterator iterator = points.iterator(); iterator.hasNext();) {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,664,RdY += ((PointModel) iterator.next()).getPartialDiY();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,658,for (PointModel point : points) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,659,dRdY += point.getPartialDiY();
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,671,or (Iterator iterator = points.iterator(); iterator.hasNext();) {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,672, += ((PointModel) iterator.next()).getCenterDistance();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,666,for (PointModel point : points) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,667,r += point.getCenterDistance();
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,728,rivate ArrayList points;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,723,private ArrayList<PointModel> points;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,21,mport java.util.HashMap;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,22,mport java.util.Iterator;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,23,mport java.util.Set;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,21,import java.util.HashSet;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,25,mport org.apache.commons.math.estimation.EstimatedParameter;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,26,mport org.apache.commons.math.estimation.EstimationException;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,27,mport org.apache.commons.math.estimation.EstimationProblem;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,28,mport org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,29,mport org.apache.commons.math.estimation.WeightedMeasurement;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,31,mport junit.framework.*;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,23,import junit.framework.Test;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,25,import junit.framework.TestSuite;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,621,ashMap map = new HashMap();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,615,HashSet<EstimatedParameter> set = new HashSet<EstimatedParameter>();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,625,"ap.put(parameters[j], null);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,619,set.add(parameters[j]);
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,628,et set = map.keySet();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,677,oints  = new ArrayList();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,670,points  = new ArrayList<PointModel>();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,702,or (Iterator iterator = points.iterator(); iterator.hasNext();) {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,703,RdX += ((PointModel) iterator.next()).getPartialDiX();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,695,for (PointModel point : points) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,696,dRdX += point.getPartialDiX();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,710,or (Iterator iterator = points.iterator(); iterator.hasNext();) {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,711,RdY += ((PointModel) iterator.next()).getPartialDiY();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,703,for (PointModel point : points) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,704,dRdY += point.getPartialDiY();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,718,or (Iterator iterator = points.iterator(); iterator.hasNext();) {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,719, += ((PointModel) iterator.next()).getCenterDistance();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,711,for (PointModel point : points) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,712,r += point.getCenterDistance();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,775,rivate ArrayList points;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,768,private ArrayList<PointModel> points;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,19,mport junit.framework.Test;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,20,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,28,mport java.util.Iterator;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,26,import junit.framework.Test;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,27,import junit.framework.TestSuite;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,61,rrayList list = new ArrayList();
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,60,ArrayList<Double> list = new ArrayList<Double>();
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,70,or (Iterator iter = list.iterator(); iter.hasNext();) {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,71,ataArray[i] = ((Double)iter.next()).doubleValue();
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,69,for (Double data : list) {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,70,dataArray[i] = data.doubleValue();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,489,"ashSet cPop = new HashSet();  //{0,1,2,3,4}"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,489,"HashSet<Object> cPop = new HashSet<Object>();  //{0,1,2,3,4}"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,496,ashSet hs = new HashSet();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,496,HashSet<Object> hs = new HashSet<Object>();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,514,ashSet hs = new HashSet();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,514,HashSet<Object> hs = new HashSet<Object>();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,532,s = new HashSet();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,532,hs = new HashSet<Object>();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,540,"@SuppressWarnings(""unchecked"")"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,542,ashSet set = (HashSet) u[i];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,543,ashSet sampSet = new HashSet();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,543,HashSet<Object> set = (HashSet<Object>) u[i];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,544,HashSet<Object> sampSet = new HashSet<Object>();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,27,mport java.util.Iterator;
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,29,import junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,34,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,45,rivate Map certifiedValues;
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,44,"private Map<String, Double> certifiedValues;"
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,50,ertifiedValues = new HashMap();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,49,"certifiedValues = new HashMap<String, Double>();"
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,113,terator iter = certifiedValues.keySet().iterator();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,115,hile (iter.hasNext()) {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,116,tring name = iter.next().toString();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,112,for (String name : certifiedValues.keySet()) {
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,41,rotected List list;
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,41,protected List<Object> list;
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,50,his(new ArrayList());
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,50,this(new ArrayList<Object>());
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,57,ublic ListUnivariateImpl(List list) {
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,57,public ListUnivariateImpl(List<Object> list) {
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,66,"ublic ListUnivariateImpl(List list, NumberTransformer transformer) {"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,66,"public ListUnivariateImpl(List<Object> list, NumberTransformer transformer) {"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,65,ist externalList = new ArrayList();
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,65,List<Object> externalList = new ArrayList<Object>();
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,87,ist list = new ArrayList();
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,87,List<Object> list = new ArrayList<Object>();
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,118,istUnivariateImpl u = new ListUnivariateImpl(new ArrayList());
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,118,ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList<Object>());
False,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,72,ist externalList = new ArrayList();
True,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,72,List<Object> externalList = new ArrayList<Object>();
False,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,94,"escriptiveStatistics u = new ListUnivariateImpl(new ArrayList(),transformers);"
True,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,94,"DescriptiveStatistics u = new ListUnivariateImpl(new ArrayList<Object>(),transformers);"
False,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,123,"ew ListUnivariateImpl(new ArrayList(), transformers);"
True,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,123,"new ListUnivariateImpl(new ArrayList<Object>(), transformers);"
False,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,156,"istUnivariateImpl u = new ListUnivariateImpl(new ArrayList(),transformers);"
True,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,156,"ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList<Object>(),transformers);"
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,36,"rivate char[] wrongArray = { 'a', 'b', 'c' };"
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,61,ist threeClasses = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,60,List<double[]> threeClasses = new ArrayList<double[]>();
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,69,ist twoClasses = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,68,List<double[]> twoClasses = new ArrayList<double[]>();
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,76,/ now try some input hashes which should fail
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,77,ist wrongContents = new ArrayList();
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,78,rongContents.add(classC);
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,79,rongContents.add(wrongArray);
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,80,ry {
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,81,estStatistic.anovaFValue(wrongContents);
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,82,"ail(""non double[] hash value for key classX, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,83, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,84,/ expected
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,87,ist emptyContents = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,75,List<double[]> emptyContents = new ArrayList<double[]>();
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,97,ist tooFew = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,85,List<double[]> tooFew = new ArrayList<double[]>();
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,110,ist threeClasses = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,98,List<double[]> threeClasses = new ArrayList<double[]>();
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,118,ist twoClasses = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,106,List<double[]> twoClasses = new ArrayList<double[]>();
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,129,ist threeClasses = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,117,List<double[]> threeClasses = new ArrayList<double[]>();
False,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,136,ist twoClasses = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,124,List<double[]> twoClasses = new ArrayList<double[]>();
False,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,454,rivate List classes = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,454,private List<double[]> classes = new ArrayList<double[]>();

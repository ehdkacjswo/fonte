is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,27,import org.apache.commons.math3.exception.MathIllegalStateException;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,31,import org.apache.commons.math3.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,417,"itfun.decode(bestArx.getColumn(0)),"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,419,"fitfun.repairAndDecode(bestArx.getColumn(0)),"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,917,* @param x Normalized objective variables.
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,918,"* @return the original objective variables, possibly repaired."
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,920,public double[] repairAndDecode(final double[] x) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,921,return boundaries != null && isRepairMode ?
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,922,decode(repair(x)) :
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,923,decode(x);
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,375,@Test
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,376,public void testMath864() {
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,377,final CMAESOptimizer optimizer = new CMAESOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,378,final MultivariateFunction fitnessFunction = new MultivariateFunction() {
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,379,@Override
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,380,public double value(double[] parameters) {
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,381,final double target = 1;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,382,final double error = target - parameters[0];
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,383,return error * error;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,387,final double[] start = { 0 };
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,388,final double[] lower = { -1e6 };
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,389,final double[] upper = { 0.5 };
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,390,"final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,391,"start, lower, upper).getPoint();"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,392,"Assert.assertTrue(""Out of bounds ("" + result[0] + "" > "" + upper[0] + "")"","
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,393,result[0] <= upper[0]);

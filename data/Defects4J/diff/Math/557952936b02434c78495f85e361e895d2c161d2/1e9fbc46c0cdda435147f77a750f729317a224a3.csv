is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,25,import org.apache.commons.math.geometry.euclidean.oned.Interval;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,26,import org.apache.commons.math.geometry.euclidean.oned.IntervalsSet;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,28,import org.apache.commons.math.geometry.partitioning.AbstractSubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,30,import org.apache.commons.math.geometry.partitioning.BSPTreeVisitor;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,31,import org.apache.commons.math.geometry.partitioning.BoundaryAttribute;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,35,import org.apache.commons.math.geometry.partitioning.utilities.OrderedTuple;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,205,inal AVLTree<Segment> sorted = visitor.getSorted();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,211,final AVLTree<ComparableSegment> sorted = visitor.getSorted();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,209,inal ArrayList<List<Segment>> loops = new ArrayList<List<Segment>>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,215,final ArrayList<List<ComparableSegment>> loops = new ArrayList<List<ComparableSegment>>();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,211,inal AVLTree<Segment>.Node node = sorted.getSmallest();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,212,"inal List<Segment> loop = followLoop(node, sorted);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,217,final AVLTree<ComparableSegment>.Node node = sorted.getSmallest();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,218,"final List<ComparableSegment> loop = followLoop(node, sorted);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,222,or (final List<Segment> loop : loops) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,228,for (final List<ComparableSegment> loop : loops) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,283,"rivate List<Segment> followLoop(final AVLTree<Segment>.Node node,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,284,inal AVLTree<Segment> sorted) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,289,"private List<ComparableSegment> followLoop(final AVLTree<ComparableSegment>.Node node,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,290,final AVLTree<ComparableSegment> sorted) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,286,inal ArrayList<Segment> loop = new ArrayList<Segment>();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,287,egment segment = node.getElement();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,292,final ArrayList<ComparableSegment> loop = new ArrayList<ComparableSegment>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,293,ComparableSegment segment = node.getElement();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,299,VLTree<Segment>.Node selectedNode = null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,300,egment       selectedSegment  = null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,301,ouble        selectedDistance = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,302,"inal Segment lowerLeft        = new Segment(end, -1.0e-10, -1.0e-10);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,303,"inal Segment upperRight       = new Segment(end, +1.0e-10, +1.0e-10);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,304,or (AVLTree<Segment>.Node n = sorted.getNotSmaller(lowerLeft);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,305,AVLTree<ComparableSegment>.Node selectedNode = null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,306,ComparableSegment       selectedSegment  = null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,307,double                  selectedDistance = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,308,"final ComparableSegment lowerLeft        = new ComparableSegment(end, -1.0e-10, -1.0e-10);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,309,"final ComparableSegment upperRight       = new ComparableSegment(end, +1.0e-10, +1.0e-10);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,310,for (AVLTree<ComparableSegment>.Node n = sorted.getNotSmaller(lowerLeft);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,307,egment = (Segment) n.getElement();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,313,segment = n.getElement();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,348,private static class ComparableSegment extends Segment implements Comparable<ComparableSegment> {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,350,/** Sorting key. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,351,private OrderedTuple sortingKey;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,353,/** Build a segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,354,* @param start start point of the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,355,* @param end end point of the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,356,* @param line line containing the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,358,"public ComparableSegment(final Vector2D start, final Vector2D end, final Line line) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,359,"super(start, end, line);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,360,sortingKey = (start == null) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,361,"new OrderedTuple(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) :"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,362,"new OrderedTuple(start.getX(), start.getY());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,365,/** Build a dummy segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,366,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,367,"* The object built is not a real segment, only the sorting key is used to"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,368,* allow searching in the neighborhood of a point. This is an horrible hack ...
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,369,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,370,* @param start start point of the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,371,* @param dx abscissa offset from the start point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,372,* @param dy ordinate offset from the start point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,374,"public ComparableSegment(final Vector2D start, final double dx, final double dy) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,375,"super(null, null, null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,376,"sortingKey = new OrderedTuple(start.getX() + dx, start.getY() + dy);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,379,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,380,public int compareTo(final ComparableSegment o) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,381,return sortingKey.compareTo(o.sortingKey);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,384,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,385,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,386,public boolean equals(final Object other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,387,if (this == other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,388,return true;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,389,} else if (other instanceof ComparableSegment) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,390,return compareTo((ComparableSegment) other) == 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,391,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,392,return false;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,396,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,397,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,398,public int hashCode() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,399,return getStart().hashCode() ^ getEnd().hashCode() ^
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,400,getLine().hashCode() ^ sortingKey.hashCode();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,405,/** Visitor building segments. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,406,private static class SegmentsBuilder implements BSPTreeVisitor<Euclidean2D> {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,408,/** Sorted segments. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,409,private AVLTree<ComparableSegment> sorted;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,411,/** Simple constructor. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,412,public SegmentsBuilder() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,413,sorted = new AVLTree<ComparableSegment>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,416,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,417,public Order visitOrder(final BSPTree<Euclidean2D> node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,418,return Order.MINUS_SUB_PLUS;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,421,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,422,public void visitInternalNode(final BSPTree<Euclidean2D> node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,423,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,424,final BoundaryAttribute<Euclidean2D> attribute = (BoundaryAttribute<Euclidean2D>) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,425,if (attribute.getPlusOutside() != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,426,"addContribution(attribute.getPlusOutside(), false);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,428,if (attribute.getPlusInside() != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,429,"addContribution(attribute.getPlusInside(), true);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,433,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,434,public void visitLeafNode(final BSPTree<Euclidean2D> node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,437,/** Add he contribution of a boundary facet.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,438,* @param sub boundary facet
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,439,"* @param reversed if true, the facet has the inside on its plus side"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,441,"private void addContribution(final SubHyperplane<Euclidean2D> sub, final boolean reversed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,442,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,443,"final AbstractSubHyperplane<Euclidean2D, Euclidean1D> absSub ="
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,444,"(AbstractSubHyperplane<Euclidean2D, Euclidean1D>) sub;"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,445,final Line line      = (Line) sub.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,446,final List<Interval> intervals = ((IntervalsSet) absSub.getRemainingRegion()).asList();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,447,for (final Interval i : intervals) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,448,final Vector2D start = Double.isInfinite(i.getLower()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,449,null : (Vector2D) line.toSpace(new Vector1D(i.getLower()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,450,final Vector2D end   = Double.isInfinite(i.getUpper()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,451,null : (Vector2D) line.toSpace(new Vector1D(i.getUpper()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,452,if (reversed) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,453,"sorted.insert(new ComparableSegment(end, start, line.getReverse()));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,454,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,455,"sorted.insert(new ComparableSegment(start, end, line));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,460,/** Get the sorted segments.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,461,* @return sorted segments
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,463,public AVLTree<ComparableSegment> getSorted() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,464,return sorted;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,19,mport org.apache.commons.math.geometry.partitioning.utilities.OrderedTuple;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,21,** This class holds segments information before they are connected.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,20,/** Simple container for a two-points segment.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,25,lass Segment implements Comparable<Segment> {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,24,public class Segment {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,28,rivate final Vector2D      start;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,27,private final Vector2D start;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,31,rivate final Vector2D      end;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,30,private final Vector2D end;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,34,rivate final Line         line;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,36,** Sorting key. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,37,rivate      OrderedTuple sortingKey;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,33,private final Line     line;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,48,ortingKey = (start == null) ?
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,49,"ew OrderedTuple(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) :"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,50,"ew OrderedTuple(start.getX(), start.getY());"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,53,** Build a dummy segment.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,54, <p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,55," The object built is not a real segment, only the sorting key is used to"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,56, allow searching in the neighborhood of a point. This is an horrible hack ...
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,57, </p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,58, @param start start point of the segment
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,59, @param dx abscissa offset from the start point
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,60, @param dy ordinate offset from the start point
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,62,"ublic Segment(final Vector2D start, final double dx, final double dy) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,63,his.start = null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,64,his.end   = null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,65,his.line  = null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,66,"ortingKey = new OrderedTuple(start.getX() + dx, start.getY() + dy);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,90,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,91,ublic int compareTo(final Segment o) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,92,eturn sortingKey.compareTo(o.sortingKey);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,95,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,96,Override
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,97,ublic boolean equals(final Object other) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,98,f (this == other) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,99,eturn true;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,100, else if (other instanceof Segment) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,101,eturn compareTo((Segment) other) == 0;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,102, else {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,103,eturn false;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,107,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,108,Override
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,109,ublic int hashCode() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,110,eturn start.hashCode() ^ end.hashCode() ^ line.hashCode() ^ sortingKey.hashCode();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,17,ackage org.apache.commons.math.geometry.euclidean.twod;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,19,mport java.util.List;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,21,mport org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,22,mport org.apache.commons.math.geometry.euclidean.oned.Interval;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,23,mport org.apache.commons.math.geometry.euclidean.oned.IntervalsSet;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,24,mport org.apache.commons.math.geometry.euclidean.oned.Vector1D;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,25,mport org.apache.commons.math.geometry.partitioning.AbstractSubHyperplane;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,26,mport org.apache.commons.math.geometry.partitioning.BSPTree;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,27,mport org.apache.commons.math.geometry.partitioning.BSPTreeVisitor;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,28,mport org.apache.commons.math.geometry.partitioning.BoundaryAttribute;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,29,mport org.apache.commons.math.geometry.partitioning.SubHyperplane;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,30,mport org.apache.commons.math.geometry.partitioning.utilities.AVLTree;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,32,** Visitor building segments.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,33, @version $Id$
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,34, @since 3.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,36,lass SegmentsBuilder implements BSPTreeVisitor<Euclidean2D> {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,38,** Sorted segments. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,39,rivate AVLTree<Segment> sorted;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,41,** Simple constructor. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,42,ublic SegmentsBuilder() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,43,orted = new AVLTree<Segment>();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,46,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,47,ublic Order visitOrder(final BSPTree<Euclidean2D> node) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,48,eturn Order.MINUS_SUB_PLUS;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,51,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,52,ublic void visitInternalNode(final BSPTree<Euclidean2D> node) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,53,"SuppressWarnings(""unchecked"")"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,54,inal BoundaryAttribute<Euclidean2D> attribute = (BoundaryAttribute<Euclidean2D>) node.getAttribute();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,55,f (attribute.getPlusOutside() != null) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,56,"ddContribution(attribute.getPlusOutside(), false);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,58,f (attribute.getPlusInside() != null) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,59,"ddContribution(attribute.getPlusInside(), true);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,63,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,64,ublic void visitLeafNode(final BSPTree<Euclidean2D> node) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,67,** Add he contribution of a boundary facet.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,68, @param sub boundary facet
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,69," @param reversed if true, the facet has the inside on its plus side"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,71,"rivate void addContribution(final SubHyperplane<Euclidean2D> sub, final boolean reversed) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,72,"SuppressWarnings(""unchecked"")"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,73,"inal AbstractSubHyperplane<Euclidean2D, Euclidean1D> absSub ="
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,74,"AbstractSubHyperplane<Euclidean2D, Euclidean1D>) sub;"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,75,inal Line line      = (Line) sub.getHyperplane();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,76,inal List<Interval> intervals = ((IntervalsSet) absSub.getRemainingRegion()).asList();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,77,or (final Interval i : intervals) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,78,inal Vector2D start = Double.isInfinite(i.getLower()) ?
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,79,ull : (Vector2D) line.toSpace(new Vector1D(i.getLower()));
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,80,inal Vector2D end   = Double.isInfinite(i.getUpper()) ?
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,81,ull : (Vector2D) line.toSpace(new Vector1D(i.getUpper()));
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,82,f (reversed) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,83,"orted.insert(new Segment(end, start, line.getReverse()));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,84, else {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,85,"orted.insert(new Segment(start, end, line));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,90,** Get the sorted segments.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,91, @return sorted segments
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,93,ublic AVLTree<Segment> getSorted() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,94,eturn sorted;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,59,/** Create a sub-line from a segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,60,* @param segment single segment forming the sub-line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,62,public SubLine(final Segment segment) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,63,"super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,73,ublic List<Vector2D[]> getSegments() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,80,public List<Segment> getSegments() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,77,inal List<Vector2D[]> segments = new ArrayList<Vector2D[]>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,84,final List<Segment> segments = new ArrayList<Segment>();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,82,"egments.add(new Vector2D[] { start, end });"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,89,"segments.add(new Segment(start, end, line));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,31,"ubLine sub = new SubLine(new Vector2D(-1, -7), new Vector2D(7, -1));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,32,ist<Vector2D[]> segments = sub.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,31,"Vector2D p1 = new Vector2D(-1, -7);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,32,"Vector2D p2 = new Vector2D(7, -1);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,33,"Segment segment = new Segment(p1, p2, new Line(p1, p2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,34,SubLine sub = new SubLine(segment);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,35,List<Segment> segments = sub.getSegments();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,34,"ssert.assertEquals(-1, segments.get(0)[0].getX(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,35,"ssert.assertEquals(-7, segments.get(0)[0].getY(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,36,"ssert.assertEquals( 7, segments.get(0)[1].getX(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,37,"ssert.assertEquals(-1, segments.get(0)[1].getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,37,"Assert.assertEquals(0.0, new Vector2D(-1, -7).distance(segments.get(0).getStart()), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,38,"Assert.assertEquals(0.0, new Vector2D( 7, -1).distance(segments.get(0).getEnd()), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,43,ist<Vector2D[]> segments = wholeLine.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,44,List<Segment> segments = wholeLine.getSegments();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,45,ssert.assertTrue(Double.isInfinite(segments.get(0)[0].getX()) &&
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,46,egments.get(0)[0].getX() < 0);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,47,ssert.assertTrue(Double.isInfinite(segments.get(0)[0].getY()) &&
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,48,egments.get(0)[0].getY() > 0);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,49,ssert.assertTrue(Double.isInfinite(segments.get(0)[1].getX()) &&
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,50,egments.get(0)[1].getX() > 0);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,51,ssert.assertTrue(Double.isInfinite(segments.get(0)[1].getY()) &&
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,52,egments.get(0)[1].getY() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,46,Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,47,segments.get(0).getStart().getX() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,48,Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,49,segments.get(0).getStart().getY() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,50,Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,51,segments.get(0).getEnd().getX() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,52,Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,53,segments.get(0).getEnd().getY() < 0);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,59,ist<Vector2D[]> segments = empty.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,60,List<Segment> segments = empty.getSegments();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,68,ist<Vector2D[]> segments = twoSubs.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,69,List<Segment> segments = twoSubs.getSegments();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,76,ist<Vector2D[]> segments = empty.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,77,List<Segment> segments = empty.getSegments();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,78,ssert.assertTrue(Double.isInfinite(segments.get(0)[0].getX()) &&
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,79,egments.get(0)[0].getX() < 0);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,80,ssert.assertTrue(Double.isInfinite(segments.get(0)[0].getY()) &&
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,81,egments.get(0)[0].getY() < 0);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,82,"ssert.assertEquals( 3, segments.get(0)[1].getX(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,83,"ssert.assertEquals(-4, segments.get(0)[1].getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,79,Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,80,segments.get(0).getStart().getX() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,81,Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,82,segments.get(0).getStart().getY() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,83,"Assert.assertEquals(0.0, new Vector2D(3, -4).distance(segments.get(0).getEnd()), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,90,ist<Vector2D[]> segments = empty.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,90,List<Segment> segments = empty.getSegments();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,92,"ssert.assertEquals( 3, segments.get(0)[0].getX(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,93,"ssert.assertEquals(-4, segments.get(0)[0].getY(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,94,ssert.assertTrue(Double.isInfinite(segments.get(0)[1].getX()) &&
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,95,egments.get(0)[1].getX() > 0);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,96,ssert.assertTrue(Double.isInfinite(segments.get(0)[1].getY()) &&
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,97,egments.get(0)[1].getY() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,92,"Assert.assertEquals(0.0, new Vector2D(3, -4).distance(segments.get(0).getStart()), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,93,Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,94,segments.get(0).getEnd().getX() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,95,Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,96,segments.get(0).getEnd().getY() > 0);

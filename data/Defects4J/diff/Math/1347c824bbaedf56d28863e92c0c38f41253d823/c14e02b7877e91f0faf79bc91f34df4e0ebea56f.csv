is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,20,import org.apache.commons.math3.complex.Complex;
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,27, Calculates the eigen decomposition of a real <strong>symmetric</strong>
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,28, matrix.
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,28,* Calculates the eigen decomposition of a real matrix.
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,45," As of 2.0, this class supports only <strong>symmetric</strong> matrices, and"
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,46, hence computes only real realEigenvalues. This implies the D matrix returned
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,47, by {@link #getD()} is always diagonal and the imaginary values returned
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,48, {@link #getImagEigenvalue(int)} and {@link #getImagEigenvalues()} are always
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,49, null.
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,45,"* As of 3.1, this class supports general real matrices (both symmetric and non-symmetric):"
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,52," When called with a {@link RealMatrix} argument, this implementation only uses"
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,53," the upper part of the matrix, the part below the diagonal is not accessed at"
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,54, all.
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,48,"* If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is diagonal and the eigenvector"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,49,"* matrix V is orthogonal, i.e. A = V.multiply(D.multiply(V.transpose())) and"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,50,* V.multiply(V.transpose()) equals the identity matrix.
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,51,* </p>
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,52,* <p>
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,53,"* If A is not symmetric, then the eigenvalue matrix D is block diagonal with the real eigenvalues"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,54,"* in 1-by-1 blocks and any complex eigenvalues, lambda + i*mu, in 2-by-2 blocks:"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,55,* <pre>
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,56,"*    [lambda, mu    ]"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,57,"*    [   -mu, lambda]"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,58,* </pre>
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,59,"* The columns of V represent the eigenvectors in the sense that A*V = V*D,"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,60,* i.e. A.multiply(V) equals V.multiply(D).
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,61,"* The matrix V may be badly conditioned, or even singular, so the validity of the equation"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,62,* A = V*D*inverse(V) depends upon the condition of V.
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,67,ublic class EigenDecomposition{
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,75,public class EigenDecomposition {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,100,/** Internally used epsilon criteria. */
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,101,private final double epsilon = 1e-16;
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,93, Calculates the eigen decomposition of the given symmetric matrix.
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,104,* Calculates the eigen decomposition of the given real matrix.
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,95, @param matrix Matrix to decompose. It <em>must</em> be symmetric.
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,106,* @param matrix Matrix to decompose.
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,98, @throws NonSymmetricMatrixException if the matrix is not symmetric.
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,102,inal double splitTolerance)  {
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,103,"f (isSymmetric(matrix, true)) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,112,final double splitTolerance)  {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,113,"if (isSymmetric(matrix, false)) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,116,} else {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,117,final SchurTransformer t = transformToSchur(matrix);
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,118,findEigenVectorsFromSchur(t);
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,119,"ublic EigenDecomposition(final double[] main,final double[] secondary,"
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,120,inal double splitTolerance) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,132,"public EigenDecomposition(final double[] main, final double[] secondary,"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,133,final double splitTolerance) {
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,124,inal int size=main.length;
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,125,ouble[][] z = new double[size][size];
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,126,or (int i=0;i<size;i++) {
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,127,[i][i]=1.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,137,final int size = main.length;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,138,final double[][] z = new double[size][size];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,139,for (int i = 0; i < size; i++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,140,z[i][i] = 1.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,216,for (int i = 0; i < imagEigenvalues.length; i++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,217,"if (Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) > 0) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,218,"cachedD.setEntry(i, i+1, imagEigenvalues[i]);"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,219,"} else if (Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,220,"cachedD.setEntry(i, i-1, imagEigenvalues[i]);"
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,485,rivate void findEigenVectors(double[][] householderMatrix) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,505,private void findEigenVectors(final double[][] householderMatrix) {
False,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,619,f (maxAbsoluteValue!=0.0) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,639,if (maxAbsoluteValue != 0.0) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,657,* Transforms the matrix to Schur form and calculates the eigenvalues.
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,659,* @param matrix Matrix to transform.
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,660,* @return the {@link SchurTransform} for this matrix
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,662,private SchurTransformer transformToSchur(final RealMatrix matrix) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,663,final SchurTransformer schurTransform = new SchurTransformer(matrix);
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,664,final double[][] matT = schurTransform.getT().getData();
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,666,realEigenvalues = new double[matT.length];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,667,imagEigenvalues = new double[matT.length];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,669,for (int i = 0; i < realEigenvalues.length; i++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,670,if (i == (realEigenvalues.length - 1) ||
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,671,"Precision.equals(matT[i + 1][i], 0.0, epsilon)) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,672,realEigenvalues[i] = matT[i][i];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,673,} else {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,674,final double x = matT[i + 1][i + 1];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,675,final double p = 0.5 * (matT[i][i] - x);
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,676,final double z = FastMath.sqrt(FastMath.abs(p * p + matT[i + 1][i] * matT[i][i + 1]));
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,677,realEigenvalues[i] = x + p;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,678,imagEigenvalues[i] = z;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,679,realEigenvalues[i + 1] = x + p;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,680,imagEigenvalues[i + 1] = -z;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,681,i++;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,684,return schurTransform;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,688,* Performs a division of two complex numbers.
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,690,* @param xr real part of the first number
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,691,* @param xi imaginary part of the first number
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,692,* @param yr real part of the second number
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,693,* @param yi imaginary part of the second number
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,694,* @return result of the complex division
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,696,"private Complex cdiv(final double xr, final double xi,"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,697,"final double yr, final double yi) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,698,"return new Complex(xr, xi).divide(new Complex(yr, yi));"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,702,* Find eigenvectors from a matrix transformed to Schur form.
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,704,* @param schur the schur transformation of the matrix
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,706,private void findEigenVectorsFromSchur(final SchurTransformer schur) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,707,final double[][] matrixT = schur.getT().getData();
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,708,final double[][] matrixP = schur.getP().getData();
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,710,final int n = matrixT.length;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,712,// compute matrix norm
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,713,double norm = 0.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,714,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,715,"for (int j = FastMath.max(i - 1, 0); j < n; j++) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,716,norm = norm + FastMath.abs(matrixT[i][j]);
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,720,"if (Precision.equals(norm, 0.0)) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,721,"// TODO: we can not handle a zero matrix, what exception to throw?"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,722,return;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,725,// Backsubstitute to find vectors of upper triangular form
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,727,double r = 0.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,728,double s = 0.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,729,double z = 0.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,731,for (int idx = n - 1; idx >= 0; idx--) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,732,double p = realEigenvalues[idx];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,733,double q = imagEigenvalues[idx];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,735,"if (Precision.equals(q, 0.0)) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,736,// Real vector
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,737,int l = idx;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,738,matrixT[idx][idx] = 1.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,739,for (int i = idx - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,740,double w = matrixT[i][i] - p;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,741,r = 0.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,742,for (int j = l; j <= idx; j++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,743,r = r + matrixT[i][j] * matrixT[j][idx];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,745,"if (Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,746,z = w;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,747,s = r;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,748,} else {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,749,l = i;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,750,"if (Precision.equals(imagEigenvalues[i], 0.0)) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,751,if (w != 0.0) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,752,matrixT[i][idx] = -r / w;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,753,} else {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,754,matrixT[i][idx] = -r / (Precision.EPSILON * norm);
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,756,} else {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,757,// Solve real equations
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,758,double x = matrixT[i][i + 1];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,759,double y = matrixT[i + 1][i];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,760,q = (realEigenvalues[i] - p) * (realEigenvalues[i] - p) +
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,761,imagEigenvalues[i] * imagEigenvalues[i];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,762,double t = (x * s - z * r) / q;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,763,matrixT[i][idx] = t;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,764,if (FastMath.abs(x) > FastMath.abs(z)) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,765,matrixT[i + 1][idx] = (-r - w * t) / x;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,766,} else {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,767,matrixT[i + 1][idx] = (-s - y * t) / z;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,771,// Overflow control
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,772,double t = FastMath.abs(matrixT[i][idx]);
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,773,if ((Precision.EPSILON * t) * t > 1) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,774,for (int j = i; j <= idx; j++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,775,matrixT[j][idx] = matrixT[j][idx] / t;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,780,} else if (q < 0.0) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,781,// Complex vector
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,782,int l = idx - 1;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,784,// Last vector component imaginary so matrix is triangular
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,785,if (FastMath.abs(matrixT[idx][idx - 1]) > FastMath.abs(matrixT[idx - 1][idx])) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,786,matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,787,matrixT[idx - 1][idx]     = -(matrixT[idx][idx] - p) / matrixT[idx][idx - 1];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,788,} else {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,789,"final Complex result = cdiv(0.0, -matrixT[idx - 1][idx],"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,790,"matrixT[idx - 1][idx - 1] - p, q);"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,791,matrixT[idx - 1][idx - 1] = result.getReal();
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,792,matrixT[idx - 1][idx]     = result.getImaginary();
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,795,matrixT[idx][idx - 1] = 0.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,796,matrixT[idx][idx]     = 1.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,798,for (int i = idx - 2; i >= 0; i--) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,799,double ra = 0.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,800,double sa = 0.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,801,for (int j = l; j <= idx; j++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,802,ra = ra + matrixT[i][j] * matrixT[j][idx - 1];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,803,sa = sa + matrixT[i][j] * matrixT[j][idx];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,805,double w = matrixT[i][i] - p;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,807,"if (Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,808,z = w;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,809,r = ra;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,810,s = sa;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,811,} else {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,812,l = i;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,813,"if (Precision.equals(imagEigenvalues[i], 0.0)) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,814,"final Complex c = cdiv(-ra, -sa, w, q);"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,815,matrixT[i][idx - 1] = c.getReal();
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,816,matrixT[i][idx] = c.getImaginary();
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,817,} else {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,818,// Solve complex equations
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,819,double x = matrixT[i][i + 1];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,820,double y = matrixT[i + 1][i];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,821,double vr = (realEigenvalues[i] - p) * (realEigenvalues[i] - p) +
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,822,imagEigenvalues[i] * imagEigenvalues[i] - q * q;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,823,final double vi = (realEigenvalues[i] - p) * 2.0 * q;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,824,"if (Precision.equals(vr, 0.0) && Precision.equals(vi, 0.0)) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,825,vr = Precision.EPSILON * norm *
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,826,(FastMath.abs(w) + FastMath.abs(q) + FastMath.abs(x) +
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,827,FastMath.abs(y) + FastMath.abs(z));
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,829,"final Complex c     = cdiv(x * r - z * ra + q * sa,"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,830,"x * s - z * sa - q * ra, vr, vi);"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,831,matrixT[i][idx - 1] = c.getReal();
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,832,matrixT[i][idx]     = c.getImaginary();
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,834,if (FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs(q))) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,835,matrixT[i + 1][idx - 1] = (-ra - w * matrixT[i][idx - 1] +
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,836,q * matrixT[i][idx]) / x;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,837,matrixT[i + 1][idx]     = (-sa - w * matrixT[i][idx] -
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,838,q * matrixT[i][idx - 1]) / x;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,839,} else {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,840,"final Complex c2        = cdiv(-r - y * matrixT[i][idx - 1],"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,841,"-s - y * matrixT[i][idx], z, q);"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,842,matrixT[i + 1][idx - 1] = c2.getReal();
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,843,matrixT[i + 1][idx]     = c2.getImaginary();
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,847,// Overflow control
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,848,"double t = FastMath.max(FastMath.abs(matrixT[i][idx - 1]),"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,849,FastMath.abs(matrixT[i][idx]));
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,850,if ((Precision.EPSILON * t) * t > 1) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,851,for (int j = i; j <= idx; j++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,852,matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,853,matrixT[j][idx]     = matrixT[j][idx] / t;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,861,// Vectors of isolated roots
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,862,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,863,if (i < 0 | i > n - 1) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,864,for (int j = i; j < n; j++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,865,matrixP[i][j] = matrixT[i][j];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,870,// Back transformation to get eigenvectors of original matrix
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,871,for (int j = n - 1; j >= 0; j--) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,872,for (int i = 0; i <= n - 1; i++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,873,z = 0.0;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,874,"for (int k = 0; k <= FastMath.min(j, n - 1); k++) {"
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,875,z = z + matrixP[i][k] * matrixT[k][j];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,877,matrixP[i][j] = z;
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,881,eigenvectors = new ArrayRealVector[n];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,882,final double[] tmp = new double[n];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,883,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,884,for (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,885,tmp[j] = matrixP[j][i];
True,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java,887,eigenvectors[i] = new ArrayRealVector(tmp);
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,327,@Test
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,328,public void testSymmetric() {
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,329,RealMatrix symmetric = MatrixUtils.createRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,330,"{4, 1, 1},"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,331,"{1, 2, 3},"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,332,"{1, 3, 6}"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,335,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,336,"ed = new EigenDecomposition(symmetric, Precision.SAFE_MIN);"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,338,RealMatrix d = ed.getD();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,339,RealMatrix v = ed.getV();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,340,RealMatrix vT = ed.getVT();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,342,double norm = v.multiply(d).multiply(vT).subtract(symmetric).getNorm();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,343,"Assert.assertEquals(0, norm, 6.0e-13);"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,345,"//           check(A.times(V),V.times(D));"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,348,@Test
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,349,public void testUnsymmetric() {
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,350,"// Vandermonde matrix V(x;i,j) = x_i^{n - j} with x = (-1,-2,3,4)"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,351,"double[][] vData = { { -1.0, 1.0, -1.0, 1.0 },"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,352,"{ -8.0, 4.0, -2.0, 1.0 },"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,353,"{ 27.0, 9.0,  3.0, 1.0 },"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,354,"{ 64.0, 16.0, 4.0, 1.0 } };"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,355,checkUnsymmetricMatrix(MatrixUtils.createRealMatrix(vData));
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,357,RealMatrix randMatrix = MatrixUtils.createRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,358,"{0,  1,     0,     0},"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,359,"{1,  0,     2.e-7, 0},"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,360,"{0, -2.e-7, 0,     1},"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,361,"{0,  0,     1,     0}"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,363,checkUnsymmetricMatrix(randMatrix);
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,365,// from http://eigen.tuxfamily.org/dox/classEigen_1_1RealSchur.html
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,366,double[][] randData2 = {
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,367,"{  0.680, -0.3300, -0.2700, -0.717, -0.687,  0.0259 },"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,368,"{ -0.211,  0.5360,  0.0268,  0.214, -0.198,  0.6780 },"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,369,"{  0.566, -0.4440,  0.9040, -0.967, -0.740,  0.2250 },"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,370,"{  0.597,  0.1080,  0.8320, -0.514, -0.782, -0.4080 },"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,371,"{  0.823, -0.0452,  0.2710, -0.726,  0.998,  0.2750 },"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,372,"{ -0.605,  0.2580,  0.4350,  0.608, -0.563,  0.0486 }"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,374,checkUnsymmetricMatrix(MatrixUtils.createRealMatrix(randData2));
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,377,private void checkUnsymmetricMatrix(final RealMatrix m) {
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,378,"EigenDecomposition ed = new EigenDecomposition(m, Precision.SAFE_MIN);"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,380,RealMatrix d = ed.getD();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,381,RealMatrix v = ed.getV();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,382,//RealMatrix vT = ed.getVT();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,384,RealMatrix x = m.multiply(v);
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,385,RealMatrix y = v.multiply(d);
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,387,"Assert.assertTrue(""The norm of (X-Y) is too large"","
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,388,"x.subtract(y).getNorm() < 1000 * Precision.EPSILON * FastMath.max(x.getNorm(), y.getNorm()));"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,390,RealMatrix invV = new LUDecomposition(v).getSolver().getInverse();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,391,double norm = v.multiply(d).multiply(invV).subtract(m).getNorm();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,392,"Assert.assertEquals(0.0, norm, 6.0e-13);"

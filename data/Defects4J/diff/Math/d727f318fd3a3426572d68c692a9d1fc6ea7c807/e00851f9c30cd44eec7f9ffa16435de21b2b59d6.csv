is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,196,f (cache != null && cache.length > parameters && cache[parameters].length > order) {
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,197,f (cache[parameters][order] != null) {
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,198,/ the compiler has already been created
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,199,eturn cache[parameters][order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,196,if (cache != null && cache.length > parameters &&
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,197,cache[parameters].length > order && cache[parameters][order] != null) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,198,// the compiler has already been created
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,199,return cache[parameters][order];
False,src/main/java/org/apache/commons/math3/dfp/DfpMath.java,src/main/java/org/apache/commons/math3/dfp/DfpMath.java,656,f (invert) {
True,src/main/java/org/apache/commons/math3/dfp/DfpMath.java,src/main/java/org/apache/commons/math3/dfp/DfpMath.java,656,if (invert && y.rint().equals(y) && !y.remainder(two).equals(zero)) {
False,src/main/java/org/apache/commons/math3/dfp/DfpMath.java,src/main/java/org/apache/commons/math3/dfp/DfpMath.java,658,f (y.rint().equals(y) && !y.remainder(two).equals(zero)) {
False,src/main/java/org/apache/commons/math3/dfp/DfpMath.java,src/main/java/org/apache/commons/math3/dfp/DfpMath.java,659, = r.negate();
True,src/main/java/org/apache/commons/math3/dfp/DfpMath.java,src/main/java/org/apache/commons/math3/dfp/DfpMath.java,658,r = r.negate();
False,src/main/java/org/apache/commons/math3/geometry/VectorFormat.java,src/main/java/org/apache/commons/math3/geometry/VectorFormat.java,257,f (i > 0) {
False,src/main/java/org/apache/commons/math3/geometry/VectorFormat.java,src/main/java/org/apache/commons/math3/geometry/VectorFormat.java,258,"f (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {"
False,src/main/java/org/apache/commons/math3/geometry/VectorFormat.java,src/main/java/org/apache/commons/math3/geometry/VectorFormat.java,259,eturn null;
True,src/main/java/org/apache/commons/math3/geometry/VectorFormat.java,src/main/java/org/apache/commons/math3/geometry/VectorFormat.java,257,"if (i > 0 && !CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {"
True,src/main/java/org/apache/commons/math3/geometry/VectorFormat.java,src/main/java/org/apache/commons/math3/geometry/VectorFormat.java,258,return null;
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,533,f (!entries.containsKey(key)) {
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,534,f (iter.value() > max) {
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,535,ax = iter.value();
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,533,if (!entries.containsKey(key) && iter.value() > max) {
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,534,max = iter.value();
False,src/main/java/org/apache/commons/math3/optim/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optim/SimplePointChecker.java,116,f (maxIterationCount != ITERATION_CHECK_DISABLED) {
False,src/main/java/org/apache/commons/math3/optim/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optim/SimplePointChecker.java,117,f (iteration >= maxIterationCount) {
False,src/main/java/org/apache/commons/math3/optim/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optim/SimplePointChecker.java,118,eturn true;
True,src/main/java/org/apache/commons/math3/optim/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optim/SimplePointChecker.java,116,if (maxIterationCount != ITERATION_CHECK_DISABLED && iteration >= maxIterationCount) {
True,src/main/java/org/apache/commons/math3/optim/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optim/SimplePointChecker.java,117,return true;
False,src/main/java/org/apache/commons/math3/optim/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optim/SimpleValueChecker.java,115,f (maxIterationCount != ITERATION_CHECK_DISABLED) {
False,src/main/java/org/apache/commons/math3/optim/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optim/SimpleValueChecker.java,116,f (iteration >= maxIterationCount) {
False,src/main/java/org/apache/commons/math3/optim/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optim/SimpleValueChecker.java,117,eturn true;
True,src/main/java/org/apache/commons/math3/optim/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optim/SimpleValueChecker.java,115,if (maxIterationCount != ITERATION_CHECK_DISABLED && iteration >= maxIterationCount) {
True,src/main/java/org/apache/commons/math3/optim/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optim/SimpleValueChecker.java,116,return true;
False,src/main/java/org/apache/commons/math3/optim/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optim/SimpleVectorValueChecker.java,117,f (maxIterationCount != ITERATION_CHECK_DISABLED) {
False,src/main/java/org/apache/commons/math3/optim/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optim/SimpleVectorValueChecker.java,118,f (iteration >= maxIterationCount) {
False,src/main/java/org/apache/commons/math3/optim/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optim/SimpleVectorValueChecker.java,119,eturn true;
True,src/main/java/org/apache/commons/math3/optim/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optim/SimpleVectorValueChecker.java,117,if (maxIterationCount != ITERATION_CHECK_DISABLED && iteration >= maxIterationCount) {
True,src/main/java/org/apache/commons/math3/optim/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optim/SimpleVectorValueChecker.java,118,return true;
False,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,203,f (basicRow != null && basicRow.equals(row)) {
False,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,204,f (i < minIndex) {
False,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,205,inIndex = i;
False,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,206,inRow = row;
True,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,203,if (basicRow != null && basicRow.equals(row) && i < minIndex) {
True,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,204,minIndex = i;
True,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java,205,minRow = row;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,221,f (previous != null) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,222,"f (checker.converged(getIterations(), previous, current)) {"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,223,/ We have found an optimum.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,224,eturn current;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,221,"if (previous != null && checker.converged(getIterations(), previous, current)) {"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,222,// We have found an optimum.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java,223,return current;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1391,f (subd > HALF) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1392,f (Math.abs(vlag) < ONE_OVER_FOUR) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1393,tep = HALF;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1394,lag = ONE_OVER_FOUR;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1395,sbd = 0;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1391,if (subd > HALF && Math.abs(vlag) < ONE_OVER_FOUR) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1392,step = HALF;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1393,vlag = ONE_OVER_FOUR;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1394,isbd = 0;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1716,f (stepa * stepb < ZERO) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1717,f (f < fAtInterpolationPoints.getEntry(nfm - n)) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1718,"AtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1719,"AtInterpolationPoints.setEntry(nfm - n, f);"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1720,f (trustRegionCenterInterpolationPointIndex == nfm) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1721,rustRegionCenterInterpolationPointIndex = nfm - n;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1723,"nterpolationPoints.setEntry(nfm - n, nfxm, stepb);"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1724,"nterpolationPoints.setEntry(nfm, nfxm, stepa);"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1714,if (stepa * stepb < ZERO && f < fAtInterpolationPoints.getEntry(nfm - n)) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1715,"fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1716,"fAtInterpolationPoints.setEntry(nfm - n, f);"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1717,if (trustRegionCenterInterpolationPointIndex == nfm) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1718,trustRegionCenterInterpolationPointIndex = nfm - n;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1720,"interpolationPoints.setEntry(nfm - n, nfxm, stepb);"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1721,"interpolationPoints.setEntry(nfm, nfxm, stepa);"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1853, else if (trustRegionCenterOffset.getEntry(i) >= upperDifference.getEntry(i)) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1854,f (gradientAtTrustRegionCenter.getEntry(i) <= ZERO) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1855,"bdi.setEntry(i, ONE);"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1849,} else if (trustRegionCenterOffset.getEntry(i) >= upperDifference.getEntry(i) &&
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1850,gradientAtTrustRegionCenter.getEntry(i) <= ZERO) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,1851,"xbdi.setEntry(i, ONE);"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,2436, Creates a new array.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,2438, @param n Dimension of the returned array.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,2439, @param value Value for each element.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,2440, @return an array containing {@code n} elements set to the given
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,2441, {@code value}.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,2443,"rivate static double[] fillNewArray(int n,"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,2444,ouble value) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,2445,ouble[] ds = new double[n];
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,2446,"rrays.fill(ds, value);"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java,2447,eturn ds;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,442,f (getConvergenceChecker() != null &&
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,443,astResult != null) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,444,"f (getConvergenceChecker().converged(iterations, optimum, lastResult)) {"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,445,reak generationLoop;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,442,if (getConvergenceChecker() != null && lastResult != null &&
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,443,"getConvergenceChecker().converged(iterations, optimum, lastResult)) {"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,444,break generationLoop;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,451,f (stopFitness != 0) { // only if stopFitness is defined
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,452,f (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,453,reak generationLoop;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,449,if (stopFitness != 0 && bestFitness < (isMinimize ? stopFitness : -stopFitness)) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,450,break generationLoop;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java,224,f (!stop) { // User-defined stopping criteria.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java,225,f (checker != null) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java,226,"top = checker.converged(getIterations(), previous, current);"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java,224,if (!stop && checker != null) { // User-defined stopping criteria.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java,225,"stop = checker.converged(getIterations(), previous, current);"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,489,f (checker != null) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,490,/ we use the vectorial convergence checker
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,491,"f (checker.converged(getIterations(), previous, current)) {"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,492,etCost(currentCost);
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,493,eturn current;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,489,"if (checker != null && checker.converged(getIterations(), previous, current)) {"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,490,setCost(currentCost);
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,491,return current;
False,src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java,241,f (checker != null) {
False,src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java,242,"f (checker.converged(iter, previous, current)) {"
False,src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java,243,eturn best;
True,src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java,241,"if (checker != null && checker.converged(iter, previous, current)) {"
True,src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java,242,return best;
False,src/main/java/org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker.java,117,f (maxIterationCount != ITERATION_CHECK_DISABLED) {
False,src/main/java/org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker.java,118,f (iteration >= maxIterationCount) {
False,src/main/java/org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker.java,119,eturn true;
True,src/main/java/org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker.java,117,if (maxIterationCount != ITERATION_CHECK_DISABLED && iteration >= maxIterationCount) {
True,src/main/java/org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker.java,118,return true;
False,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,128,f (maxIterationCount != ITERATION_CHECK_DISABLED) {
False,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,129,f (iteration >= maxIterationCount) {
False,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,130,eturn true;
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,128,if (maxIterationCount != ITERATION_CHECK_DISABLED && iteration >= maxIterationCount) {
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,129,return true;
False,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,126,f (maxIterationCount != ITERATION_CHECK_DISABLED) {
False,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,127,f (iteration >= maxIterationCount) {
False,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,128,eturn true;
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,126,if (maxIterationCount != ITERATION_CHECK_DISABLED && iteration >= maxIterationCount) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,127,return true;
False,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,128,f (maxIterationCount != ITERATION_CHECK_DISABLED) {
False,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,129,f (iteration >= maxIterationCount) {
False,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,130,eturn true;
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,128,if (maxIterationCount != ITERATION_CHECK_DISABLED && iteration >= maxIterationCount) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,129,return true;
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1397,f (subd > HALF) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1398,f (Math.abs(vlag) < ONE_OVER_FOUR) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1399,tep = HALF;
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1400,lag = ONE_OVER_FOUR;
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1401,sbd = 0;
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1397,if (subd > HALF && Math.abs(vlag) < ONE_OVER_FOUR) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1398,step = HALF;
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1399,vlag = ONE_OVER_FOUR;
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1400,isbd = 0;
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1722,f (stepa * stepb < ZERO) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1723,f (f < fAtInterpolationPoints.getEntry(nfm - n)) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1724,"AtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));"
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1725,"AtInterpolationPoints.setEntry(nfm - n, f);"
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1726,f (trustRegionCenterInterpolationPointIndex == nfm) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1727,rustRegionCenterInterpolationPointIndex = nfm - n;
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1729,"nterpolationPoints.setEntry(nfm - n, nfxm, stepb);"
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1730,"nterpolationPoints.setEntry(nfm, nfxm, stepa);"
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1720,if (stepa * stepb < ZERO && f < fAtInterpolationPoints.getEntry(nfm - n)) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1721,"fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));"
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1722,"fAtInterpolationPoints.setEntry(nfm - n, f);"
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1723,if (trustRegionCenterInterpolationPointIndex == nfm) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1724,trustRegionCenterInterpolationPointIndex = nfm - n;
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1726,"interpolationPoints.setEntry(nfm - n, nfxm, stepb);"
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1727,"interpolationPoints.setEntry(nfm, nfxm, stepa);"
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1859, else if (trustRegionCenterOffset.getEntry(i) >= upperDifference.getEntry(i)) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1860,f (gradientAtTrustRegionCenter.getEntry(i) <= ZERO) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1861,"bdi.setEntry(i, ONE);"
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1855,} else if (trustRegionCenterOffset.getEntry(i) >= upperDifference.getEntry(i) &&
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1856,gradientAtTrustRegionCenter.getEntry(i) <= ZERO) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,1857,"xbdi.setEntry(i, ONE);"
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,2442, Creates a new array.
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,2444, @param n Dimension of the returned array.
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,2445, @param value Value for each element.
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,2446, @return an array containing {@code n} elements set to the given
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,2447, {@code value}.
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,2449,"rivate static double[] fillNewArray(int n,"
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,2450,ouble value) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,2451,ouble[] ds = new double[n];
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,2452,"rrays.fill(ds, value);"
False,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java,2453,eturn ds;
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,68, @return the lower bounds.
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,70,ublic double[] getLowerBound() {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,71,eturn super.getLowerBound();
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,75, @return the upper bounds.
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,77,ublic double[] getUpperBound() {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,78,eturn super.getUpperBound();
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,568,f (getConvergenceChecker() != null &&
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,569,astResult != null) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,570,"f (getConvergenceChecker().converged(iterations, optimum, lastResult)) {"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,571,reak generationLoop;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,568,if (getConvergenceChecker() != null && lastResult != null &&
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,569,"getConvergenceChecker().converged(iterations, optimum, lastResult)) {"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,570,break generationLoop;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,577,f (stopFitness != 0) { // only if stopFitness is defined
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,578,f (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,579,reak generationLoop;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,575,if (stopFitness != 0 && bestFitness < (isMinimize ? stopFitness : -stopFitness)) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,576,break generationLoop;
False,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,214,f (!stop) { // User-defined stopping criteria.
False,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,215,f (checker != null) {
False,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,216,"top = checker.converged(iter, previous, current);"
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,214,if (!stop && checker != null) {
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,215,"stop = checker.converged(iter, previous, current);"
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,483,f (checker != null) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,484,/ we use the vectorial convergence checker
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,485,"f (checker.converged(iter, previous, current)) {"
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,486,etCost(currentCost);
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,487,"/ Update (deprecated) ""point"" field."
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,488,oint = current.getPoint();
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,489,eturn current;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,483,"if (checker != null && checker.converged(iter, previous, current)) {"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,484,setCost(currentCost);
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,485,"// Update (deprecated) ""point"" field."
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,486,point = current.getPoint();
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,487,return current;
False,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,180,f (previous != null) {
False,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,181,"f (checker.converged(iter, previous, current)) {"
False,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,182,/ We have found an optimum.
False,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,183,eturn current;
True,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,180,"if (previous != null && checker.converged(iter, previous, current)) {"
True,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,181,// We have found an optimum.
True,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java,182,return current;
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,151,f (basicRow != null && basicRow.equals(row)) {
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,152,f (i < minIndex) {
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,153,inIndex = i;
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,154,inRow = row;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,151,if (basicRow != null && basicRow.equals(row) && i < minIndex) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,152,minIndex = i;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,153,minRow = row;
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,243,f (checker != null) {
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,244,"f (checker.converged(iter, previous, current)) {"
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,245,eturn best;
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,243,"if (checker != null && checker.converged(iter, previous, current)) {"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,244,return best;
False,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,129,f (maxIterationCount != ITERATION_CHECK_DISABLED) {
False,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,130,f (iteration >= maxIterationCount) {
False,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,131,eturn true;
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,129,if (maxIterationCount != ITERATION_CHECK_DISABLED && iteration >= maxIterationCount) {
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,130,return true;
False,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,121,f (endIndex < source.length()) {
False,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,122,"f (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {"
False,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,123,et = Double.valueOf(value);
False,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,124,os.setIndex(endIndex);
True,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,121,if (endIndex < source.length() &&
True,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,122,"source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {"
True,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,123,ret = Double.valueOf(value);
True,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,src/main/java/org/apache/commons/math3/util/CompositeFormat.java,124,pos.setIndex(endIndex);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1142,f ((bits & 0x8000000000000000L) != 0 || x != x) {
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1143,f (x != 0.0) {
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1144,f (hiPrec != null) {
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1145,iPrec[0] = Double.NaN;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1148,eturn Double.NaN;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1142,if (((bits & 0x8000000000000000L) != 0 || x != x) && x != 0.0) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1143,if (hiPrec != null) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1144,hiPrec[0] = Double.NaN;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1147,return Double.NaN;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1184,f (exp == -1 || exp == 0) {
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1185,f (x < 1.01 && x > 0.99 && hiPrec == null) {
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1186,"* The normal method doesn't work well in the range [0.99, 1.01], so call do a straight"
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1182,if ((exp == -1 || exp == 0) && x < 1.01 && x > 0.99 && hiPrec == null) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1183,"/* The normal method doesn't work well in the range [0.99, 1.01], so call do a straight"
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1189,* Compute x - 1.0 and split it */
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1190,ouble xa = x - 1.0;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1191,ouble xb = xa - x + 1.0;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1192,ouble tmp = xa * HEX_40000000;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1193,ouble aa = xa + tmp - tmp;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1194,ouble ab = xa - aa;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1195,a = aa;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1196,b = ab;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1198,inal double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1199,ouble ya = lnCoef_last[0];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1200,ouble yb = lnCoef_last[1];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1202,or (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1203,* Multiply a = y * x */
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1204,a = ya * xa;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1205,b = ya * xb + yb * xa + yb * xb;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1206,"* split, so now y = a */"
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1207,mp = aa * HEX_40000000;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1208,a = aa + tmp - tmp;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1209,b = aa - ya + ab;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1211,* Add  a = y + lnQuickCoef */
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1212,inal double[] lnCoef_i = LN_QUICK_COEF[i];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1213,a = ya + lnCoef_i[0];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1214,b = yb + lnCoef_i[1];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1215,* Split y = a */
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1216,mp = aa * HEX_40000000;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1217,a = aa + tmp - tmp;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1218,b = aa - ya + ab;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1186,/* Compute x - 1.0 and split it */
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1187,double xa = x - 1.0;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1188,double xb = xa - x + 1.0;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1189,double tmp = xa * HEX_40000000;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1190,double aa = xa + tmp - tmp;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1191,double ab = xa - aa;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1192,xa = aa;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1193,xb = ab;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1195,final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1196,double ya = lnCoef_last[0];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1197,double yb = lnCoef_last[1];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1199,for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1229,eturn ya + yb;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1208,/* Add  a = y + lnQuickCoef */
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1209,final double[] lnCoef_i = LN_QUICK_COEF[i];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1210,aa = ya + lnCoef_i[0];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1211,ab = yb + lnCoef_i[1];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1212,/* Split y = a */
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1213,tmp = aa * HEX_40000000;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1214,ya = aa + tmp - tmp;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1215,yb = aa - ya + ab;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1218,/* Multiply a = y * x */
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1219,aa = ya * xa;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1220,ab = ya * xb + yb * xa + yb * xb;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1221,"/* split, so now y = a */"
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1222,tmp = aa * HEX_40000000;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1223,ya = aa + tmp - tmp;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1224,yb = aa - ya + ab;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1226,return ya + yb;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizerTest.java,33,import org.junit.Ignore;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizerTest.java,238,Test
True,src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizerTest.java,239,// TODO: this test is temporarily disabled for 3.2 release as a bug in Cobertura
True,src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizerTest.java,240,//       makes it run for several hours before completing
True,src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizerTest.java,241,@Ignore @Test
True,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,32,import org.junit.Ignore;
False,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,237,Test
True,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,238,// TODO: this test is temporarily disabled for 3.2 release as a bug in Cobertura
True,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,239,//       makes it run for several hours before completing
True,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,240,@Ignore @Test

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,19,import java.lang.reflect.Array;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,27,import org.apache.commons.math3.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,38, @version $Id: DiscreteDistribution.java 169 2013-03-08 09:02:38Z wydrych $
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,40,* @version $Id$
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,41,* @since 3.2
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,201,* Generate a random sample from the distribution.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,202,* <p>
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,203,"* If the requested samples fit in the specified array, it is returned"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,204,"* therein. Otherwise, a new array is allocated with the runtime type of"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,205,* the specified array and the size of this collection.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,207,* @param sampleSize the number of random values to generate.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,208,* @param array the array to populate.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,209,* @return an array representing the random sample.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,210,* @throws NotStrictlyPositiveException if {@code sampleSize} is not positive.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,211,* @throws NullArgumentException if {@code array} is null
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,213,"public T[] sample(int sampleSize, final T[] array) throws NotStrictlyPositiveException {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,214,if (sampleSize <= 0) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,215,"throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,218,if (array == null) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,219,throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,222,T[] out;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,223,if (array.length < sampleSize) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,224,"@SuppressWarnings(""unchecked"") // safe as both are of type T"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,225,"final T[] unchecked = (T[]) Array.newInstance(array.getClass().getComponentType(), sampleSize);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,226,out = unchecked;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,227,} else {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,228,out = array;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,231,for (int i = 0; i < sampleSize; i++) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,232,out[i] = sample();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,235,return out;
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,37, @version $Id: DiscreteIntegerDistribution.java 169 2013-03-08 09:02:38Z wydrych $
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,37,* @version $Id$
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,38,* @since 3.2
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,37, @version $Id: DiscreteRealDistribution.java 169 2013-03-08 09:02:38Z wydrych $
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,37,* @version $Id$
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,38,* @since 3.2

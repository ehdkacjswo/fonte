is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,368,ong xl = Double.doubleToLongBits(d);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,368,long xl = Double.doubleToRawLongBits(d); // can take raw bits because just gonna convert it back
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1133,ong bits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1133,long bits = Double.doubleToRawLongBits(x);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1455,ong bits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1455,long bits = Double.doubleToRawLongBits(x);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2010,ong inbits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2010,long inbits = Double.doubleToRawLongBits(x);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2240,ong bits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2240,long bits = Double.doubleToRawLongBits(x);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2359,ong bits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2359,long bits = Double.doubleToRawLongBits(x);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2860,ong inbits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2860,long inbits = Double.doubleToRawLongBits(x);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2872,nbits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2872,inbits = Double.doubleToRawLongBits(x);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3029,eturn abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3029,return abs(x - Double.longBitsToDouble(Double.doubleToRawLongBits(x) ^ 1));
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3069,inal long bits = Double.doubleToLongBits(d);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3069,final long bits = Double.doubleToRawLongBits(d);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3258,inal long bits = Double.doubleToLongBits(d);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3257,// can use raw bits since already dealt with infinity and NaN
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3258,final long bits = Double.doubleToRawLongBits(d);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3637,inal long m = Double.doubleToLongBits(magnitude);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3638,inal long s = Double.doubleToLongBits(sign);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3637,final long m = Double.doubleToRawLongBits(magnitude); // don't care about NaN
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3638,final long s = Double.doubleToRawLongBits(sign);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3658,inal int m = Float.floatToIntBits(magnitude);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3659,inal int s = Float.floatToIntBits(sign);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3658,final int m = Float.floatToRawIntBits(magnitude);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3659,final int s = Float.floatToRawIntBits(sign);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3676,eturn (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3676,// NaN and Infinite will return 1024 anywho so can use raw bits
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3677,return (int) ((Double.doubleToRawLongBits(d) >>> 52) & 0x7ff) - 1023;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3689,eturn ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3690,// NaN and Infinite will return the same exponent anywho so can use raw bits
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3691,return ((Float.floatToRawIntBits(f) >>> 23) & 0xff) - 127;

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1953,* Check that an array is monotone increasing or decreasing
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1955,* @param val Values.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1956,* @param dir Ordering direction.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1957,* @param strict Whether the order should be strict.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1958,"* @return {@code true} if sorted, {@code false} otherwise"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1960,"public static boolean isMonotone(Comparable[] val, OrderDirection dir,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1961,boolean strict){
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1962,Comparable previous = val[0];
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1963,int max = val.length;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1964,int comp;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1965,for (int i = 1; i < max; i++) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1966,switch (dir) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1967,case INCREASING:
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1968,comp = -val[i].compareTo(previous);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1969,if (strict) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1970,if (0 <= comp) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1971,return false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1973,} else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1974,if ( comp > 0) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1975,return false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1978,break;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1979,case DECREASING:
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1980,comp = val[i].compareTo(previous);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1981,if (strict) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1982,if (comp >= 0) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1983,return false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1985,} else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1986,if (comp > 0) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1987,return false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1990,break;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1991,default:
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1992,// Should never happen.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1993,throw new IllegalArgumentException();
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1996,previous = val[i];
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1998,return true;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2002,* Check that an array is monotone increasing or decreasing
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2004,* @param val Values.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2005,* @param dir Ordering direction.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2006,* @param strict Whether the order should be strict.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2007,"* @return {@code true} if sorted, {@code false} otherwise"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2009,"public static boolean isMonotone( double[] val, OrderDirection dir,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2010,boolean strict){
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2011,double previous = val[0];
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2012,int max = val.length;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2013,for (int i = 1; i < max; i++) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2014,switch (dir) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2015,case INCREASING:
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2016,if (strict) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2017,if (val[i] <= previous) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2018,return false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2020,} else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2021,if (val[i] < previous) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2022,return false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2025,break;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2026,case DECREASING:
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2027,if (strict) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2028,if (val[i] >= previous) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2029,return false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2031,} else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2032,if (val[i] > previous) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2033,return false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2036,break;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2037,default:
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2038,// Should never happen.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2039,throw new IllegalArgumentException();
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2041,previous = val[i];
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2044,return true;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1967,oolean ok = true;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1975,k = false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2067,if (abort) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2068,"throw new NonMonotonousSequenceException((Number)val[i], (Number)previous, i, dir, strict);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2070,return false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1979,k = false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2074,if (abort) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2075,"throw new NonMonotonousSequenceException((Number)val[i], (Number)previous, i, dir, strict);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2077,return false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1986,k = false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2084,if (abort) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2085,"throw new NonMonotonousSequenceException((Number)val[i], (Number)previous, i, dir, strict);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2087,return false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1990,k = false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2091,if (abort) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2092,"throw new NonMonotonousSequenceException((Number)val[i], (Number)previous, i, dir, strict);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2094,return false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1999,f (!ok &&
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2000,bort) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2001,"hrow new NonMonotonousSequenceException(val[i], previous, i, dir, strict);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2006,eturn ok;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2104,return true;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1099,"ouble.POSITIVE_INFINITY, offset)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1099,"Double.POSITIVE_INFINITY, offset)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1105,"ouble.POSITIVE_INFINITY, offset)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1105,"Double.POSITIVE_INFINITY, offset)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1254, catch (ArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1254,} catch (ArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1653,@Test
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1654,public void testIsMonotone() {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1655,"if(MathUtils.isMonotone(new double[] {-15, -5.5, -1, -1, 2,15},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1656,"MathUtils.OrderDirection.INCREASING, true) ){"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1657,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1660,"if(MathUtils.isMonotone(new double[] {-15, -5.5,-1,-2,2},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1661,"MathUtils.OrderDirection.INCREASING, false)){"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1662,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1665,"if(MathUtils.isMonotone(new double[] {3,3,-5.5,-11,-27.5},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1666,"MathUtils.OrderDirection.DECREASING, true)){"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1667,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1669,"if( MathUtils.isMonotone(new double[] {3,-1,0,-5.5,-11,-27.5},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1670,"MathUtils.OrderDirection.DECREASING, false) ){"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1671,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1676,@Test
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1677,public void testIsMonotoneComparable() {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1678,"if(MathUtils.isMonotone(new Double[] {new Double(-15), new Double(-5.5), new Double(-1), new Double(-1), new Double(2), new Double(15)},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1679,"MathUtils.OrderDirection.INCREASING, true) ){"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1680,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1683,"if(MathUtils.isMonotone(new Double[] {new Double(-15), new Double(-5.5), new Double(-1), new Double(-2), new Double(2)},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1684,"MathUtils.OrderDirection.INCREASING, false)){"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1685,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1688,"if(MathUtils.isMonotone(new Double[] {new Double(3), new Double(3), new Double(-5.5), new Double(-11), new Double(-27.5)},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1689,"MathUtils.OrderDirection.DECREASING, true)){"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1690,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1692,"if( MathUtils.isMonotone(new Double[] {new Double(3), new Double(-1), new Double(0), new Double(-5.5), new Double(-11), new Double(-27.5)},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1693,"MathUtils.OrderDirection.DECREASING, false) ){"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1694,"Assert.fail(""an exception should have been thrown"");"

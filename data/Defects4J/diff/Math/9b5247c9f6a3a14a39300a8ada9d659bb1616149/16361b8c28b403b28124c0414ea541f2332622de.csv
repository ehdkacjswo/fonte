is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,789,/** Convert to a constant vector without derivatives.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,790,* @return a constant vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,792,public Rotation toRotation() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,793,"return new Rotation(q0.getValue(), q1.getValue(), q2.getValue(), q3.getValue(), false);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,489,"otationDS r3Double = r2.applyTo(new Rotation(r1.getQ0().getValue(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,490,"1.getQ1().getValue(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,491,"1.getQ2().getValue(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,492,"1.getQ3().getValue(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,493,alse));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,489,RotationDS r3Double = r2.applyTo(r1.toRotation());
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,513,"otationDS r3Double = r2.applyInverseTo(new Rotation(r1.getQ0().getValue(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,514,"1.getQ1().getValue(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,515,"1.getQ2().getValue(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,516,"1.getQ3().getValue(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,517,alse));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,509,RotationDS r3Double = r2.applyInverseTo(r1.toRotation());

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,319,@Test
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,320,public void testMath930() {
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,321,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,322,"constraints.add(new LinearConstraint(new double[] {1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,323,"constraints.add(new LinearConstraint(new double[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,324,"constraints.add(new LinearConstraint(new double[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,325,"constraints.add(new LinearConstraint(new double[] {0, 1, 0, -1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0, -1, 0, 1, 0, 1, 0, -1, 0, 1, 0, -1, 0, -1, 0, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,326,"constraints.add(new LinearConstraint(new double[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.628803}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,327,"constraints.add(new LinearConstraint(new double[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.676993}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,328,"constraints.add(new LinearConstraint(new double[] {0, 0, 1, -1, 0, 0, -1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, -1, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,329,"constraints.add(new LinearConstraint(new double[] {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.136677}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,330,"constraints.add(new LinearConstraint(new double[] {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.444434}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,331,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,332,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.254028}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,333,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.302218}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,334,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 1, -1, -1, 1, 0, 0, 0, 0, -1, 1, 1, -1, 0, 0, 0, 0, -1, 1, 1, -1, 0, 0, 0, 0, 1, -1, -1, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,335,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.653981}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,336,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.690437}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,337,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 1, 0, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,338,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.423786}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,339,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.486717}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,340,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 1, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,341,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.049232}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,342,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.304747}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,343,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,344,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.129826}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,345,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.205625}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,346,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, -1, 1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, -1, 1, -1, -1, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,347,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.621944}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,348,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.764385}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,349,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 1, 0, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,350,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.432572}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,351,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.480762}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,352,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,353,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.055983}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,354,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.11378}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,355,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,356,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.009607}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,357,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057797}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,358,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,359,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.407308}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,360,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.452749}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,361,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,362,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.269677}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,363,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.321806}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,364,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,365,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.049232}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,366,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.06902}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,367,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,368,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,369,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.028754}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,370,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,371,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.484254}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,372,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.524607}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,373,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,374,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.385492}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,375,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.430134}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,376,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,377,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.34983}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,378,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.375781}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,379,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,380,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.254028}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,381,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.281308}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,382,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, 0, 0, 0, 0, -1, 1, 1, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,383,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.304995}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,384,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.345347}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,385,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,386,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.288899}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,387,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.332212}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,388,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, -1, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,389,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.14351}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,390,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.17057}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,391,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,392,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -0.129826}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,393,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -0.157435}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,394,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, -1, 1, 1, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,395,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,396,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,397,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, -1, 0, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,398,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.141071}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,399,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.232574}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,400,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,401,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,402,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,403,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,404,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -0.009607}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,405,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -0.057797}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,406,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,407,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,408,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,409,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,410,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -0.091644}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,411,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -0.203531}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,412,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,413,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,414,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,415,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,416,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,417,"constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.028754}, Relationship.LEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,418,"constraints.add(new LinearConstraint(new double[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, Relationship.EQ, 1.0));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,420,double[] objFunctionCoeff = new double[33];
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,421,objFunctionCoeff[3] = 1;
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,422,"LinearObjectiveFunction f = new LinearObjectiveFunction(objFunctionCoeff, 0);"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,423,"SimplexSolver solver = new SimplexSolver(1e-4, 10);"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,425,"PointValuePair solution = solver.optimize(new MaxIter(1000), f, new LinearConstraintSet(constraints),"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,426,"GoalType.MINIMIZE, new NonNegativeConstraint(true));"
True,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java,427,"Assert.assertEquals(0.3752298, solution.getValue(), 1e-6);"

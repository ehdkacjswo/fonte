is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,17,package org.apache.commons.math3.distribution;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,19,import java.lang.reflect.Array;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,20,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,21,import java.util.List;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,22,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,23,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,24,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,25,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,26,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,27,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,28,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,29,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,30,import org.apache.commons.math3.util.Pair;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,33,* Generic implementation of the discrete distribution.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,35,* @param <T> type of the random variable.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,36,"* @see <a href=""http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution"">Discrete probability distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,37,"* @see <a href=""http://mathworld.wolfram.com/DiscreteDistribution.html"">Discrete Distribution (MathWorld)</a>"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,38,* @version $Id: DiscreteDistribution.java 169 2013-03-08 09:02:38Z wydrych $
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,40,public class DiscreteDistribution<T> {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,43,* RNG instance used to generate samples from the distribution.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,45,protected final RandomGenerator random;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,47,* List of random variable values.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,49,private final List<T> singletons;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,51,* Normalized array of probabilities of respective random variable values.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,53,private final double[] probabilities;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,56,* Create a discrete distribution using the given probability mass function
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,57,* definition.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,59,* @param samples definition of probability mass function in the format of
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,60,* list of pairs.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,61,* @throws NotPositiveException if probability of at least one value is
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,62,* negative.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,63,* @throws MathArithmeticException if the probabilities sum to zero.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,64,* @throws MathIllegalArgumentException if probability of at least one value
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,65,* is infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,67,"public DiscreteDistribution(final List<Pair<T, Double>> samples)"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,68,"throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,69,"this(new Well19937c(), samples);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,73,* Create a discrete distribution using the given random number generator
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,74,* and probability mass function definition.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,76,* @param rng random number generator.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,77,* @param samples definition of probability mass function in the format of
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,78,* list of pairs.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,79,* @throws NotPositiveException if probability of at least one value is
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,80,* negative.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,81,* @throws MathArithmeticException if the probabilities sum to zero.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,82,* @throws MathIllegalArgumentException if probability of at least one value
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,83,* is infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,85,"public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples)"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,86,"throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,87,random = rng;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,89,singletons = new ArrayList<T>(samples.size());
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,90,final double[] probs = new double[samples.size()];
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,92,for (int i = 0; i < samples.size(); i++) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,93,"final Pair<T, Double> sample = samples.get(i);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,94,singletons.add(sample.getKey());
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,95,if (sample.getValue() < 0) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,96,throw new NotPositiveException(sample.getValue());
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,98,probs[i] = sample.getValue();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,101,"probabilities = MathArrays.normalizeArray(probs, 1.0);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,105,* Reseed the random generator used to generate samples.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,107,* @param seed the new seed
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,109,public void reseedRandomGenerator(long seed) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,110,random.setSeed(seed);
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,114,* For a random variable {@code X} whose values are distributed according to
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,115,"* this distribution, this method returns {@code P(X = x)}. In other words,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,116,* this method represents the probability mass function (PMF) for the
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,117,* distribution.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,119,* @param x the point at which the PMF is evaluated
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,120,* @return the value of the probability mass function at {@code x}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,122,double probability(final T x) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,123,double probability = 0;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,125,for (int i = 0; i < probabilities.length; i++) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,126,if ((x == null && singletons.get(i) == null) ||
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,127,(x != null && x.equals(singletons.get(i)))) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,128,probability += probabilities[i];
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,132,return probability;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,136,* Return the definition of probability mass function in the format of list
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,137,* of pairs.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,139,* @return definition of probability mass function.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,141,"public List<Pair<T, Double>> getSamples() {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,142,"final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,144,for (int i = 0; i < probabilities.length; i++) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,145,"samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i]));"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,148,return samples;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,152,* Generate a random value sampled from this distribution.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,154,* @return a random value.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,156,public T sample() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,157,final double randomValue = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,158,double sum = 0;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,160,for (int i = 0; i < probabilities.length; i++) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,161,sum += probabilities[i];
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,162,if (randomValue < sum) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,163,return singletons.get(i);
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,167,"/* This should never happen, but it ensures we will return a correct"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,168,* object in case the loop above has some floating point inequality
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,169,* problem on the final iteration. */
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,170,return singletons.get(singletons.size() - 1);
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,174,* Generate a random sample from the distribution.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,176,* @param sampleSize the number of random values to generate.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,177,* @return an array representing the random sample.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,178,* @throws NotStrictlyPositiveException if {@code sampleSize} is not
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,179,* positive.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,181,public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,182,if (sampleSize <= 0) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,183,"throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,184,sampleSize);
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,186,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,187,"final T[]out = (T[]) Array.newInstance(singletons.get(0).getClass(), sampleSize);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,189,for (int i = 0; i < sampleSize; i++) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,190,out[i] = sample();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,193,return out;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,17,package org.apache.commons.math3.distribution;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,20,import java.util.List;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,21,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,22,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,23,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,24,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,25,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,26,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,27,import org.apache.commons.math3.util.Pair;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,30,* Implementation of the integer-valued discrete distribution.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,32,* Note: values with zero-probability are allowed but they do not extend the
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,33,* support.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,35,"* @see <a href=""http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution"">Discrete probability distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,36,"* @see <a href=""http://mathworld.wolfram.com/DiscreteDistribution.html"">Discrete Distribution (MathWorld)</a>"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,37,* @version $Id: DiscreteIntegerDistribution.java 169 2013-03-08 09:02:38Z wydrych $
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,39,public class DiscreteIntegerDistribution extends AbstractIntegerDistribution {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,41,/** Serializable UID. */
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,42,private static final long serialVersionUID = 20130308L;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,45,* {@link DiscreteDistribution} instance (using the {@link Integer} wrapper)
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,46,* used to generate samples.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,48,protected final DiscreteDistribution<Integer> innerDistribution;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,51,* Create a discrete distribution using the given probability mass function
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,52,* definition.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,54,* @param singletons array of random variable values.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,55,* @param probabilities array of probabilities.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,56,* @throws DimensionMismatchException if
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,57,* {@code singletons.length != probabilities.length}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,58,* @throws NotPositiveException if probability of at least one value is
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,59,* negative.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,60,* @throws MathArithmeticException if the probabilities sum to zero.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,61,* @throws MathIllegalArgumentException if probability of at least one value
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,62,* is infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,64,"public DiscreteIntegerDistribution(final int[] singletons, final double[] probabilities)"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,65,"throws DimensionMismatchException, NotPositiveException, MathArithmeticException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,66,"this(new Well19937c(), singletons, probabilities);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,70,* Create a discrete distribution using the given random number generator
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,71,* and probability mass function definition.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,73,* @param rng random number generator.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,74,* @param singletons array of random variable values.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,75,* @param probabilities array of probabilities.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,76,* @throws DimensionMismatchException if
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,77,* {@code singletons.length != probabilities.length}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,78,* @throws NotPositiveException if probability of at least one value is
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,79,* negative.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,80,* @throws MathArithmeticException if the probabilities sum to zero.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,81,* @throws MathIllegalArgumentException if probability of at least one value
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,82,* is infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,84,"public DiscreteIntegerDistribution(final RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,85,"final int[] singletons, final double[] probabilities)"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,86,"throws DimensionMismatchException, NotPositiveException, MathArithmeticException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,87,super(rng);
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,88,if (singletons.length != probabilities.length) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,89,"throw new DimensionMismatchException(probabilities.length, singletons.length);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,92,"final List<Pair<Integer, Double>> samples = new ArrayList<Pair<Integer, Double>>(singletons.length);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,94,for (int i = 0; i < singletons.length; i++) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,95,"samples.add(new Pair<Integer, Double>(singletons[i], probabilities[i]));"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,98,"innerDistribution = new DiscreteDistribution<Integer>(rng, samples);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,102,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,104,public double probability(final int x) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,105,return innerDistribution.probability(x);
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,109,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,111,public double cumulativeProbability(final int x) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,112,double probability = 0;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,114,"for (final Pair<Integer, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,115,if (sample.getKey() <= x) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,116,probability += sample.getValue();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,120,return probability;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,124,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,126,* @return {@code sum(singletons[i] * probabilities[i])}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,128,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,129,double mean = 0;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,131,"for (final Pair<Integer, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,132,mean += sample.getValue() * sample.getKey();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,135,return mean;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,139,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,141,* @return {@code sum((singletons[i] - mean) ^ 2 * probabilities[i])}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,143,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,144,double mean = 0;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,145,double meanOfSquares = 0;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,147,"for (final Pair<Integer, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,148,mean += sample.getValue() * sample.getKey();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,149,meanOfSquares += sample.getValue() * sample.getKey() * sample.getKey();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,152,return meanOfSquares - mean * mean;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,156,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,158,* Returns the lowest value with non-zero probability.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,160,* @return the lowest value with non-zero probability.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,162,public int getSupportLowerBound() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,163,int min = Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,164,"for (final Pair<Integer, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,165,if (sample.getKey() < min && sample.getValue() > 0) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,166,min = sample.getKey();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,170,return min;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,174,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,176,* Returns the highest value with non-zero probability.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,178,* @return the highest value with non-zero probability.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,180,public int getSupportUpperBound() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,181,int max = Integer.MIN_VALUE;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,182,"for (final Pair<Integer, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,183,if (sample.getKey() > max && sample.getValue() > 0) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,184,max = sample.getKey();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,188,return max;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,192,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,194,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,196,* @return {@code true}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,198,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,199,return true;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,203,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,205,@Override
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,206,public int sample() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,207,return innerDistribution.sample();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,17,package org.apache.commons.math3.distribution;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,20,import java.util.List;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,21,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,22,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,23,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,24,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,25,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,26,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,27,import org.apache.commons.math3.util.Pair;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,30,* Implementation of the discrete distribution on the reals.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,32,* Note: values with zero-probability are allowed but they do not extend the
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,33,* support.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,35,"* @see <a href=""http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution"">Discrete probability distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,36,"* @see <a href=""http://mathworld.wolfram.com/DiscreteDistribution.html"">Discrete Distribution (MathWorld)</a>"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,37,* @version $Id: DiscreteRealDistribution.java 169 2013-03-08 09:02:38Z wydrych $
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,39,public class DiscreteRealDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,41,/** Serializable UID. */
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,42,private static final long serialVersionUID = 20130308L;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,45,* {@link DiscreteDistribution} instance (using the {@link Double} wrapper)
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,46,* used to generate samples.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,48,protected final DiscreteDistribution<Double> innerDistribution;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,51,* Create a discrete distribution using the given probability mass function
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,52,* definition.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,54,* @param singletons array of random variable values.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,55,* @param probabilities array of probabilities.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,56,* @throws DimensionMismatchException if
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,57,* {@code singletons.length != probabilities.length}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,58,* @throws NotPositiveException if probability of at least one value is
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,59,* negative.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,60,* @throws MathArithmeticException if the probabilities sum to zero.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,61,* @throws MathIllegalArgumentException if probability of at least one value
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,62,* is infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,64,"public DiscreteRealDistribution(final double[] singletons, final double[] probabilities)"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,65,"throws DimensionMismatchException, NotPositiveException, MathArithmeticException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,66,"this(new Well19937c(), singletons, probabilities);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,70,* Create a discrete distribution using the given random number generator
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,71,* and probability mass function definition.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,73,* @param rng random number generator.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,74,* @param singletons array of random variable values.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,75,* @param probabilities array of probabilities.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,76,* @throws DimensionMismatchException if
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,77,* {@code singletons.length != probabilities.length}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,78,* @throws NotPositiveException if probability of at least one value is
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,79,* negative.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,80,* @throws MathArithmeticException if the probabilities sum to zero.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,81,* @throws MathIllegalArgumentException if probability of at least one value
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,82,* is infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,84,"public DiscreteRealDistribution(final RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,85,"final double[] singletons, final double[] probabilities)"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,86,"throws DimensionMismatchException, NotPositiveException, MathArithmeticException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,87,super(rng);
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,88,if (singletons.length != probabilities.length) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,89,"throw new DimensionMismatchException(probabilities.length, singletons.length);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,92,"List<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,94,for (int i = 0; i < singletons.length; i++) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,95,"samples.add(new Pair<Double, Double>(singletons[i], probabilities[i]));"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,98,"innerDistribution = new DiscreteDistribution<Double>(rng, samples);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,102,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,104,@Override
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,105,public double probability(final double x) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,106,return innerDistribution.probability(x);
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,110,* For a random variable {@code X} whose values are distributed according to
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,111,"* this distribution, this method returns {@code P(X = x)}. In other words,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,112,* this method represents the probability mass function (PMF) for the
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,113,* distribution.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,115,* @param x the point at which the PMF is evaluated
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,116,* @return the value of the probability mass function at point {@code x}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,118,public double density(final double x) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,119,return probability(x);
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,123,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,125,public double cumulativeProbability(final double x) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,126,double probability = 0;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,128,"for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,129,if (sample.getKey() <= x) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,130,probability += sample.getValue();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,134,return probability;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,138,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,140,* @return {@code sum(singletons[i] * probabilities[i])}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,142,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,143,double mean = 0;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,145,"for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,146,mean += sample.getValue() * sample.getKey();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,149,return mean;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,153,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,155,* @return {@code sum((singletons[i] - mean) ^ 2 * probabilities[i])}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,157,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,158,double mean = 0;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,159,double meanOfSquares = 0;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,161,"for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,162,mean += sample.getValue() * sample.getKey();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,163,meanOfSquares += sample.getValue() * sample.getKey() * sample.getKey();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,166,return meanOfSquares - mean * mean;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,170,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,172,* Returns the lowest value with non-zero probability.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,174,* @return the lowest value with non-zero probability.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,176,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,177,double min = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,178,"for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,179,if (sample.getKey() < min && sample.getValue() > 0) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,180,min = sample.getKey();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,184,return min;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,188,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,190,* Returns the highest value with non-zero probability.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,192,* @return the highest value with non-zero probability.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,194,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,195,double max = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,196,"for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,197,if (sample.getKey() > max && sample.getValue() > 0) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,198,max = sample.getKey();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,202,return max;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,206,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,208,* The support of this distribution includes the lower bound.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,210,* @return {@code true}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,212,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,213,return true;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,217,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,219,* The support of this distribution includes the upper bound.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,221,* @return {@code true}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,223,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,224,return true;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,228,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,230,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,232,* @return {@code true}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,234,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,235,return true;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,239,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,241,@Override
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,242,public double sample() {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,243,return innerDistribution.sample();
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,17,package org.apache.commons.math3.distribution;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,19,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,20,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,21,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,22,import org.apache.commons.math3.exception.NotPositiveException;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,23,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,28,* Test class for {@link DiscreteIntegerDistribution}.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,30,* @version $Id: DiscreteIntegerDistributionTest.java 161 2013-03-07 09:47:32Z wydrych $
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,32,public class DiscreteIntegerDistributionTest {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,35,* The distribution object used for testing.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,37,private final DiscreteIntegerDistribution testDistribution;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,40,* Creates the default distribution object uded for testing.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,42,public DiscreteIntegerDistributionTest() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,43,// Non-sorted singleton array with duplicates should be allowed.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,44,// Values with zero-probability do not extend the support.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,45,testDistribution = new DiscreteIntegerDistribution(
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,46,"new int[]{3, -1, 3, 7, -2, 8},"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,47,"new double[]{0.2, 0.2, 0.3, 0.3, 0.0, 0.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,51,* Tests if the {@link DiscreteIntegerDistribution} constructor throws
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,52,* exceptions for ivalid data.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,54,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,55,public void testExceptions() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,56,DiscreteIntegerDistribution invalid = null;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,57,try {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,58,"invalid = new DiscreteIntegerDistribution(new int[]{1, 2}, new double[]{0.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,59,"Assert.fail(""Expected DimensionMismatchException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,60,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,62,try {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,63,"invalid = new DiscreteIntegerDistribution(new int[]{1, 2}, new double[]{0.0, -1.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,64,"Assert.fail(""Expected NotPositiveException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,65,} catch (NotPositiveException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,67,try {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,68,"invalid = new DiscreteIntegerDistribution(new int[]{1, 2}, new double[]{0.0, 0.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,69,"Assert.fail(""Expected MathArithmeticException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,70,} catch (MathArithmeticException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,72,try {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,73,"invalid = new DiscreteIntegerDistribution(new int[]{1, 2}, new double[]{0.0, Double.NaN});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,74,"Assert.fail(""Expected MathArithmeticException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,75,} catch (MathArithmeticException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,77,try {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,78,"invalid = new DiscreteIntegerDistribution(new int[]{1, 2}, new double[]{0.0, Double.POSITIVE_INFINITY});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,79,"Assert.fail(""Expected MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,80,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,82,"Assert.assertNull(""Expected non-initialized DiscreteRealDistribution"", invalid);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,86,* Tests if the distribution returns proper probability values.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,88,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,89,public void testProbability() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,90,"int[] points = new int[]{-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8};"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,91,"double[] results = new double[]{0, 0.2, 0, 0, 0, 0.5, 0, 0, 0, 0.3, 0};"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,92,for (int p = 0; p < points.length; p++) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,93,double probability = testDistribution.probability(points[p]);
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,94,"Assert.assertEquals(results[p], probability, 0.0);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,99,* Tests if the distribution returns proper cumulative probability values.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,101,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,102,public void testCumulativeProbability() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,103,"int[] points = new int[]{-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8};"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,104,"double[] results = new double[]{0, 0.2, 0.2, 0.2, 0.2, 0.7, 0.7, 0.7, 0.7, 1.0, 1.0};"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,105,for (int p = 0; p < points.length; p++) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,106,double probability = testDistribution.cumulativeProbability(points[p]);
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,107,"Assert.assertEquals(results[p], probability, 1e-10);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,112,* Tests if the distribution returns proper mean value.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,114,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,115,public void testGetNumericalMean() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,116,"Assert.assertEquals(3.4, testDistribution.getNumericalMean(), 1e-10);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,120,* Tests if the distribution returns proper variance.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,122,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,123,public void testGetNumericalVariance() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,124,"Assert.assertEquals(7.84, testDistribution.getNumericalVariance(), 1e-10);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,128,* Tests if the distribution returns proper lower bound.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,130,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,131,public void testGetSupportLowerBound() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,132,"Assert.assertEquals(-1, testDistribution.getSupportLowerBound());"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,136,* Tests if the distribution returns proper upper bound.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,138,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,139,public void testGetSupportUpperBound() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,140,"Assert.assertEquals(7, testDistribution.getSupportUpperBound());"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,144,* Tests if the distribution returns properly that the support is connected.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,146,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,147,public void testIsSupportConnected() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,148,Assert.assertTrue(testDistribution.isSupportConnected());
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,152,* Tests sampling.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,154,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,155,public void testSample() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,156,final int n = 1000000;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,157,testDistribution.reseedRandomGenerator(-334759360); // fixed seed
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,158,final int[] samples = testDistribution.sample(n);
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,159,"Assert.assertEquals(n, samples.length);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,160,double sum = 0;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,161,double sumOfSquares = 0;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,162,for (int i = 0; i < samples.length; i++) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,163,sum += samples[i];
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,164,sumOfSquares += samples[i] * samples[i];
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,166,"Assert.assertEquals(testDistribution.getNumericalMean(),"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,167,"sum / n, 1e-2);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,168,"Assert.assertEquals(testDistribution.getNumericalVariance(),"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,169,"sumOfSquares / n - FastMath.pow(sum / n, 2), 1e-2);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,17,package org.apache.commons.math3.distribution;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,19,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,20,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,21,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,22,import org.apache.commons.math3.exception.NotPositiveException;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,23,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,28,* Test class for {@link DiscreteRealDistribution}.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,30,* @version $Id: DiscreteRealDistributionTest.java 161 2013-03-07 09:47:32Z wydrych $
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,32,public class DiscreteRealDistributionTest {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,35,* The distribution object used for testing.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,37,private final DiscreteRealDistribution testDistribution;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,40,* Creates the default distribution object uded for testing.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,42,public DiscreteRealDistributionTest() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,43,// Non-sorted singleton array with duplicates should be allowed.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,44,// Values with zero-probability do not extend the support.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,45,testDistribution = new DiscreteRealDistribution(
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,46,"new double[]{3.0, -1.0, 3.0, 7.0, -2.0, 8.0},"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,47,"new double[]{0.2, 0.2, 0.3, 0.3, 0.0, 0.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,51,* Tests if the {@link DiscreteRealDistribution} constructor throws
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,52,* exceptions for ivalid data.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,54,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,55,public void testExceptions() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,56,DiscreteRealDistribution invalid = null;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,57,try {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,58,"invalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,59,"Assert.fail(""Expected DimensionMismatchException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,60,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,62,try{
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,63,"invalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, -1.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,64,"Assert.fail(""Expected NotPositiveException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,65,} catch (NotPositiveException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,67,try {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,68,"invalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, 0.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,69,"Assert.fail(""Expected MathArithmeticException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,70,} catch (MathArithmeticException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,72,try {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,73,"invalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, Double.NaN});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,74,"Assert.fail(""Expected MathArithmeticException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,75,} catch (MathArithmeticException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,77,try {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,78,"invalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, Double.POSITIVE_INFINITY});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,79,"Assert.fail(""Expected MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,80,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,82,"Assert.assertNull(""Expected non-initialized DiscreteRealDistribution"", invalid);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,86,* Tests if the distribution returns proper probability values.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,88,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,89,public void testProbability() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,90,"double[] points = new double[]{-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,91,"double[] results = new double[]{0, 0.2, 0, 0, 0, 0.5, 0, 0, 0, 0.3, 0};"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,92,for (int p = 0; p < points.length; p++) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,93,double density = testDistribution.probability(points[p]);
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,94,"Assert.assertEquals(results[p], density, 0.0);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,99,* Tests if the distribution returns proper density values.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,101,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,102,public void testDensity() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,103,"double[] points = new double[]{-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,104,"double[] results = new double[]{0, 0.2, 0, 0, 0, 0.5, 0, 0, 0, 0.3, 0};"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,105,for (int p = 0; p < points.length; p++) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,106,double density = testDistribution.density(points[p]);
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,107,"Assert.assertEquals(results[p], density, 0.0);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,112,* Tests if the distribution returns proper cumulative probability values.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,114,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,115,public void testCumulativeProbability() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,116,"double[] points = new double[]{-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,117,"double[] results = new double[]{0, 0.2, 0.2, 0.2, 0.2, 0.7, 0.7, 0.7, 0.7, 1.0, 1.0};"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,118,for (int p = 0; p < points.length; p++) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,119,double probability = testDistribution.cumulativeProbability(points[p]);
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,120,"Assert.assertEquals(results[p], probability, 1e-10);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,125,* Tests if the distribution returns proper mean value.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,127,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,128,public void testGetNumericalMean() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,129,"Assert.assertEquals(3.4, testDistribution.getNumericalMean(), 1e-10);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,133,* Tests if the distribution returns proper variance.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,135,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,136,public void testGetNumericalVariance() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,137,"Assert.assertEquals(7.84, testDistribution.getNumericalVariance(), 1e-10);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,141,* Tests if the distribution returns proper lower bound.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,143,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,144,public void testGetSupportLowerBound() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,145,"Assert.assertEquals(-1, testDistribution.getSupportLowerBound(), 0);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,149,* Tests if the distribution returns proper upper bound.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,151,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,152,public void testGetSupportUpperBound() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,153,"Assert.assertEquals(7, testDistribution.getSupportUpperBound(), 0);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,157,* Tests if the distribution returns properly that the support includes the
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,158,* lower bound.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,160,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,161,public void testIsSupportLowerBoundInclusive() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,162,Assert.assertTrue(testDistribution.isSupportLowerBoundInclusive());
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,166,* Tests if the distribution returns properly that the support includes the
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,167,* upper bound.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,169,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,170,public void testIsSupportUpperBoundInclusive() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,171,Assert.assertTrue(testDistribution.isSupportUpperBoundInclusive());
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,175,* Tests if the distribution returns properly that the support is connected.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,177,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,178,public void testIsSupportConnected() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,179,Assert.assertTrue(testDistribution.isSupportConnected());
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,183,* Tests sampling.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,185,@Test
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,186,public void testSample() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,187,final int n = 1000000;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,188,testDistribution.reseedRandomGenerator(-334759360); // fixed seed
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,189,final double[] samples = testDistribution.sample(n);
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,190,"Assert.assertEquals(n, samples.length);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,191,double sum = 0;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,192,double sumOfSquares = 0;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,193,for (int i = 0; i < samples.length; i++) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,194,sum += samples[i];
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,195,sumOfSquares += samples[i] * samples[i];
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,197,"Assert.assertEquals(testDistribution.getNumericalMean(),"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,198,"sum / n, 1e-2);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,199,"Assert.assertEquals(testDistribution.getNumericalVariance(),"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,200,"sumOfSquares / n - FastMath.pow(sum / n, 2), 1e-2);"

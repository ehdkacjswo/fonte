is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,15, limitations under the License.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,18,ackage org.apache.commons.math.ode;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,21,mport java.math.BigInteger;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,23,mport org.apache.commons.math.fraction.BigFraction;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,24,mport org.apache.commons.math.linear.FieldMatrix;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,25,mport org.apache.commons.math.linear.FieldMatrixImpl;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,26,mport org.apache.commons.math.linear.InvalidMatrixException;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,27,mport org.apache.commons.math.linear.MatrixUtils;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,28,mport org.apache.commons.math.linear.RealMatrix;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,29,mport org.apache.commons.math.linear.decomposition.FieldDecompositionSolver;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,30,mport org.apache.commons.math.linear.decomposition.FieldLUDecompositionImpl;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,33, This class transforms state history between multistep (with or without
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,34, derivatives) and Nordsieck forms.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,35, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,36, {@link MultistepIntegrator multistep integrators} use state and state
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,37, derivative history from several previous steps to compute the current state.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,38, All states are separated by a fixed step size h from each other. Since these
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,39," methods are based on polynomial interpolation, the information from the"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,40, previous states may be represented in another equivalent way: using the state
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,41, higher order derivatives at current step only. This class transforms state
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,42, history between these equivalent forms.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,43, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,44, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,45, The general multistep form for a dimension n state history at step k is
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,46, composed of q-p previous states followed by s-r previous scaled derivatives
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,47, with n = (q-p) + (s-r):
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,48, <pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,49,"   y<sub>k-p</sub>, y<sub>k-(p+1)</sub> ... y<sub>k-(q-1)</sub>"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,50,"   h y'<sub>k-r</sub>, h y'<sub>k-(r+1)</sub> ... h y'<sub>k-(s-1)</sub>"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,51, </pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,52," As an example, the {@link"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,53, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator Adams-Bashforth}
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,54," integrator uses p=1, q=2, r=1, s=n. The {@link"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,55, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator Adams-Moulton}
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,56," integrator uses p=1, q=2, r=0, s=n-1. The {@link"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,57," org.apache.commons.math.ode.stiff.BDFIntegrator BDF} integrator uses p=1, q=n,"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,58," r=0, s=1."
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,59, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,60, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,61, The Nordsieck form for a dimension n state history at step k is composed of the
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,62, current state followed by n-1 current scaled derivatives:
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,63, <pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,64, y<sub>k</sub>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,65," h y'<sub>k</sub>, h<sup>2</sup>/2 y''<sub>k</sub> ... h<sup>n-1</sup>/(n-1)! yn-1<sub>k</sub>"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,66, </pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,67," Where y'<sub>k</sub>, y''<sub>k</sub> ... yn-1<sub>k</sub> are respectively the"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,68," first, second, ... (n-1)<sup>th</sup> derivatives of the state at current step"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,69, and h is the fixed step size.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,70, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,71, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,72," In Nordsieck form, the state history can be converted from step size h to step"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,73," size h' by scaling each component by 1, h'/h, (h'/h)<sup>2</sup> ..."
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,74, (h'/h)<sup>n-1</sup>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,75, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,76, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,77, The transform between general multistep and Nordsieck forms is exact for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,78, polynomials.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,79, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,80, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,81, Instances of this class are guaranteed to be immutable.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,82, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,83, @see org.apache.commons.math.ode.MultistepIntegrator
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,84, @see org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,85, @see org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,86, @see org.apache.commons.math.ode.stiff.BDFIntegrator
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,87, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,88, @since 2.0
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,90,ublic class NordsieckTransformer implements Serializable {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,92,** Serializable version identifier. */
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,93,rivate static final long serialVersionUID = 2216907099394084076L;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,95,** Nordsieck to Multistep matrix. */
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,96,rivate final RealMatrix nordsieckToMultistep;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,98,** Multistep to Nordsieck matrix. */
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,99,rivate final RealMatrix multistepToNordsieck;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,102, Build a transformer for a specified order.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,103," <p>States considered are y<sub>k-p</sub>, y<sub>k-(p+1)</sub> ..."
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,104, y<sub>k-(q-1)</sub> and scaled derivatives considered are
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,105," h y'<sub>k-r</sub>, h y'<sub>k-(r+1)</sub> ... h y'<sub>k-(s-1)</sub><\p>"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,106, @param p start state index offset in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,107, @param q end state index offset in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,108, @param r start state derivative index offset in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,109, @param s end state derivative index offset in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,110, @exception InvalidMatrixException if the selected indices ranges define a
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,111, non-invertible transform (this typically happens when p == q)
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,113,"ublic NordsieckTransformer(final int p, final int q, final int r, final int s)"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,114,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,116,/ from Nordsieck to multistep
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,117,"inal FieldMatrix<BigFraction> bigNtoM = buildNordsieckToMultistep(p, q, r, s);"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,118,ordsieckToMultistep = MatrixUtils.bigFractionMatrixToRealMatrix(bigNtoM);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,120,/ from multistep to Nordsieck
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,121,inal FieldDecompositionSolver<BigFraction> solver =
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,122,ew FieldLUDecompositionImpl<BigFraction>(bigNtoM).getSolver();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,123,ultistepToNordsieck = MatrixUtils.bigFractionMatrixToRealMatrix(solver.getInverse());
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,128, Build the transform from Nordsieck to multistep.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,129," <p>States considered are y<sub>k-p</sub>, y<sub>k-(p+1)</sub> ..."
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,130, y<sub>k-(q-1)</sub> and scaled derivatives considered are
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,131," h y'<sub>k-r</sub>, h y'<sub>k-(r+1)</sub> ... h y'<sub>k-(s-1)</sub>"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,132, @param p start state index offset in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,133, @param q end state index offset in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,134, @param r start state derivative index offset in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,135, @param s end state derivative index offset in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,136, @return transform from Nordsieck to multistep
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,138,"ublic static FieldMatrix<BigFraction> buildNordsieckToMultistep(final int p, final int q,"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,139,"inal int r, final int s) {"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,141,inal int n = (q - p) + (s - r);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,142,inal BigFraction[][] array = new BigFraction[n][n];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,144,nt i = 0;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,145,or (int l = p; l < q; ++l) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,146,/ handle previous state y<sub>(k-l)</sub>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,147,/ the following expressions are direct applications of Taylor series
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,148,/ y<sub>k-1</sub>: [ 1  -1   1  -1   1 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,149,/ y<sub>k-2</sub>: [ 1  -2   4  -8  16 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,150,/ y<sub>k-3</sub>: [ 1  -3   9 -27  81 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,151,/ y<sub>k-4</sub>: [ 1  -4  16 -64 256 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,152,inal BigFraction[] row = array[i++];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,153,inal BigInteger factor = BigInteger.valueOf(-l);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,154,igInteger al = BigInteger.ONE;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,155,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,156,"ow[j] = new BigFraction(al, BigInteger.ONE);"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,157,l = al.multiply(factor);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,161,or (int l = r; l < s; ++l) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,162,/ handle previous state scaled derivative h y'<sub>(k-l)</sub>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,163,/ the following expressions are direct applications of Taylor series
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,164,/ h y'<sub>k-1</sub>: [ 0  1  -2   3   -4     5 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,165,/ h y'<sub>k-2</sub>: [ 0  1  -4  12  -32    80 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,166,/ h y'<sub>k-3</sub>: [ 0  1  -6  27 -108   405 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,167,/ h y'<sub>k-4</sub>: [ 0  1  -8  48 -256  1280 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,168,inal BigFraction[] row = array[i++];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,169,inal BigInteger factor = BigInteger.valueOf(-l);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,170,ow[0] = BigFraction.ZERO;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,171,igInteger al = BigInteger.ONE;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,172,or (int j = 1; j < n; ++j) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,173,"ow[j] = new BigFraction(al.multiply(BigInteger.valueOf(j)), BigInteger.ONE);"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,174,l = al.multiply(factor);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,178,"eturn new FieldMatrixImpl<BigFraction>(array, false);"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,183, Transform a scalar state history from multistep form to Nordsieck form.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,184, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,185, The input state history must be in multistep form with element 0 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,186," y<sub>k-p</sub>, element 1 for y<sub>k-(p+1)</sub> ... element q-p-1 for"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,187," y<sub>k-(q-1)</sub>, element q-p for h y'<sub>k-r</sub>, element q-p+1"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,188, for h y'<sub>k-(r+1)</sub> ... element n-1 for h y'<sub>k-(s-1)</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,189, The output state history will be in Nordsieck form with element 0 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,190," y<sub>k</sub>, element 1 for h y'<sub>k</sub>, element 2 for"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,191, h<sup>2</sup>/2 y''<sub>k</sub> ... element n-1 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,192, h<sup>n-1</sup>/(n-1)! yn-1<sub>k</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,193, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,194, @param multistepHistory scalar state history in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,195, @return scalar state history in Nordsieck form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,197,ublic double[] multistepToNordsieck(final double[] multistepHistory) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,198,eturn multistepToNordsieck.operate(multistepHistory);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,202, Transform a vectorial state history from multistep form to Nordsieck form.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,203, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,204, The input state history must be in multistep form with row 0 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,205," y<sub>k-p</sub>, row 1 for y<sub>k-(p+1)</sub> ... row q-p-1 for"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,206," y<sub>k-(q-1)</sub>, row q-p for h y'<sub>k-r</sub>, row q-p+1"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,207, for h y'<sub>k-(r+1)</sub> ... row n-1 for h y'<sub>k-(s-1)</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,208, The output state history will be in Nordsieck form with row 0 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,209," y<sub>k</sub>, row 1 for h y'<sub>k</sub>, row 2 for"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,210, h<sup>2</sup>/2 y''<sub>k</sub> ... row n-1 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,211, h<sup>n-1</sup>/(n-1)! yn-1<sub>k</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,212, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,213, @param multistepHistory vectorial state history in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,214, @return vectorial state history in Nordsieck form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,216,ublic RealMatrix multistepToNordsieck(final RealMatrix multistepHistory) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,217,eturn multistepToNordsieck.multiply(multistepHistory);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,221, Transform a scalar state history from Nordsieck form to multistep form.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,222, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,223, The input state history must be in Nordsieck form with element 0 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,224," y<sub>k</sub>, element 1 for h y'<sub>k</sub>, element 2 for"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,225, h<sup>2</sup>/2 y''<sub>k</sub> ... element n-1 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,226, h<sup>n-1</sup>/(n-1)! yn-1<sub>k</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,227, The output state history will be in multistep form with element 0 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,228," y<sub>k-p</sub>, element 1 for y<sub>k-(p+1)</sub> ... element q-p-1 for"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,229," y<sub>k-(q-1)</sub>, element q-p for h y'<sub>k-r</sub>, element q-p+1"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,230, for h y'<sub>k-(r+1)</sub> ... element n-1 for h y'<sub>k-(s-1)</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,231, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,232, @param nordsieckHistory scalar state history in Nordsieck form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,233, @return scalar state history in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,235,ublic double[] nordsieckToMultistep(final double[] nordsieckHistory) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,236,eturn nordsieckToMultistep.operate(nordsieckHistory);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,240, Transform a vectorial state history from Nordsieck form to multistep form.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,241, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,242, The input state history must be in Nordsieck form with row 0 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,243," y<sub>k</sub>, row 1 for h y'<sub>k</sub>, row 2 for"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,244, h<sup>2</sup>/2 y''<sub>k</sub> ... row n-1 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,245, h<sup>n-1</sup>/(n-1)! yn-1<sub>k</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,246, The output state history will be in multistep form with row 0 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,247," y<sub>k-p</sub>, row 1 for y<sub>k-(p+1)</sub> ... row q-p-1 for"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,248," y<sub>k-(q-1)</sub>, row q-p for h y'<sub>k-r</sub>, row q-p+1"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,249, for h y'<sub>k-(r+1)</sub> ... row n-1 for h y'<sub>k-(s-1)</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,250, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,251, @param nordsieckHistory vectorial state history in Nordsieck form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,252, @return vectorial state history in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,254,ublic RealMatrix nordsieckToMultistep(final RealMatrix nordsieckHistory) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,255,eturn nordsieckToMultistep.multiply(nordsieckHistory);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,18,ackage org.apache.commons.math.ode;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,22,mport java.util.Random;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,24,mport org.apache.commons.math.analysis.polynomials.PolynomialFunction;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,25,mport org.apache.commons.math.fraction.BigFraction;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,26,mport org.apache.commons.math.linear.FieldMatrix;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,27,mport org.apache.commons.math.linear.InvalidMatrixException;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,28,mport org.apache.commons.math.linear.RealMatrix;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,29,mport org.apache.commons.math.linear.RealMatrixImpl;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,30,mport org.junit.Test;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,32,ublic class NordsieckTransformerTest {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,34,Test(expected=InvalidMatrixException.class)
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,35,ublic void nonInvertible() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,36,"ew NordsieckTransformer(1, 1, 0, 1);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,39,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,40,ublic void dimension2() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,41,"ordsieckTransformer transformer = new NordsieckTransformer(0, 2, 0, 0);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,42,"ouble[] nordsieckHistory = new double[] { 1.0,  2.0 };"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,43,"ouble[] multistepHistory = new double[] { 1.0, -1.0 };"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,44,"heckVector(nordsieckHistory, transformer.multistepToNordsieck(multistepHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,45,"heckVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,48,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,49,ublic void dimension2Der() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,50,"ordsieckTransformer transformer = new NordsieckTransformer(0, 1, 0, 1);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,51,"ouble[] nordsieckHistory = new double[] { 1.0,  2.0 };"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,52,"ouble[] multistepHistory = new double[] { 1.0,  2.0 };"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,53,"heckVector(nordsieckHistory, transformer.multistepToNordsieck(multistepHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,54,"heckVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,57,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,58,ublic void dimension3() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,59,"ordsieckTransformer transformer = new NordsieckTransformer(0, 3, 0, 0);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,60,"ouble[] nordsieckHistory = new double[] { 1.0,  4.0, 18.0 };"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,61,"ouble[] multistepHistory = new double[] { 1.0, 15.0, 65.0 };"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,62,"heckVector(nordsieckHistory, transformer.multistepToNordsieck(multistepHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,63,"heckVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,66,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,67,ublic void dimension3Der() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,68,"ordsieckTransformer transformer = new NordsieckTransformer(0, 2, 0, 1);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,69,"ouble[] nordsieckHistory = new double[] { 1.0,  4.0, 18.0 };"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,70,"ouble[] multistepHistory = new double[] { 1.0, 15.0,  4.0 };"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,71,"heckVector(nordsieckHistory, transformer.multistepToNordsieck(multistepHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,72,"heckVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,75,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,76,ublic void dimension7() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,77,"ordsieckTransformer transformer = new NordsieckTransformer(0, 7, 0, 0);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,78,ealMatrix nordsieckHistory =
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,79,ew RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,80,"  1,  2,  3 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,81," -2,  1,  0 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,82,"  1,  1,  1 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,83,"  0, -1,  1 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,84,"  1, -1,  2 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,85,"  2,  0,  1 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,86,"  1,  1,  2 }"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,87,", false);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,88,ealMatrix multistepHistory =
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,89,ew RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,90,"     1,     2,     3 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,91,"     4,     3,     6 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,92,"    25,    60,   127 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,93,"   340,   683,  1362 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,94,"  2329,  3918,  7635 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,95," 10036, 15147, 29278 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,96," 32449, 45608, 87951 }"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,97,", false);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,99,ealMatrix m = transformer.multistepToNordsieck(multistepHistory);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,100,"ssertEquals(0.0, m.subtract(nordsieckHistory).getNorm(), 1.0e-11);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,101, = transformer.nordsieckToMultistep(nordsieckHistory);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,102,"ssertEquals(0.0, m.subtract(multistepHistory).getNorm(), 1.0e-11);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,106,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,107,ublic void dimension7Der() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,108,"ordsieckTransformer transformer = new NordsieckTransformer(0, 6, 0, 1);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,109,ealMatrix nordsieckHistory =
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,110,ew RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,111,"  1,  2,  3 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,112," -2,  1,  0 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,113,"  1,  1,  1 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,114,"  0, -1,  1 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,115,"  1, -1,  2 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,116,"  2,  0,  1 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,117,"  1,  1,  2 }"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,118,", false);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,119,ealMatrix multistepHistory =
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,120,ew RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,121,"     1,     2,     3 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,122,"     4,     3,     6 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,123,"    25,    60,   127 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,124,"   340,   683,  1362 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,125,"  2329,  3918,  7635 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,126," 10036, 15147, 29278 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,127,"    -2,     1,     0 }"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,128,", false);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,130,ealMatrix m = transformer.multistepToNordsieck(multistepHistory);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,131,"ssertEquals(0.0, m.subtract(nordsieckHistory).getNorm(), 1.0e-11);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,132, = transformer.nordsieckToMultistep(nordsieckHistory);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,133,"ssertEquals(0.0, m.subtract(multistepHistory).getNorm(), 1.0e-11);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,137,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,138,ublic void matrices1() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,139,"heckMatrix(1, new int[][] { { 1 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,140,"ordsieckTransformer.buildNordsieckToMultistep(0, 1, 0, 0));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,143,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,144,ublic void matrices2() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,145,"heckMatrix(1, new int[][] { { 1, 0 }, { 1, -1 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,146,"ordsieckTransformer.buildNordsieckToMultistep(0, 2, 0, 0));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,149,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,150,ublic void matrices3() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,151,"heckMatrix(1, new int[][] { { 1, 0, 0 }, { 1, -1, 1 }, { 1, -2, 4 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,152,"ordsieckTransformer.buildNordsieckToMultistep(0, 3, 0, 0));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,155,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,156,ublic void matrices4() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,157,"heckMatrix(1,"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,158,ew int[][] {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,159," 1, 0, 0, 0 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,160," 1, -1, 1, -1 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,161," 1, -2, 4, -8 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,162," 1, -3, 9, -27 }"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,163,", NordsieckTransformer.buildNordsieckToMultistep(0, 4, 0, 0));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,166,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,167,ublic void adamsBashforth2() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,168,"heckMatrix(1,"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,169,ew int[][] {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,170," 1, 0,  0 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,171," 0, 1,  0 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,172," 0, 1, -2 }"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,173,", NordsieckTransformer.buildNordsieckToMultistep(0, 1, 0, 2));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,176,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,177,ublic void adamsBashforth3() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,178,"heckMatrix(1,"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,179,ew int[][] {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,180," 1, 0,  0,  0 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,181," 0, 1,  0,  0 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,182," 0, 1, -2,  3 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,183," 0, 1, -4, 12 }"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,184,", NordsieckTransformer.buildNordsieckToMultistep(0, 1, 0, 3));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,187,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,188,ublic void adamsBashforth4() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,189,"heckMatrix(1,"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,190,ew int[][] {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,191," 1, 0,  0,  0,    0 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,192," 0, 1,  0,  0,    0 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,193," 0, 1, -2,  3,   -4 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,194," 0, 1, -4, 12,  -32 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,195," 0, 1, -6, 27, -108 }"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,196,", NordsieckTransformer.buildNordsieckToMultistep(0, 1, 0, 4));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,199,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,200,ublic void adamsBashforth5() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,201,"heckMatrix(1,"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,202,ew int[][] {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,203," 1, 0,  0,  0,    0,    0 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,204," 0, 1,  0,  0,    0,    0 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,205," 0, 1, -2,  3,   -4,    5 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,206," 0, 1, -4, 12,  -32,   80 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,207," 0, 1, -6, 27, -108,  405 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,208," 0, 1, -8, 48, -256, 1280 }"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,209,", NordsieckTransformer.buildNordsieckToMultistep(0, 1, 0, 5));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,212,Test
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,213,ublic void polynomial() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,214,andom random = new Random(1847222905841997856l);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,215,or (int n = 2; n < 10; ++n) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,216,or (int m = 0; m < 10; ++m) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,218,"/ choose p, q, r, s"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,219,nt qMinusP = 1 + random.nextInt(n);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,220,nt sMinusR = n - qMinusP;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,221,"nt p       = random.nextInt(5) - 2; // possible values: -2, -1, 0, 1, 2"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,222,nt q       = p + qMinusP;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,223,"nt r       = random.nextInt(5) - 2; // possible values: -2, -1, 0, 1, 2"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,224,nt s       = r + sMinusR;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,226,/ build a polynomial and its derivatives
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,227,ouble[] coeffs = new double[n + 1];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,228,or (int i = 0; i < n; ++i) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,229,oeffs[i] = 2.0 * random.nextDouble() - 1.0;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,231,olynomialFunction[] polynomials = new PolynomialFunction[n];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,232,olynomials[0] = new PolynomialFunction(coeffs);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,233,or (int i = 1; i < polynomials.length; ++i) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,234,olynomials[i] = (PolynomialFunction) polynomials[i - 1].derivative();
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,237,ouble x = 0.75;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,238,ouble h = 0.01;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,240,/ build a state history in multistep form
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,241,ouble[] multistepHistory = new double[n];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,242,or (int k = p; k < q; ++k) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,243,ultistepHistory[k-p] = polynomials[0].value(x - k * h);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,245,or (int k = r; k < s; ++k) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,246,ultistepHistory[k + qMinusP - r] = h * polynomials[1].value(x - k * h);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,249,/ build the same state history in Nordsieck form
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,250,ouble[] nordsieckHistory = new double[n];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,251,ouble scale = 1.0;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,252,or (int i = 0; i < nordsieckHistory.length; ++i) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,253,ordsieckHistory[i] = scale * polynomials[i].value(x);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,254,cale *= h / (i + 1);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,257,/ check the transform is exact for these polynomials states
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,258,"ordsieckTransformer transformer = new NordsieckTransformer(p, q, r, s);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,259,"heckVector(nordsieckHistory, transformer.multistepToNordsieck(multistepHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,260,"heckVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,266,"rivate void checkVector(double[] reference, double[] candidate) {"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,267,"ssertEquals(reference.length, candidate.length);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,268,or (int i = 0; i < reference.length; ++i) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,269,"ssertEquals(reference[i], candidate[i], 2.0e-12);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,273,"rivate void checkMatrix(int denominator, int[][] reference, FieldMatrix<BigFraction> candidate) {"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,274,"ssertEquals(reference.length, candidate.getRowDimension());"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,275,or (int i = 0; i < reference.length; ++i) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,276,nt[] rRow = reference[i];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,277,or (int j = 0; j < rRow.length; ++j) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,278,"ssertEquals(new BigFraction(rRow[j], denominator), candidate.getEntry(i, j));"

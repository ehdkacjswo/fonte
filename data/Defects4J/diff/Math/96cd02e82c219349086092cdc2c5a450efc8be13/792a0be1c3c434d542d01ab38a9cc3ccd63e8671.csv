is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,37,import org.apache.commons.math3.distribution.NormalDistribution;
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,368," fails when mean is non-positive TODO: replace with statistical test,"
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,369, adding test stat to TestStatistic
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,369,* fails when mean is non-positive.
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,379,requency f = new Frequency();
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,380,or (int i = 0; i < largeSampleSize; i++) {
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,381,.addValue(randomData.nextPoisson(4.0d));
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,383,ong cumFreq = f.getCount(0) + f.getCount(1) + f.getCount(2)
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,384, f.getCount(3) + f.getCount(4) + f.getCount(5);
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,385,ong sumFreq = f.getSumFreq();
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,386,ouble cumPct = Double.valueOf(cumFreq).doubleValue()
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,387, Double.valueOf(sumFreq).doubleValue();
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,388,"ssert.assertEquals(""cum Poisson(4)"", cumPct, 0.7851, 0.2);"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,392,final double mean = 4.0d;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,393,final int len = 5;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,394,PoissonDistribution poissonDistribution = new PoissonDistribution(mean);
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,395,Frequency f = new Frequency();
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,396,randomData.reSeed(1000);
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,397,for (int i = 0; i < largeSampleSize; i++) {
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,398,f.addValue(randomData.nextPoisson(mean));
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,400,final long[] observed = new long[len];
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,401,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,402,observed[i] = f.getCount(i + 1);
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,404,final double[] expected = new double[len];
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,405,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,406,expected[i] = poissonDistribution.probability(i + 1) * largeSampleSize;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,409,"TestUtils.assertChiSquareAccept(expected, observed, 0.0001);"
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,762,ummaryStatistics u = new SummaryStatistics();
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,763,or (int i = 0; i < largeSampleSize; i++) {
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,764,".addValue(randomData.nextGaussian(0, 1));"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,770,"double[] quartiles = TestUtils.getDistributionQuartiles(new NormalDistribution(0,1));"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,771,long[] counts = new long[4];
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,772,randomData.reSeed(1000);
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,773,for (int i = 0; i < 1000; i++) {
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,774,"double value = randomData.nextGaussian(0, 1);"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,775,"TestUtils.updateCounts(value, counts, quartiles);"
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,766,ouble xbar = u.getMean();
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,767,ouble s = u.getStandardDeviation();
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,768,ouble n = u.getN();
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,770," t-test at .001-level TODO: replace with externalized t-test, with"
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,771, test statistic defined in TestStatistic
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,773,ssert.assertTrue(FastMath.abs(xbar) / (s / FastMath.sqrt(n)) < 3.29);
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,777,"TestUtils.assertChiSquareAccept(expected, counts, 0.001);"
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,791,ong cumFreq = 0;
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,792,ouble v = 0;
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,793,or (int i = 0; i < largeSampleSize; i++) {
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,794, = randomData.nextExponential(1);
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,795,"ssert.assertTrue(""exponential deviate postive"", v > 0);"
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,796,f (v < 2)
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,797,umFreq++;
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,800," TODO: Replace with a statistical test, with statistic added to"
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,801, TestStatistic. Check below compares observed cumulative distribution
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,802, evaluated at 2 with exponential CDF
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,804,"ssert.assertEquals(""exponential cumulative distribution"", (double) cumFreq"
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,805," (double) largeSampleSize, 0.8646647167633873, .2);"
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,808, Proposal on improving the test of generating exponentials

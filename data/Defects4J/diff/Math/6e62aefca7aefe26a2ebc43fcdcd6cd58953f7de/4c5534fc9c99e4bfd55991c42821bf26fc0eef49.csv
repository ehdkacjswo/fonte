is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,38,import org.junit.Ignore;
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,352,"ouble[] startPoint = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,353,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,354,"ouble[][] boundaries = boundaries(DIM,-1,2);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,353,"double[] startPoint = point(DIM, 0.1);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,354,"double[] insigma = point(DIM, 1);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,355,"double[][] boundaries = boundaries(DIM, -1, 2);"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,390,inal double[] upper = { 0.5 };
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,391,final double[] upper = { 1.5 };
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,428,* Cf. MATH-867
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,430,@Ignore@Test
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,431,public void testFitAccuracyDependsOnBoundary() {
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,432,final CMAESOptimizer optimizer = new CMAESOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,433,final MultivariateFunction fitnessFunction = new MultivariateFunction() {
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,434,public double value(double[] parameters) {
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,435,final double target = 11.1;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,436,final double error = target - parameters[0];
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,437,return error * error;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,441,final double[] start = { 1 };
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,443,// No bounds.
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,444,"PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,445,start);
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,446,final double resNoBound = result.getPoint()[0];
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,448,// Optimum is near the lower bound.
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,449,final double[] lower = { -20 };
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,450,final double[] upper = { 5e16 };
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,451,"result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,452,"start, lower, upper);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,453,final double resNearLo = result.getPoint()[0];
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,455,// Optimum is near the upper bound.
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,456,lower[0] = -5e16;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,457,upper[0] = 20;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,458,"result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,459,"start, lower, upper);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,460,final double resNearHi = result.getPoint()[0];
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,462,"// System.out.println(""resNoBound="" + resNoBound +"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,463,"//                    "" resNearLo="" + resNearLo +"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,464,"//                    "" resNearHi="" + resNearHi);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,466,"// The two values currently differ by a substantial amount, indicating that"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,467,// the bounds definition can prevent reaching the optimum.
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,468,"Assert.assertEquals(resNoBound, resNearLo, 1e-3);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,469,"Assert.assertEquals(resNoBound, resNearHi, 1e-3);"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,456,"MAESOptimizer optim = new CMAESOptimizer( lambda, inSigma, 30000,"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,457,"topValue, isActive, diagonalOnly,"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,458,", new MersenneTwister(), false);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,502,"CMAESOptimizer optim = new CMAESOptimizer(lambda, inSigma, 30000,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,503,"stopValue, isActive, diagonalOnly,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,504,"0, new MersenneTwister(), false);"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,462,"ssert.assertEquals(expected.getValue(),"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,463,"esult.getValue(), fTol);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,508,"// System.out.println(""sol="" + Arrays.toString(result.getPoint()));"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,509,"Assert.assertEquals(expected.getValue(), result.getValue(), fTol);"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,465,"ssert.assertEquals(expected.getPoint()[i],"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,466,"esult.getPoint()[i], pointTol);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,511,"Assert.assertEquals(expected.getPoint()[i], result.getPoint()[i], pointTol);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,1,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,3,import java.util.ConcurrentModificationException;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,4,import java.util.HashMap;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,5,import java.util.HashSet;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,6,import java.util.Map;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,7,import java.util.NoSuchElementException;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,8,import java.util.Random;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,9,import java.util.Set;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,10,import java.util.Map.Entry;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,12,import org.apache.commons.math.Field;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,13,import org.apache.commons.math.FieldElement;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,14,import org.apache.commons.math.fraction.Fraction;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,15,import org.apache.commons.math.fraction.FractionConversionException;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,16,import org.apache.commons.math.fraction.FractionField;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,18,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,20,public class OpenIntToFieldTest extends TestCase {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,22,"private Map<Integer, Fraction> javaMap = new HashMap<Integer, Fraction>();"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,23,private FractionField field = FractionField.getInstance();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,25,@Override
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,26,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,27,"javaMap.put(50, new Fraction(100.0));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,28,"javaMap.put(75, new Fraction(75.0));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,29,"javaMap.put(25, new Fraction(500.0));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,30,"javaMap.put(Integer.MAX_VALUE, new Fraction(Integer.MAX_VALUE));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,31,"javaMap.put(0, new Fraction(-1.0));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,32,"javaMap.put(1, new Fraction(0.0));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,33,"javaMap.put(33, new Fraction(-0.1));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,34,"javaMap.put(23234234, new Fraction(-242343.0));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,35,"javaMap.put(23321, new Fraction (Integer.MIN_VALUE));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,36,"javaMap.put(-4444, new Fraction(332.0));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,37,"javaMap.put(-1, new Fraction(-2323.0));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,38,"javaMap.put(Integer.MIN_VALUE, new Fraction(44.0));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,40,/* Add a few more to cause the table to rehash */
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,41,javaMap.putAll(generate());
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,45,"private Map<Integer, Fraction> generate() {"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,46,"Map<Integer, Fraction> map = new HashMap<Integer, Fraction>();"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,47,Random r = new Random();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,48,double dd=0;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,49,for (int i = 0; i < 2000; ++i)
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,50,dd = r.nextDouble();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,51,try {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,52,"map.put(r.nextInt(), new Fraction(dd));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,53,} catch (FractionConversionException e) {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,54,"throw new IllegalStateException(""Invalid :""+dd, e);"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,56,return map;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,59,private OpenIntToFieldHashMap<Fraction> createFromJavaMap(Field<Fraction> field) {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,60,OpenIntToFieldHashMap<Fraction> map = new OpenIntToFieldHashMap<Fraction>(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,61,"for (Map.Entry<Integer, Fraction> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,62,"map.put(mapEntry.getKey(), mapEntry.getValue());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,64,return map;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,67,public void testPutAndGetWith0ExpectedSize() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,68,"OpenIntToFieldHashMap<Fraction> map = new OpenIntToFieldHashMap<Fraction>(field,0);"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,69,assertPutAndGet(map);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,72,public void testPutAndGetWithExpectedSize() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,73,"OpenIntToFieldHashMap<Fraction> map = new OpenIntToFieldHashMap<Fraction>(field,500);"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,74,assertPutAndGet(map);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,77,public void testPutAndGet() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,78,OpenIntToFieldHashMap<Fraction> map = new OpenIntToFieldHashMap<Fraction>(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,79,assertPutAndGet(map);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,82,private void assertPutAndGet(OpenIntToFieldHashMap<Fraction> map) {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,83,"assertPutAndGet(map, 0, new HashSet<Integer>());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,86,"private void assertPutAndGet(OpenIntToFieldHashMap<Fraction> map, int mapSize,"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,87,Set<Integer> keysInMap) {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,88,"assertEquals(mapSize, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,89,"for (Map.Entry<Integer, Fraction> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,90,"map.put(mapEntry.getKey(), mapEntry.getValue());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,91,if (!keysInMap.contains(mapEntry.getKey()))
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,92,++mapSize;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,93,"assertEquals(mapSize, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,94,"assertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,98,public void testPutAbsentOnExisting() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,99,OpenIntToFieldHashMap<Fraction> map = createFromJavaMap(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,100,int size = javaMap.size();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,101,"for (Map.Entry<Integer, Fraction> mapEntry : generateAbsent().entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,102,"map.put(mapEntry.getKey(), mapEntry.getValue());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,103,"assertEquals(++size, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,104,"assertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,108,public void testPutOnExisting() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,109,OpenIntToFieldHashMap<Fraction> map = createFromJavaMap(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,110,"for (Map.Entry<Integer, Fraction> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,111,"map.put(mapEntry.getKey(), mapEntry.getValue());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,112,"assertEquals(javaMap.size(), map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,113,"assertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,117,public void testGetAbsent() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,118,"Map<Integer, Fraction> generated = generateAbsent();"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,119,OpenIntToFieldHashMap<Fraction> map = createFromJavaMap(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,121,"for (Map.Entry<Integer, Fraction> mapEntry : generated.entrySet())"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,122,assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,125,public void testGetFromEmpty() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,126,OpenIntToFieldHashMap<Fraction> map = new OpenIntToFieldHashMap<Fraction>(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,127,assertTrue(field.getZero().equals(map.get(5)));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,128,assertTrue(field.getZero().equals(map.get(0)));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,129,assertTrue(field.getZero().equals(map.get(50)));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,132,public void testRemove() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,133,OpenIntToFieldHashMap<Fraction> map = createFromJavaMap(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,134,int mapSize = javaMap.size();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,135,"assertEquals(mapSize, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,136,"for (Map.Entry<Integer, Fraction> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,137,map.remove(mapEntry.getKey());
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,138,"assertEquals(--mapSize, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,139,assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,142,/* Ensure that put and get still work correctly after removals */
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,143,assertPutAndGet(map);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,146,/* This time only remove some entries */
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,147,public void testRemove2() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,148,OpenIntToFieldHashMap<Fraction> map = createFromJavaMap(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,149,int mapSize = javaMap.size();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,150,int count = 0;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,151,Set<Integer> keysInMap = new HashSet<Integer>(javaMap.keySet());
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,152,"for (Map.Entry<Integer, Fraction> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,153,keysInMap.remove(mapEntry.getKey());
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,154,map.remove(mapEntry.getKey());
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,155,"assertEquals(--mapSize, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,156,assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,157,if (count++ > 5)
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,158,break;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,161,/* Ensure that put and get still work correctly after removals */
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,162,"assertPutAndGet(map, mapSize, keysInMap);"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,165,public void testRemoveFromEmpty() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,166,OpenIntToFieldHashMap<Fraction> map = new OpenIntToFieldHashMap<Fraction>(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,167,assertTrue(field.getZero().equals(map.remove(50)));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,170,public void testRemoveAbsent() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,171,"Map<Integer, Fraction> generated = generateAbsent();"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,173,OpenIntToFieldHashMap<Fraction> map = createFromJavaMap(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,174,int mapSize = map.size();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,176,"for (Map.Entry<Integer, Fraction> mapEntry : generated.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,177,map.remove(mapEntry.getKey());
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,178,"assertEquals(mapSize, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,179,assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,184,* Returns a map with at least 100 elements where each element is absent from javaMap.
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,186,"private Map<Integer, Fraction> generateAbsent() {"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,187,"Map<Integer, Fraction> generated = new HashMap<Integer, Fraction>();"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,188,do {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,189,generated.putAll(generate());
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,190,for (Integer key : javaMap.keySet())
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,191,generated.remove(key);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,192,} while (generated.size() < 100);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,193,return generated;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,196,public void testCopy() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,197,OpenIntToFieldHashMap<Fraction> copy =
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,198,new OpenIntToFieldHashMap<Fraction>(createFromJavaMap(field));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,199,"assertEquals(javaMap.size(), copy.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,201,"for (Map.Entry<Integer, Fraction> mapEntry : javaMap.entrySet())"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,202,"assertEquals(mapEntry.getValue(), copy.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,205,public void testContainsKey() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,206,OpenIntToFieldHashMap<Fraction> map = createFromJavaMap(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,207,"for (Entry<Integer, Fraction> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,208,assertTrue(map.containsKey(mapEntry.getKey()));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,210,"for (Map.Entry<Integer, Fraction> mapEntry : generateAbsent().entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,211,assertFalse(map.containsKey(mapEntry.getKey()));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,213,"for (Entry<Integer, Fraction> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,214,int key = mapEntry.getKey();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,215,assertTrue(map.containsKey(key));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,216,map.remove(key);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,217,assertFalse(map.containsKey(key));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,221,public void testIterator() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,222,OpenIntToFieldHashMap<Fraction> map = createFromJavaMap(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,223,OpenIntToFieldHashMap<Fraction>.Iterator iterator = map.iterator();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,224,for (int i = 0; i < map.size(); ++i) {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,225,assertTrue(iterator.hasNext());
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,226,iterator.advance();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,227,int key = iterator.key();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,228,assertTrue(map.containsKey(key));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,229,"assertEquals(javaMap.get(key), map.get(key));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,230,"assertEquals(javaMap.get(key), iterator.value());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,231,assertTrue(javaMap.containsKey(key));
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,233,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,234,try {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,235,iterator.advance();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,236,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,237,} catch (NoSuchElementException nsee) {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,238,// expected
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,242,public void testConcurrentModification() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,243,OpenIntToFieldHashMap<Fraction> map = createFromJavaMap(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,244,OpenIntToFieldHashMap<Fraction>.Iterator iterator = map.iterator();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,245,"map.put(3, new Fraction(3));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,246,try {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,247,iterator.advance();
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,248,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,249,} catch (ConcurrentModificationException cme) {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,250,// expected
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,255,* Regression test for a bug in findInsertionIndex where the hashing in the second probing
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,256,* loop was inconsistent with the first causing duplicate keys after the right sequence
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,257,* of puts and removes.
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,259,public void testPutKeysWithCollisions() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,260,OpenIntToFieldHashMap<Fraction> map = new OpenIntToFieldHashMap<Fraction>(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,261,int key1 = -1996012590;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,262,Fraction value1 = new Fraction(1);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,263,"map.put(key1, value1);"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,264,int key2 = 835099822;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,265,"map.put(key2, value1);"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,266,int key3 = 1008859686;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,267,"map.put(key3, value1);"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,268,"assertEquals(value1, map.get(key3));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,269,"assertEquals(3, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,271,map.remove(key2);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,272,Fraction value2 = new Fraction(2);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,273,"map.put(key3, value2);"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,274,"assertEquals(value2, map.get(key3));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,275,"assertEquals(2, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,279,* Similar to testPutKeysWithCollisions() but exercises the codepaths in a slightly
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,280,* different manner.
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,282,public void testPutKeysWithCollision2() {
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,283,OpenIntToFieldHashMap<Fraction>map = new OpenIntToFieldHashMap<Fraction>(field);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,284,int key1 = 837989881;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,285,Fraction value1 = new Fraction(1);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,286,"map.put(key1, value1);"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,287,int key2 = 476463321;
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,288,"map.put(key2, value1);"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,289,"assertEquals(2, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,290,"assertEquals(value1, map.get(key2));"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,292,map.remove(key1);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,293,Fraction value2 = new Fraction(2);
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,294,"map.put(key2, value2);"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,295,"assertEquals(1, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/org/apache/commons/math/util/OpenIntToFieldTest.java,296,"assertEquals(value2, map.get(key2));"

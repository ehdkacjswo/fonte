is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,44,ublic abstract void setMaximalIterationCount(int count);
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,44,void setMaximalIterationCount(int count);
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,51,ublic abstract int getMaximalIterationCount();
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,51,int getMaximalIterationCount();
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,60,ublic abstract void resetMaximalIterationCount();
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,60,void resetMaximalIterationCount();
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,77,ublic abstract void setAbsoluteAccuracy(double accuracy);
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,77,void setAbsoluteAccuracy(double accuracy);
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,84,ublic abstract double getAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,84,double getAbsoluteAccuracy();
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,91,ublic abstract void resetAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,91,void resetAbsoluteAccuracy();
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,107,ublic abstract void setRelativeAccuracy(double accuracy);
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,107,void setRelativeAccuracy(double accuracy);
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,113,ublic abstract double getRelativeAccuracy();
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,113,double getRelativeAccuracy();
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,119,ublic abstract void resetRelativeAccuracy();
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,119,void resetRelativeAccuracy();
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,134,ublic abstract int getIterationCount();
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,134,int getIterationCount();
False,src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,33,ublic UnivariateMatrixFunction derivative();
True,src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,33,UnivariateMatrixFunction derivative();
False,src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java,32,ublic UnivariateRealFunction derivative();
True,src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java,32,UnivariateRealFunction derivative();
False,src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,33,ublic UnivariateVectorialFunction derivative();
True,src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,33,UnivariateVectorialFunction derivative();
False,src/main/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,34,ublic double[][] value(double x) throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,35,double[][] value(double x) throws FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,33,ublic double value(double x) throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,34,double value(double x) throws FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,34,ublic double[] value(double x) throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,35,double[] value(double x) throws FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealInterpolator.java,37,"ublic UnivariateRealFunction interpolate(double xval[], double yval[])"
True,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealInterpolator.java,37,"UnivariateRealFunction interpolate(double xval[], double yval[])"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,105,bstract public double cumulativeProbability(int x) throws MathException;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,105,public abstract double cumulativeProbability(int x) throws MathException;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,38,ublic abstract int getNumberOfSuccesses();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,39,int getNumberOfSuccesses();
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,44,ublic abstract int getPopulationSize();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,45,int getPopulationSize();
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,50,ublic abstract int getSampleSize();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,51,int getSampleSize();
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,56,ublic abstract void setNumberOfSuccesses(int num);
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,57,void setNumberOfSuccesses(int num);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,62,ublic abstract void setPopulationSize(int size);
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,63,void setPopulationSize(int size);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,68,ublic abstract void setSampleSize(int size);
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,69,void setSampleSize(int size);
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,41,ublic double getMean();
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,41,double getMean();
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,51,ublic void setMean(double p);
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,51,void setMean(double p);
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,60,ublic double normalApproximateProbability(int x) throws MathException;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,60,double normalApproximateProbability(int x) throws MathException;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,38,ublic int getNumberOfElements();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,39,int getNumberOfElements();
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,48,ublic void setNumberOfElements(int n);
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,49,void setNumberOfElements(int n);
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,55,ublic double getExponent();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,56,double getExponent();
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,65,ublic void setExponent(double s);
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,66,void setExponent(double s);
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,50, Get the measurements of an estimation problem.
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,51, @return measurements
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,53,ublic WeightedMeasurement[] getMeasurements();
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,56, Get the unbound parameters of the problem.
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,57, @return unbound parameters
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,59,ublic EstimatedParameter[] getUnboundParameters();
True,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,51,* Get the measurements of an estimation problem.
True,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,52,* @return measurements
True,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,54,WeightedMeasurement[] getMeasurements();
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,62, Get all the parameters of the problem.
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,63, @return parameters
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,65,ublic EstimatedParameter[] getAllParameters();
True,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,57,* Get the unbound parameters of the problem.
True,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,58,* @return unbound parameters
True,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,60,EstimatedParameter[] getUnboundParameters();
True,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,63,* Get all the parameters of the problem.
True,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,64,* @return parameters
True,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,66,EstimatedParameter[] getAllParameters();
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,56,ublic void estimate(EstimationProblem problem)
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,57,hrows EstimationException;
True,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,56,void estimate(EstimationProblem problem) throws EstimationException;
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,71,ublic double getRMS(EstimationProblem problem);
True,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,70,double getRMS(EstimationProblem problem);
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,80,ublic double[][] getCovariances(EstimationProblem problem)
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,81,hrows EstimationException;
True,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,79,double[][] getCovariances(EstimationProblem problem) throws EstimationException;
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,90,ublic double[] guessParametersErrors(EstimationProblem problem)
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,91,hrows EstimationException;
True,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,88,double[] guessParametersErrors(EstimationProblem problem) throws EstimationException;
False,src/main/java/org/apache/commons/math/genetics/Fitness.java,src/main/java/org/apache/commons/math/genetics/Fitness.java,32,ublic double fitness();
True,src/main/java/org/apache/commons/math/genetics/Fitness.java,src/main/java/org/apache/commons/math/genetics/Fitness.java,33,double fitness();
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,45,ublic synchronized static void setRandomGenerator(RandomGenerator random) {
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,45,public static synchronized void setRandomGenerator(RandomGenerator random) {
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,54,ublic synchronized static RandomGenerator getRandomGenerator() {
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,54,public static synchronized RandomGenerator getRandomGenerator() {
False,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,42,ublic List<T> decode(List<T> sequence);
True,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,42,List<T> decode(List<T> sequence);
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,94,ublic BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,94,BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,111,ublic FieldMatrix<T> preMultiply(FieldMatrix<T> m) throws IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,111,FieldMatrix<T> preMultiply(FieldMatrix<T> m) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,175,ublic FieldVector<T> ebeMultiply(FieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,176,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,175,FieldVector<T> ebeMultiply(FieldVector<T> v) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,184,ublic FieldVector<T> ebeMultiply(T[] v)
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,185,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,183,FieldVector<T> ebeMultiply(T[] v) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,193,ublic FieldVector<T> ebeDivide(FieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,194,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,191,FieldVector<T> ebeDivide(FieldVector<T> v) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,202,ublic FieldVector<T> ebeDivide(T[] v)
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,203,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,199,FieldVector<T> ebeDivide(T[] v) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,101,ublic RealMatrix preMultiply(RealMatrix m) throws IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,101,RealMatrix preMultiply(RealMatrix m) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,466,ublic RealVector ebeMultiply(RealVector v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,467,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,466,RealVector ebeMultiply(RealVector v) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,475,ublic RealVector ebeMultiply(double[] v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,476,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,474,RealVector ebeMultiply(double[] v) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,484,ublic RealVector ebeDivide(RealVector v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,485,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,482,RealVector ebeDivide(RealVector v) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,493,ublic RealVector ebeDivide(double[] v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,494,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,490,RealVector ebeDivide(double[] v) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,793,ublic boolean isNaN();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,789,boolean isNaN();
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,801,ublic boolean isInfinite();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,797,boolean isInfinite();
False,src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java,53,ublic int getDimension();
True,src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java,53,int getDimension();
False,src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java,62,"ublic void computeDerivatives(double t, double[] y, double[] yDot)"
False,src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java,63,hrows DerivativeException;
True,src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java,62,"void computeDerivatives(double t, double[] y, double[] yDot) throws DerivativeException;"
False,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,56,"ublic double integrate (FirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,57,"ouble t0, double[] y0,"
False,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,58,"ouble t, double[] y)"
False,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,59,"hrows DerivativeException, IntegratorException;"
True,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,56,"double integrate (FirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,57,"double t0, double[] y0,"
True,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,58,"double t, double[] y) throws DerivativeException, IntegratorException;"
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,49,** Get the dimension of the problem.
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,50, @return dimension of the problem
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,52,ublic int getDimension();
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,49,/** Get the dimension of the problem.
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,50,* @return dimension of the problem
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,52,int getDimension();
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,54,** Get the current time derivative of the state vector.
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,55, @param t current value of the independent <I>time</I> variable
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,56, @param y array containing the current value of the state vector
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,57, @param yDot array containing the current value of the first derivative
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,58, of the state vector
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,59, @param yDDot placeholder array where to put the second time derivative
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,60, of the state vector
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,61, @throws DerivativeException this exception is propagated to the caller if the
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,62, underlying user function triggers one
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,64,"ublic void computeSecondDerivatives(double t, double[] y, double[] yDot,"
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,65,ouble[] yDDot)
False,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,66,hrows DerivativeException;
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,54,/** Get the current time derivative of the state vector.
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,55,* @param t current value of the independent <I>time</I> variable
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,56,* @param y array containing the current value of the state vector
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,57,* @param yDot array containing the current value of the first derivative
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,58,* of the state vector
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,59,* @param yDDot placeholder array where to put the second time derivative
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,60,* of the state vector
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,61,* @throws DerivativeException this exception is propagated to the caller if the
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,62,* underlying user function triggers one
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,64,"void computeSecondDerivatives(double t, double[] y, double[] yDot,"
True,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,65,double[] yDDot) throws DerivativeException;
False,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,53,"ublic void integrate(SecondOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,54,"ouble t0, double[] y0, double[] yDot0,"
False,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,55,"ouble t, double[] y, double[] yDot)"
False,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,56,"hrows DerivativeException, IntegratorException;"
True,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,53,"void integrate(SecondOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,54,"double t0, double[] y0, double[] yDot0,"
True,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,55,"double t, double[] y, double[] yDot)"
True,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,56,"throws DerivativeException, IntegratorException;"
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,57,ublic static final int STOP = 0;
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,57,int STOP = 0;
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,66,ublic static final int RESET_STATE = 1;
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,66,int RESET_STATE = 1;
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,76,ublic static final int RESET_DERIVATIVES = 2;
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,76,int RESET_DERIVATIVES = 2;
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,83,ublic static final int CONTINUE = 3;
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,83,int CONTINUE = 3;
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,99,"ublic double g(double t, double[] y) throws EventException;"
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,99,"double g(double t, double[] y) throws EventException;"
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,139,"ublic int eventOccurred(double t, double[] y, boolean increasing) throws EventException;"
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,139,"int eventOccurred(double t, double[] y, boolean increasing) throws EventException;"
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,157,"ublic void resetState(double t, double[] y) throws EventException;"
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,157,"void resetState(double t, double[] y) throws EventException;"
False,src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,60,"ublic void handleStep(double t, double[] y, double[] yDot, boolean isLast)"
False,src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,61,hrows DerivativeException;
True,src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,60,"void handleStep(double t, double[] y, double[] yDot, boolean isLast) throws DerivativeException;"
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,52,ublic boolean requiresDenseOutput();
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,52,boolean requiresDenseOutput();
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,58,ublic void reset();
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,58,void reset();
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,76,"ublic void handleStep(StepInterpolator interpolator, boolean isLast)"
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,77,hrows DerivativeException;
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,76,"void handleStep(StepInterpolator interpolator, boolean isLast) throws DerivativeException;"
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,49,ublic interface StepInterpolator
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,50,xtends Externalizable {
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,49,public interface StepInterpolator extends Externalizable {
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,56,ublic double getPreviousTime();
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,55,double getPreviousTime();
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,62,ublic double getCurrentTime();
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,61,double getCurrentTime();
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,70,ublic double getInterpolatedTime();
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,69,double getInterpolatedTime();
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,84,ublic void setInterpolatedTime(double time);
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,83,void setInterpolatedTime(double time);
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,96,ublic double[] getInterpolatedState()
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,97,hrows DerivativeException;
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,95,double[] getInterpolatedState() throws DerivativeException;
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,110,ublic double[] getInterpolatedDerivatives()
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,111,hrows DerivativeException;
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,108,double[] getInterpolatedDerivatives() throws DerivativeException;
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,122,ublic boolean isForward();
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,119,boolean isForward();
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,133,ublic StepInterpolator copy() throws DerivativeException;
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,130,StepInterpolator copy() throws DerivativeException;
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,37,"ublic double value(double x, double[] parameters)"
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,37,"double value(double x, double[] parameters)"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,47,"ublic double[] gradient(double x, double[] parameters)"
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,47,"double[] gradient(double x, double[] parameters)"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,357,bstract protected VectorialPointValuePair doOptimize()
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,357,protected abstract VectorialPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,198,bstract protected RealPointValuePair doOptimize()
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,198,protected abstract RealPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,115,bstract protected RealPointValuePair doOptimize()
True,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,115,protected abstract RealPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,src/main/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,36,ublic double nextNormalizedDouble();
True,src/main/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,src/main/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,36,double nextNormalizedDouble();
False,src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java,30,** Generate a random vector.
False,src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java,31, @return a random vector as an array of double.
False,src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java,33,ublic double[] nextVector();
True,src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java,30,/** Generate a random vector.
True,src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java,31,* @return a random vector as an array of double.
True,src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java,33,double[] nextVector();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,32,ublic int getDimension();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,33,int getDimension();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,40,ublic abstract double[] getMean();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,42,double[] getMean();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,46,ublic abstract RealMatrix getCovariance();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,49,RealMatrix getCovariance();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,54,ublic abstract double[] getStandardDeviation();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,58,double[] getStandardDeviation();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,62,ublic abstract double[] getMax();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,67,double[] getMax();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,70,ublic abstract double[] getMin();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,76,double[] getMin();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,75,ublic abstract long getN();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,82,long getN();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,83,ublic double[] getGeometricMean();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,91,double[] getGeometricMean();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,91,ublic abstract double[] getSum();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,100,double[] getSum();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,99,ublic abstract double[] getSumSq();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,109,double[] getSumSq();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,107,ublic abstract double[] getSumLog();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,118,double[] getSumLog();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,30,ublic abstract double getMean();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,31,double getMean();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,36,ublic abstract double getVariance();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,37,double getVariance();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,42,ublic abstract double getStandardDeviation();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,43,double getStandardDeviation();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,47,ublic abstract double getMax();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,48,double getMax();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,52,ublic abstract double getMin();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,53,double getMin();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,57,ublic abstract long getN();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,58,long getN();
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,62,ublic abstract double getSum();
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,63,double getSum();
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,53,ublic double anovaFValue(Collection<double[]> categoryData)
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,54,double anovaFValue(Collection<double[]> categoryData)
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,74,ublic double anovaPValue(Collection<double[]> categoryData)
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,75,double anovaPValue(Collection<double[]> categoryData)
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,99,"ublic boolean anovaTest(Collection<double[]> categoryData, double alpha)"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,100,"boolean anovaTest(Collection<double[]> categoryData, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,68,"ublic abstract double pairedT(double[] sample1, double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,68,"double pairedT(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,103,"ublic abstract double pairedTTest(double[] sample1, double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,103,"double pairedTTest(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,137,ublic abstract boolean pairedTTest(
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,137,boolean pairedTTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,157,"ublic abstract double t(double mu, double[] observed)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,157,"double t(double mu, double[] observed)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,175,"ublic abstract double t(double mu, StatisticalSummary sampleStats)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,175,"double t(double mu, StatisticalSummary sampleStats)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,210,"ublic abstract double homoscedasticT(double[] sample1, double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,210,"double homoscedasticT(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,240,"ublic abstract double t(double[] sample1, double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,240,"double t(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,273,ublic abstract double t(
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,273,double t(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,312,ublic abstract double homoscedasticT(
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,312,double homoscedasticT(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,342,"ublic abstract double tTest(double mu, double[] sample)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,342,"double tTest(double mu, double[] sample)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,379,"ublic abstract boolean tTest(double mu, double[] sample, double alpha)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,379,"boolean tTest(double mu, double[] sample, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,409,"ublic abstract double tTest(double mu, StatisticalSummary sampleStats)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,409,"double tTest(double mu, StatisticalSummary sampleStats)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,447,ublic abstract boolean tTest(
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,447,boolean tTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,488,"ublic abstract double tTest(double[] sample1, double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,488,"double tTest(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,523,ublic abstract double homoscedasticTTest(
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,523,double homoscedasticTTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,577,ublic abstract boolean tTest(
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,577,boolean tTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,633,ublic abstract boolean homoscedasticTTest(
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,633,boolean homoscedasticTTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,672,ublic abstract double tTest(
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,672,double tTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,709,ublic abstract double homoscedasticTTest(
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,709,double homoscedasticTTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,766,ublic abstract boolean tTest(
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,766,boolean tTest(
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,421,inal private double value;
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,421,private final double value;
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,424,inal private int position;
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,424,private final int position;
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,65,ublic abstract double[] inversetransform(double f[])
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,65,double[] inversetransform(double f[])
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1568,"ublic static final double distance1(double[] p1, double[] p2) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1568,"public static double distance1(double[] p1, double[] p2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1583,"ublic static final int distance1(int[] p1, int[] p2) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1583,"public static int distance1(int[] p1, int[] p2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1598,"ublic static final double distance(double[] p1, double[] p2) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1598,"public static double distance(double[] p1, double[] p2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1614,"ublic static final double distance(int[] p1, int[] p2) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1614,"public static double distance(int[] p1, int[] p2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1630,"ublic static final double distanceInf(double[] p1, double[] p2) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1630,"public static double distanceInf(double[] p1, double[] p2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1645,"ublic static final int distanceInf(int[] p1, int[] p2) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1645,"public static int distanceInf(int[] p1, int[] p2) {"

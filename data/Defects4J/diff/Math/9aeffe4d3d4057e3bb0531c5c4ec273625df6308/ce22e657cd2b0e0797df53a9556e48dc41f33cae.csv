is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,17,package org.apache.commons.math3.primes;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,20,import java.util.List;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,22,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,25,* Implementation of the Pollard's rho factorization algorithm.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,26,* @version $Id$
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,27,* @since 3.2
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,29,class PollardRho {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,32,* Only static methods in this class
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,34,private PollardRho() {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,38,* Factorization using Pollard's rho algorithm.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,39,"* @param n number to factors, must be >0"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,40,* @return the list of prime factors of n.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,42,public static List<Integer> primeFactors(int n) {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,43,final List<Integer> factors = new ArrayList<Integer>();
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,45,"n = SmallPrimes.smallTrialDivision(n, factors);"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,46,if (1 == n) {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,47,return factors;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,50,if (SmallPrimes.millerRabinPrimeTest(n)) {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,51,factors.add(n);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,52,return factors;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,55,int divisor = rhoBrent(n);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,56,factors.add(divisor);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,57,factors.add(n / divisor);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,58,return factors;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,62,*  Implementation of the Pollard's rho factorization algorithm.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,63,"*  This implementation follows the paper ""An improved Monte Carlo factorization algorithm"" by Richard P. Brent."
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,64,*  This avoid the triple computation of f(x) typically found in Pollard's rho implementations. It also batch several gcd computation into 1.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,65,*  The backtracking is not implemented as we deal only with semi-prime.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,66,"* @param n number to factor, must be semi-prime."
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,67,* @return a prime factor of n.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,69,static int rhoBrent(final int n){
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,70,final int x0 = 2;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,71,final int m = 25;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,72,int cst = SmallPrimes.PRIMES_LAST;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,73,int y = x0;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,74,int r = 1;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,75,do {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,76,int x = y;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,77,for (int i = 0; i < r; i++) {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,78,final long y2 = ((long) y) * y;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,79,y = (int) ((y2 + cst) % n);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,81,int k = 0;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,82,do {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,83,"final int bound = FastMath.min(m, r - k);"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,84,int q = 1;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,85,for (int i = -3; i < bound; i++) { //start at -3 to ensure we enter this loop at least 3 times
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,86,final long y2 = ((long) y) * y;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,87,y = (int) ((y2 + cst) % n);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,88,final long divisor = FastMath.abs(x - y);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,89,if (0 == divisor) {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,90,cst += SmallPrimes.PRIMES_LAST;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,91,k = -m;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,92,y = x0;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,93,r = 1;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,94,break;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,96,final long prod = divisor * q;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,97,q = (int) (prod % n);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,98,if (0 == q) {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,99,"return gcdPositive(FastMath.abs((int) divisor), n);"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,102,"final int out = gcdPositive(FastMath.abs(q), n);"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,103,if (1 != out) {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,104,return out;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,106,k = k + m;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,107,} while (k < r);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,108,r = 2 * r;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,109,} while (true);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,113,* Gcd between two positive numbers
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,114,* <p>
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,115,"* Gets the greatest common divisor of two numbers,"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,116,"* using the ""binary gcd"" method which avoids division and modulo"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,117,* operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,118,* Stein (1961).
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,119,* </p>
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,120,* Special cases:
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,121,* <ul>
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,122,"* <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,123,"* {@code gcd(x, 0)} is the value of {@code x}."
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,124,"* <li>The invocation {@code gcd(0, 0)} is the only one which returns"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,125,* {@code 0}.</li>
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,126,* </ul>
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,127,"* @param a first number, must be >=0"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,128,"* @param b second number, must be >=0"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,129,"* @return gcd(a,b)"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,131,"static int gcdPositive(int a, int b){"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,132,"// both a and b must be positive, it is not checked here"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,133,"//gdc(a,0) = a"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,134,if (a == 0) {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,135,return b;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,136,} else if (b == 0) {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,137,return a;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,140,"//make a and b odd, keep in mind the common power of twos"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,141,final int aTwos = Integer.numberOfTrailingZeros(a);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,142,a >>= aTwos;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,143,final int bTwos = Integer.numberOfTrailingZeros(b);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,144,b >>= bTwos;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,145,"final int shift = FastMath.min(aTwos, bTwos);"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,147,//a and b >0
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,148,"//if a > b then gdc(a,b) = gcd(a-b,b)"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,149,"//if a < b then gcd(a,b) = gcd(b-a,a)"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,150,//so next a is the absolute difference and next b is the minimum of current values
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,151,while (a != b) {
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,152,final int delta = a - b;
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,153,"b = FastMath.min(a, b);"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,154,a = FastMath.abs(delta);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,155,//for speed optimization:
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,156,//remove any power of two in a as b is guaranteed to be odd throughout all iterations
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,157,a >>= Integer.numberOfTrailingZeros(a);
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,160,"//gcd(a,a) = a, just ""add"" the common power of twos"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,161,return a << shift;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,17,package org.apache.commons.math3.primes;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,19,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,20,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,22,import java.util.List;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,26,* Methods related to prime numbers in the range of <code>int</code>:
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,27,* <ul>
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,28,* <li>primality test</li>
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,29,* <li>prime number generation</li>
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,30,* <li>factorization</li>
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,31,* </ul>
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,32,* {@link Math}.
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,34,* @version $Id$
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,35,* @since 3.2
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,37,public class Primes {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,39,* Only static methods in this class
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,41,private Primes() {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,45,* Primality test: tells if the argument is a (provable) prime or not.</p>
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,46,* It uses the Miller-Rabin probabilistic test in such a way that result is always guaranteed: it uses the firsts prime numbers as successive base
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,47,"* (see Handbook of applied cryptography by Menezes, table 4.1)"
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,49,* @param n number to test.
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,50,* @return true if n is prime. (All numbers <2 return false).
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,52,public static boolean isPrime(int n) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,53,if (n < 2) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,54,return false;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,57,for (int p : SmallPrimes.PRIMES) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,58,if (0 == (n % p)) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,59,return n == p;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,62,return SmallPrimes.millerRabinPrimeTest(n);
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,66,* Return the smallest prime superior or equal to n.
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,68,* @param n a positive number.
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,69,* @return the smallest prime superior or equal to n.
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,70,* @throws MathIllegalArgumentException if n <0.
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,72,public static int nextPrime(int n) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,73,if (n < 0) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,74,"throw new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL, n, 0);"
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,76,if (n == 2) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,77,return 2;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,79,n = n | 1;//make sur n is odd
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,80,if (n == 1) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,81,return 2;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,84,if (isPrime(n)) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,85,return n;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,88,"//prepare entry in the +2, +4 loop:"
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,89,//n should not be a multiple of 3
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,90,final int rem = n % 3;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,91,if (0 == rem) {// if n%3==0
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,92,n += 2;//n%3==2
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,93,} else if (1 == rem) {//if n%3==1
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,94,//if (isPrime(n)) return n;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,95,n += 4;//n%3==2
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,97,while (true) { //this loop skips all multiple of 3
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,98,if (isPrime(n)) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,99,return n;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,101,n += 2;//n%3==1
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,102,if (isPrime(n)) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,103,return n;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,105,n += 4;//n%3==2
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,110,* Prime factors decomposition
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,112,* @param n number to factorize: must be >=2
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,113,* @return list of prime factors of n
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,114,* @throws MathIllegalArgumentException if n <2.
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,116,public static List<Integer> primeFactors(int n) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,118,if (n < 2) {
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,119,"throw new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL, n, 2);"
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,121,//slower than trial div unless we do an awful lot of computation (then it finally gets JIT-compiled efficiently
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,122,//List<Integer> out = PollardRho.primeFactors(n);
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,123,return SmallPrimes.trialDivision(n);
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,17,package org.apache.commons.math3.primes;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,20,import java.math.BigInteger;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,21,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,22,import java.util.List;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,24,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,27,* Utility methods to work on primes within the <code>int</code> range.
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,28,* @version $Id$
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,29,* @since 3.2
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,31,class SmallPrimes {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,34,* The 512 firsts prime numbers
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,35,* It contains all primes smaller or equal to the cubic square of Integer.MAX_VALUE.
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,36,"* As a result, <code>int</code> numbers which are not reduced by those primes are garanteed to be either prime or semi prime."
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,38,"public static final int[] PRIMES = {2,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,39,"3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,40,"79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,41,"181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,42,"293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,43,"421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,44,"557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,45,"673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,46,"821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,47,"953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,48,"1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,49,"1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,50,"1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,51,"1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,52,"1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,53,"1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,54,"1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,55,"2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,56,"2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,57,"2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,58,"2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,59,"2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,60,"2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,61,"3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,62,"3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,63,"3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581,"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,64,"3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671};"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,66,* The last number in PRIMES
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,68,public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,71,* Only static methods in this class
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,73,private SmallPrimes() {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,77,* Extract small factors.
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,78,"* @param n the number to factor, must be >0."
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,79,* @param factors the list where to add the factors.
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,80,"* @return the part of n which remains to be factored, it is either a prime or a semi-prime"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,82,"public static int smallTrialDivision(int n, final List<Integer> factors) {"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,83,for (int p : PRIMES) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,84,while (0 == n % p) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,85,n = n / p;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,86,factors.add(p);
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,89,return n;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,93,* Extract factors in the range <code>PRIME_LAST+2</code> to <code>maxFactors</code>
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,94,"* @param n the number to factorize, must be >= PRIME_LAST+2 and must not contain any factor below PRIME_LAST+2"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,95,"* @param maxFactor the upper bound of trial division: if it is reach, the methods gives up and return n."
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,96,* @param factors the list where to add the factors.
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,97,* @return  n or 1 if factorization is completed.
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,99,"public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors) {"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,100,int f = PRIMES_LAST + 2;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,101,// no check is done about n >= f
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,102,while (f <= maxFactor) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,103,if (0 == n % f) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,104,n = n / f;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,105,factors.add(f);
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,106,break;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,108,f += 4;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,109,if (0 == n % f) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,110,n = n / f;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,111,factors.add(f);
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,112,break;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,114,f += 2;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,116,if (n != 1) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,117,factors.add(n);
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,119,return n;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,123,* Factorization by trial division
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,124,* @param n the number to factorize
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,125,* @return the list of prime factors of n
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,127,public static List<Integer> trialDivision(int n){
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,128,final List<Integer> factors = new ArrayList<Integer>(32);
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,129,"n = smallTrialDivision(n, factors);"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,130,if (1 == n) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,131,return factors;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,133,// here we are sure that n is either a prime or a semi prime
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,134,final int bound = (int) FastMath.sqrt(n);
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,135,"boundedTrialDivision(n, bound, factors);"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,136,return factors;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,140,"* Miller-Rabin probabilistic primality test for int type, used in such a way that result is always guaranteed."
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,141,"* It uses the prime numbers as successive base therefore it is garanteed to be always correct. (see Handbook of applied cryptography by Menezes, table 4.1)"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,143,* @param n number to test: an odd integer >= 3
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,144,* @return true if n is prime. false if n is definitely composite.
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,146,public static boolean millerRabinPrimeTest(final int n) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,147,final int nMinus1 = n - 1;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,148,final int s = Integer.numberOfTrailingZeros(nMinus1);
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,149,final int r = nMinus1 >> s;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,150,"//r must be odd, it is not checked here"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,151,int t = 1;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,152,if (n >= 2047) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,153,t = 2;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,155,if (n >= 1373653) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,156,t = 3;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,158,if (n >= 25326001) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,159,t = 4;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,160,"} // works up to 3.2 billion, int range stops at 2.7 so we are safe :-)"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,161,BigInteger br = BigInteger.valueOf(r);
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,162,BigInteger bn = BigInteger.valueOf(n);
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,164,for (int i = 0; i < t; i++) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,165,BigInteger a = BigInteger.valueOf(SmallPrimes.PRIMES[i]);
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,166,"BigInteger bPow = a.modPow(br, bn);"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,167,int y = bPow.intValue();
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,168,if ((1 != y) && (y != nMinus1)) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,169,int j = 1;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,170,while ((j <= s - 1) && (nMinus1 != y)) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,171,long square = ((long) y) * y;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,172,y = (int) (square % n);
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,173,if (1 == y) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,174,return false;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,175,} //definitely composite
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,176,j++;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,178,if (nMinus1 != y) {
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,179,return false;
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,180,} //definitely composite
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,183,return true; //definitely prime
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,18,"* Methods related to prime numbers like primality test, factor decomposition."
True,src/main/java/org/apache/commons/math3/primes/package-info.java,src/main/java/org/apache/commons/math3/primes/package-info.java,20,package org.apache.commons.math3.primes;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,17,package org.apache.commons.math3.primes;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,20,import java.util.HashSet;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,21,import java.util.List;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,23,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,24,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,26,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,28,public class PrimesTest {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,30,"public static final int[] PRIMES = {//primes here have been verified one by one using Dario Alejandro Alpern's tool, see http://www.alpertron.com.ar/ECM.HTM"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,31,"2,3,5,7,11,13,17,19,23,29,31,43,47,53,71,73,79,89,97,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,32,"107,137,151,157,271,293,331,409,607,617,683,829,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,33,"1049,1103,1229,1657,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,34,"2039,2053,//around first boundary in miller-rabin"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,35,"2251,2389,2473,2699,3271,3389,3449,5653,6449,6869,9067,9091,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,36,"11251,12433,12959,22961,41047,46337,65413,80803,91577,92693,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,37,"118423,656519,795659,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,38,"1373639,1373677,//around second boundary in miller-rabin"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,39,"588977,952381,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,40,"1013041,1205999,2814001,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,41,"22605091,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,42,"25325981,25326023,//around third boundary in miller-rabin"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,43,"100000007,715827881,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,44,2147483647//Integer.MAX_VALUE
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,47,public static final int[] NOT_PRIMES = {//composite chosen at random + particular values used in algorithms such as boundaries for millerRabin
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,48,"4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,49,"275,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,50,"2037,2041,2045,2046,2047,2048,2049,2051,2055,//around first boundary in miller-rabin"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,51,"9095,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,52,"463465,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,53,"1373637,1373641,1373651,1373652,1373653,1373654,1373655,1373673,1373675,1373679,//around second boundary in miller-rabin"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,54,"25325979,25325983,25325993,25325997,25325999,25326001,25326003,25326007,25326009,25326011,25326021,25326025,//around third boundary in miller-rabin"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,55,"100000005,"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,56,"1073741341,1073741823,2147473649,2147483641,2147483643,2147483645,2147483646};"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,58,public static final int[] BELOW_2 = {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,59,"Integer.MIN_VALUE,-1,0,1};"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,61,"void assertPrimeFactorsException(int n, Throwable expected) {"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,62,try {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,63,Primes.primeFactors(n);
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,64,"Assert.fail(""Exception not thrown"");"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,65,} catch (Throwable e) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,66,"Assert.assertEquals(expected.getClass(), e.getClass());"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,67,if (expected.getMessage() != null) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,68,"Assert.assertEquals(expected.getMessage(), e.getMessage());"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,72,"void assertNextPrimeException(int n, Throwable expected){"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,73,try {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,74,Primes.nextPrime(n);
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,75,"Assert.fail(""Exception not thrown"");"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,76,} catch(Throwable e) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,77,"Assert.assertEquals(expected.getClass(), e.getClass());"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,78,if (expected.getMessage() != null) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,79,"Assert.assertEquals(expected.getMessage(), e.getMessage());"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,84,@Test
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,85,public void testNextPrime() {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,87,"Assert.assertEquals(2, Primes.nextPrime(0));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,88,"Assert.assertEquals(2, Primes.nextPrime(1));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,89,"Assert.assertEquals(2, Primes.nextPrime(2));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,90,"Assert.assertEquals(3, Primes.nextPrime(3));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,91,"Assert.assertEquals(5, Primes.nextPrime(4));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,92,"Assert.assertEquals(5, Primes.nextPrime(5));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,94,for (int i = 0; i < SmallPrimes.PRIMES.length - 1; i++) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,95,for (int j = SmallPrimes.PRIMES[i] + 1; j <= SmallPrimes.PRIMES[i + 1]; j++) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,96,"Assert.assertEquals(SmallPrimes.PRIMES[i+1], Primes.nextPrime(j));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,100,"Assert.assertEquals(25325981, Primes.nextPrime(25325981));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,101,for (int i = 25325981 + 1; i <= 25326023; i++) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,102,"Assert.assertEquals(25326023, Primes.nextPrime(i));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,105,"Assert.assertEquals(Integer.MAX_VALUE, Primes.nextPrime(Integer.MAX_VALUE - 10));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,106,"Assert.assertEquals(Integer.MAX_VALUE, Primes.nextPrime(Integer.MAX_VALUE - 1));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,107,"Assert.assertEquals(Integer.MAX_VALUE, Primes.nextPrime(Integer.MAX_VALUE));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,109,"assertNextPrimeException(Integer.MIN_VALUE, new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,Integer.MIN_VALUE,0));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,110,"assertNextPrimeException(-1, new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,-1,0));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,111,"assertNextPrimeException(-13, new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,-13,0));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,114,@Test
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,115,public void testIsPrime() throws Exception {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,116,for (int i : BELOW_2) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,117,"Assert.assertEquals(false,Primes.isPrime(i));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,119,for (int i:NOT_PRIMES) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,120,"Assert.assertEquals(false,Primes.isPrime(i));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,122,for (int i:PRIMES) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,123,"Assert.assertEquals(true,Primes.isPrime(i));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,127,static int sum(List<Integer> numbers){
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,128,int out = 0;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,129,for (int i:numbers) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,130,out += i;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,132,return out;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,134,static int product(List<Integer> numbers) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,135,int out = 1;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,136,for (int i : numbers) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,137,out *= i;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,139,return out;
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,141,static final HashSet<Integer> PRIMES_SET = new HashSet<Integer>();
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,142,static {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,143,for (int p : PRIMES) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,144,PRIMES_SET.add(p);
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,147,static void checkPrimeFactors(List<Integer> factors){
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,148,for (int p : factors) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,149,if (!PRIMES_SET.contains(p)) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,150,"Assert.fail(""Not found in primes list: "" + p);"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,155,@Test
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,156,public void testPrimeFactors() throws Exception {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,157,for (int i : BELOW_2) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,158,"assertPrimeFactorsException(i, new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,i,2));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,160,for (int i : NOT_PRIMES) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,161,List<Integer> factors = Primes.primeFactors(i);
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,162,checkPrimeFactors(factors);
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,163,int prod = product(factors);
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,164,"Assert.assertEquals(i, prod);"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,166,for (int i : PRIMES) {
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,167,List<Integer> factors = Primes.primeFactors(i);
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,168,"Assert.assertEquals(i, (int)factors.get(0));"
True,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,src/test/java/org/apache/commons/math3/primes/PrimesTest.java,169,"Assert.assertEquals(1, factors.size());"

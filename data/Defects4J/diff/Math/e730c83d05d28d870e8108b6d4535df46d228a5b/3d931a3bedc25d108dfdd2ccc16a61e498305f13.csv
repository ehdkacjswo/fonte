is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,19,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,20,import org.apache.commons.math.analysis.integration.LegendreGaussIntegrator;
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,21,mport org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,77,@Test
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,78,public void testChebyshevOrthogonality() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,79,UnivariateRealFunction weight = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,80,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,81,return 1 / FastMath.sqrt(1 - x * x);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,84,for (int i = 0; i < 10; ++i) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,85,PolynomialFunction pi = PolynomialsUtils.createChebyshevPolynomial(i);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,86,for (int j = 0; j <= i; ++j) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,87,PolynomialFunction pj = PolynomialsUtils.createChebyshevPolynomial(j);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,88,"checkOrthogonality(pi, pj, weight, -0.9999, 0.9999, 1.5, 0.03);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,128,@Test
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,129,public void testHermiteOrthogonality() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,130,UnivariateRealFunction weight = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,131,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,132,return FastMath.exp(-x * x);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,135,for (int i = 0; i < 10; ++i) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,136,PolynomialFunction pi = PolynomialsUtils.createHermitePolynomial(i);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,137,for (int j = 0; j <= i; ++j) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,138,PolynomialFunction pj = PolynomialsUtils.createHermitePolynomial(j);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,139,"checkOrthogonality(pi, pj, weight, -50, 50, 1.5, 1.0e-8);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,185,@Test
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,186,public void testLaguerreOrthogonality() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,187,UnivariateRealFunction weight = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,188,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,189,return FastMath.exp(-x);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,192,for (int i = 0; i < 10; ++i) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,193,PolynomialFunction pi = PolynomialsUtils.createLaguerrePolynomial(i);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,194,for (int j = 0; j <= i; ++j) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,195,PolynomialFunction pj = PolynomialsUtils.createLaguerrePolynomial(j);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,196,"checkOrthogonality(pi, pj, weight, 0.0, 100.0, 0.99999, 1.0e-13);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,236,@Test
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,237,public void testLegendreOrthogonality() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,238,UnivariateRealFunction weight = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,239,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,240,return 1;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,243,for (int i = 0; i < 10; ++i) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,244,PolynomialFunction pi = PolynomialsUtils.createLegendrePolynomial(i);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,245,for (int j = 0; j <= i; ++j) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,246,PolynomialFunction pj = PolynomialsUtils.createLegendrePolynomial(j);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,247,"checkOrthogonality(pi, pj, weight, -1, 1, 0.1, 1.0e-13);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,211,ublic void testShift(){
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,276,public void testShift() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,320,"private void checkOrthogonality(final PolynomialFunction p1,"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,321,"final PolynomialFunction p2,"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,322,"final UnivariateRealFunction weight,"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,323,"final double a, final double b,"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,324,"final double nonZeroThreshold,"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,325,final double zeroThreshold) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,326,UnivariateRealFunction f = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,327,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,328,return weight.value(x) * p1.value(x) * p2.value(x);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,331,double dotProduct =
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,332,"new LegendreGaussIntegrator(5, 1.0e-9, 1.0e-8, 2, 15).integrate(1000000, f, a, b);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,333,if (p1.degree() == p2.degree()) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,334,// integral should be non-zero
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,335,"Assert.assertTrue(""I("" + p1.degree() + "", "" + p2.degree() + "") = ""+ dotProduct,"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,336,FastMath.abs(dotProduct) > nonZeroThreshold);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,337,} else {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,338,// integral should be zero
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,339,"Assert.assertEquals(""I("" + p1.degree() + "", "" + p2.degree() + "") = ""+ dotProduct,"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,340,"0.0, FastMath.abs(dotProduct), zeroThreshold);"

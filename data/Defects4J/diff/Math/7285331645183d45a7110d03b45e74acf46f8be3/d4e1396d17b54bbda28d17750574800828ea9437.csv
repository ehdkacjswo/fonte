is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,48, @throws org.apache.commons.math.exception.FunctionEvaluationException if the
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,49, objective function throws one during the search.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,57,"ealPointValuePair optimize(FUNC f, GoalType goalType, double[] startPoint)"
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,58,hrows FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,54,"RealPointValuePair optimize(FUNC f, GoalType goalType, double[] startPoint);"
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,50, @throws FunctionEvaluationException if the objective function throws one
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,51, during the search.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,60,ouble[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,61,hrows FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,57,double[] startPoint);
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,21,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,102, weights array must have consistent sizes or a {@link FunctionEvaluationException} will be
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,103, triggered while computing the scalar objective.
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,101,* weights array must have consistent sizes or a {@link DimensionMismatchException}
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,102,* will be triggered while computing the scalar objective.
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,108, @exception IllegalArgumentException if the observations vector and the weights
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,109, vector dimensions don't match (objective function dimension is checked only when
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,107,* @exception DimensionMismatchException if the observations vector and the weights
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,108,* vector dimensions do not match (objective function dimension is checked only when
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,116,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,117,"ocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,"
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,118,"bservations.length, weights.length);"
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,115,"throw new DimensionMismatchException(observations.length, weights.length);"
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,135, the scaling matrix must have consistent sizes or a {@link FunctionEvaluationException}
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,132,* the scaling matrix must have consistent sizes or a {@link DimensionMismatchException}
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,141, @exception IllegalArgumentException if the observations vector and the scale
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,142, matrix dimensions don't match (objective function dimension is checked only when
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,138,* @throws DimensionMismatchException if the observations vector and the scale
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,139,* matrix dimensions do not match (objective function dimension is checked only when
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,146,"inal double[] observations, final RealMatrix scale)"
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,147,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,143,"final double[] observations, final RealMatrix scale) {"
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,149,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,150,"ocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,"
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,151,"bservations.length, scale.getColumnDimension());"
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,145,"throw new DimensionMismatchException(observations.length, scale.getColumnDimension());"
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,160,ublic double value(final double[] point) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,154,public double value(final double[] point) {
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,165,"hrow new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,"
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,166,"esiduals.length, observations.length);"
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,158,"throw new DimensionMismatchException(residuals.length, observations.length);"
False,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,23,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,203, @throws FunctionEvaluationException if the function cannot be evaluated
False,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,204, at some point.
False,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,209,inal Comparator<RealPointValuePair> comparator)
False,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,210,hrows FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,206,final Comparator<RealPointValuePair> comparator);
False,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,244, @throws FunctionEvaluationException if no value can be computed for the parameters.
False,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,249,inal Comparator<RealPointValuePair> comparator)
False,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,250,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,244,final Comparator<RealPointValuePair> comparator) {
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,103, @throws FunctionEvaluationException if the function cannot be evaluated.
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,107,rotected double computeObjectiveValue(double[] point)
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,108,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,105,protected double computeObjectiveValue(double[] point) {
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,120,ouble[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,121,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,117,double[] startPoint) {
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,162, @return the point/value pair giving the optimal value for objective function
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,163, @throws FunctionEvaluationException if the objective function throws one during
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,164, the search
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,158,* @return the point/value pair giving the optimal value for objective function.
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,166,rotected abstract RealPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,167,hrows FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,160,protected abstract RealPointValuePair doOptimize();
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,105, @throws FunctionEvaluationException if the function cannot be evaluated.
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,109,rotected double[] computeObjectiveValue(double[] point)
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,110,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,107,protected double[] computeObjectiveValue(double[] point) {
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,122,ouble[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,123,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,119,double[] startPoint) {
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,165, @throws FunctionEvaluationException if the objective function throws one during
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,166, the search
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,168,rotected abstract VectorialPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,169,hrows FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,162,protected abstract VectorialPointValuePair doOptimize();
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,22,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,157,inal Comparator<RealPointValuePair> comparator)
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,158,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,156,final Comparator<RealPointValuePair> comparator) {
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,193, @throws FunctionEvaluationException if the function cannot be
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,194, evaluated at some point.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,201,inal Comparator<RealPointValuePair> comparator)
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,202,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,197,final Comparator<RealPointValuePair> comparator) {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,22,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,189,inal Comparator<RealPointValuePair> comparator)
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,190,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,188,final Comparator<RealPointValuePair> comparator) {
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,111,rotected RealPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,112,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,110,protected RealPointValuePair doOptimize() {
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,257, @throws FunctionEvaluationException if the function evaluation
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,258, fails.
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,263,inal double[] d)
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,264,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,259,final double[] d) {
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,268,ublic double value(double alpha)
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,269,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,262,public double value(double alpha) {
False,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,22,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,111,rotected RealPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,112,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,110,protected RealPointValuePair doOptimize() {
False,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,121,ublic double value(double[] point)
False,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,122,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,119,public double value(double[] point) {
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,23,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,60," <code>addObservedPoint(1.0, x, y)</code>.</p>"
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,59,"* {@code addObservedPoint(1.0, x, y)}.</p>"
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,120, @exception FunctionEvaluationException if the objective function throws one during
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,121, the search
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,128,inal double[] initialGuess)
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,129,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,125,final double[] initialGuess) {
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,166,ublic double[][] value(double[] point)
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,167,"hrows FunctionEvaluationException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,160,public double[][] value(double[] point) {
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,183,ublic double[] value(double[] point)
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,184,"hrows FunctionEvaluationException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,174,public double[] value(double[] point) {
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,22,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,32, <tt>f'(x) = (-b / (d^2)) * (x - c) * exp(-((x - c)^2) / (2*(d^2)))</tt>
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,31,* {@code f'(x) = (-b / (d^2)) * (x - c) * exp(-((x - c)^2) / (2*(d^2)))}
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,36, <li><tt>x^n</tt>: <tt>x</tt> raised to the power of <tt>n</tt>
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,37, <li><tt>exp(x)</tt>: <i>e</i><tt>^x</tt>
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,35,* <li>{@code x^n}: {@code x} raised to the power of {@code n}
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,36,* <li>{@code exp(x)}: <i>e</i><sup>x</sup>
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,60, @param b <tt>b</tt> parameter value
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,61, @param c <tt>c</tt> parameter value
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,62, @param d <tt>d</tt> parameter value
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,55,* @param b {@code b} parameter value.
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,56,* @param c {@code c} parameter value.
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,57,* @param d {@code d} parameter value.
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,78," @param parameters <tt>b</tt>, <tt>c</tt>, and <tt>d</tt> parameter values"
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,80," @throws IllegalArgumentException if <code>parameters</code> is null,"
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,81,"         <code>parameters</code> length is not 3, or if"
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,82,         <code>parameters[2]</code> is 0
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,73,"* @param parameters {@code b}, {@code c} and {@code d} parameter values."
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,74,* @throws NullArgumentException if {@code parameters} is {@code null}.
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,75,* @throws DimensionMismatchException if the size of {@code parameters} is
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,76,* not 3.
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,77,* @throws ZeroException if {@code parameters[2]} is 0.
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,100,ublic double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,95,public double value(double x) {
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,45,  GaussianFunction fitFunction = fitter.fit();
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,44,*   GaussianFunction fitFunction = fitter.fit();
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,67," Adds point (<code>x</code>, <code>y</code>) to list of observed points"
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,68, with a weight of 1.0.
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,65,"* Adds point ({@code x}, {@code y}) to list of observed points"
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,66,* with a weight of 1.
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,70, @param x <tt>x</tt> point value
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,71, @param y <tt>y</tt> point value
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,68,* @param x Abscissa value.
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,69,* @param y Ordinate value.
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,74,"ddObservedPoint(1.0, x, y);"
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,72,"addObservedPoint(1, x, y);"
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,78," Adds point (<code>x</code>, <code>y</code>) to list of observed points"
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,79, with a weight of <code>weight</code>.
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,76,"* Adds point ({@code x}, {@code y}) to list of observed points"
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,77,* with a weight of {@code weight}.
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,81, @param weight weight assigned to point
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,82, @param x <tt>x</tt> point value
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,83, @param y <tt>y</tt> point value
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,79,* @param weight Weight assigned to the given point.
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,80,* @param x Abscissa value.
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,81,* @param y Ordinate value.
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,89,* It will call {@link CurveFitter#fit()}.
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,92, @return Gaussian function best fitting the observed points
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,94, @throws FunctionEvaluationException if <code>CurveFitter.fit</code>
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,95,         throws it
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,96, @throws OptimizationException if <code>CurveFitter.fit</code> throws it
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,97, @throws IllegalArgumentException if <code>CurveFitter.fit</code> throws
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,98,         it
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,91,* @return the Gaussian function that best fits the observed points.
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,102,ublic GaussianFunction fit()
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,103,"hrows FunctionEvaluationException, OptimizationException {"
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,94,public GaussianFunction fit() {
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,109, Factory method to create a <code>GaussianParametersGuesser</code>
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,100,* Factory method to create a {@code GaussianParametersGuesser}
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,113,        <code>GaussianParametersGuesser</code> instance
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,115, @return new <code>GaussianParametersGuesser</code> instance
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,104,* {@code GaussianParametersGuesser} instance.
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,105,* @return a new {@code GaussianParametersGuesser} instance.
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java,22,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java,120,ublic double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java,119,public double value(double x) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,21,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,20,import org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,75,** Fit an harmonic function to the observed points.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,76, @return harmonic function best fitting the observed points
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,77, @throws OptimizationException if the sample is too short or if
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,78, the first guess cannot be computed
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,75,* Fit an harmonic function to the observed points.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,77,* @return harmonic Function that best fits the observed points.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,78,* @throws NumberIsTooSmallException if the sample is too short or if
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,79,* the first guess cannot be computed.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,81,ry {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,83,/ shall we compute the first guess of the parameters ourselves ?
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,84,f (parameters == null) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,85,inal WeightedObservedPoint[] observations = fitter.getObservations();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,86,f (observations.length < 4) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,87,"hrow new OptimizationException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,88,"bservations.length, 4);"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,91,armonicCoefficientsGuesser guesser = new HarmonicCoefficientsGuesser(observations);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,92,uesser.guess();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,93,arameters = new double[] {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,94,"uesser.getGuessedAmplitude(),"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,95,"uesser.getGuessedPulsation(),"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,96,uesser.getGuessedPhase()
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,82,// shall we compute the first guess of the parameters ourselves ?
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,83,if (parameters == null) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,84,final WeightedObservedPoint[] observations = fitter.getObservations();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,85,if (observations.length < 4) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,86,"throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,87,"observations.length, 4, true);"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,101,"ouble[] fitted = fitter.fit(new ParametricHarmonicFunction(), parameters);"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,102,"eturn new HarmonicFunction(fitted[0], fitted[1], fitted[2]);"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,104, catch (FunctionEvaluationException fee) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,105,/ this should never happen
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,106,hrow MathRuntimeException.createInternalError(fee);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,90,HarmonicCoefficientsGuesser guesser = new HarmonicCoefficientsGuesser(observations);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,91,guesser.guess();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,92,parameters = new double[] {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,93,"guesser.getGuessedAmplitude(),"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,94,"guesser.getGuessedPulsation(),"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,95,guesser.getGuessedPhase()
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,99,"double[] fitted = fitter.fit(new ParametricHarmonicFunction(), parameters);"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,100,"return new HarmonicFunction(fitted[0], fitted[1], fitted[2]);"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,22,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,32, <tt>f(x) = a + b*exp(-((x - c)^2 / (2*d^2)))</tt>
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,31,* {@code f(x) = a + b*exp(-((x - c)^2 / (2*d^2)))}
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,36, <li><tt>a</tt> is a constant offset that shifts <tt>f(x)</tt> up or down
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,37, <li><tt>b</tt> is the height of the peak
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,38, <li><tt>c</tt> is the position of the center of the peak
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,39, <li><tt>d</tt> is related to the FWHM by <tt>FWHM = 2*sqrt(2*ln(2))*d</tt>
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,35,* <li>{@code a} is a constant offset that shifts {@code f(x)} up or down
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,36,* <li>{@code b} is the height of the peak
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,37,* <li>{@code c} is the position of the center of the peak
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,38,* <li>{@code d} is related to the FWHM by {@code FWHM = 2*sqrt(2*ln(2))*d}
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,43, <li><tt>x^n</tt>: <tt>x</tt> raised to the power of <tt>n</tt>
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,44, <li><tt>exp(x)</tt>: <i>e</i><tt>^x</tt>
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,45, <li><tt>sqrt(x)</tt>: the square root of <tt>x</tt>
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,46, <li><tt>ln(x)</tt>: the natural logarithm of <tt>x</tt>
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,42,* <li>{@code x^n}: {@code x} raised to the power of {@code n}
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,43,* <li>{@code exp(x)}: e<sup>x</sup>
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,44,* <li>{@code sqrt(x)}: square root of {@code x}
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,45,* <li>{@code ln(x)}: natural logarithm of {@code x}
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,63, Constructs an instance.
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,65,ublic ParametricGaussianFunction() {
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,69, Computes value of function <tt>f(x)</tt> for the specified <tt>x</tt> and
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,70," parameters <tt>a</tt>, <tt>b</tt>, <tt>c</tt>, and <tt>d</tt>."
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,72, @param x <tt>x</tt> value
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,73," @param parameters values of <tt>a</tt>, <tt>b</tt>, <tt>c</tt>, and"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,74,        <tt>d</tt>
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,76, @return value of <tt>f(x)</tt> evaluated at <tt>x</tt> with the specified
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,77,         parameters
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,61,* Computes value of function {@code f(x)} for the specified {@code x} and
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,62,"* parameters {@code a}, {@code b}, {@code c}, and {@code d}."
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,79, @throws IllegalArgumentException if <code>parameters</code> is invalid as
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,80,         determined by {@link #validateParameters(double[])}
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,81, @throws FunctionEvaluationException if <code>parameters</code> values are
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,82,         invalid as determined by {@link #validateParameters(double[])}
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,64,* @param x Value at which to compute the function.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,65,* @return {@code f(x)}.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,66,"* @param parameters Values of {@code a}, {@code b}, {@code c}, and {@code d}."
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,67,* @throws NullArgumentException if {@code parameters} is {@code null}.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,68,* @throws DimensionMismatchException if the size of {@code parameters} is
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,69,* not 4.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,70,* @throws ZeroException if {@code parameters[3]} is 0.
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,84,"ublic double value(double x, double[] parameters) throws FunctionEvaluationException {"
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,72,"public double value(double x, double[] parameters) {"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,96," where the parameters, <tt>a</tt>, <tt>b</tt>, <tt>c</tt>, and <tt>d</tt>,"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,97," are considered the variables, not <tt>x</tt>.  That is, instead of"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,98, computing the gradient vector for the function <tt>f(x)</tt> (which would
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,99, just be the derivative of <tt>f(x)</tt> with respect to <tt>x</tt> since
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,84,"* where the parameters, {@code a}, {@code b}, {@code c}, and {@code d},"
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,85,"* are considered the variables, not {@code x}.  That is, instead of"
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,86,* computing the gradient vector for the function {@code f(x)} (which would
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,87,* just be the derivative of {@code f(x)} with respect to {@code x} since
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,101," function <tt>f(a, b, c, d) = a + b*exp(-((x - c)^2 / (2*d^2)))</tt>"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,102, treating the specified <tt>x</tt> as a constant.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,89,"* function {@code f(a, b, c, d) = a + b*exp(-((x - c)^2 / (2*d^2)))}"
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,90,* treating the specified {@code x} as a constant.
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,105," derivatives of <tt>f(a, b, c, d)</tt> with respect to each variable."
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,106," That is, the partial derivative of <tt>f(a, b, c, d)</tt> with respect to"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,107," <tt>a</tt>, the partial derivative of <tt>f(a, b, c, d)</tt> with respect"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,108," to <tt>b</tt>, the partial derivative of <tt>f(a, b, c, d)</tt> with"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,109," respect to <tt>c</tt>, and the partial derivative of <tt>f(a, b, c,"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,110, d)</tt> with respect to <tt>d</tt>.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,93,"* derivatives of {@code f(a, b, c, d)} with respect to each variable."
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,94,"* That is, the partial derivative of {@code f(a, b, c, d)} with respect to"
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,95,"* {@code a}, the partial derivative of {@code f(a, b, c, d)} with respect"
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,96,"* to {@code b}, the partial derivative of {@code f(a, b, c, d)} with"
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,97,"* respect to {@code c}, and the partial derivative of {@code f(a, b, c,"
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,98,* d)} with respect to {@code d}.
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,112," @param x <tt>x</tt> value to be used as constant in <tt>f(a, b, c,"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,113,        d)</tt>
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,114," @param parameters values of <tt>a</tt>, <tt>b</tt>, <tt>c</tt>, and"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,115,"        <tt>d</tt> for computation of gradient vector of <tt>f(a, b, c,"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,116,        d)</tt>
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,118," @return gradient vector of <tt>f(a, b, c, d)</tt>"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,120, @throws IllegalArgumentException if <code>parameters</code> is invalid as
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,121,         determined by {@link #validateParameters(double[])}
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,122, @throws FunctionEvaluationException if <code>parameters</code> values are
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,123,         invalid as determined by {@link #validateParameters(double[])}
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,100,"* @param x {@code x} value to be used as constant in {@code f(a, b, c, d)}."
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,101,"* @param parameters values of {@code a}, {@code b}, {@code c}, and"
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,102,"* {@code d} for computation of gradient vector of {@code f(a, b, c, d)}."
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,103,"* @return the gradient vector of {@code f(a, b, c, d)}."
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,104,"* @param parameters Values of {@code a}, {@code b}, {@code c}, and {@code d}."
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,105,* @throws NullArgumentException if {@code parameters} is {@code null}.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,106,* @throws DimensionMismatchException if the size of {@code parameters} is
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,107,* not 4.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,108,* @throws ZeroException if {@code parameters[3]} is 0.
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,125,"ublic double[] gradient(double x, double[] parameters) throws FunctionEvaluationException {"
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,110,"public double[] gradient(double x, double[] parameters) {"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,143, the <code>value</code> and <code>gradient</code> methods.
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,145," @param parameters values of <tt>a</tt>, <tt>b</tt>, <tt>c</tt>, and"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,146,        <tt>d</tt>
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,126,* the {@code value} and {@code gradient} methods.
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,148, @throws IllegalArgumentException if <code>parameters</code> is
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,149,         <code>null</code> or if <code>parameters</code> does not have
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,150,         length == 4
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,151, @throws FunctionEvaluationException if <code>parameters[3]</code>
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,152,         (<tt>d</tt>) is 0
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,128,"* @param parameters Values of {@code a}, {@code b}, {@code c}, and {@code d}."
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,129,* @throws NullArgumentException if {@code parameters} is {@code null}.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,130,* @throws DimensionMismatchException if the size of {@code parameters} is
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,131,* not 4.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,132,* @throws ZeroException if {@code parameters[3]} is 0.
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,154,rivate void validateParameters(double[] parameters) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,134,private void validateParameters(double[] parameters) {
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,161,f (parameters[3] == 0.0) {
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,141,if (parameters[3] == 0) {
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,32, @param x the point for which the function value should be computed
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,33, @param parameters function parameters
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,34, @return the value
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,35, @throws FunctionEvaluationException if the function evaluation fails
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,30,* @param x Point for which the function value should be computed.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,31,* @param parameters Function parameters.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,32,* @return the value.
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,37,"ouble value(double x, double[] parameters)"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,38,hrows FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,34,"double value(double x, double[] parameters);"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,42, @param x the point for which the function value should be computed
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,43, @param parameters function parameters
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,44, @return the value
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,45, @throws FunctionEvaluationException if the function evaluation fails
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,39,* @param x Point for which the function value should be computed.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,40,* @param parameters Function parameters.
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,41,* @return the value.
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,47,"ouble[] gradient(double x, double[] parameters)"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,48,hrows FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,43,"double[] gradient(double x, double[] parameters);"
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,21,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,79,ry {
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,80,"eturn new PolynomialFunction(fitter.fit(new ParametricPolynomial(), new double[degree + 1]));"
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,81, catch (FunctionEvaluationException fee) {
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,82,/ this should never happen
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,83,hrow MathRuntimeException.createInternalError(fee);
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,77,"return new PolynomialFunction(fitter.fit(new ParametricPolynomial(), new double[degree + 1]));"
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,93,"ublic double[] gradient(double x, double[] parameters)"
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,94,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,86,"public double[] gradient(double x, double[] parameters) {"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,98, @throws org.apache.commons.math.exception.FunctionEvaluationException
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,99, if the function Jacobian cannot be evaluated.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,124, @throws org.apache.commons.math.exception.FunctionEvaluationException
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,125, if the function cannot be evaluated.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,179, @throws org.apache.commons.math.exception.FunctionEvaluationException
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,180, if the function Jacobian cannot be evaluated.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,212, @throws org.apache.commons.math.exception.FunctionEvaluationException
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,213, if the function Jacobian cannot be evaluated.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,66, @throws FunctionEvaluationException if the function gradient cannot be
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,67, evaluated.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,71,rotected double[] computeObjectiveGradient(final double[] evaluationPoint)
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,72,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,68,protected double[] computeObjectiveGradient(final double[] evaluationPoint) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,80,inal double[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,81,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,76,final double[] startPoint) {
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,21,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,65,ublic VectorialPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,66,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,64,public VectorialPointValuePair doOptimize() {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,21,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,218,rotected VectorialPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,219,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,217,protected VectorialPointValuePair doOptimize() {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,112,rotected RealPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,113,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,111,protected RealPointValuePair doOptimize() {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,215, Find the upper bound b ensuring bracketing of a root between a and b
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,216, @param f function whose root must be bracketed
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,217, @param a lower bound of the interval
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,218, @param h initial step to try
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,219, @return b such that f(a) and f(b) have opposite signs
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,220, @exception FunctionEvaluationException if the function cannot be computed
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,221, @exception MathIllegalStateException if no bracket can be found
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,213,* Find the upper bound b ensuring bracketing of a root between a and b.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,215,* @param f function whose root must be bracketed.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,216,* @param a lower bound of the interval.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,217,* @param h initial step to try.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,218,* @return b such that f(a) and f(b) have opposite signs.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,219,* @exception MathIllegalStateException if no bracket can be found.
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,224,"inal double a, final double h)"
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,225,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,222,"final double a, final double h) {"
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,269,ublic double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,266,public double value(double x) {
False,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,46, @exception FunctionEvaluationException if no cost can be computed for the parameters
False,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,47, @exception IllegalArgumentException if point dimension is wrong
False,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,49,"ouble[] precondition(double[] point, double[] r)"
False,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,50,"hrows FunctionEvaluationException, IllegalArgumentException;"
True,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,44,"double[] precondition(double[] point, double[] r);"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,98, @throws FunctionEvaluationException if the function cannot be
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,99, evaluated.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,103,rotected double computeObjectiveValue(double point)
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,104,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,100,protected double computeObjectiveValue(double point) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,117,ouble startValue)
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,118,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,113,double startValue) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,142,"ouble min, double max)"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,143,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,137,"double min, double max) {"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,168, @throws FunctionEvaluationException if an error occurs evaluating
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,169, the function.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,171,rotected abstract UnivariateRealPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,172,hrows FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,163,protected abstract UnivariateRealPointValuePair doOptimize();
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,55, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,56, function.
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,61,"ouble min, double max)"
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,62,hrows FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,58,"double min, double max);"
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,79, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,80, function.
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,88,ouble startValue)
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,89,hrows FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,82,double startValue);
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,23,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,112, @throws FunctionEvaluationException if an error occurs evaluating
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,113, the function.
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,118,ouble xB)
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,119,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,115,double xB) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,283, @throws FunctionEvaluationException if function cannot be evaluated.
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,288,ouble x)
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,289,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,283,double x) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,19,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,89,rotected UnivariateRealPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,90,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,88,protected UnivariateRealPointValuePair doOptimize() {

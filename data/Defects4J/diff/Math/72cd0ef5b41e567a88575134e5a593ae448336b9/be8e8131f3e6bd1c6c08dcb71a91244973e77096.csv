is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,266,/** Compute the distance between the instance and a point.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,267,"*  This is a shortcut for invoking FastMath.abs(getOffset(p)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,268,*  and provides consistency with what is in the
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,269,*  org.apache.commons.math3.geometry.euclidean.threed.Line class.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,271,* @param p to check
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,272,* @return distance between the instance and the point
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,274,public double distance(final Vector2D p) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java,275,return FastMath.abs(getOffset(p));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,19,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,69,* Calculates the shortest distance from a point to this line segment.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,70,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,71,* If the perpendicular extension from the point to the line does not
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,72,"* cross in the bounds of the line segment, the shortest distance to"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,73,* the two end points will be returned.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,74,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,76,* Algorithm adapted from: http://www.codeguru.com/forum/printthread.php?s=cc8cf0596231f9a7dba4da6e77c29db3&t=194400&pp=15&page=1
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,78,public double distance(final Vector2D p) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,79,final double deltaX = end.getX() - start.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,80,final double deltaY = end.getY() - start.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,82,final double r = ((p.getX() - start.getX()) * deltaX + (p.getY() - start.getY()) * deltaY) /
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,83,(deltaX * deltaX + deltaY * deltaY);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,85,// r == 0 => P = startPt
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,86,// r == 1 => P = endPt
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,87,// r < 0 => P is on the backward extension of the segment
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,88,// r > 1 => P is on the forward extension of the segment
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,89,// 0 < r < 1 => P is on the segment
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,91,"// if point isn't on the line segment, just return the shortest distance to the end points"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,92,if (r < 0 || r > 1) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,93,final double dist1 = getStart().distance(p);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,94,final double dist2 = getEnd().distance(p);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,96,"return FastMath.min(dist1, dist2);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,98,else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,99,// find point on line and see if it is in the line segment
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,100,final double px = start.getX() + r * deltaX;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,101,final double py = start.getY() + r * deltaY;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,103,"final Vector2D interPt = new Vector2D(px, py);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java,104,return interPt.distance(p);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,66,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,67,public void testDistance() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,68,"Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,69,"Assert.assertEquals(+5.0, l.distance(new Vector2D(5, -3)), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,70,"Assert.assertEquals(+5.0, l.distance(new Vector2D(-5, 2)), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,17,package org.apache.commons.math3.geometry.euclidean.twod;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,19,import org.apache.commons.math3.geometry.euclidean.twod.Line;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,20,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,21,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,25,public class SegmentTest {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,27,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,28,public void testDistance() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,29,"Vector2D start = new Vector2D(2, 2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,30,"Vector2D end = new Vector2D(-2, -2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,31,"Segment segment = new Segment(start, end, new Line(start, end));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,33,// distance to center of segment
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,34,"Assert.assertEquals(FastMath.sqrt(2), segment.distance(new Vector2D(1, -1)), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,36,// distance a point on segment
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,37,"Assert.assertEquals(FastMath.sin(Math.PI / 4.0), segment.distance(new Vector2D(0, -1)), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,39,// distance to end point
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,40,"Assert.assertEquals(FastMath.sqrt(8), segment.distance(new Vector2D(0, 4)), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,42,// distance to start point
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java,43,"Assert.assertEquals(FastMath.sqrt(8), segment.distance(new Vector2D(0, -4)), 1.0e-10);"

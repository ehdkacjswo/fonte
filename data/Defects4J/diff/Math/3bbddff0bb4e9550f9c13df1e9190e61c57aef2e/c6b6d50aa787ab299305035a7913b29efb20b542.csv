is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,31,import org.apache.commons.math.geometry.partitioning.Region.Location;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,89,/** Get the intersection of the instance and another sub-line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,90,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,91,* This method is related to the {@link Line#intersection(Hyperplane)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,92,"* intersection} method in the {@link Line Line} class, but in addition"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,93,"* to compute the point along infinite lines, it also checks the point"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,94,* lies on both sub-line ranges.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,95,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,96,* @param subLine other sub-line which may intersect instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,97,"* @param includeEndPoints if true, endpoints are considered to belong to"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,98,"* instance (i.e. they are closed sets) and may be returned, otherwise endpoints"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,99,* are considered to not belong to instance (i.e. they are open sets) and intersection
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,100,* occurring on endpoints lead to null being returned
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,101,"* @return the intersection point if there is one, null if the sub-lines don't intersect"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,103,"public Vector2D intersection(final SubLine subLine, final boolean includeEndPoints) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,105,// retrieve the underlying lines
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,106,Line line1 = (Line) getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,107,Line line2 = (Line) subLine.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,109,// compute the intersection on infinite line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,110,Vector2D v2D = line1.intersection(line2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,112,// check location of point with respect to first sub-line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,113,Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,115,// check location of point with respect to second sub-line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,116,Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,118,if (includeEndPoints) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,119,return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,120,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,121,return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,100,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,101,public void testIntersectionInsideInside() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,102,"SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(3, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,103,"SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,104,"Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, true)),  1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,105,"Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, false)), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,108,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,109,public void testIntersectionInsideBoundary() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,110,"SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(3, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,111,"SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,112,"Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, true)),  1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,113,"Assert.assertNull(sub1.intersection(sub2, false));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,116,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,117,public void testIntersectionInsideOutside() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,118,"SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(3, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,119,"SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 0.5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,120,"Assert.assertNull(sub1.intersection(sub2, true));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,121,"Assert.assertNull(sub1.intersection(sub2, false));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,124,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,125,public void testIntersectionBoundaryBoundary() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,126,"SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(2, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,127,"SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,128,"Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, true)),  1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,129,"Assert.assertNull(sub1.intersection(sub2, false));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,132,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,133,public void testIntersectionBoundaryOutside() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,134,"SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(2, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,135,"SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 0.5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,136,"Assert.assertNull(sub1.intersection(sub2, true));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,137,"Assert.assertNull(sub1.intersection(sub2, false));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,140,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,141,public void testIntersectionOutsideOutside() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,142,"SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(1.5, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,143,"SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 0.5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,144,"Assert.assertNull(sub1.intersection(sub2, true));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,145,"Assert.assertNull(sub1.intersection(sub2, false));"

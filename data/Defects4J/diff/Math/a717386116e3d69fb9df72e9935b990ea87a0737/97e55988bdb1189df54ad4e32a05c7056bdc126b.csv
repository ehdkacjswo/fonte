is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,86,inal double fourTheta = 4 * theta;
False,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,87,inal double s         = oneMinusThetaH / 6.0;
False,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,88,inal double coeff1    = s * ((-fourTheta + 5) * theta - 1);
False,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,89,inal double coeff23   = s * (( fourTheta - 2) * theta - 2);
False,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,90,inal double coeff4    = s * ((-fourTheta - 1) * theta - 1);
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,86,final double fourTheta      = 4 * theta;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,87,final double oneMinusTheta  = 1 - theta;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,88,final double oneMinus2Theta = 1 - 2 * theta;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,89,final double s             = oneMinusThetaH / 6.0;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,90,final double coeff1        = s * ((-fourTheta + 5) * theta - 1);
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,91,final double coeff23       = s * (( fourTheta - 2) * theta - 2);
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,92,final double coeff4        = s * ((-fourTheta - 1) * theta - 1);
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,93,final double coeffDot1     = oneMinusTheta * oneMinus2Theta;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,94,final double coeffDot23    = 2 * theta * oneMinusTheta;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,95,final double coeffDot4     = -theta * oneMinus2Theta;
False,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,93,nterpolatedState[i] = currentState[i] +
False,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,94,oeff1  * yDotK[0][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,95,oeff23 * (yDotK[1][i] + yDotK[2][i]) +
False,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,96,oeff4  * yDotK[3][i];
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,97,final double yDot1  = yDotK[0][i];
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,98,final double yDot23 = yDotK[1][i] + yDotK[2][i];
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,99,final double yDot4  = yDotK[3][i];
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,100,interpolatedState[i] =
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,101,currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,102,interpolatedDerivatives[i] =
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,103,coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,125,1[i] = h * (a70 * yDotK[0][i] + a72 * yDotK[2][i] + a73 * yDotK[3][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,126,74 * yDotK[4][i] + a75 * yDotK[5][i]);
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,127,2[i] = h * yDotK[0][i] - v1[i];
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,128,3[i] = v1[i] - v2[i] - h * yDotK[6][i];
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,129,4[i] = h * (d0 * yDotK[0][i] + d2 * yDotK[2][i] + d3 * yDotK[3][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,130,4 * yDotK[4][i] + d5 * yDotK[5][i] + d6 * yDotK[6][i]);
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,125,final double yDot0 = yDotK[0][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,126,final double yDot2 = yDotK[2][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,127,final double yDot3 = yDotK[3][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,128,final double yDot4 = yDotK[4][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,129,final double yDot5 = yDotK[5][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,130,final double yDot6 = yDotK[6][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,131,v1[i] = h * (a70 * yDot0 + a72 * yDot2 + a73 * yDot3 + a74 * yDot4 + a75 * yDot5);
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,132,v2[i] = h * yDot0 - v1[i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,133,v3[i] = v1[i] - v2[i] - h * yDot6;
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,134,v4[i] = h * (d0 * yDot0 + d2 * yDot2 + d3 * yDot3 + d4 * yDot4 + d5 * yDot5 + d6 * yDot6);
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,143,final double twoTheta = 2 * theta;
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,144,final double dot2 = 1 - twoTheta;
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,145,final double dot3 = theta * (2 - 3 * theta);
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,146,final double dot4 = twoTheta * (1 + theta * (twoTheta - 3));
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,140,nterpolatedState[i] = currentState[i] -
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,141,ta * (v1[i] - theta * (v2[i] + theta * (v3[i] + eta * v4[i])));
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,148,interpolatedState[i] =
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,149,currentState[i] - eta * (v1[i] - theta * (v2[i] + theta * (v3[i] + eta * v4[i])));
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,150,interpolatedDerivatives[i] =
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,151,(v1[i] + dot2 * v2[i] + dot3 * v3[i] + dot4 * v4[i]) / h;
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,147,[0][i] = h * (b_01 * yDotK[0][i]  + b_06 * yDotK[5][i] + b_07 * yDotK[6][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,148,_08 * yDotK[7][i]  + b_09 * yDotK[8][i] + b_10 * yDotK[9][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,149,_11 * yDotK[10][i] + b_12 * yDotK[11][i]);
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,150,[1][i] = h * yDotK[0][i] - v[0][i];
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,151,[2][i] = v[0][i] - v[1][i] - h * yDotK[12][i];
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,152,or (int k = 0; k < d.length; ++k) {
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,153,[k+3][i] = h * (d[k][0] * yDotK[0][i]  + d[k][1] * yDotK[5][i]  + d[k][2] * yDotK[6][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,154,[k][3] * yDotK[7][i]  + d[k][4] * yDotK[8][i]  + d[k][5] * yDotK[9][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,155,[k][6] * yDotK[10][i] + d[k][7] * yDotK[11][i] + d[k][8] * yDotK[12][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,156,[k][9]  * yDotKLast[0][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,157,[k][10] * yDotKLast[1][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,158,[k][11] * yDotKLast[2][i]);
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,147,final double yDot1  = yDotK[0][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,148,final double yDot6  = yDotK[5][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,149,final double yDot7  = yDotK[6][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,150,final double yDot8  = yDotK[7][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,151,final double yDot9  = yDotK[8][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,152,final double yDot10 = yDotK[9][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,153,final double yDot11 = yDotK[10][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,154,final double yDot12 = yDotK[11][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,155,final double yDot13 = yDotK[12][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,156,final double yDot14 = yDotKLast[0][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,157,final double yDot15 = yDotKLast[1][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,158,final double yDot16 = yDotKLast[2][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,159,v[0][i] = h * (b_01 * yDot1  + b_06 * yDot6 + b_07 * yDot7 +
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,160,b_08 * yDot8  + b_09 * yDot9 + b_10 * yDot10 +
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,161,b_11 * yDot11 + b_12 * yDot12);
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,162,v[1][i] = h * yDot1 - v[0][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,163,v[2][i] = v[0][i] - v[1][i] - h * yDotK[12][i];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,164,for (int k = 0; k < d.length; ++k) {
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,165,v[k+3][i] = h * (d[k][0] * yDot1  + d[k][1]  * yDot6  + d[k][2]  * yDot7  +
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,166,d[k][3] * yDot8  + d[k][4]  * yDot9  + d[k][5]  * yDot10 +
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,167,d[k][6] * yDot11 + d[k][7]  * yDot12 + d[k][8]  * yDot13 +
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,168,d[k][9] * yDot14 + d[k][10] * yDot15 + d[k][11] * yDot16);
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,166,inal double eta = oneMinusThetaH / h;
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,176,final double eta      = oneMinusThetaH / h;
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,177,final double twoTheta = 2 * theta;
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,178,final double theta2   = theta * theta;
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,179,final double dot1 = 1 - twoTheta;
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,180,final double dot2 = theta * (2 - 3 * theta);
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,181,final double dot3 = twoTheta * (1 + theta * (twoTheta -3));
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,182,final double dot4 = theta2 * (3 + theta * (5 * theta - 8));
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,183,final double dot5 = theta2 * (3 + theta * (-12 + theta * (15 - 6 * theta)));
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,184,final double dot6 = theta2 * theta * (4 + theta * (-15 + theta * (18 - 7 * theta)));
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,191,interpolatedDerivatives[i] =
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,192,(v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] + dot3 * v[3][i] +
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,193,dot4 * v[4][i] + dot5 * v[5][i] + dot6 * v[6][i]) / h;
False,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,27, <p>This interpolator allow to compute dense output inside the last
True,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,27,* <p>This interpolator computes dense output inside the last
True,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,46,/** Serializable version identifier */
True,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,47,private static final long serialVersionUID = -7179861704951334960L;
True,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,84,"System.arraycopy(yDotK[0], 0, interpolatedDerivatives, 0, interpolatedDerivatives.length);"
False,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,84,** Serializable version identifier */
False,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,85,rivate static final long serialVersionUID = -7179861704951334960L;
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,83,final double twoTheta  = 2 * theta;
False,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,85,inal double soMt      = s * (1 - theta);
False,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,86,inal double c23       = soMt * (1 + 2 * theta);
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,86,final double oMt       = 1 - theta;
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,87,final double soMt      = s * oMt;
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,88,final double c23       = soMt * (1 + twoTheta);
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,93,final double coeffDot1 = theta * (twoTheta - 3) + 1;
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,94,final double cDot23    = theta * oMt;
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,95,final double coeffDot2 = cDot23  * tMq;
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,96,final double coeffDot3 = cDot23  * tPq;
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,97,final double coeffDot4 = theta * (twoTheta - 1);
False,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,93,nterpolatedState[i] = currentState[i] -
False,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,94,oeff1 * yDotK[0][i] - coeff2 * yDotK[1][i] -
False,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,95,oeff3 * yDotK[2][i] - coeff4 * yDotK[3][i];
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,100,final double yDot1 = yDotK[0][i];
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,101,final double yDot2 = yDotK[1][i];
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,102,final double yDot3 = yDotK[2][i];
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,103,final double yDot4 = yDotK[3][i];
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,104,interpolatedState[i] =
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,105,currentState[i] - coeff1 * yDot1 - coeff2 * yDot2 - coeff3 * yDot3 - coeff4 * yDot4;
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,106,interpolatedDerivatives[i] =
True,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,107,coeffDot1 * yDot1 + coeffDot2 * yDot2 + coeffDot3 * yDot3 + coeffDot4 * yDot4;
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,315,ouble t4                  = theta * oneMinusTheta;
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,316,4 = t4 * t4;
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,315,final double tOmT          = theta * oneMinusTheta;
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,316,final double t4            = tOmT * tOmT;
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,317,final double t4Dot         = 2 * tOmT * (1 - 2 * theta);
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,318,final double dot1          = 1.0 / h;
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,319,final double dot2          = theta * (2 - 3 * theta) / h;
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,320,final double dot3          = ((3 * theta - 4) * theta + 1) / h;
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,319,nterpolatedState[i] = polynoms[0][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,320,heta * (polynoms[1][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,321,neMinusTheta * (polynoms[2][i] * theta +
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,322,olynoms[3][i] * oneMinusTheta));
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,324,f (currentDegree > 3) {
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,325,ouble c = polynoms[currentDegree][i];
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,326,or (int j = currentDegree - 1; j > 3; --j) {
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,327, = polynoms[j][i] + c * theta05 / (j - 3);
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,324,final double p0 = polynoms[0][i];
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,325,final double p1 = polynoms[1][i];
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,326,final double p2 = polynoms[2][i];
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,327,final double p3 = polynoms[3][i];
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,328,interpolatedState[i] = p0 + theta * (p1 + oneMinusTheta * (p2 * theta + p3 * oneMinusTheta));
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,329,interpolatedDerivatives[i] = dot1 * p1 + dot2 * p2 + dot3 * p3;
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,331,if (currentDegree > 3) {
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,332,double cDot = 0;
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,333,double c = polynoms[currentDegree][i];
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,334,for (int j = currentDegree - 1; j > 3; --j) {
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,335,final double d = 1.0 / (j - 3);
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,336,cDot = d * (theta05 * cDot + c);
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,337,c = polynoms[j][i] + c * d * theta05;
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,339,interpolatedState[i]       += t4 * c;
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,340,interpolatedDerivatives[i] += (t4 * cDot + t4Dot * c) / h;
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,329,nterpolatedState[i] += t4 * c;
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,77,final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,78,final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,79,final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,80,final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,81,final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);
False,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,79,nterpolatedState[i] = currentState[i] +
False,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,80,0 * yDotK[0][i] + b2 * yDotK[2][i] + b3 * yDotK[3][i] +
False,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,81,4 * yDotK[4][i] + b5 * yDotK[5][i];
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,84,final double yDot0 = yDotK[0][i];
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,85,final double yDot2 = yDotK[2][i];
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,86,final double yDot3 = yDotK[3][i];
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,87,final double yDot4 = yDotK[4][i];
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,88,final double yDot5 = yDotK[5][i];
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,89,interpolatedState[i] =
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,90,currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,91,interpolatedDerivatives[i] =
True,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,92,bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;
False,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,28, <p>This interpolator allow to compute dense output inside the last
True,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,28,* <p>This interpolator computes dense output inside the last
False,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,80,inal double coeff1 = oneMinusThetaH * theta;
False,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,81,inal double coeff2 = oneMinusThetaH * (1.0 + theta);
True,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,80,final double coeff1    = oneMinusThetaH * theta;
True,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,81,final double coeff2    = oneMinusThetaH * (1.0 + theta);
True,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,82,final double coeffDot2 = 2 * theta;
True,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,83,final double coeffDot1 = 1 - coeffDot2;
False,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,84,nterpolatedState[i] = currentState[i] +
False,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,85,oeff1 * yDotK[0][i] - coeff2 * yDotK[1][i];
True,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,86,final double yDot1 = yDotK[0][i];
True,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,87,final double yDot2 = yDotK[1][i];
True,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,88,interpolatedState[i] = currentState[i] + coeff1 * yDot1 - coeff2 * yDot2;
True,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,89,interpolatedDerivatives[i] = coeffDot1 * yDot1 + coeffDot2 * yDot2;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,47, EmbeddedRungeKuttaIntegrator} classes uses the prototyping design
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,47,* EmbeddedRungeKuttaIntegrator} classes use the prototyping design
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,176,** Reference to the differential equations beeing integrated. */
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,176,/** Reference to the differential equations being integrated. */
True,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,91,final double coeffDot3  = 0.75 * theta;
True,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,92,final double coeffDot1  = coeffDot3 * (4 * theta - 5) + 1;
True,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,93,final double coeffDot2  = coeffDot3 * (5 - 6 * theta);
True,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,94,final double coeffDot4  = coeffDot3 * (2 * theta - 1);
False,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,93,nterpolatedState[i] = currentState[i] -
False,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,94,oeff1 * yDotK[0][i] - coeff2 * yDotK[1][i] -
False,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,95,oeff3 * yDotK[2][i] - coeff4 * yDotK[3][i];
True,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,97,final double yDot1 = yDotK[0][i];
True,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,98,final double yDot2 = yDotK[1][i];
True,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,99,final double yDot3 = yDotK[2][i];
True,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,100,final double yDot4 = yDotK[3][i];
True,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,101,interpolatedState[i] =
True,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,102,currentState[i] - coeff1 * yDot1 - coeff2 * yDot2 - coeff3 * yDot3 - coeff4 * yDot4;
True,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,103,interpolatedDerivatives[i] =
True,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,104,coeffDot1 * yDot1 + coeffDot2 * yDot2 + coeffDot3 * yDot3 + coeffDot4 * yDot4;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,67,/** interpolated derivatives */
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,68,protected double[] interpolatedDerivatives;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,84,reviousTime      = Double.NaN;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,85,urrentTime       = Double.NaN;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,86,                 = Double.NaN;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,87,nterpolatedTime  = Double.NaN;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,88,urrentState      = null;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,89,nterpolatedState = null;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,90,inalized         = false;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,91,his.forward      = true;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,87,previousTime            = Double.NaN;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,88,currentTime             = Double.NaN;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,89,h                       = Double.NaN;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,90,interpolatedTime        = Double.NaN;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,91,currentState            = null;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,92,interpolatedState       = null;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,93,interpolatedDerivatives = null;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,94,finalized               = false;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,95,this.forward            = true;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,106,urrentState      = y;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,107,nterpolatedState = new double[y.length];
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,110,currentState            = y;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,111,interpolatedState       = new double[y.length];
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,112,interpolatedDerivatives = new double[y.length];
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,139,urrentState      = (double[]) interpolator.currentState.clone();
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,140,nterpolatedState = (double[]) interpolator.interpolatedState.clone();
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,144,currentState            = (double[]) interpolator.currentState.clone();
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,145,interpolatedState       = (double[]) interpolator.interpolatedState.clone();
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,146,interpolatedDerivatives = (double[]) interpolator.interpolatedDerivatives.clone();
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,142,urrentState      = null;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,143,nterpolatedState = null;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,148,currentState            = null;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,149,interpolatedState       = null;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,150,interpolatedDerivatives = null;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,163,urrentState      = y;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,164,nterpolatedState = new double[y.length];
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,170,currentState            = y;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,171,interpolatedState       = new double[y.length];
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,172,interpolatedDerivatives = new double[y.length];
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,171,** Copy the instance.
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,172, <p>The copied instance is guaranteed to be independent from the
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,173, original one. Both can be used with different settings for
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,174, interpolated time without any side effect.</p>
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,175," @return a deep copy of the instance, which can be used independently."
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,176, @throws DerivativeException if this call induces an automatic
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,177, step finalization that throws one
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,178, @see #setInterpolatedTime(double)
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,179,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,224, Get the previous grid point time.
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,225, @return previous grid point time
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,223,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,232, Get the current grid point time.
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,233, @return current grid point time
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,228,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,240, Get the time of the interpolated point.
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,241," If {@link #setInterpolatedTime} has not been called, it returns"
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,242, the current grid point time.
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,243, @return interpolation point time
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,233,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,250, Set the time of the interpolated point.
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,251, <p>Setting the time outside of the current step is now allowed
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,252," (it was not allowed up to version 5.4 of Mantissa), but should be"
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,253, used with care since the accuracy of the interpolator will
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,254, probably be very poor far from this step. This allowance has been
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,255, added to simplify implementation of search algorithms near the
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,256, step endpoints.</p>
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,257, @param time time of the interpolated point
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,258, @throws DerivativeException if this call induces an automatic
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,259, step finalization that throws one
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,238,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,268,** Check if the natural integration direction is forward.
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,269, <p>This method provides the integration direction as specified by the
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,270," integrator itself, it avoid some nasty problems in degenerated"
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,271," cases like null steps due to cancellation at step initialization,"
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,272, step control or discrete events triggering.</p>
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,273, @return true if the integration variable (time) increases during
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,274, integration
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,246,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,295, Get the state vector of the interpolated point.
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,296, @return state vector at time {@link #getInterpolatedTime}
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,265,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,299,eturn (double[]) interpolatedState.clone();
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,267,return interpolatedState;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,270,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,271,public double[] getInterpolatedDerivatives() {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,272,return interpolatedDerivatives;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,363,** Write the instance to an output channel.
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,364, @param out output channel
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,365, @exception IOException if the instance cannot be written
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,335,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,370,** Read the instance from an input channel.
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,371, @param in input channel
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,372, @exception IOException if the instance cannot be read
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,339,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,434,nterpolatedTime  = Double.NaN;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,435,nterpolatedState = new double[dimension];
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,400,interpolatedTime        = Double.NaN;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,401,interpolatedState       = new double[dimension];
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,402,interpolatedDerivatives = new double[dimension];
True,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,20,import org.apache.commons.math.ode.DerivativeException;
False,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,46," StepNormalizer} class reuse the same array on each call, so if"
True,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,47,"* StepNormalizer} class reuses the same array on each call, so if"
True,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,48,* the instance wants to keep it across all calls (for example to
True,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,49,* provide at the end of the integration a complete array of all
True,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,50,"* steps), it should build a local copy store this copy."
True,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,51,* @param yDot derivatives of the state vector state vector at t.
True,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,52,"* For efficiency purposes, the {@link StepNormalizer} class reuses"
True,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,53,"* the same array on each call, so if"
True,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,58,* @throws DerivativeException if some error condition is encountered
False,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,53,"ublic void handleStep(double t, double[] y, boolean isLast);"
True,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,60,"public void handleStep(double t, double[] y, double[] yDot, boolean isLast)"
True,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,61,throws DerivativeException;
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,85,"* <p>The returned vector is a reference to a reused array, so"
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,86,* it should not be modified and it should be copied if it needs
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,87,* to be preserved across several calls.</p>
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,89,* @see #getInterpolatedDerivatives()
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,94,* Get the derivatives of the state vector of the interpolated point.
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,95,"* <p>The returned vector is a reference to a reused array, so"
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,96,* it should not be modified and it should be copied if it needs
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,97,* to be preserved across several calls.</p>
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,98,* @return derivatives of the state vector at time {@link #getInterpolatedTime}
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,99,* @see #getInterpolatedState()
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,101,public double[] getInterpolatedDerivatives();
False,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,53,rivate static final long serialVersionUID = -973517244031912577L;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,53,private static final long serialVersionUID = -789699939659144654L;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,67,/** Last Derivatives vector. */
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,68,private double[] lastDerivatives;
False,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,95,astTime  = Double.NaN;
False,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,96,astState = null;
False,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,97,orward   = true;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,98,lastTime        = Double.NaN;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,99,lastState       = null;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,100,lastDerivatives = null;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,101,forward         = true;
False,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,121,inal double[] state = interpolator.getInterpolatedState();
False,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,122,astState = (double[]) state.clone();
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,124,lastState = interpolator.getInterpolatedState().clone();
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,125,lastDerivatives = interpolator.getInterpolatedDerivatives().clone();
False,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,137,"andler.handleStep(lastTime, lastState, false);"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,140,"handler.handleStep(lastTime, lastState, lastDerivatives, false);"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,147,"System.arraycopy(interpolator.getInterpolatedDerivatives(), 0,"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,148,"lastDerivatives, 0, lastDerivatives.length);"
False,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,153,"andler.handleStep(lastTime, lastState, true);"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,158,"handler.handleStep(lastTime, lastState, lastDerivatives, true);"
False,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,20,mport junit.framework.*;
False,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,21,mport java.util.Random;
False,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,22,mport java.io.ByteArrayOutputStream;
False,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,24,mport java.io.ObjectOutputStream;
False,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,25,mport java.io.ObjectInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,21,import java.io.ByteArrayOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,23,import java.io.ObjectInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,24,import java.io.ObjectOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,25,import java.util.Random;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,27,import junit.framework.Test;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,28,import junit.framework.TestSuite;
False,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,31,mport org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator;
False,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,34,xtends TestCase {
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,35,extends AbstractStepInterpolatorTest {
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,41,public void testDerivativesConsistency()
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,42,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,43,TestProblem3 pb = new TestProblem3();
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,44,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,45,ClassicalRungeKuttaIntegrator integ = new ClassicalRungeKuttaIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,46,"checkDerivativesConsistency(integ, pb, 1.0e-10);"
False,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,36,xtends TestCase {
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,36,extends AbstractStepInterpolatorTest {
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,42,public void testDerivativesConsistency()
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,43,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,44,TestProblem3 pb = new TestProblem3(0.1);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,45,double minStep = 0;
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,46,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,47,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,48,double scalRelativeTolerance = scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,49,"DormandPrince54Integrator integ = new DormandPrince54Integrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,50,"scalAbsoluteTolerance,"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,51,scalRelativeTolerance);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,52,"checkDerivativesConsistency(integ, pb, 1.0e-10);"
False,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,36,xtends TestCase {
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,36,extends AbstractStepInterpolatorTest {
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,42,public void testDerivativesConsistency()
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,43,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,44,TestProblem3 pb = new TestProblem3(0.1);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,45,double minStep = 0;
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,46,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,47,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,48,double scalRelativeTolerance = scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,49,"DormandPrince853Integrator integ = new DormandPrince853Integrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,50,"scalAbsoluteTolerance,"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,51,scalRelativeTolerance);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,52,"checkDerivativesConsistency(integ, pb, 1.0e-10);"
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,20,mport junit.framework.*;
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,21,mport java.util.Random;
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,22,mport java.io.ByteArrayOutputStream;
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,24,mport java.io.ObjectOutputStream;
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,25,mport java.io.ObjectInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,21,import java.io.ByteArrayOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,23,import java.io.ObjectInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,24,import java.io.ObjectOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,25,import java.util.Random;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,27,import junit.framework.Test;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,28,import junit.framework.TestSuite;
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,32,mport org.apache.commons.math.ode.nonstiff.EulerIntegrator;
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,33,mport org.apache.commons.math.ode.nonstiff.EulerStepInterpolator;
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,36,xtends TestCase {
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,36,extends AbstractStepInterpolatorTest {
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,96,hrows DerivativeException {
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,96,throws DerivativeException {
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,120,public void testDerivativesConsistency()
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,121,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,122,TestProblem3 pb = new TestProblem3();
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,123,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,124,EulerIntegrator integ = new EulerIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,125,"checkDerivativesConsistency(integ, pb, 1.0e-10);"
False,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,34,xtends TestCase {
True,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,34,extends AbstractStepInterpolatorTest {
True,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,40,public void testDerivativesConsistency()
True,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,41,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,42,TestProblem3 pb = new TestProblem3();
True,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,43,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,44,GillIntegrator integ = new GillIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,45,"checkDerivativesConsistency(integ, pb, 1.0e-10);"
False,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,36,xtends TestCase {
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,36,extends AbstractStepInterpolatorTest {
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,42,public void testDerivativesConsistency()
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,43,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,44,TestProblem3 pb = new TestProblem3(0.9);
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,45,double minStep   = 0;
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,46,double maxStep   = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,47,double absTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,48,double relTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,50,GraggBulirschStoerIntegrator integ =
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,51,"new GraggBulirschStoerIntegrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,52,"absTolerance, relTolerance);"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,53,"checkDerivativesConsistency(integ, pb, 1.0e-8);"
False,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,36,xtends TestCase {
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,36,extends AbstractStepInterpolatorTest {
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,42,public void testDerivativesConsistency()
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,43,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,44,TestProblem3 pb = new TestProblem3(0.1);
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,45,double minStep = 0;
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,46,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,47,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,48,double scalRelativeTolerance = scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,49,"HighamHall54Integrator integ = new HighamHall54Integrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,50,"scalAbsoluteTolerance,"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,51,scalRelativeTolerance);
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,52,"checkDerivativesConsistency(integ, pb, 1.0e-10);"
False,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,20,mport junit.framework.*;
False,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,21,mport java.util.Random;
False,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,22,mport java.io.ByteArrayOutputStream;
False,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,24,mport java.io.ObjectOutputStream;
False,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,25,mport java.io.ObjectInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,21,import java.io.ByteArrayOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,23,import java.io.ObjectInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,24,import java.io.ObjectOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,25,import java.util.Random;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,27,import junit.framework.Test;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,28,import junit.framework.TestSuite;
False,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,31,mport org.apache.commons.math.ode.nonstiff.MidpointIntegrator;
False,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,34,xtends TestCase {
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,35,extends AbstractStepInterpolatorTest {
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,41,public void testDerivativesConsistency()
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,42,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,43,TestProblem3 pb = new TestProblem3();
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,44,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,45,MidpointIntegrator integ = new MidpointIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,46,"checkDerivativesConsistency(integ, pb, 1.0e-10);"
False,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,20,mport junit.framework.*;
False,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,21,mport java.util.Random;
False,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,22,mport java.io.ByteArrayOutputStream;
False,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,24,mport java.io.ObjectOutputStream;
False,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,25,mport java.io.ObjectInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,21,import java.io.ByteArrayOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,23,import java.io.ObjectInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,24,import java.io.ObjectOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,25,import java.util.Random;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,27,import junit.framework.Test;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,28,import junit.framework.TestSuite;
False,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,31,mport org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator;
False,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,34,xtends TestCase {
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,35,extends AbstractStepInterpolatorTest {
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,41,public void testDerivativesConsistency()
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,42,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,43,TestProblem3 pb = new TestProblem3();
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,44,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,45,ThreeEighthesIntegrator integ = new ThreeEighthesIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,46,"checkDerivativesConsistency(integ, pb, 1.0e-10);"
True,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,48,"double[] yDot,"
True,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,74,"double[] yDot,"

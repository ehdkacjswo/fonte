is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractDifferentiableUnivariateSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractDifferentiableUnivariateSolver.java,29,"* @deprecated as of 3.1, replaced by {@link AbstractUnivariateDifferentiableSolver}"
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractDifferentiableUnivariateSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractDifferentiableUnivariateSolver.java,31,@Deprecated
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,18,package org.apache.commons.math3.analysis.solvers;
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,20,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,21,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,24,* Provide a default implementation for several functions useful to generic
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,25,* solvers.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,27,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,28,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,30,public abstract class AbstractUnivariateDifferentiableSolver
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,31,extends BaseAbstractUnivariateSolver<UnivariateDifferentiable>
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,32,implements UnivariateDifferentiableSolver {
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,34,/** Function to solve. */
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,35,private UnivariateDifferentiable function;
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,38,* Construct a solver with given absolute accuracy.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,40,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,42,protected AbstractUnivariateDifferentiableSolver(final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,43,super(absoluteAccuracy);
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,47,* Construct a solver with given accuracies.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,49,* @param relativeAccuracy Maximum relative error.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,50,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,51,* @param functionValueAccuracy Maximum function value error.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,53,"protected AbstractUnivariateDifferentiableSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,54,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,55,final double functionValueAccuracy) {
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,56,"super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);"
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,60,* Compute the objective function value.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,62,* @param point Point at which the objective function must be evaluated.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,63,* @return the objective function value and derivative at specified point.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,64,* @throws org.apache.commons.math3.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,65,* if the maximal number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,67,protected DerivativeStructure computeObjectiveValueAndDerivative(double point) {
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,68,incrementEvaluationCount();
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,69,"return function.value(new DerivativeStructure(1, 1, 0, point));"
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,73,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,75,@Override
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,76,"protected void setup(int maxEval, UnivariateDifferentiable f,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,77,"double min, double max, double startValue) {"
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,78,"super.setup(maxEval, f, min, max, startValue);"
True,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java,79,function = f;
False,src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java,290, See e.g. {@link AbstractDifferentiableUnivariateSolver}.
True,src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java,290,* See e.g. {@link AbstractUnivariateDifferentiableSolver}.
True,src/main/java/org/apache/commons/math3/analysis/solvers/DifferentiableUnivariateSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/DifferentiableUnivariateSolver.java,27,"* @deprecated as of 3.1, replaced by {@link UnivariateDifferentiableSolver}"
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,18,package org.apache.commons.math3.analysis.solvers;
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,20,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,21,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,22,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,25,"* Implements <a href=""http://mathworld.wolfram.com/NewtonsMethod.html"">"
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,26,* Newton's Method</a> for finding zeros of real univariate differentiable
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,27,* functions.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,29,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,30,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,32,public class NewtonRaphsonSolver extends AbstractUnivariateDifferentiableSolver {
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,33,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,34,private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,37,* Construct a solver.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,39,public NewtonRaphsonSolver() {
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,40,this(DEFAULT_ABSOLUTE_ACCURACY);
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,43,* Construct a solver.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,45,* @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,47,public NewtonRaphsonSolver(double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,48,super(absoluteAccuracy);
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,52,* Find a zero near the midpoint of {@code min} and {@code max}.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,54,* @param f Function to solve.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,55,* @param min Lower bound for the interval.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,56,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,57,* @param maxEval Maximum number of evaluations.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,58,* @return the value where the function is zero.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,59,* @throws org.apache.commons.math3.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,60,* if the maximum evaluation count is exceeded.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,61,* @throws org.apache.commons.math3.exception.NumberIsTooLargeException
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,62,* if {@code min >= max}.
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,64,@Override
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,65,"public double solve(int maxEval, final UnivariateDifferentiable f,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,66,"final double min, final double max) {"
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,67,"return super.solve(maxEval, f, UnivariateSolverUtils.midpoint(min, max));"
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,71,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,73,@Override
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,74,protected double doSolve() {
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,75,final double startValue = getStartValue();
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,76,final double absoluteAccuracy = getAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,78,double x0 = startValue;
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,79,double x1;
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,80,while (true) {
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,81,final DerivativeStructure y0 = computeObjectiveValueAndDerivative(x0);
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,82,x1 = x0 - (y0.getValue() / y0.getPartialDerivative(1));
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,83,if (FastMath.abs(x1 - x0) <= absoluteAccuracy) {
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,84,return x1;
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java,87,x0 = x1;
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonSolver.java,29,"* @deprecated as of 3.1, replaced by {@link NewtonRaphsonSolverTest}"
True,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/NewtonSolver.java,32,@Deprecated
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,17,package org.apache.commons.math3.analysis.solvers;
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,19,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,23,* Interface for (univariate real) rootfinding algorithms.
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,24,* Implementations will search for only one zero in the given interval.
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,26,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,27,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,29,public interface UnivariateDifferentiableSolver
True,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java,30,extends BaseUnivariateSolver<UnivariateDifferentiable> {}
False,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,20,mport org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
False,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,153,ifferentiableUnivariateFunction df = new DifferentiableUnivariateFunction() {
False,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,154,ublic double value(double x) {
False,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,155,eturn f.value(x);
False,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,158,ublic UnivariateFunction derivative() {
False,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,159,eturn new UnivariateFunction() {
False,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,160,ublic double value(double x) {
False,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,161,"eturn f.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1);"
False,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,166,ewtonSolver newton = new NewtonSolver(1.0e-12);
True,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,152,NewtonRaphsonSolver newton = new NewtonRaphsonSolver(1.0e-12);
False,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,171,"esultN = newton.solve(100, df, min, max);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,157,"resultN = newton.solve(100, f, min, max);"
False,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,177,"esultB = bracketing.solve(100, df, min, max);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,163,"resultB = bracketing.solve(100, f, min, max);"
False,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,183,ssert.assertTrue(bracketing.getEvaluations() < newton.getEvaluations());
True,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,170,"// bracketing solver evaluates only function value, we set the weight to 1"
True,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,171,final int weightedBracketingEvaluations = bracketing.getEvaluations();
True,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,173,"// Newton-Raphson solver evaluates both function value and derivative, we set the weight to 2"
True,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,174,final int weightedNewtonEvaluations = 2 * newton.getEvaluations();
True,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java,176,Assert.assertTrue(weightedBracketingEvaluations < weightedNewtonEvaluations);
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,17,package org.apache.commons.math3.analysis.solvers;
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,19,import org.apache.commons.math3.analysis.QuinticFunction;
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,20,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,21,import org.apache.commons.math3.analysis.function.Sin;
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,22,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,28,* @version $Id$
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,30,public final class NewtonRaphsonSolverTest {
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,34,@Test
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,35,public void testSinZero() {
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,36,UnivariateDifferentiable f = new Sin();
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,37,double result;
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,39,NewtonRaphsonSolver solver = new NewtonRaphsonSolver();
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,40,"result = solver.solve(100, f, 3, 4);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,41,"Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,43,"result = solver.solve(100, f, 1, 4);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,44,"Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,46,Assert.assertTrue(solver.getEvaluations() > 0);
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,52,@Test
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,53,public void testQuinticZero() {
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,54,final UnivariateDifferentiable f = new QuinticFunction();
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,55,double result;
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,57,NewtonRaphsonSolver solver = new NewtonRaphsonSolver();
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,58,"result = solver.solve(100, f, -0.2, 0.2);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,59,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,61,"result = solver.solve(100, f, -0.1, 0.3);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,62,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,64,"result = solver.solve(100, f, -0.3, 0.45);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,65,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,67,"result = solver.solve(100, f, 0.3, 0.7);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,68,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,70,"result = solver.solve(100, f, 0.2, 0.6);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,71,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,73,"result = solver.solve(100, f, 0.05, 0.95);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,74,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,76,"result = solver.solve(100, f, 0.85, 1.25);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,77,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,79,"result = solver.solve(100, f, 0.8, 1.2);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,80,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,82,"result = solver.solve(100, f, 0.85, 1.75);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,83,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,85,"result = solver.solve(100, f, 0.55, 1.45);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,86,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,88,"result = solver.solve(100, f, 0.85, 5);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java,89,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonSolverTest.java,32,* @deprecated
True,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/NewtonSolverTest.java,34,@Deprecated

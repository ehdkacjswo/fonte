is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,33,import org.apache.commons.math3.util.FastMath;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,130,** Observed points. */
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,131,rivate final WeightedObservedPoint[] observations;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,132,** Resulting guessed parameters. */
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,133,rivate double[] parameters;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,131,/** Normalization factor. */
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,132,private final double norm;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,133,/** Mean. */
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,134,private final double mean;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,135,/** Standard deviation. */
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,136,private final double sigma;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,138, @param observations observed points upon which should base guess
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,141,* @param observations Observed points from which to guess the
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,142,* parameters of the Gaussian.
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,143,* @throws NullArgumentException if {@code observations} is
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,144,* {@code null}.
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,145,* @throws NumberIsTooSmallException if there are less than 3
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,146,* observations.
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,147,his.observations = observations.clone();
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,156,final WeightedObservedPoint[] sorted = sortObservations(observations);
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,157,final double[] params = basicGuess(sorted);
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,159,norm = params[0];
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,160,mean = params[1];
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,161,sigma = params[2];
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,151, Guesses the parameters based on the observed points.
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,165,* Gets an estimation of the parameters.
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,153," @return the guessed parameters: norm, mean and sigma."
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,167,"* @return the guessed parameters, in the following order:"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,168,* <ul>
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,169,*  <li>Normalization factor</li>
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,170,*  <li>Mean</li>
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,171,*  <li>Standard deviation</li>
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,172,* </ul>
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,156,f (parameters == null) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,157,arameters = basicGuess(observations);
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,159,eturn parameters.clone();
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,175,"return new double[] { norm, mean, sigma };"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,179,* Sort the observations.
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,181,* @param unsorted Input observations.
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,182,"* @return the input observations, sorted."
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,184,private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,185,final WeightedObservedPoint[] observations = unsorted.clone();
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,186,final Comparator<WeightedObservedPoint> cmp
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,187,= new Comparator<WeightedObservedPoint>() {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,188,"public int compare(WeightedObservedPoint p1,"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,189,WeightedObservedPoint p2) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,190,if (p1 == null && p2 == null) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,191,return 0;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,193,if (p1 == null) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,194,return -1;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,196,if (p2 == null) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,197,return 1;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,199,if (p1.getX() < p2.getX()) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,200,return -1;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,202,if (p1.getX() > p2.getX()) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,203,return 1;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,205,if (p1.getY() < p2.getY()) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,206,return -1;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,208,if (p1.getY() > p2.getY()) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,209,return 1;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,211,if (p1.getWeight() < p2.getWeight()) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,212,return -1;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,214,if (p1.getWeight() > p2.getWeight()) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,215,return 1;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,217,return 0;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,221,"Arrays.sort(observations, cmp);"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,222,return observations;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,165, @param points Observed points upon which should base guess.
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,166," @return the guessed parameters: norm, mean and sigma."
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,228,"* @param points Observed points, sorted."
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,229,"* @return the guessed parameters (normalization factor, mean and"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,230,* sigma).
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,169,"rrays.sort(points, createWeightedObservedPointComparator());"
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,170,ouble[] params = new double[3];
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,172,nt maxYIdx = findMaxY(points);
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,173,arams[0] = points[maxYIdx].getY();
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,174,arams[1] = points[maxYIdx].getX();
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,233,final int maxYIdx = findMaxY(points);
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,234,final double n = points[maxYIdx].getY();
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,235,final double m = points[maxYIdx].getX();
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,178,ouble halfY = params[0] + ((params[1] - params[0]) / 2.0);
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,179,"ouble fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);"
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,180,"ouble fwhmX2 = interpolateXAtY(points, maxYIdx, +1, halfY);"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,239,final double halfY = n + ((m - n) / 2);
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,240,"final double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,241,"final double fwhmX2 = interpolateXAtY(points, maxYIdx, 1, halfY);"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,244,// TODO: Exceptions should not be used for flow control.
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,185,arams[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,247,final double s = fwhmApprox / (2 * FastMath.sqrt(2 * FastMath.log(2)));
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,187,eturn params;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,249,"return new double[] { n, m, s };"
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,211, @param startIdx Index within points from which to start search for
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,212,  interpolation bounds points.
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,213, @param idxStep Index step for search for interpolation bounds points.
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,273,* @param startIdx Index within points from which to start the search for
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,274,* interpolation bounds points.
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,275,* @param idxStep Index step for searching interpolation bounds points.
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,215, @return the value of X at the specified Y.
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,277,* @return the value of X for the specified Y.
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,221,"nt startIdx, int idxStep, double y)"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,283,"int startIdx,"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,284,"int idxStep,"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,285,double y)
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,226,"eightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);"
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,227,eightedObservedPoint pointA = twoPoints[0];
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,228,eightedObservedPoint pointB = twoPoints[1];
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,229,f (pointA.getY() == y) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,230,eturn pointA.getX();
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,290,final WeightedObservedPoint[] twoPoints
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,291,"= getInterpolationPointsForY(points, startIdx, idxStep, y);"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,292,final WeightedObservedPoint p1 = twoPoints[0];
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,293,final WeightedObservedPoint p2 = twoPoints[1];
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,294,if (p1.getY() == y) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,295,return p1.getX();
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,232,f (pointB.getY() == y) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,233,eturn pointB.getX();
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,297,if (p2.getY() == y) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,298,return p2.getX();
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,235,eturn pointA.getX() +
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,236,((y - pointA.getY()) * (pointB.getX() - pointA.getX())) /
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,237,pointB.getY() - pointA.getY()));
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,300,return p1.getX() + (((y - p1.getY()) * (p2.getX() - p1.getX())) /
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,301,(p2.getY() - p1.getY()));
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,256,"nt startIdx, int idxStep, double y)"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,320,"int startIdx,"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,321,"int idxStep,"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,322,double y)
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,262,idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,328,idxStep < 0 ? i + idxStep >= 0 : i + idxStep < points.length;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,264,"f (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {"
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,265,eturn (idxStep < 0) ?
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,266,"ew WeightedObservedPoint[] { points[i + idxStep], points[i] } :"
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,267,"ew WeightedObservedPoint[] { points[i], points[i + idxStep] };"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,330,final WeightedObservedPoint p1 = points[i];
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,331,final WeightedObservedPoint p2 = points[i + idxStep];
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,332,"if (isBetween(y, p1.getY(), p2.getY())) {"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,333,if (idxStep < 0) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,334,"return new WeightedObservedPoint[] { p2, p1 };"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,335,} else {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,336,"return new WeightedObservedPoint[] { p1, p2 };"
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,271,ouble minY = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,272,ouble maxY = Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,273,or (final WeightedObservedPoint point : points) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,274,"inY = Math.min(minY, point.getY());"
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,275,"axY = Math.max(maxY, point.getY());"
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,277,"hrow new OutOfRangeException(y, minY, maxY);"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,341,// Boundaries are replaced by dummy values because the raised
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,342,// exception is caught and the message never displayed.
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,343,// TODO: Exceptions should not be used for flow control.
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,344,"throw new OutOfRangeException(y,"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,345,"Double.NEGATIVE_INFINITY,"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,346,Double.POSITIVE_INFINITY);
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,283, @param value Value to determine whether is between {@code boundary1}
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,352,* @param value Value to test whether it is between {@code boundary1}
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,290,"rivate boolean isBetween(double value, double boundary1, double boundary2) {"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,359,"private boolean isBetween(double value,"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,360,"double boundary1,"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,361,double boundary2) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,292,value >= boundary2 && value <= boundary1);
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,296, Factory method creating {@code Comparator} for comparing
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,297, {@code WeightedObservedPoint} instances.
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,299, @return the new {@code Comparator} instance.
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,301,rivate Comparator<WeightedObservedPoint> createWeightedObservedPointComparator() {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,302,eturn new Comparator<WeightedObservedPoint>() {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,303,"ublic int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {"
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,304,f (p1 == null && p2 == null) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,305,eturn 0;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,307,f (p1 == null) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,308,eturn -1;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,310,f (p2 == null) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,311,eturn 1;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,313,f (p1.getX() < p2.getX()) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,314,eturn -1;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,316,f (p1.getX() > p2.getX()) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,317,eturn 1;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,319,f (p1.getY() < p2.getY()) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,320,eturn -1;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,322,f (p1.getY() > p2.getY()) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,323,eturn 1;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,325,f (p1.getWeight() < p2.getWeight()) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,326,eturn -1;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,328,f (p1.getWeight() > p2.getWeight()) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,329,eturn 1;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,331,eturn 0;
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,363,(value >= boundary2 && value <= boundary1);

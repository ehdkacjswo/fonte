is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,65,nt order = matrix.getRowDimension();
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,66,ouble[][] c = matrix.getData();
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,67,ouble[][] b = new double[order][order];
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,65,final int order = matrix.getRowDimension();
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,66,final double[][] c = matrix.getData();
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,67,final double[][] b = new double[order][order];
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,69,nt[] swap  = new int[order];
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,79,wap[r] = r;
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,78,int swapR = r;
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,82,nt isi = index[swap[i]];
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,83,f (c[ii][ii] > c[isi][isi]) {
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,84,wap[r] = i;
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,81,int isr = index[swapR];
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,82,if (c[ii][ii] > c[isr][isr]) {
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,83,swapR = i;
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,90,f (swap[r] != r) {
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,91,nt tmp = index[r];
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,92,ndex[r] = index[swap[r]];
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,93,ndex[swap[r]] = tmp;
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,89,if (swapR != r) {
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,90,final int tmpIndex    = index[r];
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,91,index[r]              = index[swapR];
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,92,index[swapR]          = tmpIndex;
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,93,final double[] tmpRow = b[r];
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,94,b[r]                  = b[swapR];
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,95,b[swapR]              = tmpRow;
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,121,ouble sqrt = FastMath.sqrt(c[ir][ir]);
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,123,final double sqrt = FastMath.sqrt(c[ir][ir]);
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,123,ouble inverse = 1 / sqrt;
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,125,final double inverse  = 1 / sqrt;
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,126,final double inverse2 = 1 / c[ir][ir];
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,125,nt ii = index[i];
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,126,ouble e = inverse * c[ii][ir];
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,128,final int ii = index[i];
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,129,final double e = inverse * c[ii][ir];
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,128,[ii][ii] -= e * e;
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,131,c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,130,nt ij = index[j];
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,131,ouble f = c[ii][ij] - e * b[j][r];
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,133,final int ij = index[j];
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,134,final double f = c[ii][ij] - e * b[j][r];
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,18,package org.apache.commons.math3.linear;
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,20,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,23,public class RectangularCholeskyDecompositionTest {
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,25,@Test
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,26,public void testDecomposition3x3() {
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,28,RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,29,"{ 1,   9,   9 },"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,30,"{ 9, 225, 225 },"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,31,"{ 9, 225, 625 }"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,34,RectangularCholeskyDecomposition d =
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,35,"new RectangularCholeskyDecomposition(m, 1.0e-6);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,37,"// as this decomposition permutes lines and columns, the root is NOT triangular"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,38,// (in fact here it is the lower right part of the matrix which is zero and
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,39,//  the upper left non-zero)
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,40,"Assert.assertEquals(0.8,  d.getRootMatrix().getEntry(0, 2), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,41,"Assert.assertEquals(25.0, d.getRootMatrix().getEntry(2, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,42,"Assert.assertEquals(0.0,  d.getRootMatrix().getEntry(2, 2), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,44,RealMatrix root = d.getRootMatrix();
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,45,RealMatrix rebuiltM = root.multiply(root.transpose());
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,46,"Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,50,@Test
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,51,public void testFullRank() {
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,53,RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,54,"{ 0.1159548705,      0.,           0.,           0.      },"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,55,"{ 0.0896442724, 0.1223540781,      0.,           0.      },"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,56,"{ 0.0852155322, 4.558668e-3,  0.1083577299,      0.      },"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,57,"{ 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 }"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,60,RealMatrix m = base.multiply(base.transpose());
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,62,RectangularCholeskyDecomposition d =
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,63,"new RectangularCholeskyDecomposition(m, 1.0e-10);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,65,RealMatrix root = d.getRootMatrix();
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,66,RealMatrix rebuiltM = root.multiply(root.transpose());
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,67,"Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,69,"// the pivoted Cholesky decomposition is *not* unique. Here, the root is"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,70,// not equal to the original trianbular base matrix
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,71,Assert.assertTrue(root.subtract(base).getNorm() > 0.3);
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,75,@Test
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,76,public void testMath789() {
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,78,final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,79,"{0.013445532, 0.010394690, 0.009881156, 0.010499559},"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,80,"{0.010394690, 0.023006616, 0.008196856, 0.010732709},"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,81,"{0.009881156, 0.008196856, 0.019023866, 0.009210099},"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,82,"{0.010499559, 0.010732709, 0.009210099, 0.019107243}"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,84,"RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,85,RealMatrix rebuiltM1 = root1.multiply(root1.transpose());
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,86,"Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,88,final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,89,"{0.0, 0.0, 0.0, 0.0, 0.0},"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,90,"{0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,91,"{0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,92,"{0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,93,"{0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,95,"RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,96,RealMatrix rebuiltM2 = root2.multiply(root2.transpose());
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,97,"Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,99,final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,100,"{0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,101,"{0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,102,"{0.0, 0.0, 0.0, 0.0, 0.0},"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,103,"{0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,104,"{0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,106,"RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,107,RealMatrix rebuiltM3 = root3.multiply(root3.transpose());
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,108,"Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,20,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,22,import org.apache.commons.math3.TestUtils;
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,23,import org.apache.commons.math3.linear.Array2DRowRealMatrix;
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,26,import org.apache.commons.math3.stat.correlation.StorelessCovariance;
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,90,double[] min = new double[mean.length];
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,91,"Arrays.fill(min, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,92,double[] max = new double[mean.length];
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,93,"Arrays.fill(max, Double.NEGATIVE_INFINITY);"
False,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,87,ssert.assertTrue(FastMath.abs(generated[0] - 1) > 0.1);
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,96,for (int j = 0; j < generated.length; ++j) {
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,97,"min[j] = FastMath.min(min[j], generated[j]);"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,98,"max[j] = FastMath.max(max[j], generated[j]);"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,101,for (int j = 0; j < min.length; ++j) {
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,102,Assert.assertTrue(max[j] - min[j] > 2.0);
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,142,@Test
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,143,public void testSampleWithZeroCovariance() {
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,144,final double[][] covMatrix1 = new double[][]{
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,145,"{0.013445532, 0.010394690, 0.009881156, 0.010499559},"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,146,"{0.010394690, 0.023006616, 0.008196856, 0.010732709},"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,147,"{0.009881156, 0.008196856, 0.019023866, 0.009210099},"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,148,"{0.010499559, 0.010732709, 0.009210099, 0.019107243}"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,151,final double[][] covMatrix2 = new double[][]{
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,152,"{0.0, 0.0, 0.0, 0.0, 0.0},"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,153,"{0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,154,"{0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,155,"{0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,156,"{0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,159,final double[][] covMatrix3 = new double[][]{
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,160,"{0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,161,"{0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,162,"{0.0, 0.0, 0.0, 0.0, 0.0},"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,163,"{0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,164,"{0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,167,"testSampler(covMatrix1, 10000, 0.001);"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,168,"testSampler(covMatrix2, 10000, 0.001);"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,169,"testSampler(covMatrix3, 10000, 0.001);"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,173,private CorrelatedRandomVectorGenerator createSampler(double[][] cov) {
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,174,RealMatrix matrix = new Array2DRowRealMatrix(cov);
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,175,double small = 10e-12 * matrix.getNorm();
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,176,return new CorrelatedRandomVectorGenerator(
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,177,"new double[cov.length],"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,178,"matrix,"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,179,"small,"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,180,new GaussianRandomGenerator(new JDKRandomGenerator()));
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,183,"private void testSampler(final double[][] covMatrix, int samples, double epsilon) {"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,184,CorrelatedRandomVectorGenerator sampler = createSampler(covMatrix);
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,186,StorelessCovariance cov = new StorelessCovariance(covMatrix.length);
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,187,for (int i = 0; i < samples; ++i) {
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,188,cov.increment(sampler.nextVector());
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,191,double[][] sampleCov = cov.getData();
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,192,for (int r = 0; r < covMatrix.length; ++r) {
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,193,"TestUtils.assertEquals(covMatrix[r], sampleCov[r], epsilon);"

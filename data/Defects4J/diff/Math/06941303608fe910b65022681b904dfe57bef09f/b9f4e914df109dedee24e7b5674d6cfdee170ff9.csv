is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,32, Adapted from {@link org.apache.commons.collections.FunctorException}.</p>
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,32,"* Adapted from <a href=""http://commons.apache.org/collections/api-release/org/apache/commons/collections/FunctorException.html""/>.</p>"
False,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,188," @see {@link #format(Object, StringBuffer, FieldPosition)}"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,188,"* @see #format(Object, StringBuffer, FieldPosition)"
False,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,205," @see {@link #format(Object, StringBuffer, FieldPosition)}"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,205,"* @see #format(Object, StringBuffer, FieldPosition)"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,125," @see #DenseFieldMatrix(int, int, T[][], boolean)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,125,"* @see #DenseFieldMatrix(int, int, FieldElement[][], boolean)"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,144, @see #toBlocksLayout(T[][])
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,145, @see #DenseFieldMatrix(T[][])
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,144,* @see #toBlocksLayout(FieldElement[][])
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,145,* @see #DenseFieldMatrix(FieldElement[][])
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,197," DenseFieldMatrix#DenseFieldMatrix(int, int, T[][], boolean)} constructor."
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,197,"* DenseFieldMatrix#DenseFieldMatrix(int, int, FieldElement[][], boolean)}"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,198,* constructor.
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,205," @see #DenseFieldMatrix(int, int, T[][], boolean)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,206,"* @see #DenseFieldMatrix(int, int, FieldElement[][], boolean)"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,257," DenseFieldMatrix#DenseFieldMatrix(int, int, T[][], boolean)} constructor."
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,258,"* DenseFieldMatrix#DenseFieldMatrix(int, int, FieldElement[][], boolean)}"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,259,* constructor.
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,264, @see #toBlocksLayout(T[][])
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,265," @see #DenseFieldMatrix(int, int, T[][], boolean)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,266,* @see #toBlocksLayout(FieldElement[][])
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,267,"* @see #DenseFieldMatrix(int, int, FieldElement[][], boolean)"
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,73," the same effect as calling {@link #FieldMatrixImpl(T[][], boolean)}"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,73,"* the same effect as calling {@link #FieldMatrixImpl(FieldElement[][], boolean)}"
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,80," @see #FieldMatrixImpl(T[][], boolean)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,80,"* @see #FieldMatrixImpl(FieldElement[][], boolean)"
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,101, @see #FieldMatrixImpl(T[][])
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,101,* @see #FieldMatrixImpl(FieldElement[][])
False,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,332," @see #setSubVector(int, T[])"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,332,"* @see #setSubVector(int, FieldElement[])"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,58," or one of the <code>append</code> methods ({@link #append(double)}, {@link"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,59," #append(T[])}, {@link #append(FieldVectorImpl)}) to gather data"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,58,"* or one of the <code>append</code> methods ({@link #append(FieldElement[])},"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,59,"* {@link #add(FieldVector)}, {@link #append(FieldVectorImpl)}) to gather data"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,116, @see #FieldVectorImpl(T[])
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,116,* @see #FieldVectorImpl(FieldElement[])
False,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,50," #SparseFieldVector(SparseFieldVector<T>, int)} constructor"
False,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,51," or one of the <code>append</code> method ({@link #append(Field<T>)}, {@link"
False,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,52," #append(Field<T>[])}, {@link #append(FieldVector)}) to gather data"
False,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,53, into this vector.</p>
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,50,"* #SparseFieldVector(SparseFieldVector, int)} constructor"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,51,"* or one of the <code>append</code> method ({@link #append(FieldElement)},"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,52,"* {@link #append(FieldElement[])}, {@link #append(FieldVector)},"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,53,* {@link #append(SparseFieldVector)}) to gather data into this vector.</p>
False,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,167,** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,168,* Construct a vector by appending a vector to this vector.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,169,* @param v vector to append to this one.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,170,* @return a new vector
False,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,56," {@link #optimize(ObjectiveFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,57, method. It is 0 if the method has not been called yet.
True,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,56,"* {@link #optimize(DifferentiableMultivariateVectorialFunction,"
True,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,57,"* double[], double[], double[]) optimize} method. It is 0 if"
True,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,58,* the method has not been called yet.
False,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,66," {@link #optimize(ObjectiveFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,67, method. It is 0 if the method has not been called yet.
True,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,67,"* {@link #optimize(DifferentiableMultivariateVectorialFunction,"
True,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,68,"* double[], double[], double[]) optimize} method. It is 0 if"
True,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,69,* the method has not been called yet.
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,109, the {@link #objective} method is called)
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,109,* the {@link #value(double[])} method is called)
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,142, the {@link #objective} method is called)
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,142,* the {@link #value(double[])} method is called)
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,27,mport org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,93," #optimize(MultivariateRealFunction, GoalType, double[]) optimize}."
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,92,"* #optimize(DifferentiableMultivariateRealFunction, GoalType, double[])"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,93,* optimize}.
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,95," restarts. The {@link #optimize(MultivariateRealFunction, GoalType,"
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,96, double[]) optimize} method returns the best point only. This
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,95,"* restarts. The {@link #optimize(DifferentiableMultivariateRealFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,96,"* GoalType, double[]) optimize} method returns the best point only. This"
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,99," #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,100, method.
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,99,"* #optimize(DifferentiableMultivariateRealFunction, GoalType, double[])"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,100,* optimize} method.
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,109," elements will be null if the {@link #optimize(MultivariateRealFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,109,"* elements will be null if the {@link #optimize(DifferentiableMultivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,115," @exception IllegalStateException if {@link #optimize(MultivariateRealFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,115,"* @exception IllegalStateException if {@link #optimize(DifferentiableMultivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,27,mport org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,94," #optimize(MultivariateRealFunction, GoalType, double[]) optimize}."
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,93,"* #optimize(DifferentiableMultivariateVectorialFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,94,"* double[], double[], double[]) optimize}."
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,96," restarts. The {@link #optimize(MultivariateRealFunction, GoalType,"
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,97, double[]) optimize} method returns the best point only. This
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,98," method returns all the points found at the end of each starts,"
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,99, including the best one already returned by the {@link
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,100," #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,101, method.
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,96,"* restarts. The {@link #optimize(DifferentiableMultivariateVectorialFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,97,"* double[], double[], double[]) optimize} method returns the"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,98,* best point only. This method returns all the points found at the
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,99,"* end of each starts, including the best one already returned by the {@link"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,100,"* #optimize(DifferentiableMultivariateVectorialFunction, double[],"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,101,"* double[], double[]) optimize} method."
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,110," elements will be null if the {@link #optimize(MultivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,111," GoalType, double[]) optimize} method did throw a {@link"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,110,"* elements will be null if the {@link #optimize(DifferentiableMultivariateVectorialFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,111,"* double[], double[], double[]) optimize} method did throw a {@link"
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,116," @exception IllegalStateException if {@link #optimize(MultivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,117," GoalType, double[]) optimize} has not been called"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,116,"* @exception IllegalStateException if {@link #optimize(DifferentiableMultivariateVectorialFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,117,"* double[], double[], double[]) optimize} has not been called"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,25,mport org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,143," #optimize(MultivariateRealFunction, GoalType, double[]) optimize}."
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,142,"* #optimize(UnivariateRealFunction, GoalType, double, double) optimize}."
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,145," restarts. The {@link #optimize(MultivariateRealFunction, GoalType,"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,146, double[]) optimize} method returns the best point only. This
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,144,"* restarts. The {@link #optimize(UnivariateRealFunction, GoalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,145,"* double, double) optimize} method returns the best point only. This"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,149," #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,148,"* #optimize(UnivariateRealFunction, GoalType, double, double) optimize}"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,159," elements will be null if the {@link #optimize(MultivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,160," GoalType, double[]) optimize} method did throw a {@link"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,158,"* elements will be null if the {@link #optimize(UnivariateRealFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,159,"* GoalType, double, double) optimize} method did throw a {@link"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,165," @exception IllegalStateException if {@link #optimize(MultivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,166," GoalType, double[]) optimize} has not been called"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,164,"* @exception IllegalStateException if {@link #optimize(UnivariateRealFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,165,"* GoalType, double, double) optimize} has not been called"
False,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,20,** This interface specifies how to check if an {@link VectorialOptimizer optimization
False,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,21, algorithm} has converged.
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,20,/** This interface specifies how to check if a {@link
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,21,* DifferentiableMultivariateVectorialOptimizer optimization algorithm} has converged.
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,56, {@link AbstractLinearOptimizer#DEFAULT_MAX_ITERATIONS}.
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,56,* {@link AbstractLeastSquaresOptimizer#DEFAULT_MAX_ITERATIONS}.
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,67, and the maximal number of evaluation is set to
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,68, {@link AbstractLinearOptimizer#DEFAULT_MAX_EVALUATIONS}.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,67,* and the maximal number of iterations is set to
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,68,* {@link AbstractScalarDifferentiableOptimizer#DEFAULT_MAX_ITERATIONS}.
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,70, must be one of {@link UpdateFormula#FLETCHER_REEVES} or {@link
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,71, UpdateFormula#POLAK_RIBIERE}
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,70,* must be one of {@link ConjugateGradientFormula#FLETCHER_REEVES} or {@link
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,71,* ConjugateGradientFormula#POLAK_RIBIERE}
False,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,23,mport org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;
False,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,70," {@link #optimize(DifferentiableMultivariateRealFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,69,"* {@link #optimize(LinearObjectiveFunction, Collection, GoalType, boolean) optimize}"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,26, provides some simple conversion capabilities to turn any java/lang.Number
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,26,* provides some simple conversion capabilities to turn any java.lang.Number
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,44, @see org.apache.commons.collections.Transformer#transform(java.lang.Object)
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,44,"* @see <a href=""http://commons.apache.org/collections/api-release/org/apache/commons/collections/Transformer.html""/>"

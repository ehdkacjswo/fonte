is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2990,eturn (x < 0) ? -x : x;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2990,final int i = x >>> 31;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2991,return (x ^ (~i + 1)) + i;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,2999,eturn (x < 0l) ? -x : x;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3000,final long l = x >>> 63;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3001,// l is one if x negative zero else
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3002,"// ~l+1 is zero if x is positive, -1 if x is negative"
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3003,"// x^(~l+1) is x is x is positive, ~x if x is negative"
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3004,// add around
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3005,return (x ^ (~l + 1)) + l;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3008,eturn (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3014,if ((Float.floatToRawIntBits(x) & Integer.MIN_VALUE) == 0) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3015,return x;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3017,return -x;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3017,eturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3026,if ((Double.doubleToRawLongBits(x) & Long.MIN_VALUE) == 0) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3027,return x;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3029,return -x;

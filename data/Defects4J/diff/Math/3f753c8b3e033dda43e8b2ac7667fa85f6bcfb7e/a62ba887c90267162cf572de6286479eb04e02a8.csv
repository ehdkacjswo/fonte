is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/DifferentiableMultivariateFunction.java,src/main/java/org/apache/commons/math3/analysis/DifferentiableMultivariateFunction.java,25,* @deprecated as of 3.1 replaced by {@link org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction}
True,src/main/java/org/apache/commons/math3/analysis/DifferentiableMultivariateVectorFunction.java,src/main/java/org/apache/commons/math3/analysis/DifferentiableMultivariateVectorFunction.java,25,* @deprecated as of 3.1 replaced by {@link org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction}
False,src/main/java/org/apache/commons/math3/optimization/BaseMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/BaseMultivariateOptimizer.java,28,  <li>{@link org.apache.commons.math3.optimization.DifferentiableMultivariateOptimizer}</li>
True,src/main/java/org/apache/commons/math3/optimization/BaseMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/BaseMultivariateOptimizer.java,28,*  <li>{@link org.apache.commons.math3.optimization.MultivariateDifferentiableOptimizer}</li>
False,src/main/java/org/apache/commons/math3/optimization/BaseMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/BaseMultivariateSimpleBoundsOptimizer.java,28,  <li>{@link org.apache.commons.math3.optimization.DifferentiableMultivariateOptimizer}</li>
True,src/main/java/org/apache/commons/math3/optimization/BaseMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/BaseMultivariateSimpleBoundsOptimizer.java,28,*  <li>{@link org.apache.commons.math3.optimization.MultivariateDifferentiableOptimizer}</li>
False,src/main/java/org/apache/commons/math3/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optimization/BaseOptimizer.java,26,  <li>{@link org.apache.commons.math3.optimization.DifferentiableMultivariateOptimizer}</li>
False,src/main/java/org/apache/commons/math3/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optimization/BaseOptimizer.java,27,  <li>{@link org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer}</li>
True,src/main/java/org/apache/commons/math3/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optimization/BaseOptimizer.java,26,*  <li>{@link org.apache.commons.math3.optimization.MultivariateDifferentiableOptimizer}</li>
True,src/main/java/org/apache/commons/math3/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optimization/BaseOptimizer.java,27,*  <li>{@link org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer}</li>
True,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizer.java,33,* @deprecated as of 3.1 replaced by {@link MultivariateDifferentiableMultiStartOptimizer}
False,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizer.java,47,"inal int starts,"
False,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizer.java,48,inal RandomVectorGenerator generator) {
True,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizer.java,48,"final int starts,"
True,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizer.java,49,final RandomVectorGenerator generator) {
True,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateOptimizer.java,34,* @deprecated as of 3.1 replaced by {@link MultivariateDifferentiableOptimizer}
True,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateOptimizer.java,36,@Deprecated
True,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizer.java,33,* @deprecated as of 3.1 replaced by {@link MultivariateDifferentiableVectorMultiStartOptimizer}
True,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizer.java,35,@Deprecated
True,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorOptimizer.java,29,* @deprecated as of 3.1 replaced by {@link MultivariateDifferentiableVectorOptimizer}
True,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorOptimizer.java,31,@Deprecated
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,18,package org.apache.commons.math3.optimization;
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,20,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,21,import org.apache.commons.math3.random.RandomVectorGenerator;
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,24,* Special implementation of the {@link MultivariateDifferentiableOptimizer}
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,25,* interface adding multi-start features to an existing optimizer.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,27,* This class wraps a classical optimizer to use it several times in
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,28,* turn with different starting points in order to avoid being trapped
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,29,* into a local extremum when looking for a global one.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,31,* @version $Id$
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,32,* @since 3.1
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,34,public class MultivariateDifferentiableMultiStartOptimizer
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,35,extends BaseMultivariateMultiStartOptimizer<MultivariateDifferentiableFunction>
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,36,implements MultivariateDifferentiableOptimizer {
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,38,* Create a multi-start optimizer from a single-start optimizer.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,40,* @param optimizer Single-start optimizer to wrap.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,41,* @param starts Number of starts to perform (including the
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,42,"* first one), multi-start is disabled if value is less than or"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,43,* equal to 1.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,44,* @param generator Random vector generator to use for restarts.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,46,"public MultivariateDifferentiableMultiStartOptimizer(final MultivariateDifferentiableOptimizer optimizer,"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,47,"final int starts,"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,48,final RandomVectorGenerator generator) {
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java,49,"super(optimizer, starts, generator);"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,18,package org.apache.commons.math3.optimization;
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,20,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,23,* This interface represents an optimization algorithm for
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,24,* {@link MultivariateDifferentiableFunction scalar differentiable objective
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,25,* functions}.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,26,* Optimization algorithms find the input point set that either {@link GoalType
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,27,* maximize or minimize} an objective function.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,29,* @see MultivariateOptimizer
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,30,* @see MultivariateDifferentiableVectorOptimizer
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,32,* @version $Id$
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,33,* @since 3.1
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,35,public interface MultivariateDifferentiableOptimizer
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java,36,extends BaseMultivariateOptimizer<MultivariateDifferentiableFunction> {}
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,18,package org.apache.commons.math3.optimization;
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,20,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,21,import org.apache.commons.math3.random.RandomVectorGenerator;
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,24,* Special implementation of the {@link MultivariateDifferentiableVectorOptimizer}
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,25,* interface adding multi-start features to an existing optimizer.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,27,* This class wraps a classical optimizer to use it several times in
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,28,* turn with different starting points in order to avoid being trapped
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,29,* into a local extremum when looking for a global one.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,31,* @version $Id$
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,32,* @since 3.1
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,34,public class MultivariateDifferentiableVectorMultiStartOptimizer
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,35,extends BaseMultivariateVectorMultiStartOptimizer<MultivariateDifferentiableVectorFunction>
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,36,implements MultivariateDifferentiableVectorOptimizer {
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,38,* Create a multi-start optimizer from a single-start optimizer.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,40,* @param optimizer Single-start optimizer to wrap.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,41,* @param starts Number of starts to perform (including the
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,42,"* first one), multi-start is disabled if value is less than or"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,43,* equal to 1.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,44,* @param generator Random vector generator to use for restarts.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,46,public MultivariateDifferentiableVectorMultiStartOptimizer(
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,47,"final MultivariateDifferentiableVectorOptimizer optimizer,"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,48,"final int starts,"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,49,final RandomVectorGenerator generator) {
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java,50,"super(optimizer, starts, generator);"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,18,package org.apache.commons.math3.optimization;
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,20,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,23,* This interface represents an optimization algorithm for
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,24,* {@link MultivariateDifferentiableVectorFunction differentiable vectorial
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,25,* objective functions}.
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,27,* @version $Id$
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,28,* @since 3.1
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,30,public interface MultivariateDifferentiableVectorOptimizer
True,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java,31,extends BaseMultivariateVectorOptimizer<MultivariateDifferentiableVectorFunction> {}
False,src/main/java/org/apache/commons/math3/optimization/MultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateOptimizer.java,28, @see DifferentiableMultivariateOptimizer
False,src/main/java/org/apache/commons/math3/optimization/MultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateOptimizer.java,29, @see DifferentiableMultivariateVectorOptimizer
True,src/main/java/org/apache/commons/math3/optimization/MultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateOptimizer.java,28,* @see MultivariateDifferentiableOptimizer
True,src/main/java/org/apache/commons/math3/optimization/MultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/MultivariateOptimizer.java,29,* @see MultivariateDifferentiableVectorOptimizer
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,105,"return optimizeInternal(maxEval, f, goalType, startPoint);"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,109,* Optimize an objective function.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,111,* @param f Objective function.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,112,* @param goalType Type of optimization goal: either
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,113,* {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,114,* @param startPoint Start point for optimization.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,115,* @param maxEval Maximum number of function evaluations.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,116,* @return the point/value pair giving the optimal value for objective
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,117,* function.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,118,* @throws org.apache.commons.math3.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,119,* if the start point dimension is wrong.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,120,* @throws org.apache.commons.math3.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,121,* if the maximal number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,122,* @throws org.apache.commons.math3.exception.NullArgumentException if
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,123,* any argument is {@code null}.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,125,"protected PointValuePair optimizeInternal(int maxEval, MultivariateFunction f, GoalType goalType,"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,126,double[] startPoint) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,106,ouble[] startPoint) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,106,double[] startPoint) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,107,"return optimizeInternal(maxEval, f, t, w, startPoint);"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,111,* Optimize an objective function.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,112,* Optimization is considered to be a weighted least-squares minimization.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,113,* The cost function to be minimized is
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,114,* <code>&sum;weight<sub>i</sub>(objective<sub>i</sub> - target<sub>i</sub>)<sup>2</sup></code>
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,116,* @param f Objective function.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,117,* @param target Target value for the objective functions at optimum.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,118,* @param weight Weights for the least squares cost computation.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,119,* @param startPoint Start point for optimization.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,120,* @return the point/value pair giving the optimal value for objective
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,121,* function.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,122,* @param maxEval Maximum number of function evaluations.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,123,* @throws org.apache.commons.math3.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,124,* if the start point dimension is wrong.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,125,* @throws org.apache.commons.math3.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,126,* if the maximal number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,127,* @throws org.apache.commons.math3.exception.NullArgumentException if
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,128,* any argument is {@code null}.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,130,"protected PointVectorValuePair optimizeInternal(final int maxEval, final MultivariateVectorFunction f,"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,131,"final double[] t, final double[] w,"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,132,final double[] startPoint) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,24,mport org.apache.commons.math3.analysis.ParametricUnivariateFunction;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,25,import org.apache.commons.math3.analysis.ParametricUnivariateFunction;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,26,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,27,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,29,import org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,51,/** Optimizer to use for the fitting.
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,52,* @deprecated as of 3.1 replaced by {@link #optimizer}
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,54,@Deprecated
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,55,private final DifferentiableMultivariateVectorOptimizer oldOptimizer;
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,48,rivate final DifferentiableMultivariateVectorOptimizer optimizer;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,58,private final MultivariateDifferentiableVectorOptimizer optimizer;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,65,* @deprecated as of 3.1 replaced by {@link #CurveFitter(MultivariateDifferentiableVectorOptimizer)}
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,56,his.optimizer = optimizer;
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,57,bservations = new ArrayList<WeightedObservedPoint>();
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,68,this.oldOptimizer = optimizer;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,69,this.optimizer    = null;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,70,observations      = new ArrayList<WeightedObservedPoint>();
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,73,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,74,* @param optimizer optimizer to use for the fitting
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,75,* @since 3.1
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,77,public CurveFitter(final MultivariateDifferentiableVectorOptimizer optimizer) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,78,this.oldOptimizer = null;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,79,this.optimizer    = optimizer;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,80,observations      = new ArrayList<WeightedObservedPoint>();
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,161,ointVectorValuePair optimum =
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,162,"ptimizer.optimize(maxEval, new TheoreticalValuesFunction(f),"
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,163,"arget, weights, initialGuess);"
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,184,final PointVectorValuePair optimum;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,185,if (optimizer == null) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,186,// to be removed in 4.0
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,187,"optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),"
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,188,"target, weights, initialGuess);"
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,189,} else {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,190,"optimum = optimizer.optimize(maxEval, new TheoreticalValuesFunction(f),"
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,191,"target, weights, initialGuess);"
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,170,rivate class TheoreticalValuesFunction
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,199,@Deprecated
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,200,private class OldTheoreticalValuesFunction
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,178,ublic TheoreticalValuesFunction(final ParametricUnivariateFunction f) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,208,public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,241,/** Vectorial function computing function theoretical values. */
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,242,private class TheoreticalValuesFunction implements MultivariateDifferentiableVectorFunction {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,244,/** Function to fit. */
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,245,private final ParametricUnivariateFunction f;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,247,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,248,* @param f function to fit.
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,250,public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,251,this.f = f;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,254,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,255,public double[] value(double[] point) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,256,// compute the residuals
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,257,final double[] values = new double[observations.size()];
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,258,int i = 0;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,259,for (WeightedObservedPoint observed : observations) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,260,"values[i++] = f.value(observed.getX(), point);"
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,263,return values;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,266,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,267,public DerivativeStructure[] value(DerivativeStructure[] point) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,269,// extract parameters
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,270,final double[] parameters = new double[point.length];
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,271,for (int k = 0; k < point.length; ++k) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,272,parameters[k] = point[k].getValue();
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,275,// compute the residuals
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,276,final DerivativeStructure[] values = new DerivativeStructure[observations.size()];
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,277,int i = 0;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,278,for (WeightedObservedPoint observed : observations) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,280,// build the DerivativeStructure by adding first the value as a constant
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,281,// and then adding derivatives
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,282,"DerivativeStructure vi = new DerivativeStructure(point.length, 1, f.value(observed.getX(), parameters));"
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,283,for (int k = 0; k < point.length; ++k) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,284,"vi = vi.add(new DerivativeStructure(point.length, 1, k, 0.0));"
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,287,values[i++] = vi;
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,291,return values;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,18,package org.apache.commons.math3.optimization.general;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,20,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,21,import org.apache.commons.math3.analysis.differentiation.GradientFunction;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,22,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,23,import org.apache.commons.math3.optimization.ConvergenceChecker;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,24,import org.apache.commons.math3.optimization.GoalType;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,25,import org.apache.commons.math3.optimization.MultivariateDifferentiableOptimizer;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,26,import org.apache.commons.math3.optimization.PointValuePair;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,27,import org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,30,* Base class for implementing optimizers for multivariate scalar
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,31,* differentiable functions.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,32,* It contains boiler-plate code for dealing with gradient evaluation.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,34,* @version $Id$
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,35,* @since 3.1
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,37,public abstract class AbstractDifferentiableOptimizer
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,38,extends BaseAbstractMultivariateOptimizer<MultivariateDifferentiableFunction>
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,39,implements MultivariateDifferentiableOptimizer {
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,42,* Objective function gradient.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,44,private MultivariateVectorFunction gradient;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,47,* @param checker Convergence checker.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,49,protected AbstractDifferentiableOptimizer(ConvergenceChecker<PointValuePair> checker) {
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,50,super(checker);
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,54,* Compute the gradient vector.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,56,* @param evaluationPoint Point at which the gradient must be evaluated.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,57,* @return the gradient at the specified point.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,59,protected double[] computeObjectiveGradient(final double[] evaluationPoint) {
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,60,return gradient.value(evaluationPoint);
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,63,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,64,@Override
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,65,"public PointValuePair optimize(final int maxEval, final MultivariateDifferentiableFunction f,"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,66,"final GoalType goalType, final double[] startPoint) {"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,68,// store optimization problem characteristics
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,69,gradient = new GradientFunction(f);
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,71,// perform optimization
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java,72,"return super.optimize(maxEval, f, goalType, startPoint);"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,24,import org.apache.commons.math3.analysis.differentiation.JacobianFunction;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,25,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,39, This class uses the {@link DifferentiableMultivariateVectorFunction#jacobian()}
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,40, of the function argument in method
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,41," {@link #optimize(int,DifferentiableMultivariateVectorFunction,double[],double[],double[])"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,41,* This class uses the {@link JacobianFunction Jacobian} of the function argument in method
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,42,"* {@link #optimize(int, MultivariateDifferentiableVectorFunction, double[], double[], double[])"
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,43," {@link MultivariateMatrixFunction#value(double[]) value} method, the rows"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,44,"* {@link JacobianFunction#value(double[]) value} method, the rows"
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,295,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,296,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,297,"* @deprecated as of 3.1 replaced by {@link #optimize(int,"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,298,"* MultivariateDifferentiableVectorFunction, double[], double[], double[])}"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,301,@Deprecated
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,317,"eturn super.optimize(maxEval, f, target, weights, startPoint);"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,322,"return optimizeInternal(maxEval, f, target, weights, startPoint);"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,326,* Optimize an objective function.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,327,* Optimization is considered to be a weighted least-squares minimization.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,328,* The cost function to be minimized is
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,329,* <code>&sum;weight<sub>i</sub>(objective<sub>i</sub> - target<sub>i</sub>)<sup>2</sup></code>
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,331,* @param f Objective function.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,332,* @param target Target value for the objective functions at optimum.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,333,* @param weight Weights for the least squares cost computation.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,334,* @param startPoint Start point for optimization.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,335,* @return the point/value pair giving the optimal value for objective
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,336,* function.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,337,* @param maxEval Maximum number of function evaluations.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,338,* @throws org.apache.commons.math3.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,339,* if the start point dimension is wrong.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,340,* @throws org.apache.commons.math3.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,341,* if the maximal number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,342,* @throws org.apache.commons.math3.exception.NullArgumentException if
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,343,* any argument is {@code null}.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,345,"public PointVectorValuePair optimize(final int maxEval,"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,346,"final MultivariateDifferentiableVectorFunction f,"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,347,"final double[] target, final double[] weights,"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,348,final double[] startPoint) {
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,350,// Reset counter.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,351,jacobianEvaluations = 0;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,353,// Store least squares problem characteristics.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,354,jF = new JacobianFunction(f);
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,356,// Arrays shared with the other private methods.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,357,point = startPoint.clone();
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,358,rows = target.length;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,359,cols = point.length;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,361,weightedResidualJacobian = new double[rows][cols];
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,362,this.weightedResiduals = new double[rows];
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,364,cost = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,366,"return optimizeInternal(maxEval, f, target, weights, startPoint);"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,22,import org.apache.commons.math3.analysis.differentiation.GradientFunction;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,23,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,37,* @deprecated as of 3.1 replaced by {@link AbstractDifferentiableOptimizer}
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,39,@Deprecated
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,82,"eturn super.optimize(maxEval, f, goalType, startPoint);"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,86,"return optimizeInternal(maxEval, f, goalType, startPoint);"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,90,* Optimize an objective function.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,92,* @param f Objective function.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,93,* @param goalType Type of optimization goal: either
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,94,* {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,95,* @param startPoint Start point for optimization.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,96,* @param maxEval Maximum number of function evaluations.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,97,* @return the point/value pair giving the optimal value for objective
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,98,* function.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,99,* @throws org.apache.commons.math3.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,100,* if the start point dimension is wrong.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,101,* @throws org.apache.commons.math3.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,102,* if the maximal number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,103,* @throws org.apache.commons.math3.exception.NullArgumentException if
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,104,* any argument is {@code null}.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,106,"public PointValuePair optimize(final int maxEval,"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,107,"final MultivariateDifferentiableFunction f,"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,108,"final GoalType goalType,"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,109,final double[] startPoint) {
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,110,// Store optimization problem characteristics.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,111,gradient = new GradientFunction(f);
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java,113,"return optimizeInternal(maxEval, f, goalType, startPoint);"
False,src/main/java/org/apache/commons/math3/optimization/package-info.java,src/main/java/org/apache/commons/math3/optimization/package-info.java,41,  <li>{@link org.apache.commons.math3.optimization.DifferentiableMultivariateOptimizer
False,src/main/java/org/apache/commons/math3/optimization/package-info.java,src/main/java/org/apache/commons/math3/optimization/package-info.java,42,      DifferentiableMultivariateOptimizer} for {@link
False,src/main/java/org/apache/commons/math3/optimization/package-info.java,src/main/java/org/apache/commons/math3/optimization/package-info.java,43,      org.apache.commons.math3.analysis.DifferentiableMultivariateFunction
True,src/main/java/org/apache/commons/math3/optimization/package-info.java,src/main/java/org/apache/commons/math3/optimization/package-info.java,41,*  <li>{@link org.apache.commons.math3.optimization.MultivariateDifferentiableOptimizer
True,src/main/java/org/apache/commons/math3/optimization/package-info.java,src/main/java/org/apache/commons/math3/optimization/package-info.java,42,*      MultivariateDifferentiableOptimizer} for {@link
True,src/main/java/org/apache/commons/math3/optimization/package-info.java,src/main/java/org/apache/commons/math3/optimization/package-info.java,43,*      org.apache.commons.math3.analysis.MultivariateDifferentiableFunction
False,src/main/java/org/apache/commons/math3/optimization/package-info.java,src/main/java/org/apache/commons/math3/optimization/package-info.java,45,  <li>{@link org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer
False,src/main/java/org/apache/commons/math3/optimization/package-info.java,src/main/java/org/apache/commons/math3/optimization/package-info.java,46,      DifferentiableMultivariateVectorOptimizer} for {@link
False,src/main/java/org/apache/commons/math3/optimization/package-info.java,src/main/java/org/apache/commons/math3/optimization/package-info.java,47,      org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction
True,src/main/java/org/apache/commons/math3/optimization/package-info.java,src/main/java/org/apache/commons/math3/optimization/package-info.java,45,*  <li>{@link org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer
True,src/main/java/org/apache/commons/math3/optimization/package-info.java,src/main/java/org/apache/commons/math3/optimization/package-info.java,46,*      MultivariateDifferentiableVectorOptimizer} for {@link
True,src/main/java/org/apache/commons/math3/optimization/package-info.java,src/main/java/org/apache/commons/math3/optimization/package-info.java,47,*      org.apache.commons.math3.analysis.MultivariateDifferentiableVectorFunction
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,18,ackage org.apache.commons.math3.optimization;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,21,mport java.awt.geom.Point2D;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,22,mport java.util.ArrayList;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,24,mport org.apache.commons.math3.analysis.DifferentiableMultivariateFunction;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,25,mport org.apache.commons.math3.analysis.MultivariateFunction;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,26,mport org.apache.commons.math3.analysis.MultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,27,mport org.apache.commons.math3.optimization.general.ConjugateGradientFormula;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,28,mport org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,29,mport org.apache.commons.math3.random.GaussianRandomGenerator;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,30,mport org.apache.commons.math3.random.JDKRandomGenerator;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,31,mport org.apache.commons.math3.random.RandomVectorGenerator;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,32,mport org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,33,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,34,mport org.junit.Test;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,36,ublic class DifferentiableMultivariateMultiStartOptimizerTest {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,38,Test
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,39,ublic void testCircleFitting() {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,40,ircle circle = new Circle();
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,41,"ircle.addPoint( 30.0,  68.0);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,42,"ircle.addPoint( 50.0,  -6.0);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,43,"ircle.addPoint(110.0, -20.0);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,44,"ircle.addPoint( 35.0,  15.0);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,45,"ircle.addPoint( 45.0,  97.0);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,46,onLinearConjugateGradientOptimizer underlying =
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,47,"ew NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,48,"ew SimpleValueChecker(1.0e-10, 1.0e-10));"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,49,DKRandomGenerator g = new JDKRandomGenerator();
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,50,.setSeed(753289573253l);
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,51,andomVectorGenerator generator =
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,52,"ew UncorrelatedRandomVectorGenerator(new double[] { 50.0, 50.0 }, new double[] { 10.0, 10.0 },"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,53,ew GaussianRandomGenerator(g));
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,54,ifferentiableMultivariateMultiStartOptimizer optimizer =
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,55,"ew DifferentiableMultivariateMultiStartOptimizer(underlying, 10, generator);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,56,ointValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,57,"ptimizer.optimize(200, circle, GoalType.MINIMIZE, new double[] { 98.680, 47.345 });"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,58,"ssert.assertEquals(200, optimizer.getMaxEvaluations());"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,59,ointValuePair[] optima = optimizer.getOptima();
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,60,or (PointValuePair o : optima) {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,61,"oint2D.Double center = new Point2D.Double(o.getPointRef()[0], o.getPointRef()[1]);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,62,"ssert.assertEquals(69.960161753, circle.getRadius(center), 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,63,"ssert.assertEquals(96.075902096, center.x, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,64,"ssert.assertEquals(48.135167894, center.y, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,66,ssert.assertTrue(optimizer.getEvaluations() > 70);
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,67,ssert.assertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,68,"ssert.assertEquals(3.1267527, optimum.getValue(), 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,71,rivate static class Circle implements DifferentiableMultivariateFunction {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,73,rivate ArrayList<Point2D.Double> points;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,75,ublic Circle() {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,76,oints  = new ArrayList<Point2D.Double>();
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,79,"ublic void addPoint(double px, double py) {"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,80,"oints.add(new Point2D.Double(px, py));"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,83,ublic double getRadius(Point2D.Double center) {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,84,ouble r = 0;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,85,or (Point2D.Double point : points) {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,86, += point.distance(center);
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,88,eturn r / points.size();
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,91,rivate double[] gradient(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,93,/ optimal radius
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,94,"oint2D.Double center = new Point2D.Double(point[0], point[1]);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,95,ouble radius = getRadius(center);
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,97,/ gradient of the sum of squared residuals
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,98,ouble dJdX = 0;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,99,ouble dJdY = 0;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,100,or (Point2D.Double pk : points) {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,101,ouble dk = pk.distance(center);
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,102,JdX += (center.x - pk.x) * (dk - radius) / dk;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,103,JdY += (center.y - pk.y) * (dk - radius) / dk;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,105,JdX *= 2;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,106,JdY *= 2;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,108,"eturn new double[] { dJdX, dJdY };"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,111,ublic double value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,113,"oint2D.Double center = new Point2D.Double(variables[0], variables[1]);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,114,ouble radius = getRadius(center);
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,116,ouble sum = 0;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,117,or (Point2D.Double point : points) {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,118,ouble di = point.distance(center) - radius;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,119,um += di * di;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,121,eturn sum;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,124,ublic MultivariateVectorFunction gradient() {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,125,eturn new MultivariateVectorFunction() {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,126,ublic double[] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,127,eturn gradient(point);
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,132,ublic MultivariateFunction partialDerivative(final int k) {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,133,eturn new MultivariateFunction() {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,134,ublic double value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java,135,eturn gradient(point)[k];
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,18,package org.apache.commons.math3.optimization;
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,21,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,22,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,23,import org.apache.commons.math3.optimization.general.CircleScalar;
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,24,import org.apache.commons.math3.optimization.general.ConjugateGradientFormula;
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,25,import org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,26,import org.apache.commons.math3.random.GaussianRandomGenerator;
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,27,import org.apache.commons.math3.random.JDKRandomGenerator;
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,28,import org.apache.commons.math3.random.RandomVectorGenerator;
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,29,import org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator;
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,30,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,31,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,33,public class MultivariateDifferentiableMultiStartOptimizerTest {
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,35,@Test
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,36,public void testCircleFitting() {
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,37,CircleScalar circle = new CircleScalar();
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,38,"circle.addPoint( 30.0,  68.0);"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,39,"circle.addPoint( 50.0,  -6.0);"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,40,"circle.addPoint(110.0, -20.0);"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,41,"circle.addPoint( 35.0,  15.0);"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,42,"circle.addPoint( 45.0,  97.0);"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,43,// TODO: the wrapper around NonLinearConjugateGradientOptimizer is a temporary hack for
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,44,// version 3.1 of the library. It should be removed when NonLinearConjugateGradientOptimizer
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,45,// will officially be declared as implementing MultivariateDifferentiableOptimizer
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,46,MultivariateDifferentiableOptimizer underlying =
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,47,new MultivariateDifferentiableOptimizer() {
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,49,private final NonLinearConjugateGradientOptimizer cg =
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,50,"new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,51,"new SimpleValueChecker(1.0e-10, 1.0e-10));"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,52,"public PointValuePair optimize(int maxEval,"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,53,"MultivariateDifferentiableFunction f,"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,54,"GoalType goalType,"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,55,double[] startPoint) {
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,56,"return cg.optimize(maxEval, f, goalType, startPoint);"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,59,public int getMaxEvaluations() {
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,60,return cg.getMaxEvaluations();
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,63,public int getEvaluations() {
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,64,return cg.getEvaluations();
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,67,public ConvergenceChecker<PointValuePair> getConvergenceChecker() {
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,68,return cg.getConvergenceChecker();
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,71,JDKRandomGenerator g = new JDKRandomGenerator();
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,72,g.setSeed(753289573253l);
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,73,RandomVectorGenerator generator =
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,74,"new UncorrelatedRandomVectorGenerator(new double[] { 50.0, 50.0 }, new double[] { 10.0, 10.0 },"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,75,new GaussianRandomGenerator(g));
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,76,MultivariateDifferentiableMultiStartOptimizer optimizer =
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,77,"new MultivariateDifferentiableMultiStartOptimizer(underlying, 10, generator);"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,78,PointValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,79,"optimizer.optimize(200, circle, GoalType.MINIMIZE, new double[] { 98.680, 47.345 });"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,80,"Assert.assertEquals(200, optimizer.getMaxEvaluations());"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,81,PointValuePair[] optima = optimizer.getOptima();
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,82,for (PointValuePair o : optima) {
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,83,"Vector2D center = new Vector2D(o.getPointRef()[0], o.getPointRef()[1]);"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,84,"Assert.assertEquals(69.960161753, circle.getRadius(center), 1.0e-8);"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,85,"Assert.assertEquals(96.075902096, center.getX(), 1.0e-8);"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,86,"Assert.assertEquals(48.135167894, center.getY(), 1.0e-8);"
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,88,Assert.assertTrue(optimizer.getEvaluations() > 70);
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,89,Assert.assertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java,90,"Assert.assertEquals(3.1267527, optimum.getValue(), 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,21,mport org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,22,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,21,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,22,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,96,ublic class DifferentiableMultivariateVectorMultiStartOptimizerTest {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,96,public class MultivariateDifferentiableVectorMultiStartOptimizerTest {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,102,ifferentiableMultivariateVectorOptimizer underlyingOptimizer =
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,103,"ew GaussNewtonOptimizer(true,"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,104,"ew SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,102,// TODO: the wrapper around GaussNewtonOptimizer is a temporary hack for
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,103,// version 3.1 of the library. It should be removed when GaussNewtonOptimizer
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,104,// will officialy be declared as implementing MultivariateDifferentiableVectorOptimizer
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,105,MultivariateDifferentiableVectorOptimizer underlyingOptimizer =
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,106,new MultivariateDifferentiableVectorOptimizer() {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,107,private GaussNewtonOptimizer gn =
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,108,"new GaussNewtonOptimizer(true,"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,109,"new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,111,"public PointVectorValuePair optimize(int maxEval,"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,112,"MultivariateDifferentiableVectorFunction f,"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,113,"double[] target,"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,114,"double[] weight,"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,115,double[] startPoint) {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,116,"return gn.optimize(maxEval, f, target, weight, startPoint);"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,119,public int getMaxEvaluations() {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,120,return gn.getMaxEvaluations();
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,123,public int getEvaluations() {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,124,return gn.getEvaluations();
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,127,public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker() {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,128,return gn.getConvergenceChecker();
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,109,ifferentiableMultivariateVectorMultiStartOptimizer optimizer =
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,110,"ew DifferentiableMultivariateVectorMultiStartOptimizer(underlyingOptimizer,"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,135,MultivariateDifferentiableVectorMultiStartOptimizer optimizer =
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,136,"new MultivariateDifferentiableVectorMultiStartOptimizer(underlyingOptimizer,"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,137,ifferentiableMultivariateVectorOptimizer underlyingOptimizer =
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,138,"ew GaussNewtonOptimizer(true,"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,139,"ew SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,164,// TODO: the wrapper around GaussNewtonOptimizer is a temporary hack for
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,165,// version 3.1 of the library. It should be removed when GaussNewtonOptimizer
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,166,// will officialy be declared as implementing MultivariateDifferentiableVectorOptimizer
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,167,MultivariateDifferentiableVectorOptimizer underlyingOptimizer =
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,168,new MultivariateDifferentiableVectorOptimizer() {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,169,private GaussNewtonOptimizer gn =
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,170,"new GaussNewtonOptimizer(true,"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,171,"new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,173,"public PointVectorValuePair optimize(int maxEval,"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,174,"MultivariateDifferentiableVectorFunction f,"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,175,"double[] target,"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,176,"double[] weight,"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,177,double[] startPoint) {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,178,"return gn.optimize(maxEval, f, target, weight, startPoint);"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,181,public int getMaxEvaluations() {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,182,return gn.getMaxEvaluations();
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,185,public int getEvaluations() {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,186,return gn.getEvaluations();
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,189,public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker() {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,190,return gn.getConvergenceChecker();
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,144,ifferentiableMultivariateVectorMultiStartOptimizer optimizer =
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,145,"ew DifferentiableMultivariateVectorMultiStartOptimizer(underlyingOptimizer,"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,197,MultivariateDifferentiableVectorMultiStartOptimizer optimizer =
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,198,"new MultivariateDifferentiableVectorMultiStartOptimizer(underlyingOptimizer,"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,147,"ptimizer.optimize(100, new DifferentiableMultivariateVectorFunction() {"
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,148,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,149,eturn null;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,151,ublic double[] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,152,hrow new TestException();
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,200,"optimizer.optimize(100, new MultivariateDifferentiableVectorFunction() {"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,201,public double[] value(double[] point) {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,202,throw new TestException();
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,204,public DerivativeStructure[] value(DerivativeStructure[] point) {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,205,return point;
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,161,rivate static class LinearProblem implements DifferentiableMultivariateVectorFunction {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,214,private static class LinearProblem implements MultivariateDifferentiableVectorFunction {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,174,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,175,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,176,ublic double[][] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,177,eturn factors.getData();
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,227,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,228,DerivativeStructure[] y = new DerivativeStructure[factors.getRowDimension()];
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,229,for (int i = 0; i < y.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,230,y[i] = variables[0].getField().getZero();
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,231,for (int j = 0; j < factors.getColumnDimension(); ++j) {
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,232,"y[i] = y[i].add(variables[j].multiply(factors.getEntry(i, j)));"
True,src/test/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java,235,return y;
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,19,mport java.awt.geom.Point2D;
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,24,mport org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,25,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,24,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,28,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,363,"oint2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,363,"Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,365,"ssert.assertEquals(96.07590211815305, center.x,      1.0e-6);"
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,366,"ssert.assertEquals(48.13516790438953, center.y,      1.0e-6);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,365,"Assert.assertEquals(96.07590211815305, center.getX(),            1.0e-6);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,366,"Assert.assertEquals(48.13516790438953, center.getY(),            1.0e-6);"
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,379,"ircle.addPoint(center.x + r * FastMath.cos(d), center.y + r * FastMath.sin(d));"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,379,"circle.addPoint(center.getX() + r * FastMath.cos(d), center.getY() + r * FastMath.sin(d));"
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,410,"oint2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,410,"Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,415,"ssert.assertEquals(-0.151738,  center.x,      1.0e-6);"
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,416,"ssert.assertEquals( 0.2075001, center.y,      1.0e-6);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,415,"Assert.assertEquals(-0.151738,  center.getX(),            1.0e-6);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,416,"Assert.assertEquals( 0.2075001, center.getY(),            1.0e-6);"
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,478,inal DifferentiableMultivariateVectorFunction problem;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,478,final MultivariateDifferentiableVectorFunction problem;
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,507,"tatic class LinearProblem implements DifferentiableMultivariateVectorFunction, Serializable {"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,507,"static class LinearProblem implements MultivariateDifferentiableVectorFunction, Serializable {"
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,521,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,522,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,523,ublic double[][] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,524,eturn factors.getData();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,521,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,522,DerivativeStructure[] value = new DerivativeStructure[factors.getRowDimension()];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,523,for (int i = 0; i < value.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,524,value[i] = variables[0].getField().getZero();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,525,for (int j = 0; j < factors.getColumnDimension(); ++j) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,526,"value[i] = value[i].add(variables[j].multiply(factors.getEntry(i, j)));"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,530,return value;
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,95,"ctual, expected[i], 1E-8 * expected[i]);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,95,"expected[i], actual, 1.3e-8 * expected[i]);"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,21,mport org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,22,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,23,mport org.apache.commons.math3.util.MathUtils;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,22,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,23,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,24,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,40,lass CircleProblem implements DifferentiableMultivariateVectorFunction {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,41,class CircleProblem implements MultivariateDifferentiableVectorFunction {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,42,rivate final ArrayList<double[]> points;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,43,private final ArrayList<Vector2D> points;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,47,** Number of points on the circumference (when searching which
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,48,"odel point is closest to a given ""observation"". */"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,49,rivate final int resolution;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,54, @param searchResolution Number of points to try when searching the one
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,55," that is closest to a given ""observed"" point."
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,58,"ouble yError,"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,59,nt searchResolution) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,60,oints = new ArrayList<double[]>();
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,54,double yError) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,55,points = new ArrayList<Vector2D>();
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,63,esolution = searchResolution;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,67, @param xError Assumed error for the x-coordinate of the circle points.
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,68, @param yError Assumed error for the y-coordinate of the circle points.
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,70,"ublic CircleProblem(double xError,"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,71,ouble yError) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,72,"his(xError, yError, 500);"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,75,"ublic void addPoint(double px, double py) {"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,76,"oints.add(new double[] { px, py });"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,60,public void addPoint(Vector2D p) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,61,points.add(p);
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,82,inal double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,67,final Vector2D p = points.get(i);
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,84,[index] = p[0];
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,85,[index + 1] = p[1];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,69,t[index]     = p.getX();
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,70,t[index + 1] = p.getY();
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,111,inal double deltaTheta = MathUtils.TWO_PI / resolution;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,113,inal double[] p = points.get(i);
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,114,inal double px = p[0];
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,115,inal double py = p[1];
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,117,ouble bestX = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,118,ouble bestY = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,119,ouble dMin = Double.POSITIVE_INFINITY;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,121,/ Find the angle for which the circle passes closest to the
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,122,/ current point (using a resolution of 100 points along the
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,123,/ circumference).
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,124,or (double theta = 0; theta <= MathUtils.TWO_PI; theta += deltaTheta) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,125,inal double currentX = cx + r * FastMath.cos(theta);
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,126,inal double currentY = cy + r * FastMath.sin(theta);
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,127,inal double dX = currentX - px;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,128,inal double dY = currentY - py;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,129,inal double d = dX * dX + dY * dY;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,130,f (d < dMin) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,131,Min = d;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,132,estX = currentX;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,133,estY = currentY;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,97,final Vector2D p = points.get(i);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,99,// Find the circle point closest to the observed point
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,100,// (observed points are points add through the addPoint method above)
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,101,final double dX = cx - p.getX();
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,102,final double dY = cy - p.getY();
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,103,"final double scaling = r / FastMath.hypot(dX, dY);"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,104,final int index  = i * 2;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,105,model[index]     = cx - scaling * dX;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,106,model[index + 1] = cy - scaling * dY;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,137,inal int index = i * 2;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,138,odel[index] = bestX;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,139,odel[index + 1] = bestY;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,145,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,146,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,147,ublic double[][] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,148,eturn jacobian(point);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,113,public DerivativeStructure[] value(DerivativeStructure[] params) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,114,final DerivativeStructure cx = params[0];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,115,final DerivativeStructure cy = params[1];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,116,final DerivativeStructure r = params[2];
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,153,rivate double[][] jacobian(double[] params) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,154,inal double[][] jacobian = new double[points.size() * 2][3];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,118,final DerivativeStructure[] model = new DerivativeStructure[points.size() * 2];
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,157,inal int index = i * 2;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,158,/ Partial derivative wrt x-coordinate of center.
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,159,acobian[index][0] = 1;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,160,acobian[index + 1][0] = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,161,/ Partial derivative wrt y-coordinate of center.
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,162,acobian[index][1] = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,163,acobian[index + 1][1] = 1;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,164,/ Partial derivative wrt radius.
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,165,inal double[] p = points.get(i);
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,166,acobian[index][2] = (p[0] - params[0]) / params[2];
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,167,acobian[index + 1][2] = (p[1] - params[1]) / params[2];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,121,final Vector2D p = points.get(i);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,123,// Find the circle point closest to the observed point
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,124,// (observed points are points add through the addPoint method above)
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,125,final DerivativeStructure dX = cx.subtract(p.getX());
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,126,final DerivativeStructure dY = cy.subtract(p.getY());
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,127,final DerivativeStructure scaling = r.divide(dX.multiply(dX).add(dY.multiply(dY)).sqrt());
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,128,final int index  = i * 2;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,129,model[index]     = cx.subtract(scaling.multiply(dX));
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,130,model[index + 1] = cy.subtract(scaling.multiply(dY));
False,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,170,eturn jacobian;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,134,return model;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,20,mport java.awt.geom.Point2D;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,22,mport org.apache.commons.math3.analysis.DifferentiableMultivariateFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,23,mport org.apache.commons.math3.analysis.MultivariateFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,24,mport org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,22,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,23,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,24,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,29,lass CircleScalar implements DifferentiableMultivariateFunction {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,30,rivate ArrayList<Point2D.Double> points;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,29,public class CircleScalar implements MultivariateDifferentiableFunction {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,30,private ArrayList<Vector2D> points;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,33,oints  = new ArrayList<Point2D.Double>();
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,33,points  = new ArrayList<Vector2D>();
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,37,"oints.add(new Point2D.Double(px, py));"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,37,"points.add(new Vector2D(px, py));"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,40,ublic double getRadius(Point2D.Double center) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,40,public double getRadius(Vector2D center) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,42,or (Point2D.Double point : points) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,42,for (Vector2D point : points) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,48,rivate double[] gradient(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,49,/ optimal radius
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,50,"oint2D.Double center = new Point2D.Double(point[0], point[1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,51,ouble radius = getRadius(center);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,48,"private DerivativeStructure distance(Vector2D point,"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,49,"DerivativeStructure cx, DerivativeStructure cy) {"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,50,DerivativeStructure dx = cx.subtract(point.getX());
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,51,DerivativeStructure dy = cy.subtract(point.getY());
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,52,return dx.multiply(dx).add(dy.multiply(dy)).sqrt();
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,53,/ gradient of the sum of squared residuals
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,54,ouble dJdX = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,55,ouble dJdY = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,56,or (Point2D.Double pk : points) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,57,ouble dk = pk.distance(center);
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,58,JdX += (center.x - pk.x) * (dk - radius) / dk;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,59,JdY += (center.y - pk.y) * (dk - radius) / dk;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,55,"public DerivativeStructure getRadius(DerivativeStructure cx, DerivativeStructure cy) {"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,56,DerivativeStructure r = cx.getField().getZero();
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,57,for (Vector2D point : points) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,58,"r = r.add(distance(point, cx, cy));"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,61,JdX *= 2;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,62,JdY *= 2;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,64,"eturn new double[] { dJdX, dJdY };"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,60,return r.divide(points.size());
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,68,"oint2D.Double center = new Point2D.Double(variables[0], variables[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,64,"Vector2D center = new Vector2D(variables[0], variables[1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,72,or (Point2D.Double point : points) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,68,for (Vector2D point : points) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,80,ublic MultivariateVectorFunction gradient() {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,81,eturn new MultivariateVectorFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,82,ublic double[] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,83,eturn gradient(point);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,76,public DerivativeStructure value(DerivativeStructure[] variables)  {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,77,"DerivativeStructure radius = getRadius(variables[0], variables[1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,88,ublic MultivariateFunction partialDerivative(final int k) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,89,eturn new MultivariateFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,90,ublic double value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,91,eturn gradient(point)[k];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,79,DerivativeStructure sum = variables[0].getField().getZero();
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,80,for (Vector2D point : points) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,81,"DerivativeStructure di = distance(point, variables[0], variables[1]).subtract(radius);"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,82,sum = sum.add(di.multiply(di));
True,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java,85,return sum;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,20,mport java.awt.geom.Point2D;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,22,mport org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,23,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,22,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,23,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,24,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,28,lass CircleVectorial implements DifferentiableMultivariateVectorFunction {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,29,rivate ArrayList<Point2D.Double> points;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,29,class CircleVectorial implements MultivariateDifferentiableVectorFunction {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,30,private ArrayList<Vector2D> points;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,32,oints  = new ArrayList<Point2D.Double>();
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,33,points  = new ArrayList<Vector2D>();
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,36,"oints.add(new Point2D.Double(px, py));"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,37,"points.add(new Vector2D(px, py));"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,43,ublic double getRadius(Point2D.Double center) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,44,public double getRadius(Vector2D center) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,45,or (Point2D.Double point : points) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,46,for (Vector2D point : points) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,51,rivate double[][] jacobian(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,52,nt n = points.size();
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,53,"oint2D.Double center = new Point2D.Double(point[0], point[1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,55,/ gradient of the optimal radius
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,56,ouble dRdX = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,57,ouble dRdY = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,58,or (Point2D.Double pk : points) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,59,ouble dk = pk.distance(center);
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,60,RdX += (center.x - pk.x) / dk;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,61,RdY += (center.y - pk.y) / dk;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,63,RdX /= n;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,64,RdY /= n;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,66,/ jacobian of the radius residuals
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,67,ouble[][] jacobian = new double[n][2];
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,68,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,69,oint2D.Double pi = points.get(i);
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,70,ouble di   = pi.distance(center);
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,71,acobian[i][0] = (center.x - pi.x) / di - dRdX;
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,72,acobian[i][1] = (center.y - pi.y) / di - dRdY;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,52,"private DerivativeStructure distance(Vector2D point,"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,53,"DerivativeStructure cx, DerivativeStructure cy) {"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,54,DerivativeStructure dx = cx.subtract(point.getX());
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,55,DerivativeStructure dy = cy.subtract(point.getY());
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,56,return dx.multiply(dx).add(dy.multiply(dy)).sqrt();
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,75,eturn jacobian;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,59,"public DerivativeStructure getRadius(DerivativeStructure cx, DerivativeStructure cy) {"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,60,DerivativeStructure r = cx.getField().getZero();
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,61,for (Vector2D point : points) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,62,"r = r.add(distance(point, cx, cy));"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,64,return r.divide(points.size());
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,79,"oint2D.Double center = new Point2D.Double(variables[0], variables[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,68,"Vector2D center = new Vector2D(variables[0], variables[1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,90,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,91,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,92,ublic double[][] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,93,eturn jacobian(point);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,79,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,80,"DerivativeStructure radius = getRadius(variables[0], variables[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,82,DerivativeStructure[] residuals = new DerivativeStructure[points.size()];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,83,for (int i = 0; i < residuals.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,84,"residuals[i] = distance(points.get(i), variables[0], variables[1]).subtract(radius);"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java,87,return residuals;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,20,mport java.awt.geom.Point2D;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,25,mport org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,26,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,24,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,25,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,29,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,123,ouble[][] cov = optimizer.getCovariances(1.5e-14);
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,123,optimizer.getCovariances(1.5e-14);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,141,"rivate void checkEstimate(DifferentiableMultivariateVectorFunction problem,"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,141,"private void checkEstimate(MultivariateDifferentiableVectorFunction problem,"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,228,inal double chi2 = optimizer.getChiSquare();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,277,or (Point2D.Double p : factory.generate(numPoints)) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,278,"ircle.addPoint(p.x, p.y);"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,276,for (Vector2D p : factory.generate(numPoints)) {
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,277,circle.addPoint(p);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,312,"rivate static class QuadraticProblem implements DifferentiableMultivariateVectorFunction, Serializable {"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,311,"private static class QuadraticProblem implements MultivariateDifferentiableVectorFunction, Serializable {"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,328,rivate double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,329,ouble[][] jacobian = new double[x.size()][3];
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,330,or (int i = 0; i < jacobian.length; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,331,acobian[i][0] = x.get(i) * x.get(i);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,332,acobian[i][1] = x.get(i);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,333,acobian[i][2] = 1.0;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,335,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,346,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,347,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,348,ublic double[][] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,349,eturn jacobian(point);
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,335,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,336,DerivativeStructure[] values = new DerivativeStructure[x.size()];
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,337,for (int i = 0; i < values.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,338,values[i] = (variables[0].multiply(x.get(i)).add(variables[1])).multiply(x.get(i)).add(variables[2]);
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,340,return values;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,356,mplements DifferentiableMultivariateVectorFunction {
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,346,implements MultivariateDifferentiableVectorFunction {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,370,rivate double[][] jacobian(double[] params) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,371,ouble[][] jacobian = new double[time.size()][5];
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,373,or (int i = 0; i < jacobian.length; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,374,inal double t = time.get(i);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,375,acobian[i][0] = 1;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,377,inal double p3 =  params[3];
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,378,inal double p4 =  params[4];
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,379,inal double tOp3 = t / p3;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,380,inal double tOp4 = t / p4;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,381,acobian[i][1] = Math.exp(-tOp3);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,382,acobian[i][2] = Math.exp(-tOp4);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,383,acobian[i][3] = params[1] * Math.exp(-tOp3) * tOp3 / p3;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,384,acobian[i][4] = params[2] * Math.exp(-tOp4) * tOp4 / p4;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,386,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,400,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,401,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,402,ublic double[][] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,403,eturn jacobian(point);
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,371,public DerivativeStructure[] value(DerivativeStructure[] params) {
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,372,DerivativeStructure[] values = new DerivativeStructure[time.size()];
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,373,for (int i = 0; i < values.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,374,final double t = time.get(i);
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,375,values[i] = params[0].add(
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,376,params[1].multiply(params[3].reciprocal().multiply(-t).exp())).add(
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,377,params[2].multiply(params[4].reciprocal().multiply(-t).exp()));
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,379,return values;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,25,mport org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,26,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,25,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,26,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,525,"mplements DifferentiableMultivariateVectorFunction, Serializable {"
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,525,"implements MultivariateDifferentiableVectorFunction, Serializable {"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,593,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,594,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,595,ublic double[][] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,596,eturn jacobian(point);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,593,public double[] value(double[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,594,DerivativeStructure[] dsV = new DerivativeStructure[variables.length];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,595,for (int i = 0; i < variables.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,596,"dsV[i] = new DerivativeStructure(0, 0, variables[i]);"
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,598,DerivativeStructure[] dsY = value(dsV);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,599,double[] y = new double[dsY.length];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,600,for (int i = 0; i < dsY.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,601,y[i] = dsY[i].getValue();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,603,return y;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,601,ublic abstract double[][] jacobian(double[] variables);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,603,ublic abstract double[] value(double[] variables);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,606,public abstract DerivativeStructure[] value(DerivativeStructure[] variables);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,619,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,620,ouble t = 2.0 / m;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,621,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,622,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,623,acobian[i] = new double[n];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,624,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,625,acobian[i][j] = (i == j) ? (1 - t) : -t;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,628,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,631,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,632,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,633,ouble sum = 0;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,622,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,623,DerivativeStructure sum = variables[0].getField().getZero();
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,635,um += variables[i];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,625,sum = sum.add(variables[i]);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,637,ouble t  = 1 + 2 * sum / m;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,638,ouble[] f = new double[m];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,627,DerivativeStructure t  = sum.multiply(2.0 / m).add(1);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,628,DerivativeStructure[] f = new DerivativeStructure[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,640,[i] = variables[i] - t;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,630,f[i] = variables[i].subtract(t);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,642,"rrays.fill(f, n, m, -t);"
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,632,"Arrays.fill(f, n, m, t.negate());"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,659,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,660,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,661,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,662,acobian[i] = new double[n];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,663,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,664,acobian[i][j] = (i + 1) * (j + 1);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,649,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,650,DerivativeStructure[] f = new DerivativeStructure[m];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,651,DerivativeStructure sum = variables[0].getField().getZero();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,652,for (int i = 0; i < n; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,653,sum = sum.add(variables[i].multiply(i + 1));
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,667,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,670,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,671,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,672,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,673,ouble sum = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,674,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,675,um += (i + 1) * variables[i];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,677,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,678,[i] = (i + 1) * sum - 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,680,eturn f;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,655,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,656,f[i] = sum.multiply(i + 1).subtract(1);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,658,return f;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,696,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,697,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,698,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,699,acobian[i] = new double[n];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,700,acobian[i][0] = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,701,or (int j = 1; j < (n - 1); ++j) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,702,f (i == 0) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,703,acobian[i][j] = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,704, else if (i != (m - 1)) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,705,acobian[i][j] = i * (j + 1);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,706, else {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,707,acobian[i][j] = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,710,acobian[i][n - 1] = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,712,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,715,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,716,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,717,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,718,ouble sum = 0;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,674,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,675,DerivativeStructure[] f = new DerivativeStructure[m];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,676,DerivativeStructure sum = variables[0].getField().getZero();
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,720,um += (i + 1) * variables[i];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,678,sum = sum.add(variables[i].multiply(i + 1));
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,723,[i] = i * sum - 1;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,681,f[i] = sum.multiply(i).subtract(1);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,725,[m - 1] = -1;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,683,f[m - 1] = variables[0].getField().getOne().negate();
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,740,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,741,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,742,"eturn new double[][] { { -20 * x1, 10 }, { -1, 0 } };"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,745,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,746,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,747,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,748,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,749,"eturn new double[] { 10 * (x2 - x1 * x1), 1 - x1 };"
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,698,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,699,DerivativeStructure x1 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,700,DerivativeStructure x2 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,701,return new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,702,"x2.subtract(x1.multiply(x1)).multiply(10),"
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,703,x1.negate().add(1)
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,764,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,765,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,766,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,767,ouble tmpSquare = x1 * x1 + x2 * x2;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,768,ouble tmp1 = twoPi * tmpSquare;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,769,ouble tmp2 = FastMath.sqrt(tmpSquare);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,770,eturn new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,771,"  100 * x2 / tmp1, -100 * x1 / tmp1, 10 },"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,772," 10 * x1 / tmp2, 10 * x2 / tmp2, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,773," 0, 0, 1 }"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,777,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,778,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,779,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,780,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,781,ouble x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,782,ouble tmp1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,783,f (x1 == 0) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,784,mp1 = (x2 >= 0) ? 0.25 : -0.25;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,785, else {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,786,mp1 = FastMath.atan(x2 / x1) / twoPi;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,787,f (x1 < 0) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,788,mp1 += 0.5;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,719,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,720,DerivativeStructure x1 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,721,DerivativeStructure x2 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,722,DerivativeStructure x3 = variables[2];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,723,DerivativeStructure tmp1 = variables[0].getField().getZero();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,724,if (x1.getValue() == 0) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,725,tmp1 = tmp1.add((x2.getValue() >= 0) ? 0.25 : -0.25);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,726,} else {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,727,tmp1 = x2.divide(x1).atan().divide(twoPi);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,728,if (x1.getValue() < 0) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,729,tmp1 = tmp1.add(0.5);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,791,ouble tmp2 = FastMath.sqrt(x1 * x1 + x2 * x2);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,792,eturn new double[] {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,793,"0.0 * (x3 - 10 * tmp1),"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,794,"0.0 * (tmp2 - 1),"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,795,3
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,732,DerivativeStructure tmp2 = x1.multiply(x1).add(x2.multiply(x2)).sqrt();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,733,return new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,734,"x3.subtract(tmp1.multiply(10)).multiply(10),"
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,735,"tmp2.subtract(1).multiply(10),"
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,736,x3
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,813,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,814,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,815,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,816,ouble x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,817,ouble x4 = variables[3];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,818,eturn new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,819," 1, 10, 0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,820," 0, 0, sqrt5, -sqrt5 },"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,821," 0, 2 * (x2 - 2 * x3), -4 * (x2 - 2 * x3), 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,822," 2 * sqrt10 * (x1 - x4), 0, 0, -2 * sqrt10 * (x1 - x4) }"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,826,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,827,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,828,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,829,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,830,ouble x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,831,ouble x4 = variables[3];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,832,eturn new double[] {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,833,"1 + 10 * x2,"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,834,"qrt5 * (x3 - x4),"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,835,"x2 - 2 * x3) * (x2 - 2 * x3),"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,836,qrt10 * (x1 - x4) * (x1 - x4)
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,754,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,755,DerivativeStructure x1 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,756,DerivativeStructure x2 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,757,DerivativeStructure x3 = variables[2];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,758,DerivativeStructure x4 = variables[3];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,759,return new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,760,"x1.add(x2.multiply(10)),"
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,761,"x3.subtract(x4).multiply(sqrt5),"
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,762,"x2.subtract(x3.multiply(2)).multiply(x2.subtract(x3.multiply(2))),"
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,763,x1.subtract(x4).multiply(x1.subtract(x4)).multiply(sqrt10)
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,858,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,859,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,860,eturn new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,861," 1, x2 * (10 - 3 * x2) -  2 },"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,862," 1, x2 * ( 2 + 3 * x2) - 14, }"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,866,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,867,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,868,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,869,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,870,eturn new double[] {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,871,"13.0 + x1 + ((5.0 - x2) * x2 -  2.0) * x2,"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,872,29.0 + x1 + ((1.0 + x2) * x2 - 14.0) * x2
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,785,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,786,DerivativeStructure x1 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,787,DerivativeStructure x2 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,788,return new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,789,"x1.subtract(13.0).add(x2.negate().add(5.0).multiply(x2).subtract(2).multiply(x2)),"
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,790,x1.subtract(29.0).add(x2.add(1).multiply(x2).subtract(14).multiply(x2))
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,891,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,892,ouble   x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,893,ouble   x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,894,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,895,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,896,ouble tmp1 = i  + 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,897,ouble tmp2 = 15 - i;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,898,ouble tmp3 = (i <= 7) ? tmp1 : tmp2;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,899,ouble tmp4 = x2 * tmp2 + x3 * tmp3;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,900,mp4 *= tmp4;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,901,"acobian[i] = new double[] { -1, tmp1 * tmp2 / tmp4, tmp1 * tmp3 / tmp4 };"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,903,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,906,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,907,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,908,ouble   x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,909,ouble   x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,910,ouble   x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,911,ouble[] f = new double[m];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,809,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,810,DerivativeStructure   x1 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,811,DerivativeStructure   x2 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,812,DerivativeStructure   x3 = variables[2];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,813,DerivativeStructure[] f = new DerivativeStructure[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,916,[i] = y[i] - (x1 + tmp1 / (x2 * tmp2 + x3 * tmp3));
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,818,f[i] = x1.add(x2.multiply(tmp2).add(x3.multiply(tmp3)).reciprocal().multiply(tmp1)).negate().add(y[i]);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,946,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,947,ouble   x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,948,ouble   x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,949,ouble   x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,950,ouble   x4 = variables[3];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,951,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,952,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,953,ouble tmp = v[i] * (v[i] + x3) + x4;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,954,ouble j1  = -v[i] * (v[i] + x2) / tmp;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,955,ouble j2  = -v[i] * x1 / tmp;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,956,ouble j3  = j1 * j2;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,957,ouble j4  = j3 / v[i];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,958,"acobian[i] = new double[] { j1, j2, j3, j4 };"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,960,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,963,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,964,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,965,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,966,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,967,ouble x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,968,ouble x4 = variables[3];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,969,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,970,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,971,[i] = y[i] - x1 * (v[i] * (v[i] + x2)) / (v[i] * (v[i] + x3) + x4);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,973,eturn f;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,848,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,849,DerivativeStructure x1 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,850,DerivativeStructure x2 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,851,DerivativeStructure x3 = variables[2];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,852,DerivativeStructure x4 = variables[3];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,853,DerivativeStructure[] f = new DerivativeStructure[m];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,854,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,855,f[i] = x1.multiply(x2.add(v[i]).multiply(v[i])).divide(x4.add(x3.add(v[i]).multiply(v[i]))).negate().add(y[i]);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,857,return f;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1004,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1005,ouble   x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1006,ouble   x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1007,ouble   x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1008,ouble[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,888,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,889,DerivativeStructure x1 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,890,DerivativeStructure x2 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,891,DerivativeStructure x3 = variables[2];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,892,DerivativeStructure[] f = new DerivativeStructure[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1010,ouble temp = 5.0 * (i + 1) + 45.0 + x3;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1011,ouble tmp1 = x2 / temp;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1012,ouble tmp2 = FastMath.exp(tmp1);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1013,ouble tmp3 = x1 * tmp2 / temp;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1014,"acobian[i] = new double[] { tmp2, tmp3, -tmp1 * tmp3 };"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1016,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1019,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1020,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1021,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1022,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1023,ouble x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1024,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1025,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1026,[i] = x1 * FastMath.exp(x2 / (5.0 * (i + 1) + 45.0 + x3)) - y[i];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,894,f[i] = x1.multiply(x2.divide(x3.add(5.0 * (i + 1) + 45.0)).exp()).subtract(y[i]);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1053,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1055,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1057,or (int i = 0; i < (m - 2); ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1058,ouble div = (i + 1) / 29.0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1059,ouble s2  = 0.0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1060,ouble dx  = 1.0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1061,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1062,2 += dx * variables[j];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1063,x *= div;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1065,ouble temp= 2 * div * s2;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1066,x = 1.0 / div;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1067,acobian[i] = new double[n];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1068,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1069,acobian[i][j] = dx * (j - temp);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1070,x *= div;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,921,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,922,DerivativeStructure[] f = new DerivativeStructure[m];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,923,for (int i = 0; i < (m - 2); ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,924,double div = (i + 1) / 29.0;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,925,DerivativeStructure s1 = variables[0].getField().getZero();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,926,DerivativeStructure dx = variables[0].getField().getOne();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,927,for (int j = 1; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,928,s1 = s1.add(dx.multiply(j).multiply(variables[j]));
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,929,dx = dx.multiply(div);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,931,DerivativeStructure s2 = variables[0].getField().getZero();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,932,dx = variables[0].getField().getOne();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,933,for (int j = 0; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,934,s2 = s2.add(dx.multiply(variables[j]));
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,935,dx = dx.multiply(div);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,937,f[i] = s1.subtract(s2.multiply(s2)).subtract(1);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1074,acobian[m - 2]    = new double[n];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1075,acobian[m - 2][0] = 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1077,acobian[m - 1]   = new double[n];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1078,acobian[m - 1][0]= -2 * variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1079,acobian[m - 1][1]= 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1081,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1085,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1086,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1087,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1088,or (int i = 0; i < (m - 2); ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1089,ouble div = (i + 1) / 29.0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1090,ouble s1 = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1091,ouble dx = 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1092,or (int j = 1; j < n; ++j) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1093,1 += j * dx * variables[j];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1094,x *= div;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1096,ouble s2 =0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1097,x =1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1098,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1099,2 += dx * variables[j];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1100,x *= div;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1102,[i] = s1 - s2 * s2 - 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1105,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1106,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1107,[m - 2] = x1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1108,[m - 1] = x2 - x1 * x1 - 1;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,940,DerivativeStructure x1 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,941,DerivativeStructure x2 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,942,f[m - 2] = x1;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,943,f[m - 1] = x2.subtract(x1.multiply(x1)).subtract(1);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1110,eturn f;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,945,return f;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1127,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1128,ouble   x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1129,ouble   x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1130,ouble[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,962,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,963,DerivativeStructure x1 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,964,DerivativeStructure x2 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,965,DerivativeStructure x3 = variables[2];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,966,DerivativeStructure[] f = new DerivativeStructure[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1133,acobian[i] = new double[] {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1134,"tmp * FastMath.exp(-tmp * x1),"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1135,"mp * FastMath.exp(-tmp * x2),"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1136,astMath.exp(-i - 1) - FastMath.exp(-tmp)
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1139,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1142,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1143,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1144,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1145,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1146,ouble x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1147,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1148,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1149,ouble tmp = (i + 1) / 10.0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1150,[i] = FastMath.exp(-tmp * x1) - FastMath.exp(-tmp * x2)
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1151, (FastMath.exp(-i - 1) - FastMath.exp(-tmp)) * x3;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,969,f[i] = x1.multiply(-tmp).exp().subtract(x2.multiply(-tmp).exp()).add(
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,970,x3.multiply(FastMath.exp(-i - 1) - FastMath.exp(-tmp)));
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1171,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1172,ouble   x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1173,ouble   x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1174,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1175,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1176,ouble t = i + 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1177,"acobian[i] = new double[] { -t * FastMath.exp(t * x1), -t * FastMath.exp(t * x2) };"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1179,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1182,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1183,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1184,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1185,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1186,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1187,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1188,ouble temp = i + 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1189,[i] = 2 + 2 * temp - FastMath.exp(temp * x1) - FastMath.exp(temp * x2);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1191,eturn f;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,990,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,991,DerivativeStructure x1 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,992,DerivativeStructure x2 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,993,DerivativeStructure[] f = new DerivativeStructure[m];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,994,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,995,double temp = i + 1;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,996,f[i] = x1.multiply(temp).exp().add(x2.multiply(temp).exp()).subtract(2 + 2 * temp).negate();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,998,return f;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1210,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1211,ouble   x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1212,ouble   x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1213,ouble   x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1214,ouble   x4 = variables[3];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1215,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1216,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1217,ouble temp = (i + 1) / 5.0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1218,ouble ti   = FastMath.sin(temp);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1219,ouble tmp1 = x1 + temp * x2 - FastMath.exp(temp);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1220,ouble tmp2 = x3 + ti   * x4 - FastMath.cos(temp);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1221,acobian[i] = new double[] {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1222," * tmp1, 2 * temp * tmp1, 2 * tmp2, 2 * ti * tmp2"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1225,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1228,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1229,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1230,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1231,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1232,ouble x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1233,ouble x4 = variables[3];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1234,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1235,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1236,ouble temp = (i + 1) / 5.0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1237,ouble tmp1 = x1 + temp * x2 - FastMath.exp(temp);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1238,ouble tmp2 = x3 + FastMath.sin(temp) * x4 - FastMath.cos(temp);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1239,[i] = tmp1 * tmp1 + tmp2 * tmp2;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1241,eturn f;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1017,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1018,DerivativeStructure x1 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1019,DerivativeStructure x2 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1020,DerivativeStructure x3 = variables[2];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1021,DerivativeStructure x4 = variables[3];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1022,DerivativeStructure[] f = new DerivativeStructure[m];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1023,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1024,double temp = (i + 1) / 5.0;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1025,DerivativeStructure tmp1 = x1.add(x2.multiply(temp)).subtract(FastMath.exp(temp));
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1026,DerivativeStructure tmp2 = x3.add(x4.multiply(FastMath.sin(temp))).subtract(FastMath.cos(temp));
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1027,f[i] = tmp1.multiply(tmp1).add(tmp2.multiply(tmp2));
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1029,return f;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1268,ublic double[][] jacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1056,public DerivativeStructure[] value(DerivativeStructure[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1270,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1271,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1272,acobian[i] = new double[n];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1058,DerivativeStructure[] f = new DerivativeStructure[m];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1059,"Arrays.fill(f, variables[0].getField().getZero());"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1275,ouble dx = 1.0 / n;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1276,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1277,ouble tmp1 = 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1278,ouble tmp2 = 2 * variables[j] - 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1279,ouble temp = 2 * tmp2;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1280,ouble tmp3 = 0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1281,ouble tmp4 = 2;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1282,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1283,acobian[i][j] = dx * tmp4;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1284,ouble ti = 4 * tmp2 + temp * tmp4 - tmp3;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1285,mp3 = tmp4;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1286,mp4 = ti;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1287,i   = temp * tmp2 - tmp1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1288,mp1 = tmp2;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1289,mp2 = ti;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1061,for (int j = 0; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1062,DerivativeStructure tmp1 = variables[0].getField().getOne();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1063,DerivativeStructure tmp2 = variables[j].multiply(2).subtract(1);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1064,DerivativeStructure temp = tmp2.multiply(2);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1065,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1066,f[i] = f[i].add(tmp2);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1067,DerivativeStructure ti = temp.multiply(tmp2).subtract(tmp1);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1068,tmp1 = tmp2;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1069,tmp2 = ti;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1293,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1297,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1298,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1300,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1302,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1303,ouble tmp1 = 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1304,ouble tmp2 = 2 * variables[j] - 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1305,ouble temp = 2 * tmp2;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1073,double dx = 1.0 / n;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1074,boolean iev = false;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1307,[i] += tmp2;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1308,ouble ti = temp * tmp2 - tmp1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1309,mp1 = tmp2;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1310,mp2 = ti;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1076,f[i] = f[i].multiply(dx);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1077,if (iev) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1078,f[i] = f[i].add(1.0 / (i * (i + 2)));
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1080,iev = ! iev;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1314,ouble dx = 1.0 / n;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1315,oolean iev = false;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1316,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1317,[i] *= dx;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1318,f (iev) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1319,[i] += 1.0 / (i * (i + 2));
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1321,ev = ! iev;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1324,eturn f;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1083,return f;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1343,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1344,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1345,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1346,acobian[i] = new double[n];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1349,ouble prod = 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1350,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1351,rod *= variables[j];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1352,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1353,acobian[i][j] = 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1355,acobian[j][j] = 2;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1358,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1359,ouble temp = variables[j];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1360,f (temp == 0) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1361,emp = 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1362,rod = 1;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1363,or (int k = 0; k < n; ++k) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1364,f (k != j) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1365,rod *= variables[k];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1369,acobian[n - 1][j] = prod / temp;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1372,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1376,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1377,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1378,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1379,ouble sum  = -(n + 1);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1380,ouble prod = 1;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1102,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1103,DerivativeStructure[] f = new DerivativeStructure[m];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1104,DerivativeStructure sum  = variables[0].getField().getZero().subtract(n + 1);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1105,DerivativeStructure prod = variables[0].getField().getOne();
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1382,um  += variables[j];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1383,rod *= variables[j];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1107,sum  = sum.add(variables[j]);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1108,prod = prod.multiply(variables[j]);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1386,[i] = variables[i] + sum;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1111,f[i] = variables[i].add(sum);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1388,[n - 1] = prod - 1;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1113,f[n - 1] = prod.subtract(1);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1407,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1408,ouble   x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1409,ouble   x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1410,ouble   x4 = variables[3];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1411,ouble   x5 = variables[4];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1412,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1413,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1414,ouble temp = 10.0 * i;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1415,ouble tmp1 = FastMath.exp(-temp * x4);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1416,ouble tmp2 = FastMath.exp(-temp * x5);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1417,acobian[i] = new double[] {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1418,"1, -tmp1, -tmp2, temp * x2 * tmp1, temp * x3 * tmp2"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1421,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1424,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1425,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1426,ouble x1 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1427,ouble x2 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1428,ouble x3 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1429,ouble x4 = variables[3];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1430,ouble x5 = variables[4];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1431,ouble[] f = new double[m];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1132,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1133,DerivativeStructure x1 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1134,DerivativeStructure x2 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1135,DerivativeStructure x3 = variables[2];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1136,DerivativeStructure x4 = variables[3];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1137,DerivativeStructure x5 = variables[4];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1138,DerivativeStructure[] f = new DerivativeStructure[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1434,ouble tmp1 = FastMath.exp(-temp * x4);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1435,ouble tmp2 = FastMath.exp(-temp * x5);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1436,[i] = y[i] - (x1 + x2 * tmp1 + x3 * tmp2);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1141,DerivativeStructure tmp1 = x4.multiply(-temp).exp();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1142,DerivativeStructure tmp2 = x5.multiply(-temp).exp();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1143,f[i] = x1.add(x2.multiply(tmp1)).add(x3.multiply(tmp2)).negate().add(y[i]);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1462,ublic double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1463,ouble   x01 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1464,ouble   x02 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1465,ouble   x03 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1466,ouble   x04 = variables[3];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1467,ouble   x05 = variables[4];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1468,ouble   x06 = variables[5];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1469,ouble   x07 = variables[6];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1470,ouble   x08 = variables[7];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1471,ouble   x09 = variables[8];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1472,ouble   x10 = variables[9];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1473,ouble   x11 = variables[10];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1474,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1475,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1476,ouble temp = i / 10.0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1477,ouble tmp1 = FastMath.exp(-x05 * temp);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1478,ouble tmp2 = FastMath.exp(-x06 * (temp - x09) * (temp - x09));
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1479,ouble tmp3 = FastMath.exp(-x07 * (temp - x10) * (temp - x10));
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1480,ouble tmp4 = FastMath.exp(-x08 * (temp - x11) * (temp - x11));
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1481,acobian[i] = new double[] {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1482,"tmp1,"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1483,"tmp2,"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1484,"tmp3,"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1485,"tmp4,"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1486,"emp * x01 * tmp1,"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1487,"02 * (temp - x09) * (temp - x09) * tmp2,"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1488,"03 * (temp - x10) * (temp - x10) * tmp3,"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1489,"04 * (temp - x11) * (temp - x11) * tmp4,"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1490,"2 * x02 * x06 * (temp - x09) * tmp2,"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1491,"2 * x03 * x07 * (temp - x10) * tmp3,"
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1492,2 * x04 * x08 * (temp - x11) * tmp4
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1495,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1498,Override
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1499,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1500,ouble x01 = variables[0];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1501,ouble x02 = variables[1];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1502,ouble x03 = variables[2];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1503,ouble x04 = variables[3];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1504,ouble x05 = variables[4];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1505,ouble x06 = variables[5];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1506,ouble x07 = variables[6];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1507,ouble x08 = variables[7];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1508,ouble x09 = variables[8];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1509,ouble x10 = variables[9];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1510,ouble x11 = variables[10];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1511,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1512,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1513,ouble temp = i / 10.0;
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1514,ouble tmp1 = FastMath.exp(-x05 * temp);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1515,ouble tmp2 = FastMath.exp(-x06 * (temp - x09) * (temp - x09));
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1516,ouble tmp3 = FastMath.exp(-x07 * (temp - x10) * (temp - x10));
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1517,ouble tmp4 = FastMath.exp(-x08 * (temp - x11) * (temp - x11));
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1518,[i] = y[i] - (x01 * tmp1 + x02 * tmp2 + x03 * tmp3 + x04 * tmp4);
False,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1520,eturn f;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1169,public DerivativeStructure[] value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1170,DerivativeStructure x01 = variables[0];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1171,DerivativeStructure x02 = variables[1];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1172,DerivativeStructure x03 = variables[2];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1173,DerivativeStructure x04 = variables[3];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1174,DerivativeStructure x05 = variables[4];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1175,DerivativeStructure x06 = variables[5];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1176,DerivativeStructure x07 = variables[6];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1177,DerivativeStructure x08 = variables[7];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1178,DerivativeStructure x09 = variables[8];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1179,DerivativeStructure x10 = variables[9];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1180,DerivativeStructure x11 = variables[10];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1181,DerivativeStructure[] f = new DerivativeStructure[m];
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1182,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1183,double temp = i / 10.0;
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1184,DerivativeStructure tmp1 = x05.multiply(-temp).exp();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1185,DerivativeStructure tmp2 = x06.negate().multiply(x09.subtract(temp).multiply(x09.subtract(temp))).exp();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1186,DerivativeStructure tmp3 = x07.negate().multiply(x10.subtract(temp).multiply(x10.subtract(temp))).exp();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1187,DerivativeStructure tmp4 = x08.negate().multiply(x11.subtract(temp).multiply(x11.subtract(temp))).exp();
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1188,f[i] = x01.multiply(tmp1).add(x02.multiply(tmp2)).add(x03.multiply(tmp3)).add(x04.multiply(tmp4)).negate().add(y[i]);
True,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java,1190,return f;
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,20,mport java.awt.geom.Point2D;
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,25,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,26,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,28,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,29,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,30,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,340,"oint2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,345,"Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,342,"ssert.assertEquals(96.075902096, center.x, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,343,"ssert.assertEquals(48.135167894, center.y, 1.0e-8);"
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,347,"Assert.assertEquals(96.075902096, center.getX(), 1.0e-8);"
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,348,"Assert.assertEquals(48.135167894, center.getY(), 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,346,"rivate static class LinearProblem implements DifferentiableMultivariateFunction, Serializable {"
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,351,"private static class LinearProblem implements MultivariateDifferentiableFunction, Serializable {"
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,356,rivate double[] gradient(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,357,ouble[] r = factors.operate(point);
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,358,or (int i = 0; i < r.length; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,359,[i] -= target[i];
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,361,ouble[] p = factors.transpose().operate(r);
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,362,or (int i = 0; i < p.length; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,363,[i] *= 2;
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,365,eturn p;
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,378,ublic MultivariateVectorFunction gradient() {
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,379,eturn new MultivariateVectorFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,380,ublic double[] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,381,eturn gradient(point);
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,371,public DerivativeStructure value(DerivativeStructure[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,372,DerivativeStructure[] y = new DerivativeStructure[factors.getRowDimension()];
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,373,for (int i = 0; i < y.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,374,y[i] = variables[0].getField().getZero();
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,375,for (int j = 0; j < factors.getColumnDimension(); ++j) {
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,376,"y[i] = y[i].add(variables[j].multiply(factors.getEntry(i, j)));"
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,386,ublic MultivariateFunction partialDerivative(final int k) {
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,387,eturn new MultivariateFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,388,ublic double value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,389,eturn gradient(point)[k];
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,380,DerivativeStructure sum = variables[0].getField().getZero();
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,381,for (int i = 0; i < y.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,382,DerivativeStructure ri = y[i].subtract(target[i]);
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,383,sum = sum.add(ri.multiply(ri));
True,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java,385,return sum;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,20,mport java.awt.geom.Point2D;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,27,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,72,ublic Point2D.Double[] generate(int n) {
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,73,inal Point2D.Double[] cloud = new Point2D.Double[n];
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,72,public Vector2D[] generate(int n) {
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,73,final Vector2D[] cloud = new Vector2D[n];
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,85,rivate Point2D.Double create() {
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,85,private Vector2D create() {
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,90,"eturn new Point2D.Double(pX, pY);"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,90,"return new Vector2D(pX, pY);"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,23,mport org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,24,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,24,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,70,rivate final DifferentiableMultivariateVectorFunction problem;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,70,private final MultivariateDifferentiableVectorFunction problem;
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,153,his.problem = new DifferentiableMultivariateVectorFunction() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,153,this.problem = new MultivariateDifferentiableVectorFunction() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,156,DerivativeStructure[] dsA = new DerivativeStructure[a.length];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,157,for (int i = 0; i < a.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,158,"dsA[i] = new DerivativeStructure(a.length, 0, a[i]);"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,158,"hat[i] = getModelValue(getX(i), a);"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,163,"yhat[i] = getModelValue(getX(i), dsA).getValue();"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,163,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,164,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,165,ublic double[][] value(final double[] a)
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,166,hrows IllegalArgumentException {
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,167,inal int n = getNumObservations();
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,168,inal double[][] j = new double[n][];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,169,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,170,"[i] = getModelDerivatives(getX(i), a);"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,172,eturn j;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,168,public DerivativeStructure[] value(final DerivativeStructure[] a) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,169,final int n = getNumObservations();
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,170,final DerivativeStructure[] yhat = new DerivativeStructure[n];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,171,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,172,"yhat[i] = getModelValue(getX(i), a);"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,174,return yhat;
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,312,ublic DifferentiableMultivariateVectorFunction getLeastSquaresProblem() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,313,public MultivariateDifferentiableVectorFunction getLeastSquaresProblem() {
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,324,"ublic abstract double getModelValue(final double x, final double[] a);"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,327, Returns the values of the partial derivatives of the model with respect
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,328, to the parameters.
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,330, @param x the predictor variable
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,331, @param a the parameters
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,332, @return the partial derivatives
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,334,"ublic abstract double[] getModelDerivatives(final double x,"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,335,inal double[] a);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,325,"public abstract DerivativeStructure getModelValue(final double x, final DerivativeStructure[] a);"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,24,mport org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,24,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,62,"ublic double getModelValue(final double x, final double[] a) {"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,63,inal double p = a[0] + x * (a[1] + x * a[2]);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,64,inal double q = 1.0 + x * (a[3] + x * a[4]);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,65,eturn p / q;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,62,"public DerivativeStructure getModelValue(final double x, final DerivativeStructure[] a) {"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,63,final DerivativeStructure p = a[0].add(a[1].add(a[2].multiply(x)).multiply(x));
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,64,final DerivativeStructure q = a[3].add(a[4].multiply(x)).multiply(x).add(1.0);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,65,return p.divide(q);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,68,Override
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,69,"ublic double[] getModelDerivatives(final double x,"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,70,inal double[] a) {
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,71,inal double[] dy = new double[5];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,72,inal double p = a[0] + x * (a[1] + x * a[2]);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,73,inal double q = 1.0 + x * (a[3] + x * a[4]);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,74,y[0] = 1.0 / q;
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,75,y[1] = x / q;
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,76,y[2] = x * dy[1];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,77,y[3] = -x * p / (q * q);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,78,y[4] = x * dy[3];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,79,eturn dy;
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,96,"ublic double getModelValue(final double x, final double[] a) {"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,97,inal double p = a[0] + x * (a[1] + x * (a[2] + x * a[3]));
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,98,inal double q = 1.0 + x * (a[4] + x * (a[5] + x * a[6]));
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,99,eturn p / q;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,83,"public DerivativeStructure getModelValue(final double x, final DerivativeStructure[] a) {"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,84,final DerivativeStructure p = a[0].add(a[1].add(a[2].add(a[3].multiply(x)).multiply(x)).multiply(x));
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,85,final DerivativeStructure q = a[4].add(a[5].add(a[6].multiply(x)).multiply(x)).multiply(x).add(1.0);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,86,return p.divide(q);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,102,Override
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,103,"ublic double[] getModelDerivatives(final double x,"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,104,inal double[] a) {
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,105,inal double[] dy = new double[7];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,106,inal double p = a[0] + x * (a[1] + x * (a[2] + x * a[3]));
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,107,inal double q = 1.0 + x * (a[4] + x * (a[5] + x * a[6]));
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,108,y[0] = 1.0 / q;
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,109,y[1] = x * dy[0];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,110,y[2] = x * dy[1];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,111,y[3] = x * dy[2];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,112,y[4] = -x * p / (q * q);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,113,y[5] = x * dy[4];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,114,y[6] = x * dy[5];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,115,eturn dy;
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,132,"ublic double getModelValue(final double x, final double[] a) {"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,133,eturn a[0] + a[1] * FastMath.exp(-a[3] * x) + a[2] *
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,134,astMath.exp(-a[4] * x);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,104,"public DerivativeStructure getModelValue(final double x, final DerivativeStructure[] a) {"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,105,return a[0].add(a[1].multiply(a[3].multiply(-x).exp())).add(a[2].multiply(a[4].multiply(-x).exp()));
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,137,Override
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,138,"ublic double[] getModelDerivatives(final double x,"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,139,inal double[] a) {
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,140,inal double[] dy = new double[5];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,141,y[0] = 1.0;
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,142,y[1] = FastMath.exp(-x * a[3]);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,143,y[2] = FastMath.exp(-x * a[4]);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,144,y[3] = -x * a[1] * dy[1];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,145,y[4] = -x * a[2] * dy[2];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,146,eturn dy;
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,164,"ublic double getModelValue(final double x, final double[] a) {"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,165,"ystem.out.println(a[0]+"", ""+a[1]+"", ""+a[2]+"", ""+a[3]+"", ""+a[4]+"", ""+a[5]);"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,166,eturn a[0] * FastMath.exp(-a[3] * x) +
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,167,[1] * FastMath.exp(-a[4] * x) +
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,168,[2] * FastMath.exp(-a[5] * x);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,124,"public DerivativeStructure getModelValue(final double x, final DerivativeStructure[] a) {"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,125,return a[0].multiply(a[3].multiply(-x).exp()).add(
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,126,a[1].multiply(a[4].multiply(-x).exp())).add(
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,127,a[2].multiply(a[5].multiply(-x).exp()));
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,171,Override
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,172,"ublic double[] getModelDerivatives(final double x,"
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,173,inal double[] a) {
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,174,inal double[] dy = new double[6];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,175,y[0] = FastMath.exp(-x * a[3]);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,176,y[1] = FastMath.exp(-x * a[4]);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,177,y[2] = FastMath.exp(-x * a[5]);
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,178,y[3] = -x * a[0] * dy[0];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,179,y[4] = -x * a[1] * dy[1];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,180,y[5] = -x * a[2] * dy[2];
False,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,181,eturn dy;
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,21,mport org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,22,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,23,mport org.apache.commons.math3.analysis.UnivariateFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,22,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,23,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,38,lass StraightLineProblem implements DifferentiableMultivariateVectorFunction {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,39,class StraightLineProblem implements MultivariateDifferentiableVectorFunction {
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,97,"inal Model line = new Model(params[0], params[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,98,"final Model line = new Model(new DerivativeStructure(0, 0, params[0]),"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,99,"new DerivativeStructure(0, 0, params[1]));"
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,108,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,109,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,110,ublic double[][] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,111,eturn jacobian(point);
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,110,public DerivativeStructure[] value(DerivativeStructure[] params) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,111,"final Model line = new Model(params[0], params[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,113,final DerivativeStructure[] model = new DerivativeStructure[points.size()];
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,114,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,115,final DerivativeStructure p0 = params[0].getField().getZero().add(points.get(i)[0]);
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,116,model[i] = line.value(p0);
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,119,return model;
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,130,rivate double[][] jacobian(double[] params) {
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,131,inal double[][] jacobian = new double[points.size()][2];
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,133,or (int i = 0; i < points.size(); i++) {
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,134,inal double[] p = points.get(i);
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,135,"/ Partial derivative wrt ""a""."
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,136,acobian[i][0] = p[0];
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,137,"/ Partial derivative wrt ""b""."
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,138,acobian[i][1] = 1;
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,141,eturn jacobian;
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,147,ublic static class Model implements UnivariateFunction {
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,148,inal double a;
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,149,inal double b;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,139,public static class Model implements UnivariateDifferentiableFunction {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,140,final DerivativeStructure a;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,141,final DerivativeStructure b;
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,151,"ublic Model(double a,"
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,152,ouble b) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,143,"public Model(DerivativeStructure a,"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,144,DerivativeStructure b) {
False,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,158,eturn a * x + b;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,150,return a.getValue() * x + b.getValue();
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,153,public DerivativeStructure value(DerivativeStructure x) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,154,return x.multiply(a).add(b);

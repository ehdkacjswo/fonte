is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,30, @see org.apache.commons.math.optimization.SimpleRealPointChecker
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,30,* @see org.apache.commons.math.optimization.SimplePointChecker<PointValuePair>
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,21,import org.apache.commons.math.util.Pair;
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,32,"* @param <PAIR> Type of the (point, value) pair."
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,33,"* @param <V> Type of the ""value"" part of the pair (not used by this class)."
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,34,ublic class SimpleRealPointChecker
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,35,xtends AbstractConvergenceChecker<PointValuePair> {
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,38,"public class SimplePointChecker<PAIR extends Pair<double[], ? extends Object>>"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,39,extends AbstractConvergenceChecker<PAIR> {
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,39,ublic SimpleRealPointChecker() {}
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,43,public SimplePointChecker() {}
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,50,"ublic SimpleRealPointChecker(final double relativeThreshold,"
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,51,inal double absoluteThreshold) {
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,54,"public SimplePointChecker(final double relativeThreshold,"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,55,final double absoluteThreshold) {
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,73,"inal PointValuePair previous,"
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,74,inal PointValuePair current) {
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,75,inal double[] p = previous.getPoint();
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,76,inal double[] c = current.getPoint();
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,77,"final PAIR previous,"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,78,final PAIR current) {
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,79,final double[] p = previous.getKey();
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,80,final double[] c = current.getKey();
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,78,inal double difference = FastMath.abs(p[i] - c[i]);
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,79,"inal double size = FastMath.max(FastMath.abs(p[i]), FastMath.abs(c[i]));"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,82,final double pi = p[i];
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,83,final double ci = c[i];
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,84,final double difference = FastMath.abs(pi - ci);
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimplePointChecker.java,85,"final double size = FastMath.max(FastMath.abs(pi), FastMath.abs(ci));"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,18,ackage org.apache.commons.math.optimization;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,21, Simple implementation of the {@link ConvergenceChecker} interface using
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,22, only point coordinates.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,24, Convergence is considered to have been reached if either the relative
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,25, difference between each point coordinate are smaller than a threshold
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,26, or if either the absolute difference between the point coordinates are
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,27, smaller than another threshold.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,29, @version $Id$
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,30, @since 3.0
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,32,ublic class SimpleVectorialPointChecker
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,33,xtends AbstractConvergenceChecker<PointVectorValuePair> {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,35, Build an instance with default threshold.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,37,ublic SimpleVectorialPointChecker() {}
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,40, Build an instance with a specified threshold.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,42," In order to perform only relative checks, the absolute tolerance"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,43, must be set to a negative value. In order to perform only absolute
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,44," checks, the relative tolerance must be set to a negative value."
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,46, @param relativeThreshold relative tolerance threshold
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,47, @param absoluteThreshold absolute tolerance threshold
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,49,"ublic SimpleVectorialPointChecker(final double relativeThreshold,"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,50,inal double absoluteThreshold) {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,51,"uper(relativeThreshold, absoluteThreshold);"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,55, Check if the optimization algorithm has converged considering the
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,56, last two points.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,57, This method may be called several time from the same algorithm
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,58, iteration with different points. This can be detected by checking the
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,59, iteration number at each call if needed. Each time this method is
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,60," called, the previous and current point correspond to points with the"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,61," same role at each iteration, so they can be compared. As an example,"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,62," simplex-based algorithms call this method for all points of the simplex,"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,63, not only for the best or worst ones.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,65, @param iteration Index of current iteration
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,66, @param previous Best point in the previous iteration.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,67, @param current Best point in the current iteration.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,68, @return {@code true} if the algorithm has converged.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,70,Override
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,71,"ublic boolean converged(final int iteration,"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,72,"inal PointVectorValuePair previous,"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,73,inal PointVectorValuePair current) {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,74,inal double[] p = previous.getPointRef();
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,75,inal double[] c = current.getPointRef();
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,76,or (int i = 0; i < p.length; ++i) {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,77,inal double pi = p[i];
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,78,inal double ci = c[i];
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,79,inal double difference = Math.abs(pi - ci);
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,80,"inal double size = Math.max(Math.abs(pi), Math.abs(ci));"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,81,f (difference > size * getRelativeThreshold() &&
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,82,ifference > getAbsoluteThreshold()) {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,83,eturn false;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,86,eturn true;
False,src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,27, {@link SimpleVectorialValueChecker} and {@link SimpleVectorialPointChecker}. The first
True,src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,27,* {@link SimpleVectorialValueChecker} and {@link SimplePointChecker<PointVectorValuePair>}. The first
False,src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java,24,mport org.apache.commons.math.optimization.SimpleRealPointChecker;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java,24,import org.apache.commons.math.optimization.SimplePointChecker;
False,src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java,82,"implexOptimizer optimizer = new SimplexOptimizer(new SimpleRealPointChecker(1.0e-11, 1.0e-20));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java,82,"SimplexOptimizer optimizer = new SimplexOptimizer(new SimplePointChecker<PointValuePair>(1.0e-11, 1.0e-20));"
False,src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java,128,"implexOptimizer optimizer = new SimplexOptimizer(new SimpleRealPointChecker(1.0e-10, 1.0e-20));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java,128,"SimplexOptimizer optimizer = new SimplexOptimizer(new SimplePointChecker<PointValuePair>(1.0e-10, 1.0e-20));"

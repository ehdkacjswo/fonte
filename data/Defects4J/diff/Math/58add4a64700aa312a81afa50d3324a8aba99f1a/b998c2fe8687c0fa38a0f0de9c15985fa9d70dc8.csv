is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,35,mport org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,36,mport org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,38,** Transformer for Nordsieck vectors.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,39, <p>This class i used by {@link MultistepIntegrator multistep integrators}
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,40, to convert between classical representation with several previous first
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,41, derivatives and Nordsieck representation with higher order scaled derivatives.</p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,36,/** Transformer to Nordsieck vectors for Adams integrators.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,37,* <p>This class i used by {@link AdamsBashforthIntegrator Adams-Bashforth} and
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,38,* {@link AdamsMoultonIntegrator Adams-Moulton} integrators to convert between
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,39,* classical representation with several previous first derivatives and Nordsieck
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,40,* representation with higher order scaled derivatives.</p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,92, classical representation and Nordsieck vector at step start. The resulting Q matrix is simply
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,91,* classical representation and Nordsieck vector at step start. The resulting matrix is simply
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,95, <p>Using the Nordsieck vector has several advantages:
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,96, <ul>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,97,   <li>it greatly simplifies step interpolation as the interpolator mainly applies
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,98,"   Taylor series formulas,</li>"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,99,   <li>it simplifies step changes that occur when discrete events that truncate
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,100,"   the step are triggered,</li>"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,101,   <li>it allows to extend the methods in order to support adaptive stepsize (not implemented yet).</li>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,102, </ul></p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,129, where A is a rows shifting matrix (the lower left part is an identity matrix):
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,130, <pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,131,        [ 0 0   ...  0 0 | 0 ]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,133,        [ 1 0   ...  0 0 | 0 ]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,134,    A = [ 0 1   ...  0 0 | 0 ]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,135,        [       ...      | 0 ]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,136,        [ 0 0   ...  1 0 | 0 ]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,137,        [ 0 0   ...  0 1 | 0 ]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,138, </pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,156,ublic class NordsieckTransformer {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,136,public class AdamsNordsieckTransformer {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,159,"rivate static final Map<Integer, NordsieckTransformer> cache ="
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,160,"ew HashMap<Integer, NordsieckTransformer>();"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,139,"private static final Map<Integer, AdamsNordsieckTransformer> cache ="
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,140,"new HashMap<Integer, AdamsNordsieckTransformer>();"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,163,rivate final RealMatrix initialization;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,143,private final Array2DRowRealMatrix initialization;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,166,rivate final RealMatrix update;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,146,private final Array2DRowRealMatrix update;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,173, (including the one being computed)
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,153,* (excluding the one being computed)
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,175,rivate NordsieckTransformer(final int nSteps) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,155,private AdamsNordsieckTransformer(final int nSteps) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,181,igFraction[] u = new BigFraction[nSteps - 1];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,162,BigFraction[] u = new BigFraction[nSteps];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,193,hiftedP[0] = new BigFraction[nSteps - 1];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,174,shiftedP[0] = new BigFraction[nSteps];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,198,"/ initialization coefficients, computed from a Q matrix = abs(P)"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,179,"// initialization coefficients, computed from a R matrix = abs(P)"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,206,ieldMatrix<BigFraction> bigQInverse =
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,187,FieldMatrix<BigFraction> bigRInverse =
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,210,nitialization = MatrixUtils.bigFractionMatrixToRealMatrix(bigQInverse);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,191,initialization = MatrixUtils.bigFractionMatrixToRealMatrix(bigRInverse);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,212,1             = new double[nSteps - 1];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,213,or (int i = 0; i < nSteps - 1; ++i) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,193,c1             = new double[nSteps];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,194,for (int i = 0; i < nSteps; ++i) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,221, (including the one being computed)
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,202,* (excluding the one being computed)
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,224,ublic static NordsieckTransformer getInstance(final int nSteps) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,205,public static AdamsNordsieckTransformer getInstance(final int nSteps) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,226,ordsieckTransformer t = cache.get(nSteps);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,207,AdamsNordsieckTransformer t = cache.get(nSteps);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,228, = new NordsieckTransformer(nSteps);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,209,t = new AdamsNordsieckTransformer(nSteps);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,235,** Build the P matrix transforming multistep to Nordsieck.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,236, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,237," Multistep representation uses y(k), s<sub>1</sub>(k), s<sub>1</sub>(k-1) ... s<sub>1</sub>(k-(n-1))."
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,238," Nordsieck representation uses y(k), s<sub>1</sub>(k), s<sub>2</sub>(k) ... s<sub>n</sub>(k)."
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,239, The two representations share their two first components y(k) and
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,240, s<sub>1</sub>(k). The P matrix is used to transform the remaining ones:
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,216,/** Get the number of steps of the method
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,217,* (excluding the one being computed).
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,218,* @return number of steps of the method
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,219,* (excluding the one being computed)
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,221,public int getNSteps() {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,222,return c1.length;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,225,/** Build the P matrix.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,226,* <p>The P matrix general terms are shifted j (-i)<sup>j-1</sup> terms:
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,242, [ s<sub>1</sub>(k-1) ... s<sub>1</sub>(k-(n-1)]<sup>T</sup> = s<sub>1</sub>(k) [1 ... 1]<sup>T</sup> + P [s<sub>2</sub>(k) ... s<sub>n</sub>(k)]<sup>T</sup>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,243, </pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,244, </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,228,*        [  -2   3   -4    5  ... ]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,229,*        [  -4  12  -32   80  ... ]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,230,*   P =  [  -6  27 -108  405  ... ]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,231,*        [  -8  48 -256 1280  ... ]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,233,* </pre></p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,246, (including the one being computed)
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,235,* (excluding the one being computed)
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,251,inal BigFraction[][] pData = new BigFraction[nSteps - 1][nSteps - 1];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,240,final BigFraction[][] pData = new BigFraction[nSteps][nSteps];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,274,"ublic RealMatrix initializeHighOrderDerivatives(final double[] first,"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,263,"public Array2DRowRealMatrix initializeHighOrderDerivatives(final double[] first,"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,285,** Update the high order scaled derivatives (phase 1).
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,274,/** Update the high order scaled derivatives for Adams integrators (phase 1).
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,296,ublic RealMatrix updateHighOrderDerivativesPhase1(final RealMatrix highOrder) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,285,public Array2DRowRealMatrix updateHighOrderDerivativesPhase1(final Array2DRowRealMatrix highOrder) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,300,** Update the high order scaled derivatives (phase 2).
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,289,/** Update the high order scaled derivatives Adams integrators (phase 2).

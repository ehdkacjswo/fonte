is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,17,package org.apache.commons.math.filter;
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,19,import org.apache.commons.math.linear.Array2DRowRealMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,20,import org.apache.commons.math.linear.RealMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,23,* Default implementation of a {@link MeasurementModel} for the use with a
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,24,* {@link KalmanFilter}.
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,26,* @version $Id$
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,28,public class DefaultMeasurementModel implements MeasurementModel {
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,30,private RealMatrix measurementMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,31,private RealMatrix measurementNoise;
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,34,"* Create a new {@link MeasurementModel}, taking double arrays as input"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,35,* parameters for the respective measurement matrix and noise.
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,37,* @param measurementMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,38,*            the measurement matrix
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,39,* @param measurementNoise
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,40,*            the measurement noise matrix
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,42,"public DefaultMeasurementModel(final double[][] measurementMatrix,"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,43,final double[][] measurementNoise) {
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,44,"this(new Array2DRowRealMatrix(measurementMatrix),"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,45,new Array2DRowRealMatrix(measurementNoise));
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,49,"* Create a new {@link MeasurementModel}, taking {@link RealMatrix} objects"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,50,* as input parameters for the respective measurement matrix and noise.
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,52,* @param measurementMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,53,* @param measurementNoise
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,55,"public DefaultMeasurementModel(final RealMatrix measurementMatrix,"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,56,final RealMatrix measurementNoise) {
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,57,this.measurementMatrix = measurementMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,58,this.measurementNoise = measurementNoise;
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,62,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,64,public RealMatrix getMeasurementMatrix() {
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,65,return measurementMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,69,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,71,public RealMatrix getMeasurementNoise() {
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,72,return measurementNoise;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,17,package org.apache.commons.math.filter;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,19,import org.apache.commons.math.linear.Array2DRowRealMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,20,import org.apache.commons.math.linear.ArrayRealVector;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,21,import org.apache.commons.math.linear.RealMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,22,import org.apache.commons.math.linear.RealVector;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,25,* Default implementation of a {@link ProcessModel} for the use with a
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,26,* {@link KalmanFilter}.
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,28,* @version $Id$
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,30,public class DefaultProcessModel implements ProcessModel {
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,32,private RealMatrix stateTransitionMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,33,private RealMatrix controlMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,34,private RealMatrix processNoise;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,35,private RealVector initialStateEstimate;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,36,private RealMatrix initialErrorCovariance;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,39,"* Create a new {@link ProcessModel}, taking double arrays as input"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,40,* parameters.
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,42,* @param stateTransitionMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,43,*            the state transition matrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,44,* @param controlMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,45,*            the control matrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,46,* @param processNoise
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,47,*            the process noise matrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,48,* @param initialStateEstimate
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,49,*            the initial state estimate vector
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,50,* @param initialErrorCovariance
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,51,*            the initial error covariance matrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,53,"public DefaultProcessModel(final double[][] stateTransitionMatrix,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,54,"final double[][] controlMatrix, final double[][] processNoise,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,55,"final double[] initialStateEstimate,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,56,final double[][] initialErrorCovariance) {
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,57,"this(new Array2DRowRealMatrix(stateTransitionMatrix),"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,58,"new Array2DRowRealMatrix(controlMatrix),"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,59,"new Array2DRowRealMatrix(processNoise), new ArrayRealVector("
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,60,"initialStateEstimate), new Array2DRowRealMatrix("
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,61,initialErrorCovariance));
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,65,"* Create a new {@link ProcessModel}, taking double arrays as input"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,66,* parameters. The initial state estimate and error covariance are omitted
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,67,* and will be initialized by the {@link KalmanFilter} to default values.
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,69,* @param stateTransitionMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,70,*            the state transition matrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,71,* @param controlMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,72,*            the control matrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,73,* @param processNoise
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,74,*            the process noise matrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,76,"public DefaultProcessModel(final double[][] stateTransitionMatrix,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,77,"final double[][] controlMatrix, final double[][] processNoise) {"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,78,"this(new Array2DRowRealMatrix(stateTransitionMatrix),"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,79,"new Array2DRowRealMatrix(controlMatrix),"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,80,"new Array2DRowRealMatrix(processNoise), null, null);"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,84,"* Create a new {@link ProcessModel}, taking double arrays as input"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,85,* parameters.
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,87,* @param stateTransitionMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,88,*            the state transition matrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,89,* @param controlMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,90,*            the control matrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,91,* @param processNoise
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,92,*            the process noise matrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,93,* @param initialStateEstimate
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,94,*            the initial state estimate vector
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,95,* @param initialErrorCovariance
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,96,*            the initial error covariance matrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,98,"public DefaultProcessModel(final RealMatrix stateTransitionMatrix,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,99,"final RealMatrix controlMatrix, final RealMatrix processNoise,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,100,"final RealVector initialStateEstimate,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,101,final RealMatrix initialErrorCovariance) {
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,102,this.stateTransitionMatrix = stateTransitionMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,103,this.controlMatrix = controlMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,104,this.processNoise = processNoise;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,105,this.initialStateEstimate = initialStateEstimate;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,106,this.initialErrorCovariance = initialErrorCovariance;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,110,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,112,public RealMatrix getStateTransitionMatrix() {
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,113,return stateTransitionMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,117,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,119,public RealMatrix getControlMatrix() {
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,120,return controlMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,124,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,126,public RealMatrix getProcessNoise() {
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,127,return processNoise;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,131,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,133,public RealVector getInitialStateEstimate() {
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,134,return initialStateEstimate;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,138,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,140,public RealMatrix getInitialErrorCovariance() {
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,141,return initialErrorCovariance;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,17,package org.apache.commons.math.filter;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,19,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,20,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,21,import org.apache.commons.math.linear.Array2DRowRealMatrix;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,22,import org.apache.commons.math.linear.ArrayRealVector;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,23,import org.apache.commons.math.linear.CholeskyDecompositionImpl;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,24,import org.apache.commons.math.linear.DecompositionSolver;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,25,import org.apache.commons.math.linear.MatrixDimensionMismatchException;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,26,import org.apache.commons.math.linear.MatrixUtils;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,27,import org.apache.commons.math.linear.NonSquareMatrixException;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,28,import org.apache.commons.math.linear.RealMatrix;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,29,import org.apache.commons.math.linear.RealVector;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,30,import org.apache.commons.math.linear.SingularMatrixException;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,31,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,34,* Implementation of a Kalman filter to estimate the state <i>x<sub>k</sub> of a
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,35,* discrete-time controlled process that is governed by the linear stochastic
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,36,* difference equation:
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,38,* <pre>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,39,* <i>x<sub>k</sub> = <b>A</b><i>x<sub>k-1</sub> + <b>B</b><i>u<sub>k-1</sub> + <i>w<sub>k-1</sub>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,40,* </pre>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,42,* with a measurement <i>x<sub>k</sub> that is
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,44,* <pre>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,45,* <i>z<sub>k</sub> = <b>H</b><i>x<sub>k</sub> + <i>v<sub>k</sub>.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,46,* </pre>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,48,* The random variables <i>w<sub>k</sub> and <i>v<sub>k</sub> represent the
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,49,* process and measurement noise and are assumed to be independent of each other
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,50,* and distributed with normal probability (white noise).
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,51,* <p>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,52,* The Kalman filter cycle involves the following steps:
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,53,* <ol>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,54,* <li>predict: project the current state estimate ahead in time</li>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,55,* <li>correct: adjust the projected estimate by an actual measurement</li>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,56,* </ol>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,57,* </p>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,59,"* @see <a href=""http://www.cs.unc.edu/~welch/kalman/"">Kalman filter"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,60,*      resources</a>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,61,"* @see <a href=""http://www.cs.unc.edu/~welch/media/pdf/kalman_intro.pdf"">An"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,62,*      introduction to the Kalman filter by Greg Welch and Gary Bishop</a>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,63,* @see <a
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,64,"*      href=""http://academic.csuohio.edu/simond/courses/eec644/kalman.pdf"">Kalman"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,65,*      filter example by Dan Simon</a>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,67,* @version $Id$
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,69,public class KalmanFilter {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,70,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,71,private static final long serialVersionUID = 4878026651422612760L;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,72,"/** The transition matrix, equivalent to A */"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,73,private transient RealMatrix transitionMatrix;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,74,/** The transposed transition matrix */
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,75,private transient RealMatrix transitionMatrixT;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,76,"/** The control matrix, equivalent to B */"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,77,private transient RealMatrix controlMatrix;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,78,"/** The measurement matrix, equivalent to H */"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,79,private transient RealMatrix measurementMatrix;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,80,/** The transposed measurement matrix */
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,81,private transient RealMatrix measurementMatrixT;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,82,"/** The internal state estimation vector, equivalent to x hat */"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,83,private transient RealVector stateEstimation;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,84,"/** The process noise covariance matrix, equivalent to Q */"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,85,private transient RealMatrix processNoise;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,86,"/** The measurement noise covariance matrix, equivalent to R */"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,87,private transient RealMatrix measurementNoise;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,88,"/** The error covariance matrix, equivalent to P */"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,89,private transient RealMatrix errorCovariance;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,92,* Creates a new Kalman filter with the given process and measurement
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,93,* models.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,95,* @param processModel
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,96,*            the model defining the underlying process dynamics
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,97,* @param measurementModel
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,98,*            the model defining the given measurement characteristics
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,99,* @throws NullArgumentException
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,100,*             if any of the given inputs is null (except for the control
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,101,*             matrix)
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,102,* @throws NonSquareMatrixException
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,103,*             if the transition matrix is non square
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,104,* @throws MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,105,*             if the matrix dimensions do not fit together
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,107,"public KalmanFilter(final ProcessModel processModel,"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,108,final MeasurementModel measurementModel)
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,109,"throws NullArgumentException, NonSquareMatrixException,"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,110,MatrixDimensionMismatchException {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,112,MathUtils.checkNotNull(processModel);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,113,MathUtils.checkNotNull(measurementModel);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,115,transitionMatrix = processModel.getStateTransitionMatrix();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,116,MathUtils.checkNotNull(transitionMatrix);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,117,transitionMatrixT = transitionMatrix.transpose();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,119,// create an empty matrix if no control matrix was given
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,120,controlMatrix = (processModel.getControlMatrix() == null) ?
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,121,new Array2DRowRealMatrix() :
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,122,processModel.getControlMatrix();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,124,measurementMatrix = measurementModel.getMeasurementMatrix();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,125,MathUtils.checkNotNull(measurementMatrix);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,126,measurementMatrixT = measurementMatrix.transpose();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,128,processNoise = processModel.getProcessNoise();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,129,MathUtils.checkNotNull(processNoise);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,131,measurementNoise = measurementModel.getMeasurementNoise();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,132,MathUtils.checkNotNull(measurementNoise);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,134,// set the initial state estimate to a zero vector if it is not
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,135,// available
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,136,stateEstimation = (processModel.getInitialStateEstimate() == null) ?
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,137,new ArrayRealVector(transitionMatrix.getColumnDimension()) :
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,138,processModel.getInitialStateEstimate();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,139,MathUtils.checkNotNull(stateEstimation);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,141,if (transitionMatrix.getColumnDimension() != stateEstimation.getDimension()) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,142,"throw new DimensionMismatchException(transitionMatrix.getColumnDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,143,stateEstimation.getDimension());
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,146,// initialize the error covariance to the process noise if it is not
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,147,// available
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,148,errorCovariance = (processModel.getInitialErrorCovariance() == null) ? processNoise
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,149,.copy() : processModel.getInitialErrorCovariance();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,150,MathUtils.checkNotNull(errorCovariance);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,152,"// sanity checks, the control matrix B may be null"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,154,// A must be a square matrix
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,155,if (!transitionMatrix.isSquare()) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,156,throw new NonSquareMatrixException(
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,157,"transitionMatrix.getRowDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,158,transitionMatrix.getColumnDimension());
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,161,// row dimension of B must be equal to A
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,162,if (controlMatrix != null &&
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,163,controlMatrix.getRowDimension() > 0 &&
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,164,controlMatrix.getColumnDimension() > 0 &&
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,165,(controlMatrix.getRowDimension() != transitionMatrix.getRowDimension() ||
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,166,controlMatrix.getColumnDimension() != 1)) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,167,"throw new MatrixDimensionMismatchException(controlMatrix.getRowDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,168,"controlMatrix.getColumnDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,169,"transitionMatrix.getRowDimension(), 1);"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,172,// Q must be equal to A
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,173,"MatrixUtils.checkAdditionCompatible(transitionMatrix, processNoise);"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,175,// column dimension of H must be equal to row dimension of A
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,176,if (measurementMatrix.getColumnDimension() != transitionMatrix.getRowDimension()) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,177,"throw new MatrixDimensionMismatchException(measurementMatrix.getRowDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,178,"measurementMatrix.getColumnDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,179,"measurementMatrix.getRowDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,180,transitionMatrix.getRowDimension());
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,183,// row dimension of R must be equal to row dimension of H
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,184,if (measurementNoise.getRowDimension() != measurementMatrix.getRowDimension() ||
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,185,measurementNoise.getColumnDimension() != 1) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,186,"throw new MatrixDimensionMismatchException(measurementNoise.getRowDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,187,"measurementNoise.getColumnDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,188,"measurementMatrix.getRowDimension(), 1);"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,193,* Returns the dimension of the state estimation vector.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,195,* @return the state dimension
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,197,public int getStateDimension() {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,198,return stateEstimation.getDimension();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,202,* Returns the dimension of the measurement vector.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,204,* @return the measurement vector dimension
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,206,public int getMeasurementDimension() {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,207,return measurementMatrix.getRowDimension();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,211,* Returns the current state estimation vector.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,213,* @return the state estimation vector
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,215,public double[] getStateEstimation() {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,216,return stateEstimation.getData();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,220,* Returns a copy of the current state estimation vector.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,222,* @return the state estimation vector
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,224,public RealVector getStateEstimationVector() {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,225,return stateEstimation.copy();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,229,* Returns the current error covariance matrix.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,231,* @return the error covariance matrix
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,233,public double[][] getErrorCovariance() {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,234,return errorCovariance.getData();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,238,* Returns a copy of the current error covariance matrix.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,240,* @return the error covariance matrix
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,242,public RealMatrix getErrorCovarianceMatrix() {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,243,return errorCovariance.copy();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,247,* Predict the internal state estimation one time step ahead.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,249,public void predict() {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,250,predict((RealVector) null);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,254,* Predict the internal state estimation one time step ahead.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,256,* @param u
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,257,*            the control vector
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,258,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,259,*             if the dimension of the control vector does not fit
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,261,public void predict(final double[] u) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,262,predict(new ArrayRealVector(u));
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,266,* Predict the internal state estimation one time step ahead.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,268,* @param u
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,269,*            the control vector
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,270,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,271,*             if the dimension of the control vector does not fit
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,273,public void predict(final RealVector u) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,274,// sanity checks
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,275,if (u != null &&
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,276,u.getDimension() != controlMatrix.getColumnDimension()) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,277,"throw new DimensionMismatchException(u.getDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,278,controlMatrix.getColumnDimension());
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,281,// project the state estimation ahead (a priori state)
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,282,// xHat(k)- = A * xHat(k-1) + B * u(k-1)
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,283,stateEstimation = transitionMatrix.operate(stateEstimation);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,285,// add control input if it is available
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,286,if (u != null) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,287,stateEstimation = stateEstimation.add(controlMatrix.operate(u));
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,290,// project the error covariance ahead
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,291,// P(k)- = A * P(k-1) * A' + Q
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,292,errorCovariance = transitionMatrix.multiply(errorCovariance)
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,293,.multiply(transitionMatrixT).add(processNoise);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,297,* Correct the current state estimate with an actual measurement.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,299,* @param z
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,300,*            the measurement vector
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,301,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,302,*             if the dimension of the measurement vector does not fit
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,303,* @throws SingularMatrixException
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,304,*             if the covariance matrix could not be inverted
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,306,"public void correct(final double[] z) throws DimensionMismatchException,"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,307,SingularMatrixException {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,308,correct(new ArrayRealVector(z));
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,312,* Correct the current state estimate with an actual measurement.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,314,* @param z
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,315,*            the measurement vector
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,316,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,317,*             if the dimension of the measurement vector does not fit
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,318,* @throws SingularMatrixException
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,319,*             if the covariance matrix could not be inverted
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,321,"public void correct(final RealVector z) throws DimensionMismatchException,"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,322,SingularMatrixException {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,323,// sanity checks
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,324,if (z != null &&
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,325,z.getDimension() != measurementMatrix.getRowDimension()) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,326,"throw new DimensionMismatchException(z.getDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,327,measurementMatrix.getRowDimension());
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,330,// S = H * P(k) - * H' + R
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,331,RealMatrix S = measurementMatrix.multiply(errorCovariance)
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,332,.multiply(measurementMatrixT).add(measurementNoise);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,334,// invert S
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,335,// as the error covariance matrix is a symmetric positive
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,336,"// semi-definite matrix, we can use the cholesky decomposition"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,337,DecompositionSolver solver = new CholeskyDecompositionImpl(S).getSolver();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,338,RealMatrix invertedS = solver.getInverse();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,340,// Inn = z(k) - H * xHat(k)-
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,341,RealVector innovation = z.subtract(measurementMatrix.operate(stateEstimation));
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,343,// calculate gain matrix
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,344,// K(k) = P(k)- * H' * (H * P(k)- * H' + R)^-1
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,345,// K(k) = P(k)- * H' * S^-1
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,346,RealMatrix kalmanGain = errorCovariance.multiply(measurementMatrixT).multiply(invertedS);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,348,// update estimate with measurement z(k)
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,349,// xHat(k) = xHat(k)- + K * Inn
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,350,stateEstimation = stateEstimation.add(kalmanGain.operate(innovation));
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,352,// update covariance of prediction error
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,353,// P(k) = (I - K * H) * P(k)-
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,354,RealMatrix Identity = MatrixUtils.createRealIdentityMatrix(kalmanGain.getRowDimension());
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,355,errorCovariance = Identity.subtract(kalmanGain.multiply(measurementMatrix)).multiply(errorCovariance);
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,17,package org.apache.commons.math.filter;
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,19,import org.apache.commons.math.linear.RealMatrix;
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,22,* Defines the measurement model for the use with a {@link KalmanFilter}.
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,26,public interface MeasurementModel {
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,28,* Returns the measurement matrix.
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,30,* @return the measurement matrix
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,32,RealMatrix getMeasurementMatrix();
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,35,* Returns the measurement noise matrix.
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,37,* @return the measurement noise matrix
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,39,RealMatrix getMeasurementNoise();
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,17,package org.apache.commons.math.filter;
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,19,import org.apache.commons.math.linear.RealMatrix;
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,20,import org.apache.commons.math.linear.RealVector;
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,23,* Defines the process dynamics model for the use with a {@link KalmanFilter}.
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,25,* @version $Id$
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,27,public interface ProcessModel {
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,29,* Returns the state transition matrix.
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,31,* @return the state transition matrix
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,33,RealMatrix getStateTransitionMatrix();
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,36,* Returns the control matrix.
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,38,* @return the control matrix
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,40,RealMatrix getControlMatrix();
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,43,* Returns the process noise matrix.
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,45,* @return the process noise matrix
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,47,RealMatrix getProcessNoise();
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,50,* Returns the initial state estimation vector.
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,51,* <p>
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,52,"* Note: if the return value is zero, the Kalman filter will initialize the"
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,53,* state estimation with a zero vector.
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,54,* </p>
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,56,* @return the initial state estimation vector
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,58,RealVector getInitialStateEstimate();
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,61,* Returns the initial error covariance matrix.
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,62,* <p>
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,63,"* Note: if the return value is zero, the Kalman filter will initialize the"
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,64,* error covariance with the process noise matrix.
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,65,* </p>
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,67,* @return the initial error covariance matrix
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,69,RealMatrix getInitialErrorCovariance();
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,17,package org.apache.commons.math.filter;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,19,import org.apache.commons.math.linear.Array2DRowRealMatrix;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,20,import org.apache.commons.math.linear.ArrayRealVector;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,21,import org.apache.commons.math.linear.RealMatrix;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,22,import org.apache.commons.math.linear.RealVector;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,23,import org.apache.commons.math.random.JDKRandomGenerator;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,24,import org.apache.commons.math.random.RandomGenerator;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,25,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,27,import org.junit.Test;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,29,public class KalmanFilterTest {
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,30,@Test
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,31,public void testConstant() {
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,32,double constantValue = 10d;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,33,double measurementNoise = 0.1d;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,34,double processNoise = 1e-5d;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,36,// A = [ 1 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,37,RealMatrix A = new Array2DRowRealMatrix(new double[] { 1d });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,38,// no control input
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,39,RealMatrix B = null;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,40,// H = [ 1 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,41,RealMatrix H = new Array2DRowRealMatrix(new double[] { 1d });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,42,// x = [ 10 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,43,RealVector x = new ArrayRealVector(new double[] { constantValue });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,44,// Q = [ 1e-5 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,45,RealMatrix Q = new Array2DRowRealMatrix(new double[] { processNoise });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,46,// R = [ 0.1 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,47,RealMatrix R = new Array2DRowRealMatrix(new double[] { measurementNoise });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,49,ProcessModel pm
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,50,"= new DefaultProcessModel(A, B, Q,"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,51,"new ArrayRealVector(new double[] { constantValue }), null);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,52,"MeasurementModel mm = new DefaultMeasurementModel(H, R);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,53,"KalmanFilter filter = new KalmanFilter(pm, mm);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,55,"Assert.assertEquals(1, filter.getMeasurementDimension());"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,56,"Assert.assertEquals(1, filter.getStateDimension());"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,58,"assertMatrixEquals(Q.getData(), filter.getErrorCovariance());"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,60,// check the initial state
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,61,double[] expectedInitialState = new double[] { constantValue };
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,62,"assertVectorEquals(expectedInitialState, filter.getStateEstimation());"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,64,RealVector pNoise = new ArrayRealVector(1);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,65,RealVector mNoise = new ArrayRealVector(1);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,67,RandomGenerator rand = new JDKRandomGenerator();
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,68,// iterate 60 steps
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,69,for (int i = 0; i < 60; i++) {
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,70,filter.predict();
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,72,// Simulate the process
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,73,"pNoise.setEntry(0, processNoise * rand.nextGaussian());"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,75,// x = A * x + p_noise
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,76,x = A.operate(x).add(pNoise);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,78,// Simulate the measurement
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,79,"mNoise.setEntry(0, measurementNoise * rand.nextGaussian());"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,81,// z = H * x + m_noise
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,82,RealVector z = H.operate(x).add(mNoise);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,84,filter.correct(z);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,86,// state estimate should be larger than measurement noise
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,87,double diff = Math.abs(constantValue - filter.getStateEstimation()[0]);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,88,// System.out.println(diff);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,89,"Assert.assertTrue(MathUtils.compareTo(diff, measurementNoise, 1e-6) < 0);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,92,// error covariance should be already very low (< 0.02)
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,93,"Assert.assertTrue(MathUtils.compareTo(filter.getErrorCovariance()[0][0],"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,94,"0.02d, 1e-6) < 0);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,97,"private void assertVectorEquals(double[] expected, double[] result) {"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,98,"Assert.assertEquals(""Wrong number of rows."", expected.length,"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,99,result.length);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,100,for (int i = 0; i < expected.length; i++) {
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,101,"Assert.assertEquals(""Wrong value at position ["" + i + ""]"","
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,102,"expected[i], result[i], 1.0e-15);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,106,"private void assertMatrixEquals(double[][] expected, double[][] result) {"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,107,"Assert.assertEquals(""Wrong number of rows."", expected.length,"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,108,result.length);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,109,for (int i = 0; i < expected.length; i++) {
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,110,"Assert.assertEquals(""Wrong number of columns."", expected[i].length,"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,111,result[i].length);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,112,for (int j = 0; j < expected[i].length; j++) {
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,113,"Assert.assertEquals(""Wrong value at position ["" + i + "","" + j"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,114,"+ ""]"", expected[i][j], result[i][j], 1.0e-15);"

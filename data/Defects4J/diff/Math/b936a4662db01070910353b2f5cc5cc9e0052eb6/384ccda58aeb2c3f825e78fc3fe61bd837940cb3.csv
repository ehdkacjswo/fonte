is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,19,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,20,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,21,import org.apache.commons.math.special.Gamma;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,22,import org.apache.commons.math.special.Beta;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,23,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,20," Computes the cumulative, inverse cumulative and density functions for the beta distribuiton."
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,26,* Implements the Beta distribution.
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,22," @see <a href=""http://en.wikipedia.org/wiki/Beta_distribution"">Beta_distribution</a>"
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,28,"* @see <a href=""http://en.wikipedia.org/wiki/Beta_distribution"">Beta distribution</a>"
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,24, @since 2.0
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,30,* @since 2.0 (changed to concrete class in 3.0)
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,26,ublic interface BetaDistribution extends ContinuousDistribution {
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,28, Access the alpha shape parameter.
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,30, @return alpha.
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,32,ouble getAlpha();
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,35, Access the beta shape parameter.
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,37, @return beta.
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,39,ouble getBeta();
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,32,public class BetaDistribution extends AbstractContinuousDistribution {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,34,* Default inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,35,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,37,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,38,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,39,private static final long serialVersionUID = -1221965979403477668L;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,40,/** First shape parameter. */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,41,private final double alpha;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,42,/** Second shape parameter. */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,43,private final double beta;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,44,/** Normalizing factor used in density computations.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,45,* updated whenever alpha or beta are changed.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,47,private double z;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,48,/** Inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,49,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,52,* Build a new instance.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,54,* @param alpha First shape parameter (must be positive).
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,55,* @param beta Second shape parameter (must be positive).
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,56,* @param inverseCumAccuracy Maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,57,* cumulative probability estimates (defaults to
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,58,* {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,59,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,61,"public BetaDistribution(double alpha, double beta, double inverseCumAccuracy) {"
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,62,this.alpha = alpha;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,63,this.beta = beta;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,64,z = Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,65,solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,69,* Build a new instance.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,71,* @param alpha First shape parameter (must be positive).
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,72,* @param beta Second shape parameter (must be positive).
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,74,"public BetaDistribution(double alpha, double beta) {"
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,75,"this(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,79,"* Access the first shape parameter, {@code alpha}."
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,81,* @return the first shape parameter.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,83,public double getAlpha() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,84,return alpha;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,88,"* Access the second shape parameter, {@code beta}."
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,90,* @return the second shape parameter.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,92,public double getBeta() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,93,return beta;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,96,/** Recompute the normalization factor. */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,97,private void recomputeZ() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,98,if (Double.isNaN(z)) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,99,z = Gamma.logGamma(alpha) + Gamma.logGamma(beta) - Gamma.logGamma(alpha + beta);
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,103,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,104,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,105,recomputeZ();
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,106,if (x < 0 || x > 1) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,107,return 0;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,108,} else if (x == 0) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,109,if (alpha < 1) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,110,"throw new NumberIsTooSmallException(LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, alpha, 1, false);"
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,112,return 0;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,113,} else if (x == 1) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,114,if (beta < 1) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,115,"throw new NumberIsTooSmallException(LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, beta, 1, false);"
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,117,return 0;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,118,} else {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,119,double logX = FastMath.log(x);
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,120,double log1mX = FastMath.log1p(-x);
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,121,return FastMath.exp((alpha - 1) * logX + (beta - 1) * log1mX - z);
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,125,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,126,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,127,public double inverseCumulativeProbability(double p)  {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,128,if (p == 0) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,129,return 0;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,130,} else if (p == 1) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,131,return 1;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,132,} else {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,133,return super.inverseCumulativeProbability(p);
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,137,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,138,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,139,protected double getInitialDomain(double p) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,140,return p;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,143,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,144,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,145,protected double getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,146,return 0;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,149,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,150,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,151,protected double getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,152,return 1;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,155,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,156,public double cumulativeProbability(double x)  {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,157,if (x <= 0) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,158,return 0;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,159,} else if (x >= 1) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,160,return 1;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,161,} else {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,162,"return Beta.regularizedBeta(x, alpha, beta);"
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,167,* Return the absolute accuracy setting of the solver used to estimate
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,168,* inverse cumulative probabilities.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,170,* @return the solver absolute accuracy.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,171,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,173,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,174,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,175,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,179,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,181,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,183,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,185,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,186,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,187,return 0;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,191,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,193,* The upper bound of the support is always 1 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,195,* @return upper bound of the support (always 1)
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,197,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,198,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,199,return 1;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,203,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,205,"* For first shape parameter {@code alpha} and second shape parameter {@code beta}, the"
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,206,* mean is {@code alpha / (alpha + beta)}.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,208,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,209,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,210,final double a = getAlpha();
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,211,return a / (a + getBeta());
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,215,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,217,* For first shape parameter {@code alpha} and second shape parameter
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,218,"* {@code beta}, the variance is"
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,219,* {@code (alpha * beta) / [(alpha + beta)^2 * (alpha + beta + 1)]}.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,221,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,222,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,223,final double a = getAlpha();
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,224,final double b = getBeta();
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,225,final double alphabetasum = a + b;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,226,return (a * b) / ((alphabetasum * alphabetasum) * (alphabetasum + 1));
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,229,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,230,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,231,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,232,return false;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,235,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,236,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,237,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,238,return false;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,19,mport org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,20,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,21,mport org.apache.commons.math.special.Gamma;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,22,mport org.apache.commons.math.special.Beta;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,23,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,26, Implements the Beta distribution.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,27, <p>
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,28, References:
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,29, <ul>
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,30," <li><a href=""http://en.wikipedia.org/wiki/Beta_distribution"">"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,31, Beta distribution</a></li>
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,32, </ul>
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,33, </p>
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,34, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,35, @since 2.0
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,37,ublic class BetaDistributionImpl
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,38,xtends AbstractContinuousDistribution implements BetaDistribution {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,40, Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,41, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,43,ublic static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,44,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,45,rivate static final long serialVersionUID = -1221965979403477668L;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,46,** First shape parameter. */
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,47,rivate final double alpha;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,48,** Second shape parameter. */
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,49,rivate final double beta;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,50,** Normalizing factor used in density computations.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,51, updated whenever alpha or beta are changed.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,53,rivate double z;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,54,** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,55,rivate final double solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,58, Build a new instance.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,60, @param alpha First shape parameter (must be positive).
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,61, @param beta Second shape parameter (must be positive).
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,62, @param inverseCumAccuracy Maximum absolute error in inverse
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,63, cumulative probability estimates (defaults to
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,64, {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,65, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,67,"ublic BetaDistributionImpl(double alpha, double beta, double inverseCumAccuracy) {"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,68,his.alpha = alpha;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,69,his.beta = beta;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,70, = Double.NaN;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,71,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,75, Build a new instance.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,77, @param alpha First shape parameter (must be positive).
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,78, @param beta Second shape parameter (must be positive).
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,80,"ublic BetaDistributionImpl(double alpha, double beta) {"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,81,"his(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,84,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,85,ublic double getAlpha() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,86,eturn alpha;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,89,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,90,ublic double getBeta() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,91,eturn beta;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,95, Recompute the normalization factor.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,97,rivate void recomputeZ() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,98,f (Double.isNaN(z)) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,99, = Gamma.logGamma(alpha) + Gamma.logGamma(beta) - Gamma.logGamma(alpha + beta);
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,104, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,106,ublic double density(double x) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,107,ecomputeZ();
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,108,f (x < 0 || x > 1) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,109,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,110, else if (x == 0) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,111,f (alpha < 1) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,112,"hrow new NumberIsTooSmallException(LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, alpha, 1, false);"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,114,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,115, else if (x == 1) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,116,f (beta < 1) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,117,"hrow new NumberIsTooSmallException(LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, beta, 1, false);"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,119,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,120, else {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,121,ouble logX = FastMath.log(x);
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,122,ouble log1mX = FastMath.log1p(-x);
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,123,eturn FastMath.exp((alpha - 1) * logX + (beta - 1) * log1mX - z);
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,127,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,128,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,129,ublic double inverseCumulativeProbability(double p)  {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,130,f (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,131,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,132, else if (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,133,eturn 1;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,134, else {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,135,eturn super.inverseCumulativeProbability(p);
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,139,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,140,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,141,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,142,eturn p;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,145,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,146,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,147,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,148,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,151,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,152,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,153,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,154,eturn 1;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,157,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,158,ublic double cumulativeProbability(double x)  {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,159,f (x <= 0) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,160,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,161, else if (x >= 1) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,162,eturn 1;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,163, else {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,164,"eturn Beta.regularizedBeta(x, alpha, beta);"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,169, Return the absolute accuracy setting of the solver used to estimate
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,170, inverse cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,172, @return the solver absolute accuracy.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,173, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,175,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,176,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,177,eturn solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,181, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,183, The lower bound of the support is always 0 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,185, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,187,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,188,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,189,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,193, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,195, The upper bound of the support is always 1 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,197, @return upper bound of the support (always 1)
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,199,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,200,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,201,eturn 1;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,205, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,207, For first shape parameter <code>s1</code> and
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,208," second shape parameter <code>s2</code>, the mean is"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,209, <code>s1 / (s1 + s2)</code>
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,211, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,213,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,214,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,215,inal double a = getAlpha();
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,216,eturn a / (a + getBeta());
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,220, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,222, For first shape parameter <code>s1</code> and
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,223," second shape parameter <code>s2</code>,"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,224, the variance is
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,225, <code>[ s1 * s2 ] / [ (s1 + s2)^2 * (s1 + s2 + 1) ]</code>
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,227, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,229,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,230,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,231,inal double a = getAlpha();
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,232,inal double b = getBeta();
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,233,inal double alphabetasum = a + b;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,234,eturn (a * b) / ((alphabetasum * alphabetasum) * (alphabetasum + 1));
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,238, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,240,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,241,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,242,eturn false;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,246, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,248,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,249,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,250,eturn false;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,27,mport org.apache.commons.math.distribution.BetaDistributionImpl;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,27,import org.apache.commons.math.distribution.BetaDistribution;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,602, Generates a random value from the {@link BetaDistributionImpl Beta Distribution}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,602,* Generates a random value from the {@link BetaDistribution Beta Distribution}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,612,"eturn nextInversionDeviate(new BetaDistributionImpl(alpha, beta));"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,612,"return nextInversionDeviate(new BetaDistribution(alpha, beta));"
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,144,"etaDistribution d = new BetaDistributionImpl(alpha, beta);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,144,"BetaDistribution d = new BetaDistribution(alpha, beta);"
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,286,"etaDistribution d = new BetaDistributionImpl(alpha, beta);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,286,"BetaDistribution d = new BetaDistribution(alpha, beta);"
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,297,"ist = new BetaDistributionImpl(1, 1);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,297,"dist = new BetaDistribution(1, 1);"
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,299,"ssert.assertEquals(dist.getNumericalVariance(), 1.0 / 12.0, tol);"
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,301,"ist = new BetaDistributionImpl(2, 5);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,299,"Assert.assertEquals(dist.getNumericalVariance(), 1.0 / 12.0, tol);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,301,"dist = new BetaDistribution(2, 5);"
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,303,"ssert.assertEquals(dist.getNumericalVariance(), 10.0 / (49.0 * 8.0), tol);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,303,"Assert.assertEquals(dist.getNumericalVariance(), 10.0 / (49.0 * 8.0), tol);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,28,mport org.apache.commons.math.distribution.BetaDistributionImpl;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,28,import org.apache.commons.math.distribution.BetaDistribution;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,849,"etaDistributionImpl betaDistribution = new BetaDistributionImpl(2, 4);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,849,"BetaDistribution betaDistribution = new BetaDistribution(2, 4);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,863,"ouble[] quartiles = TestUtils.getDistributionQuartiles(new BetaDistributionImpl(2,5));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,863,"double[] quartiles = TestUtils.getDistributionQuartiles(new BetaDistribution(2,5));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,17,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,19,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,20,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,21,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,22,import org.apache.commons.math.exception.util.ExceptionContext;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,23,import org.apache.commons.math.util.IterationManager;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,26,* <p>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,27,* This is an implementation of the conjugate gradient method for
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,28,* {@link RealLinearOperator}. It follows closely the template by <a
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,29,"* href=""#BARR1994"">Barrett et al. (1994)</a> (figure 2.5). The linear system at"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,30,"* hand is A &middot; x = b, and the residual is r = b - A &middot; x."
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,31,* </p>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,32,"* <h3><a id=""stopcrit"">Default stopping criterion</a></h3>"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,33,* <p>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,34,* A default stopping criterion is implemented. The iterations stop when || r ||
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,35,"* &le; &delta; || b ||, where b is the right-hand side vector, r the current"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,36,"* estimate of the residual, and &delta; a user-specified tolerance. It should"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,37,"* be noted that r is the so-called <em>updated</em> residual, which might"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,38,* differ from the true residual due to rounding-off errors (see e.g. <a
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,39,"* href=""#STRA2002"">Strakos and Tichy, 2002</a>)."
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,40,* </p>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,41,* <h3>Iteration count</h3>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,42,* <p>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,43,"* In the present context, an iteration should be understood as one evaluation"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,44,* of the matrix-vector product A &middot; x. The initialization phase therefore
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,45,* counts as one iteration.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,46,* </p>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,47,"* <h3><a id=""context"">Exception context</a></h3>"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,48,* <p>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,49,"* Besides standard {@link DimensionMismatchException}, this class might throw"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,50,* {@link NonPositiveDefiniteLinearOperatorException} if the linear operator or
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,51,"* the preconditioner are not positive definite. In this case, the"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,52,* {@link ExceptionContext} provides some more information
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,53,* <ul>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,54,"* <li>key {@code ""operator""} points to the offending linear operator, say L,</li>"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,55,"* <li>key {@code ""vector""} points to the offending vector, say x, such that"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,56,* x<sup>T</sup> &middot; L &middot; x < 0.</li>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,57,* </ul>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,58,* </p>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,59,* <h3>References</h3>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,60,* <dl>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,61,"* <dt><a id=""BARR1994"">Barret et al. (1994)</a></dt>"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,62,"* <dd>R. Barrett, M. Berry, T. F. Chan, J. Demmel, J. M. Donato, J. Dongarra,"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,63,"* V. Eijkhout, R. Pozo, C. Romine and H. Van der Vorst,"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,64,* <em>Templates for the Solution of Linear Systems: Building Blocks for
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,65,"* Iterative Methods</em>, SIAM</dd>"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,66,"* <dt><a id=""STRA2002"">Strakos and Tichy (2002)"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,67,* <dt>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,68,"* <dd>Z. Strakos and P. Tichy, <a"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,69,"* href=""http://etna.mcs.kent.edu/vol.13.2002/pp56-80.dir/pp56-80.pdf"">"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,70,* <em>On error estimation in the conjugate gradient method and why it works
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,71,"* in finite precision computations</em></a>, Electronic Transactions on"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,72,"* Numerical Analysis 13: 56-80, 2002</dd>"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,73,* </dl>
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,75,* @version $Id$
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,76,* @since 3.0
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,78,public class ConjugateGradient
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,79,extends PreconditionedIterativeLinearSolver {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,82,* The type of all events fired by this implementation of the Conjugate
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,83,* Gradient method.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,85,* @version $Id$
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,87,public abstract static class ConjugateGradientEvent
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,88,extends IterativeLinearSolverEvent
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,89,implements ProvidesResidual {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,92,private static final long serialVersionUID = 6461730085343318121L;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,95,* Creates a new instance of this class.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,97,* @param source The iterative algorithm on which the event initially
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,98,*        occurred.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,100,public ConjugateGradientEvent(final Object source) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,101,super(source);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,105,"/** Key for the <a href=""#context"">exception context</a>. */"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,106,"public static final String OPERATOR = ""operator"";"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,108,"/** Key for the <a href=""#context"">exception context</a>. */"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,109,"public static final String VECTOR = ""vector"";"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,112,* {@code true} if positive-definiteness of matrix and preconditioner should
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,113,* be checked.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,115,private boolean check;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,117,"/** The value of &delta;, for the default stopping criterion. */"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,118,private final double delta;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,121,"* Creates a new instance of this class, with <a href=""#stopcrit"">default"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,122,* stopping criterion</a>.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,124,* @param maxIterations Maximum number of iterations.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,125,* @param delta &delta; parameter for the default stopping criterion.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,126,* @param check {@code true} if positive definiteness of both matrix and
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,127,*        preconditioner should be checked.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,129,"public ConjugateGradient(final int maxIterations, final double delta,"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,130,final boolean check) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,131,super(maxIterations);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,132,this.delta = delta;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,133,this.check = check;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,137,"* Creates a new instance of this class, with <a href=""#stopcrit"">default"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,138,* stopping criterion</a> and custom iteration manager.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,140,* @param manager Custom iteration manager.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,141,* @param delta &delta; parameter for the default stopping criterion.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,142,* @param check {@code true} if positive definiteness of both matrix and
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,143,*        preconditioner should be checked.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,145,"public ConjugateGradient(final IterationManager manager,"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,146,"final double delta, final boolean check) {"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,147,super(manager);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,148,this.delta = delta;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,149,this.check = check;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,153,* Returns {@code true} if positive-definiteness should be checked for both
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,154,* matrix and preconditioner.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,156,* @return {@code true} if the tests are to be performed.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,158,public final boolean getCheck() {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,159,return check;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,162,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,163,@Override
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,164,"public RealVector solve(final RealLinearOperator a,"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,165,"final InvertibleRealLinearOperator m,"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,166,"final RealVector b, final RealVector x0,"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,167,final boolean inPlace)
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,168,"throws NullArgumentException, NonSquareLinearOperatorException,"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,169,"DimensionMismatchException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,170,"checkParameters(a, m, b, x0, inPlace);"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,171,final IterationManager manager = getIterationManager();
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,172,// Initialization of default stopping criterion
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,173,manager.resetIterationCount();
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,174,final double r2max = delta * delta * b.dotProduct(b);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,176,"// p and x are constructed as copies of x0, since presumably, the type"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,177,// of x is optimized for the calculation of the matrix-vector product
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,178,// A.x.
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,179,final RealVector x;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,180,if (inPlace) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,181,x = x0;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,182,} else {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,183,if (x0 != null) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,184,x = x0.copy();
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,185,} else {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,186,x = new ArrayRealVector(a.getColumnDimension());
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,189,final RealVector p = x.copy();
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,190,RealVector q = a.operate(p);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,191,manager.incrementIterationCount();
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,192,"final RealVector r = b.combine(1, -1, q);"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,193,double r2 = r.dotProduct(r);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,194,RealVector z;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,195,if (m == null) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,196,z = r;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,197,} else {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,198,z = null;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,200,final IterativeLinearSolverEvent event;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,201,event = new ConjugateGradientEvent(this) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,203,public RealVector getResidual() {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,204,return ArrayRealVector.unmodifiableRealVector(r);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,207,@Override
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,208,public RealVector getRightHandSideVector() {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,209,return ArrayRealVector.unmodifiableRealVector(b);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,212,@Override
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,213,public RealVector getSolution() {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,214,return ArrayRealVector.unmodifiableRealVector(x);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,217,manager.fireInitializationEvent(event);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,218,if (r2 <= r2max) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,219,manager.fireTerminationEvent(event);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,220,return x;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,222,double rhoPrev = 0.;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,223,while (true) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,224,manager.fireIterationStartedEvent(event);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,225,if (m != null) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,226,z = m.solve(r);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,228,final double rhoNext = r.dotProduct(z);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,229,if (check && (rhoNext <= 0.)) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,230,final NonPositiveDefiniteLinearOperatorException e;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,231,e = new NonPositiveDefiniteLinearOperatorException();
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,232,final ExceptionContext context = e.getContext();
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,233,"context.setValue(OPERATOR, m);"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,234,"context.setValue(VECTOR, r);"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,235,throw e;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,237,if (manager.getIterations() == 1) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,238,"p.setSubVector(0, z);"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,239,} else {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,240,"p.combineToSelf(rhoNext / rhoPrev, 1., z);"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,242,q = a.operate(p);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,243,manager.incrementIterationCount();
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,244,final double pq = p.dotProduct(q);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,245,if (check && (pq <= 0.)) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,246,final NonPositiveDefiniteLinearOperatorException e;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,247,e = new NonPositiveDefiniteLinearOperatorException();
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,248,final ExceptionContext context = e.getContext();
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,249,"context.setValue(OPERATOR, a);"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,250,"context.setValue(VECTOR, p);"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,251,throw e;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,253,final double alpha = rhoNext / pq;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,254,"x.combineToSelf(1., alpha, p);"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,255,"r.combineToSelf(1., -alpha, q);"
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,256,rhoPrev = rhoNext;
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,257,r2 = r.dotProduct(r);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,258,manager.fireIterationPerformedEvent(event);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,259,if (r2 <= r2max) {
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,260,manager.fireTerminationEvent(event);
True,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,src/main/java/org/apache/commons/math/linear/ConjugateGradient.java,261,return x;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,17,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,19,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,20,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,21,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,22,import org.apache.commons.math.util.IterationManager;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,23,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,26,* This abstract class defines an iterative solver for the linear system A
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,27,"* &middot; x = b. In what follows, the <em>residual</em> r is defined as r = b"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,28,"* - A &middot; x, where A is the linear operator of the linear system, b is the"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,29,"* right-hand side vector, and x the current estimate of the solution."
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,31,* @version $Id$
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,32,* @since 3.0
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,34,public abstract class IterativeLinearSolver {
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,36,/** The object in charge of managing the iterations. */
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,37,private final IterationManager manager;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,40,"* Creates a new instance of this class, with default iteration manager."
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,42,* @param maxIterations Maximum number of iterations.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,44,public IterativeLinearSolver(final int maxIterations) {
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,45,this.manager = new IterationManager(maxIterations);
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,49,"* Creates a new instance of this class, with custom iteration manager."
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,51,* @param manager Custom iteration manager.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,53,public IterativeLinearSolver(final IterationManager manager) {
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,54,MathUtils.checkNotNull(manager);
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,55,this.manager = manager;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,58,* Performs all dimension checks on the parameters of
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,59,"* {@link #solve(RealLinearOperator, RealVector, RealVector, boolean)}, and"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,60,* throws an exception if one of the checks fails.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,62,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,63,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,64,* @param x0 Initial guess of the solution (can be {@code null} if
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,65,*        {@code inPlace} is set to {@code false}).
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,66,* @param inPlace {@code true} if the initial guess is to be updated with
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,67,*        the current estimate of the solution.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,68,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,69,* @throws NonSquareLinearOperatorException if {@code a} is not square.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,70,* @throws DimensionMismatchException if {@code b} or {@code x0} have
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,71,*         dimensions inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,73,"protected static void checkParameters(final RealLinearOperator a,"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,74,"final RealVector b,"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,75,"final RealVector x0,"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,76,final boolean inPlace)
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,77,"throws NullArgumentException, NonSquareLinearOperatorException,"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,78,DimensionMismatchException {
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,79,MathUtils.checkNotNull(a);
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,80,MathUtils.checkNotNull(b);
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,81,if (a.getRowDimension() != a.getColumnDimension()) {
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,82,"throw new NonSquareLinearOperatorException(a.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,83,a.getColumnDimension());
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,85,if (b.getDimension() != a.getRowDimension()) {
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,86,"throw new DimensionMismatchException(b.getDimension(),"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,87,a.getRowDimension());
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,89,if (inPlace) {
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,90,MathUtils.checkNotNull(x0);
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,91,if (x0.getDimension() != a.getColumnDimension()) {
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,92,"throw new DimensionMismatchException(x0.getDimension(),"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,93,a.getColumnDimension());
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,99,* Returns the {@link IterationManager} attached to this solver.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,101,* @return the manager.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,103,public IterationManager getIterationManager() {
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,104,return manager;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,108,* Returns an estimate of the solution to the linear system A &middot; x =
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,109,"* b. If no initial estimate of the solution is provided, (0, &hellip;, 0)"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,110,* is assumed.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,112,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,113,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,114,* @param x0 Initial guess of the solution (can be {@code null} if
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,115,*        {@code inPlace} is set to {@code false}).
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,116,* @param inPlace {@code true} if the initial guess is to be updated with
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,117,*        the current estimate of the solution.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,118,* @return A reference to {@code x0} (shallow copy) if {@code inPlace} was
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,119,"*         set to {@code true}. Otherwise, a new vector containing the"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,120,*         solution.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,121,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,122,* @throws NonSquareLinearOperatorException if {@code a} is not square.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,123,* @throws DimensionMismatchException if {@code b} or {@code x0} have
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,124,*         dimensions inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,125,"* @throws MaxCountExceededException at exhaustion of the iteration count,"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,126,*         unless a custom {@link MaxCountExceededCallback callback} has
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,127,*         been set at construction.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,129,"public abstract RealVector solve(RealLinearOperator a, RealVector b,"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,130,"RealVector x0, boolean inPlace)"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,131,"throws NullArgumentException, NonSquareLinearOperatorException,"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java,132,"DimensionMismatchException, MaxCountExceededException;"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,17,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,19,import org.apache.commons.math.util.IterationEvent;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,22,* This is the base class for all events occuring during the iterations of a
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,23,* {@link IterativeLinearSolver}.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,25,* @version $Id$
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,26,* @since 3.0
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,28,public abstract class IterativeLinearSolverEvent
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,29,extends IterationEvent {
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,32,private static final long serialVersionUID = 283291016904748030L;
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,35,* Creates a new instance of this class.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,37,* @param source The iterative algorithm on which the event initially
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,38,*        occurred.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,40,public IterativeLinearSolverEvent(final Object source) {
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,41,super(source);
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,45,* Returns the current right-hand side of the linear system to be solved.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,46,"* This method should return an unmodifiable view, or a deep copy of the"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,47,"* actual right-hand side, in order not to compromise subsequent iterations"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,48,* of the source {@link IterativeLinearSolver}.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,50,"* @return The right-hand side vector, b."
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,52,public abstract RealVector getRightHandSideVector();
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,55,* Returns the current estimate of the solution to the linear system to be
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,56,"* solved. This method should return an unmodifiable view, or a deep copy of"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,57,"* the actual current solution, in order not to compromise subsequent"
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,58,* iterations of the source {@link IterativeLinearSolver}.
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,60,"* @return The solution, x."
True,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,src/main/java/org/apache/commons/math/linear/IterativeLinearSolverEvent.java,62,public abstract RealVector getSolution();
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,17,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,20,* This class implements the standard Jacobi (diagonal) preconditioner.
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,22,* @version $Id$
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,23,* @since 3.0
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,25,public class JacobiPreconditioner
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,26,extends InvertibleRealLinearOperator {
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,28,/** The diagonal coefficients of the preconditioner. */
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,29,private final ArrayRealVector diag;
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,32,* Creates a new instance of this class.
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,34,* @param diag Diagonal coefficients of the preconditioner.
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,35,* @param deep {@code true} if a deep copy of the above array should be
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,36,*        performed.
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,38,"public JacobiPreconditioner(final double[] diag, final boolean deep) {"
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,39,"this.diag = new ArrayRealVector(diag, deep);"
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,43,* Creates a new instance of this class. This method extracts the diagonal
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,44,* coefficients of the specified linear operator. If {@code a} does not
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,45,"* extend {@link AbstractRealMatrix}, then the coefficients of the"
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,46,"* underlying matrix are not accessible, coefficient extraction is made by"
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,47,* matrix-vector products with the basis vectors (and might therefore take
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,48,"* some time). With matrices, direct entry access is carried out."
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,50,* @param a Linear operator for which the preconditioner should be built.
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,51,* @return Preconditioner made of the diagonal coefficients of the specified
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,52,*         linear operator.
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,53,* @throws NonSquareLinearOperatorException if {@code a} is not square.
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,55,public static JacobiPreconditioner create(final RealLinearOperator a)
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,56,throws NonSquareLinearOperatorException {
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,57,final int n = a.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,58,if (a.getRowDimension() != n) {
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,59,"throw new NonSquareLinearOperatorException(a.getRowDimension(), n);"
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,61,final double[] diag = new double[n];
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,62,if (a instanceof AbstractRealMatrix) {
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,63,final AbstractRealMatrix m = (AbstractRealMatrix) a;
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,64,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,65,"diag[i] = m.getEntry(i, i);"
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,67,} else {
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,68,final ArrayRealVector x = new ArrayRealVector(n);
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,69,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,70,x.set(0.);
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,71,"x.setEntry(i, 1.);"
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,72,diag[i] = a.operate(x).getEntry(i);
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,75,"return new JacobiPreconditioner(diag, false);"
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,78,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,79,@Override
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,80,public int getColumnDimension() {
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,81,return diag.getDimension();
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,84,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,85,@Override
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,86,public int getRowDimension() {
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,87,return diag.getDimension();
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,90,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,91,@Override
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,92,public RealVector operate(final RealVector x) {
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,93,// Dimension check is carried out by ebeMultiply
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,94,return x.ebeMultiply(diag);
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,97,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,98,@Override
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,99,public RealVector solve(final RealVector b) {
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,100,// Dimension check is carried out by ebeDivide
True,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java,101,return b.ebeDivide(diag);
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,17,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,19,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,20,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,21,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,22,import org.apache.commons.math.util.IterationManager;
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,25,* This abstract class defines preconditioned iterative solvers. When A is
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,26,"* ill-conditioned, instead of solving system A &middot; x = b directly, it is"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,27,* preferable to solve M<sup>-1</sup> &middot; A &middot; x = M<sup>-1</sup>
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,28,"* &middot; b, where M approximates in some way A, while remaining comparatively"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,29,* easier to invert. M (not M<sup>-1</sup>!) is called the
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,30,* <em>preconditionner</em>.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,32,* @version $Id$
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,33,* @since 3.0
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,35,public abstract class PreconditionedIterativeLinearSolver
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,36,extends IterativeLinearSolver {
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,39,"* Creates a new instance of this class, with default iteration manager."
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,41,* @param maxIterations Maximum number of iterations.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,43,public PreconditionedIterativeLinearSolver(final int maxIterations) {
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,44,super(maxIterations);
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,48,"* Creates a new instance of this class, with custom iteration manager."
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,50,* @param manager Custom iteration manager.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,52,public PreconditionedIterativeLinearSolver(final IterationManager manager) {
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,53,super(manager);
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,57,* Performs all dimension checks on the parameters of
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,58,"* {@link #solve(RealLinearOperator, InvertibleRealLinearOperator, RealVector, RealVector, boolean)}"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,59,"* , and throws an exception if one of the checks fails."
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,61,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,62,* @param m Preconditioner (can be {@code null}).
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,63,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,64,* @param x0 Initial guess of the solution (can be {@code null} if
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,65,*        {@code inPlace} is set to {@code false}).
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,66,* @param inPlace {@code true} if the initial guess is to be updated with
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,67,*        the current estimate of the solution.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,68,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,69,* @throws NonSquareLinearOperatorException if {@code a} or {@code m} is not
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,70,*         square.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,71,"* @throws DimensionMismatchException if {@code m}, {@code b} or {@code x}"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,72,*         have dimensions inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,74,"protected static void checkParameters(final RealLinearOperator a,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,75,"final InvertibleRealLinearOperator m,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,76,"final RealVector b,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,77,"final RealVector x0,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,78,final boolean inPlace)
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,79,"throws NullArgumentException, NonSquareLinearOperatorException,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,80,DimensionMismatchException {
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,81,"checkParameters(a, b, x0, inPlace);"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,82,if (m != null) {
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,83,if (m.getColumnDimension() != m.getRowDimension()) {
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,84,throw new NonSquareLinearOperatorException(
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,85,"m.getColumnDimension(),"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,86,m.getRowDimension());
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,88,if (m.getRowDimension() != a.getRowDimension()) {
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,89,"throw new DimensionMismatchException(m.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,90,a.getRowDimension());
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,96,* Returns an estimate of the solution to the linear system A &middot; x =
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,97,"* b. If no initial estimate of the solution is provided, (0, &hellip;, 0)"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,98,* is assumed.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,100,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,101,* @param m Preconditioner (can be {@code null}).
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,102,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,103,* @param x0 Initial guess of the solution (can be {@code null} if
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,104,*        {@code inPlace} is set to {@code false}).
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,105,* @param inPlace {@code true} if the initial guess is to be updated with
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,106,*        the current estimate of the solution.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,107,* @return A reference to {@code x0} (shallow copy) if {@code update} was
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,108,"*         set to {@code true}. Otherwise, a new vector containing the"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,109,*         solution.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,110,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,111,* @throws NonSquareLinearOperatorException if {@code a} or {@code m} is not
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,112,*         square.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,113,"* @throws DimensionMismatchException if {@code m}, {@code b} or {@code x}"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,114,*         have dimensions inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,115,"* @throws MaxCountExceededException at exhaustion of the iteration count,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,116,*         unless a custom {@link MaxCountExceededCallback callback} has
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,117,*         been set at construction.
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,119,"public abstract RealVector solve(RealLinearOperator a,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,120,"InvertibleRealLinearOperator m,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,121,"RealVector b, RealVector x0,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,122,final boolean inPlace)
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,123,"throws NullArgumentException, NonSquareLinearOperatorException,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,124,"DimensionMismatchException, MaxCountExceededException;"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,126,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,127,@Override
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,128,"public RealVector solve(final RealLinearOperator a, final RealVector b,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,129,"final RealVector x, final boolean inPlace)"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,130,"throws NullArgumentException, NonSquareLinearOperatorException,"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,131,"DimensionMismatchException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,132,"checkParameters(a, b, x, inPlace);"
True,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java,133,"return solve(a, null, b, x, inPlace);"
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,17,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,20,* This interface provides access to the current value of the residual of an
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,21,* {@link IterativeLinearSolver}. It might be implemented by
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,22,"* {@link IterativeLinearSolverEvent}, for example."
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,25,* @since 3.0
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,27,public interface ProvidesResidual {
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,29,* Returns the current value of the residual. This should be an
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,30,"* unmodifiable view or a deep copy of the residual, in order not to"
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,31,* compromise the subsequent iterations.
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,33,* @return the current value of the residual.
True,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,src/main/java/org/apache/commons/math/linear/ProvidesResidual.java,35,RealVector getResidual();
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,17,package org.apache.commons.math.linear;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,19,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,20,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,21,import org.apache.commons.math.util.IterationEvent;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,22,import org.apache.commons.math.util.IterationListener;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,26,public class ConjugateGradientTest {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,28,@Test(expected = NonSquareLinearOperatorException.class)
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,29,public void testNonSquareOperator() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,30,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 3);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,31,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,32,"solver = new ConjugateGradient(10, 0., false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,33,final ArrayRealVector b = new ArrayRealVector(a.getRowDimension());
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,34,final ArrayRealVector x = new ArrayRealVector(a.getColumnDimension());
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,35,"solver.solve(a, b, x, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,38,@Test(expected = DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,39,public void testDimensionMismatchRightHandSide() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,40,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(3, 3);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,41,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,42,"solver = new ConjugateGradient(10, 0., false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,43,final ArrayRealVector b = new ArrayRealVector(2);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,44,final ArrayRealVector x = new ArrayRealVector(3);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,45,"solver.solve(a, b, x, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,48,@Test(expected = DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,49,public void testDimensionMismatchSolution() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,50,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(3, 3);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,51,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,52,"solver = new ConjugateGradient(10, 0., false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,53,final ArrayRealVector b = new ArrayRealVector(3);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,54,final ArrayRealVector x = new ArrayRealVector(2);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,55,"solver.solve(a, b, x, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,58,@Test(expected = NonPositiveDefiniteLinearOperatorException.class)
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,59,public void testNonPositiveDefiniteLinearOperator() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,60,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,61,"a.setEntry(0, 0, -1.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,62,"a.setEntry(0, 1, 2.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,63,"a.setEntry(1, 0, 3.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,64,"a.setEntry(1, 1, 4.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,65,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,66,"solver = new ConjugateGradient(10, 0., true);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,67,final ArrayRealVector b = new ArrayRealVector(2);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,68,"b.setEntry(0, -1.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,69,"b.setEntry(1, -1.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,70,final ArrayRealVector x = new ArrayRealVector(2);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,71,"solver.solve(a, b, x, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,74,@Test
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,75,public void testUnpreconditionedSolution() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,76,final int n = 5;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,77,final int maxIterations = 100;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,78,final RealLinearOperator a = new HilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,79,final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,80,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,81,"solver = new ConjugateGradient(maxIterations, 1E-10, true);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,82,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,83,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,84,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,85,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,86,"final RealVector x = solver.solve(a, b, null, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,87,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,88,final double actual = x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,89,"final double expected = ainv.getEntry(i, j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,90,final double delta = 1E-10 * Math.abs(expected);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,91,"final String msg = String.format(""entry[%d][%d]"", i, j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,92,"Assert.assertEquals(msg, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,97,@Test
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,98,public void testUnpreconditionedInPlaceSolutionWithInitialGuess() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,99,final int n = 5;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,100,final int maxIterations = 100;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,101,final RealLinearOperator a = new HilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,102,final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,103,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,104,"solver = new ConjugateGradient(maxIterations, 1E-10, true);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,105,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,106,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,107,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,108,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,109,final RealVector x0 = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,110,x0.set(1.);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,111,"final RealVector x = solver.solve(a, b, x0, true);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,112,"Assert.assertSame(""x should be a reference to x0"", x0, x);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,113,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,114,final double actual = x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,115,"final double expected = ainv.getEntry(i, j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,116,final double delta = 1E-10 * Math.abs(expected);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,117,"final String msg = String.format(""entry[%d][%d)"", i, j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,118,"Assert.assertEquals(msg, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,123,@Test
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,124,public void testUnpreconditionedSolutionWithInitialGuess() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,125,final int n = 5;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,126,final int maxIterations = 100;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,127,final RealLinearOperator a = new HilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,128,final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,129,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,130,"solver = new ConjugateGradient(maxIterations, 1E-10, true);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,131,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,132,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,133,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,134,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,135,final RealVector x0 = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,136,x0.set(1.);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,137,"final RealVector x = solver.solve(a, b, x0, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,138,"Assert.assertNotSame(""x should not be a reference to x0"", x0, x);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,139,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,140,final double actual = x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,141,"final double expected = ainv.getEntry(i, j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,142,final double delta = 1E-10 * Math.abs(expected);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,143,"final String msg = String.format(""entry[%d][%d]"", i, j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,144,"Assert.assertEquals(msg, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,145,"Assert.assertEquals(msg, x0.getEntry(i), 1., Math.ulp(1.));"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,151,* Check whether the estimate of the (updated) residual corresponds to the
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,152,"* exact residual. This fails to be true for a large number of iterations,"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,153,* due to the loss of orthogonality of the successive search directions.
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,154,"* Therefore, in the present test, the number of iterations is limited."
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,156,@Test(expected = MaxCountExceededException.class)
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,157,public void testUnpreconditionedResidual() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,158,final int n = 10;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,159,final int maxIterations = n;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,160,final RealLinearOperator a = new HilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,161,final ConjugateGradient solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,162,"solver = new ConjugateGradient(maxIterations, 1E-15, true);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,163,final RealVector r = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,164,final IterationListener listener = new IterationListener() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,166,public void terminationPerformed(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,167,"r.setSubVector(0, ((ProvidesResidual) e).getResidual());"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,170,public void iterationStarted(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,171,// Do nothing
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,174,public void iterationPerformed(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,175,// Do nothing
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,178,public void initializationPerformed(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,179,// Do nothing
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,182,solver.getIterationManager().addIterationListener(listener);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,184,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,185,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,186,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,187,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,189,"final RealVector x = solver.solve(a, b, null, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,190,final RealVector y = a.operate(x);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,191,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,192,final double actual = b.getEntry(i) - y.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,193,final double expected = r.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,194,final double delta = 1E-6 * Math.abs(expected);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,195,final String msg = String
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,196,".format(""column %d, residual %d"", i, j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,197,"Assert.assertEquals(msg, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,202,@Test(expected = NonSquareLinearOperatorException.class)
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,203,public void testNonSquarePreconditioner() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,204,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,205,final InvertibleRealLinearOperator m;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,206,m = new InvertibleRealLinearOperator() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,208,@Override
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,209,public RealVector operate(final RealVector x) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,210,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,213,@Override
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,214,public int getRowDimension() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,215,return 2;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,218,@Override
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,219,public int getColumnDimension() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,220,return 3;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,223,@Override
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,224,public RealVector solve(final RealVector b) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,225,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,228,final PreconditionedIterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,229,"solver = new ConjugateGradient(10, 0d, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,230,final ArrayRealVector b = new ArrayRealVector(a.getRowDimension());
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,231,"solver.solve(a, m, b, null, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,234,@Test(expected = DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,235,public void testMismatchedOperatorDimensions() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,236,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,237,final InvertibleRealLinearOperator m;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,238,m = new InvertibleRealLinearOperator() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,240,@Override
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,241,public RealVector operate(final RealVector x) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,242,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,245,@Override
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,246,public int getRowDimension() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,247,return 3;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,250,@Override
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,251,public int getColumnDimension() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,252,return 3;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,255,@Override
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,256,public RealVector solve(final RealVector b) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,257,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,260,final PreconditionedIterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,261,"solver = new ConjugateGradient(10, 0d, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,262,final ArrayRealVector b = new ArrayRealVector(a.getRowDimension());
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,263,"solver.solve(a, m, b, null, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,266,@Test(expected = NonPositiveDefiniteLinearOperatorException.class)
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,267,public void testNonPositiveDefinitePreconditioner() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,268,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,269,"a.setEntry(0, 0, 1d);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,270,"a.setEntry(0, 1, 2d);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,271,"a.setEntry(1, 0, 3d);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,272,"a.setEntry(1, 1, 4d);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,273,final InvertibleRealLinearOperator m;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,274,m = new InvertibleRealLinearOperator() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,276,@Override
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,277,public RealVector operate(final RealVector x) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,278,final ArrayRealVector y = new ArrayRealVector(2);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,279,"y.setEntry(0, -x.getEntry(0));"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,280,"y.setEntry(1, x.getEntry(1));"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,281,return y;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,284,@Override
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,285,public int getRowDimension() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,286,return 2;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,289,@Override
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,290,public int getColumnDimension() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,291,return 2;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,294,@Override
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,295,public RealVector solve(final RealVector b) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,296,final ArrayRealVector x = new ArrayRealVector(2);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,297,"x.setEntry(0, -b.getEntry(0));"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,298,"x.setEntry(1, b.getEntry(1));"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,299,return x;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,302,final PreconditionedIterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,303,"solver = new ConjugateGradient(10, 0d, true);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,304,final ArrayRealVector b = new ArrayRealVector(2);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,305,"b.setEntry(0, -1d);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,306,"b.setEntry(1, -1d);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,307,"solver.solve(a, m, b, null, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,310,@Test
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,311,public void testPreconditionedSolution() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,312,final int n = 8;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,313,final int maxIterations = 100;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,314,final RealLinearOperator a = new HilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,315,final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,316,final InvertibleRealLinearOperator m = JacobiPreconditioner.create(a);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,317,final PreconditionedIterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,318,"solver = new ConjugateGradient(maxIterations, 1E-15, true);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,319,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,320,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,321,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,322,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,323,"final RealVector x = solver.solve(a, m, b, null, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,324,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,325,final double actual = x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,326,"final double expected = ainv.getEntry(i, j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,327,final double delta = 1E-6 * Math.abs(expected);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,328,"final String msg = String.format(""coefficient (%d, %d)"", i, j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,329,"Assert.assertEquals(msg, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,334,@Test(expected = MaxCountExceededException.class)
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,335,public void testPreconditionedResidual() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,336,final int n = 10;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,337,final int maxIterations = n;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,338,final RealLinearOperator a = new HilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,339,final InvertibleRealLinearOperator m = JacobiPreconditioner.create(a);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,340,final ConjugateGradient solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,341,"solver = new ConjugateGradient(maxIterations, 1E-15, true);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,342,final RealVector r = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,343,final IterationListener listener = new IterationListener() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,345,public void terminationPerformed(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,346,"r.setSubVector(0, ((ProvidesResidual) e).getResidual());"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,349,public void iterationStarted(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,350,// Do nothing
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,353,public void iterationPerformed(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,354,// Do nothing
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,357,public void initializationPerformed(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,358,// Do nothing
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,361,solver.getIterationManager().addIterationListener(listener);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,362,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,364,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,365,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,366,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,367,"final RealVector x = solver.solve(a, m, b, null, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,368,final RealVector y = a.operate(x);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,369,double rnorm = 0.;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,370,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,371,final double actual = b.getEntry(i) - y.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,372,final double expected = r.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,373,final double delta = 1E-6 * Math.abs(expected);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,374,final String msg = String
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,375,".format(""column %d, residual %d"", i, j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,376,"Assert.assertEquals(msg, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,378,rnorm = r.getNorm();
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,379,"Assert.assertEquals(""norm of residual"", rnorm, r.getNorm(),"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,380,1E-6 * Math.abs(rnorm));
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,384,@Test
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,385,public void testPreconditionedSolution2() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,386,final int n = 100;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,387,final int maxIterations = 100000;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,388,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(n, n);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,389,double daux = 1.;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,390,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,391,"a.setEntry(i, i, daux);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,392,daux *= 1.2;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,393,for (int j = i + 1; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,394,if (i == j) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,395,} else {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,396,final double value = 1.0;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,397,"a.setEntry(i, j, value);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,398,"a.setEntry(j, i, value);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,402,final InvertibleRealLinearOperator m = JacobiPreconditioner.create(a);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,403,final PreconditionedIterativeLinearSolver pcg;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,404,final IterativeLinearSolver cg;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,405,"pcg = new ConjugateGradient(maxIterations, 1E-6, true);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,406,"cg = new ConjugateGradient(maxIterations, 1E-6, true);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,407,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,408,"final String pattern = ""preconditioned gradient (%d iterations) should"""
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,409,"+ "" have been faster than unpreconditioned (%d iterations)"";"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,410,String msg;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,411,for (int j = 0; j < 1; j++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,412,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,413,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,414,"final RealVector px = pcg.solve(a, m, b, null, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,415,"final RealVector x = cg.solve(a, b, null, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,416,final int npcg = pcg.getIterationManager().getIterations();
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,417,final int ncg = cg.getIterationManager().getIterations();
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,418,"msg = String.format(pattern, npcg, ncg);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,419,"Assert.assertTrue(msg, npcg < ncg);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,420,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,421,"msg = String.format(""row %d, column %d"", i, j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,422,final double expected = x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,423,final double actual = px.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,424,final double delta = 1E-6 * Math.abs(expected);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,425,"Assert.assertEquals(msg, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,430,@Test
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,431,public void testEventManagement() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,432,final int n = 5;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,433,final int maxIterations = 100;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,434,final RealLinearOperator a = new HilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,435,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,436,final int[] count = new int[] {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,437,"0, 0, 0, 0"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,439,final IterationListener listener = new IterationListener() {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,441,public void initializationPerformed(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,442,count[0] = 1;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,443,count[1] = 0;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,444,count[2] = 0;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,445,count[3] = 0;
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,449,public void iterationPerformed(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,450,++count[2];
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,453,public void iterationStarted(IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,454,++count[1];
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,458,public void terminationPerformed(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,459,++count[3];
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,462,"solver = new ConjugateGradient(maxIterations, 1E-10, true);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,463,solver.getIterationManager().addIterationListener(listener);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,464,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,465,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,466,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,467,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,468,"solver.solve(a, b, null, false);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,469,"String msg = String.format(""column %d (initialization)"", j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,470,"Assert.assertEquals(msg, 1, count[0]);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,471,"msg = String.format(""column %d (iterations started)"", j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,472,"Assert.assertEquals(msg, solver.getIterationManager()"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,473,".getIterations() - 1, count[1]);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,474,"msg = String.format(""column %d (iterations performed)"", j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,475,"Assert.assertEquals(msg, solver.getIterationManager()"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,476,".getIterations() - 1, count[2]);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,477,"msg = String.format(""column %d (finalization)"", j);"
True,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java,478,"Assert.assertEquals(msg, 1, count[3]);"
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,17,package org.apache.commons.math.linear;
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,19,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,21,/** This class implements Hilbert Matrices as {@link RealLinearOperator}. */
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,22,public class HilbertMatrix
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,23,extends RealLinearOperator {
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,25,/** The size of the matrix. */
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,26,private final int n;
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,29,* Creates a new instance of this class.
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,31,* @param n Size of the matrix to be created..
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,33,public HilbertMatrix(final int n) {
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,34,this.n = n;
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,37,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,38,@Override
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,39,public int getColumnDimension() {
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,40,return n;
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,43,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,44,@Override
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,45,public int getRowDimension() {
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,46,return n;
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,49,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,50,@Override
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,51,public RealVector operate(final RealVector x) {
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,52,if (x.getDimension() != n) {
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,53,"throw new DimensionMismatchException(x.getDimension(), n);"
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,55,final double[] y = new double[n];
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,56,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,57,double pos = 0.;
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,58,double neg = 0.;
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,59,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,60,final double xj = x.getEntry(j);
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,61,final double coeff = 1. / (i + j + 1.);
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,62,// Positive and negative values are sorted out in order to limit
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,63,// catastrophic cancellations (do not forget that Hilbert
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,64,// matrices are *very* ill-conditioned!
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,65,if (xj > 0.) {
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,66,pos += coeff * xj;
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,67,} else {
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,68,neg += coeff * xj;
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,71,y[i] = pos + neg;
True,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,src/test/java/org/apache/commons/math/linear/HilbertMatrix.java,73,"return new ArrayRealVector(y, false);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,17,package org.apache.commons.math.linear;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,19,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,20,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,23,* This class implements inverses of Hilbert Matrices as
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,24,* {@link RealLinearOperator}.
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,26,public class InverseHilbertMatrix
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,27,extends RealLinearOperator {
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,29,/** The size of the matrix. */
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,30,private final int n;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,33,* Creates a new instance of this class.
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,35,* @param n Size of the matrix to be created.
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,37,public InverseHilbertMatrix(final int n) {
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,38,this.n = n;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,41,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,42,@Override
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,43,public int getColumnDimension() {
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,44,return n;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,48,"* Returns the {@code (i, j)} entry of the inverse Hilbert matrix. Exact"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,49,"* arithmetic is used; in case of overflow, an exception is thrown."
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,51,* @param i Row index (starts at 0).
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,52,* @param j Column index (starts at 0).
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,53,* @return The coefficient of the inverse Hilbert matrix.
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,55,"public long getEntry(final int i, final int j) {"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,56,long val = i + j + 1;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,57,"long aux = MathUtils.binomialCoefficient(n + i, n - j - 1);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,58,"val = MathUtils.mulAndCheck(val, aux);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,59,"aux = MathUtils.binomialCoefficient(n + j, n - i - 1);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,60,"val = MathUtils.mulAndCheck(val, aux);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,61,"aux = MathUtils.binomialCoefficient(i + j, i);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,62,"val = MathUtils.mulAndCheck(val, aux);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,63,"val = MathUtils.mulAndCheck(val, aux);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,64,return ((i + j) & 1) == 0 ? val : -val;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,67,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,68,@Override
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,69,public int getRowDimension() {
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,70,return n;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,73,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,74,@Override
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,75,public RealVector operate(final RealVector x) {
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,76,if (x.getDimension() != n) {
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,77,"throw new DimensionMismatchException(x.getDimension(), n);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,79,final double[] y = new double[n];
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,80,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,81,double pos = 0.;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,82,double neg = 0.;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,83,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,84,final double xj = x.getEntry(j);
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,85,"final long coeff = getEntry(i, j);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,86,final double daux = coeff * xj;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,87,// Positive and negative values are sorted out in order to limit
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,88,// catastrophic cancellations (do not forget that Hilbert
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,89,// matrices are *very* ill-conditioned!
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,90,if (daux > 0.) {
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,91,pos += daux;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,92,} else {
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,93,neg += daux;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,96,y[i] = pos + neg;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,98,"return new ArrayRealVector(y, false);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,460,or (iterations = 1; iterations <= maxIterations; iterations++) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,461,/ Generate and evaluate lambda offspring
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,462,"ealMatrix arz = randn1(dimension, lambda);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,463,"ealMatrix arx = zeros(dimension, lambda);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,464,ouble[] fitness = new double[lambda];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,465,/ generate random offspring
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,466,or (int k = 0; k < lambda; k++) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,467,ealMatrix arxk = null;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,468,or (int i = 0; i < checkFeasableCount+1; i++) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,469,f (diagonalOnly <= 0) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,470,rxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,471,"scalarMultiply(sigma)); // m + sig * Normal(0,C)"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,472, else {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,473,"rxk = xmean.add(times(diagD,arz.getColumnMatrix(k))"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,474,scalarMultiply(sigma));
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,476,f (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,477,reak;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,479,/ regenerate random arguments for row
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,480,"rz.setColumn(k, randn(dimension));"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,460,for (iterations = 1; iterations <= maxIterations; iterations++) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,461,// Generate and evaluate lambda offspring
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,462,"final RealMatrix arz = randn1(dimension, lambda);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,463,"final RealMatrix arx = zeros(dimension, lambda);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,464,final double[] fitness = new double[lambda];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,465,// generate random offspring
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,466,for (int k = 0; k < lambda; k++) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,467,RealMatrix arxk = null;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,468,for (int i = 0; i < checkFeasableCount + 1; i++) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,469,if (diagonalOnly <= 0) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,470,arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,471,".scalarMultiply(sigma)); // m + sig * Normal(0,C)"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,472,} else {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,473,"arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,474,.scalarMultiply(sigma));
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,482,"opyColumn(arxk, 0, arx, k);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,483,ry {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,484,itness[k] = fitfun.value(arx.getColumn(k)); // compute fitness
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,485, catch (TooManyEvaluationsException e) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,486,reak generationLoop;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,476,if (i >= checkFeasableCount ||
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,477,fitfun.isFeasible(arxk.getColumn(0))) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,478,break;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,480,// regenerate random arguments for row
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,481,"arz.setColumn(k, randn(dimension));"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,489,/ Sort by fitness and compute weighted mean into xmean
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,490,nt[] arindex = sortedIndices(fitness);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,491,"/ Calculate new xmean, this is selection and recombination"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,492,ealMatrix xold = xmean; // for speed up of Eq. (2) and (3)
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,493,"ealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,494,mean = bestArx.multiply(weights);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,495,"ealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,496,ealMatrix zmean = bestArz.multiply(weights);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,497,"oolean hsig = updateEvolutionPaths(zmean, xold);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,498,f (diagonalOnly <= 0) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,499,"pdateCovariance(hsig, bestArx, arz, arindex, xold);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,500, else {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,501,"pdateCovarianceDiagonalOnly(hsig, bestArz, xold);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,503,/ Adapt step size sigma - Eq. (5)
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,504,"igma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,505,ouble bestFitness = fitness[arindex[0]];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,506,ouble worstFitness = fitness[arindex[arindex.length - 1]];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,507,f (bestValue > bestFitness) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,508,estValue = bestFitness;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,509,astResult = optimum;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,510,ptimum = new PointValuePair(
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,511,"itfun.repair(bestArx.getColumn(0)),"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,512,sMinimize ? bestFitness : -bestFitness);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,513,f (getConvergenceChecker() != null && lastResult != null) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,514,"f (getConvergenceChecker().converged(iterations, optimum, lastResult)) {"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,515,reak generationLoop;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,483,"copyColumn(arxk, 0, arx, k);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,484,try {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,485,fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,486,} catch (TooManyEvaluationsException e) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,487,break generationLoop;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,519,/ handle termination criteria
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,520,"/ Break, if fitness is good enough"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,521,f (stopFitness != 0) { // only if stopFitness is defined
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,522,f (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,490,// Sort by fitness and compute weighted mean into xmean
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,491,final int[] arindex = sortedIndices(fitness);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,492,"// Calculate new xmean, this is selection and recombination"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,493,final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,494,"final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,495,xmean = bestArx.multiply(weights);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,496,"final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,497,final RealMatrix zmean = bestArz.multiply(weights);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,498,"final boolean hsig = updateEvolutionPaths(zmean, xold);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,499,if (diagonalOnly <= 0) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,500,"updateCovariance(hsig, bestArx, arz, arindex, xold);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,501,} else {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,502,"updateCovarianceDiagonalOnly(hsig, bestArz, xold);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,504,// Adapt step size sigma - Eq. (5)
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,505,"sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,506,final double bestFitness = fitness[arindex[0]];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,507,final double worstFitness = fitness[arindex[arindex.length - 1]];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,508,if (bestValue > bestFitness) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,509,bestValue = bestFitness;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,510,lastResult = optimum;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,511,"optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,512,isMinimize ? bestFitness : -bestFitness);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,513,if (getConvergenceChecker() != null &&
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,514,lastResult != null) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,515,"if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,526,ouble[] sqrtDiagC = sqrt(diagC).getColumn(0);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,527,ouble[] pcCol = pc.getColumn(0);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,528,or (int i = 0; i < dimension; i++) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,529,"f (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX) {"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,530,reak;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,532,f (i >= dimension-1) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,533,reak generationLoop;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,520,// handle termination criteria
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,521,"// Break, if fitness is good enough"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,522,if (stopFitness != 0) { // only if stopFitness is defined
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,523,if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,524,break generationLoop;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,536,or (int i = 0; i < dimension; i++) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,537,f (sigma*sqrtDiagC[i] > stopTolUpX) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,538,reak generationLoop;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,527,final double[] sqrtDiagC = sqrt(diagC).getColumn(0);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,528,final double[] pcCol = pc.getColumn(0);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,529,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,530,"if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,531,break;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,541,ouble historyBest = min(fitnessHistory);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,542,ouble historyWorst = max(fitnessHistory);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,543,"f (iterations > 2 && Math.max(historyWorst, worstFitness) -"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,544,"ath.min(historyBest, bestFitness) < stopTolFun) {"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,533,if (i >= dimension - 1) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,547,f (iterations > fitnessHistory.length &&
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,548,istoryWorst-historyBest < stopTolHistFun) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,537,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,538,if (sigma * sqrtDiagC[i] > stopTolUpX) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,551,/ condition number of the covariance matrix exceeds 1e14
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,552,f (max(diagD)/min(diagD) > 1e7) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,542,final double historyBest = min(fitnessHistory);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,543,final double historyWorst = max(fitnessHistory);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,544,if (iterations > 2 &&
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,545,"Math.max(historyWorst, worstFitness) -"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,546,"Math.min(historyBest, bestFitness) < stopTolFun) {"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,547,break generationLoop;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,549,if (iterations > fitnessHistory.length &&
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,550,historyWorst-historyBest < stopTolHistFun) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,551,break generationLoop;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,553,// condition number of the covariance matrix exceeds 1e14
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,554,if (max(diagD)/min(diagD) > 1e7) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,555,break generationLoop;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,557,// user defined termination
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,558,if (getConvergenceChecker() != null) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,559,final PointValuePair current
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,560,"= new PointValuePair(bestArx.getColumn(0),"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,561,isMinimize ? bestFitness : -bestFitness);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,562,if (lastResult != null &&
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,563,"getConvergenceChecker().converged(iterations, current, lastResult)) {"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,555,/ user defined termination
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,556,f (getConvergenceChecker() != null) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,557,ointValuePair current =
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,558,"ew PointValuePair(bestArx.getColumn(0),"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,559,sMinimize ? bestFitness : -bestFitness);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,560,f (lastResult != null &&
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,561,"etConvergenceChecker().converged(iterations, current, lastResult)) {"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,562,reak generationLoop;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,564,astResult = current;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,566,/ Adjust step size in case of equal function values (flat fitness)
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,567,f (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,568,igma = sigma * Math.exp(0.2 + cs / damps);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,570,"f (iterations > 2 && Math.max(historyWorst, bestFitness) -"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,571,"ath.min(historyBest, bestFitness) == 0) {"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,572,igma = sigma * Math.exp(0.2 + cs / damps);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,574,/ store best in history
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,575,"ush(fitnessHistory,bestFitness);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,576,itfun.setValueRange(worstFitness-bestFitness);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,577,f (generateStatistics) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,578,tatisticsSigmaHistory.add(sigma);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,579,tatisticsFitnessHistory.add(bestFitness);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,580,tatisticsMeanHistory.add(xmean.transpose());
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,581,tatisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,566,lastResult = current;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,568,// Adjust step size in case of equal function values (flat fitness)
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,569,if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,570,sigma = sigma * Math.exp(0.2 + cs / damps);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,572,"if (iterations > 2 && Math.max(historyWorst, bestFitness) -"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,573,"Math.min(historyBest, bestFitness) == 0) {"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,574,sigma = sigma * Math.exp(0.2 + cs / damps);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,576,// store best in history
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,577,"push(fitnessHistory,bestFitness);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,578,fitfun.setValueRange(worstFitness-bestFitness);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,579,if (generateStatistics) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,580,statisticsSigmaHistory.add(sigma);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,581,statisticsFitnessHistory.add(bestFitness);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,582,statisticsMeanHistory.add(xmean.transpose());
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,583,statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,640,ouble[][] sigmaArray = new double[guess.length][1];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,642,final double[][] sigmaArray = new double[guess.length][1];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,644,"ealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,646,"final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,714,oolean hsig = normps /
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,716,final boolean hsig = normps /
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,769,"ealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,770,scalarMultiply(1 / sigma); // mu difference vectors
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,771,ealMatrix roneu = pc.multiply(pc.transpose())
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,772,scalarMultiply(ccov1); // rank one update
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,771,"final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,772,.scalarMultiply(1 / sigma); // mu difference vectors
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,773,final RealMatrix roneu = pc.multiply(pc.transpose())
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,774,.scalarMultiply(ccov1); // rank one update
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,780,ouble negminresidualvariance = 0.66;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,783,ouble negalphaold = 0.5; // where to make up for the variance
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,784,"/ loss,"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,784,final double negminresidualvariance = 0.66;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,785,// where to make up for the variance loss
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,786,final double negalphaold = 0.5;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,786,nt[] arReverseIndex = reverse(arindex);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,788,final int[] arReverseIndex = reverse(arindex);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,789,nt[] idxnorms = sortedIndices(arnorms.getRow(0));
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,790,"ealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,791,nt[] idxReverse = reverse(idxnorms);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,792,"ealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,791,final int[] idxnorms = sortedIndices(arnorms.getRow(0));
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,792,"final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,793,final int[] idxReverse = reverse(idxnorms);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,794,"final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,794,nt[] idxInv = inverse(idxnorms);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,795,"ealMatrix arnormsInv = selectColumns(arnorms, idxInv);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,796,final int[] idxInv = inverse(idxnorms);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,797,"final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,797,ouble negcovMax = (1 - negminresidualvariance) /
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,799,final double negcovMax = (1 - negminresidualvariance) /
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,803,ealMatrix artmp = BD.multiply(arzneg);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,804,ealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,805,final RealMatrix artmp = BD.multiply(arzneg);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,806,final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,836,igenDecomposition eig = new EigenDecomposition(C);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,838,final EigenDecomposition eig = new EigenDecomposition(C);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,846,ouble tfac = max(diagD) / 1e14;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,848,final double tfac = max(diagD) / 1e14;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,851,ouble tfac = max(diagD) / 1e14 - min(diagD);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,853,final double tfac = max(diagD) / 1e14 - min(diagD);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,881,oubleIndex[] dis = new DoubleIndex[doubles.length];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,883,final DoubleIndex[] dis = new DoubleIndex[doubles.length];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,886,nt[] indices = new int[doubles.length];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,888,final int[] indices = new int[doubles.length];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,899,rivate double value;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,901,private final double value;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,901,rivate int index;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,903,private final int index;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,952,rivate boolean isRepairMode;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,954,private final boolean isRepairMode;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,969,alue = CMAESOptimizer.this
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,970,computeObjectiveValue(repaired) +
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,971,"enalty(point, repaired);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,971,value = CMAESOptimizer.this.computeObjectiveValue(repaired) +
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,972,"penalty(point, repaired);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,973,alue = CMAESOptimizer.this
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,974,computeObjectiveValue(point);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,974,value = CMAESOptimizer.this.computeObjectiveValue(point);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1048,ouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1048,final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1062,ouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1062,final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1076,ouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1076,final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1092,ouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1092,final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1107,ouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1107,final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1122,ouble[][] d = new double[m.getRowDimension()][cols.length];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1122,final double[][] d = new double[m.getRowDimension()][cols.length];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1137,ouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1137,final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1151,ouble[][] d = new double[1][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1151,final double[][] d = new double[1][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1169,ouble[][] d = new double[m.getRowDimension()][m.getRowDimension()];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1169,final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1175,ouble[][] d = new double[m.getRowDimension()][1];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1175,final double[][] d = new double[m.getRowDimension()][1];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1191,"rivate static void copyColumn(final RealMatrix m1, int col1, RealMatrix m2, int col2) {"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1191,"private static void copyColumn(final RealMatrix m1, int col1,"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1192,"RealMatrix m2, int col2) {"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1203,ouble[][] d = new double[n][m];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1204,final double[][] d = new double[n][m];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1217,ouble[][] d = new double[n][m];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1218,final double[][] d = new double[n][m];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1242,nt rd = mat.getRowDimension();
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1243,nt cd = mat.getColumnDimension();
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1244,ouble[][] d = new double[n * rd][m * cd];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1243,final int rd = mat.getRowDimension();
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1244,final int cd = mat.getColumnDimension();
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1245,final double[][] d = new double[n * rd][m * cd];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1260,nt size = (int) ((end - start) / step + 1);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1261,ouble[][] d = new double[size][1];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1261,final int size = (int) ((end - start) / step + 1);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1262,final double[][] d = new double[size][1];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1337,nt[] inverse = new int[indices.length];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1338,final int[] inverse = new int[indices.length];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1349,nt[] reverse = new int[indices.length];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1350,final int[] reverse = new int[indices.length];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1361,ouble[] randn = new double[size];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1362,final double[] randn = new double[size];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1374,ouble[][] d = new double[size][popSize];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1375,final double[][] d = new double[size][popSize];

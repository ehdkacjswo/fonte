is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,19,import java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,20, The Chi-Squared Distribution.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,22, <p>
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,23, References:
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,24, <ul>
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,25," <li><a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,26, Chi-Squared Distribution</a></li>
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,27, </ul>
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,28, </p>
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,23,* Implementation of the chi-squared distribution.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,25,"* @see <a href=""http://en.wikipedia.org/wiki/Chi-squared_distribution"">Chi-squared distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,26,"* @see <a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">Chi-squared Distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,32,ublic interface ChiSquaredDistribution extends ContinuousDistribution {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,29,public class ChiSquaredDistribution
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,30,extends AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,31,implements Serializable {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,33,* Default inverse cumulative probability accuracy
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,34,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,36,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,37,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,38,private static final long serialVersionUID = -8352658048349159782L;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,39,/** Internal Gamma distribution. */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,40,private final GammaDistribution gamma;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,41,/** Inverse cumulative probability accuracy */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,42,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,45,* Create a Chi-Squared distribution with the given degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,47,* @param degreesOfFreedom Degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,49,public ChiSquaredDistribution(double degreesOfFreedom) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,50,"this(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,54,* Create a Chi-Squared distribution with the given degrees of freedom and
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,55,* inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,57,* @param degreesOfFreedom Degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,58,* @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,59,* cumulative probability estimates (defaults to
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,60,* {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,61,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,63,"public ChiSquaredDistribution(double degreesOfFreedom,"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,64,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,65,"gamma = new GammaDistributionImpl(degreesOfFreedom / 2, 2);"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,66,solverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,38,ouble getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,74,public double getDegreesOfFreedom() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,75,return gamma.getAlpha() * 2.0;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,78,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,79,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,80,return gamma.density(x);
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,83,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,84,public double cumulativeProbability(double x)  {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,85,return gamma.cumulativeProbability(x);
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,89,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,91,* Returns {@code 0} when {@code p == 0} and
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,92,* {@code Double.POSITIVE_INFINITY} when {@code p == 1}.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,94,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,95,public double inverseCumulativeProbability(final double p) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,96,if (p == 0) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,97,return 0d;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,99,if (p == 1) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,100,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,102,return super.inverseCumulativeProbability(p);
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,105,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,106,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,107,protected double getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,108,return Double.MIN_VALUE * gamma.getBeta();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,111,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,112,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,113,protected double getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,114,// NOTE: chi squared is skewed to the left
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,115,"// NOTE: therefore, P(X < &mu;) > .5"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,117,double ret;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,119,if (p < .5) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,120,// use mean
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,121,ret = getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,122,} else {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,123,// use max
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,124,ret = Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,127,return ret;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,130,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,131,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,132,protected double getInitialDomain(double p) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,133,// NOTE: chi squared is skewed to the left
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,134,"// NOTE: therefore, P(X < &mu;) > 0.5"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,136,double ret;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,138,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,139,// use 1/2 mean
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,140,ret = getDegreesOfFreedom() * 0.5;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,141,} else {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,142,// use mean
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,143,ret = getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,146,return ret;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,149,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,150,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,151,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,152,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,156,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,158,* The lower bound of the support is always 0 no matter the
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,159,* degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,161,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,163,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,164,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,165,return 0;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,169,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,171,* The upper bound of the support is always positive infinity no matter the
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,172,* degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,174,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,176,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,177,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,178,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,182,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,184,"* For {@code k} degrees of freedom, the mean is {@code k}."
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,186,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,187,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,188,return getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,192,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,194,"* For {@code k} degrees of freedom, the variance is {@code 2 * k}."
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,196,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,198,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,199,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,200,return 2*getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,203,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,204,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,205,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,206,return true;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,209,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,210,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,211,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,212,return false;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,23, The default implementation of {@link ChiSquaredDistribution}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,25, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,27,ublic class ChiSquaredDistributionImpl
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,28,xtends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,29,"mplements ChiSquaredDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,31, Default inverse cumulative probability accuracy
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,32, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,34,ublic static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,35,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,36,rivate static final long serialVersionUID = -8352658048349159782L;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,37,** Internal Gamma distribution. */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,38,rivate final GammaDistribution gamma;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,39,** Inverse cumulative probability accuracy */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,40,rivate final double solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,43, Create a Chi-Squared distribution with the given degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,45, @param degreesOfFreedom Degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,47,ublic ChiSquaredDistributionImpl(double degreesOfFreedom) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,48,"his(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,52, Create a Chi-Squared distribution with the given degrees of freedom and
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,53, inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,55, @param degreesOfFreedom Degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,56, @param inverseCumAccuracy the maximum absolute error in inverse
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,57, cumulative probability estimates (defaults to
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,58, {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,59, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,61,"ublic ChiSquaredDistributionImpl(double degreesOfFreedom,"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,62,ouble inverseCumAccuracy) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,63,"amma = new GammaDistributionImpl(degreesOfFreedom / 2, 2);"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,64,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,68, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,70,ublic double getDegreesOfFreedom() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,71,eturn gamma.getAlpha() * 2.0;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,75, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,77,ublic double density(double x) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,78,eturn gamma.density(x);
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,82, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,84,ublic double cumulativeProbability(double x)  {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,85,eturn gamma.cumulativeProbability(x);
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,89, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,91, It will return {@code 0} when {@code p = 0} and
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,92, {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,94,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,95,ublic double inverseCumulativeProbability(final double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,96,f (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,97,eturn 0d;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,99,f (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,100,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,102,eturn super.inverseCumulativeProbability(p);
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,106," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,107, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,108, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,110, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,111," @return domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,113,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,114,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,115,eturn Double.MIN_VALUE * gamma.getBeta();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,119," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,120, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,121, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,123, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,124," @return domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,126,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,127,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,128,/ NOTE: chi squared is skewed to the left
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,129,"/ NOTE: therefore, P(X < &mu;) > .5"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,131,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,133,f (p < .5) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,134,/ use mean
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,135,et = getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,136, else {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,137,/ use max
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,138,et = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,141,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,145," Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,146, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,147, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,149, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,150, @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,152,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,153,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,154,/ NOTE: chi squared is skewed to the left
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,155,"/ NOTE: therefore, P(X < &mu;) > 0.5"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,157,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,159,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,160,/ use 1/2 mean
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,161,et = getDegreesOfFreedom() * 0.5;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,162, else {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,163,/ use mean
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,164,et = getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,167,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,171, Return the absolute accuracy setting of the solver used to estimate
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,172, inverse cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,174, @return the solver absolute accuracy.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,175, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,177,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,178,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,179,eturn solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,183, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,185, The lower bound of the support is always 0 no matter the
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,186, degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,188, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,190,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,191,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,192,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,196, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,198, The upper bound of the support is always positive infinity no matter the
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,199, degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,201, @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,203,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,204,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,205,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,209, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,211," For <code>k</code> degrees of freedom, the mean is"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,212, <code>k</code>
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,214, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,216,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,217,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,218,eturn getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,222, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,224," For <code>k</code> degrees of freedom, the variance is"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,225, <code>2 * k</code>
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,227, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,229,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,230,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,231,eturn 2*getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,235, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,237,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,238,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,239,eturn true;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,243, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,245,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,246,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,247,eturn false;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,30,mport org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,30,import org.apache.commons.math.distribution.ChiSquaredDistribution;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,644, Generates a random value from the {@link ChiSquaredDistributionImpl ChiSquare Distribution}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,644,* Generates a random value from the {@link ChiSquaredDistribution ChiSquare Distribution}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,653,eturn nextInversionDeviate(new ChiSquaredDistributionImpl(df));
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,653,return nextInversionDeviate(new ChiSquaredDistribution(df));
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,25,mport org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,105,ew ChiSquaredDistributionImpl(expected.length - 1.0);
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,104,new ChiSquaredDistribution(expected.length - 1.0);
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,179,hiSquaredDistribution distribution = new ChiSquaredDistributionImpl(df);
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,178,ChiSquaredDistribution distribution;
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,179,distribution = new ChiSquaredDistribution(df);
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,273,hiSquaredDistribution distribution =
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,274,ew ChiSquaredDistributionImpl((double) observed1.length - 1);
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,273,ChiSquaredDistribution distribution;
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,274,distribution = new ChiSquaredDistribution((double) observed1.length - 1);
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,37,eturn new ChiSquaredDistributionImpl(5.0);
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,37,return new ChiSquaredDistribution(5.0);
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,87,etDistribution(new ChiSquaredDistributionImpl(0.1d));
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,87,setDistribution(new ChiSquaredDistribution(0.1d));
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,119,hiSquaredDistribution d = new ChiSquaredDistributionImpl(df);
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,119,ChiSquaredDistribution d = new ChiSquaredDistribution(df);
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,130,ist = new ChiSquaredDistributionImpl(1500);
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,130,dist = new ChiSquaredDistribution(1500);
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,132,"ssert.assertEquals(dist.getNumericalVariance(), 3000, tol);"
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,134,ist = new ChiSquaredDistributionImpl(1.12);
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,132,"Assert.assertEquals(dist.getNumericalVariance(), 3000, tol);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,134,dist = new ChiSquaredDistribution(1.12);
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,32,mport org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,32,import org.apache.commons.math.distribution.ChiSquaredDistribution;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,887,ouble[] quartiles = TestUtils.getDistributionQuartiles(new ChiSquaredDistributionImpl(12));
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,887,double[] quartiles = TestUtils.getDistributionQuartiles(new ChiSquaredDistribution(12));

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,40,import org.apache.commons.math3.distribution.UniformIntegerDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,197,f (lower >= upper) {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,198,"hrow new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,199,"ower, upper, false);"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,201,inal int max = (upper - lower) + 1;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,202,f (max <= 0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,203,/ the range is too wide to fit in a positive int (larger than 2^31); as it covers
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,204,"/ more than half the integer range, we use directly a simple rejection method"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,205,inal RandomGenerator rng = getRandomGenerator();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,206,hile (true) {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,207,inal int r = rng.nextInt();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,208,f (r >= lower && r <= upper) {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,209,eturn r;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,212, else {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,213,/ we can shift the range and generate directly a positive int
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,214,eturn lower + getRandomGenerator().nextInt(max);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,198,"return new UniformIntegerDistribution(getRandomGenerator(), lower, upper).sample();"

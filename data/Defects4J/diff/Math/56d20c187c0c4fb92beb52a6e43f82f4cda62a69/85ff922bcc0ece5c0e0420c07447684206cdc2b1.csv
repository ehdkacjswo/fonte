is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,17,package org.apache.commons.math3.userguide;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,19,import java.awt.Color;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,20,import java.awt.Dimension;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,21,import java.awt.Graphics;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,22,import java.awt.Graphics2D;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,23,import java.awt.GridBagConstraints;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,24,import java.awt.GridBagLayout;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,25,import java.awt.Insets;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,26,import java.awt.RenderingHints;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,27,import java.awt.Shape;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,28,import java.awt.geom.Ellipse2D;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,29,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,30,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,31,import java.util.Collections;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,32,import java.util.List;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,34,import javax.swing.JComponent;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,35,import javax.swing.JFrame;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,36,import javax.swing.JTextArea;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,37,import javax.swing.SwingUtilities;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,39,import org.apache.commons.math3.distribution.NormalDistribution;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,40,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,41,import org.apache.commons.math3.ml.clustering.CentroidCluster;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,42,import org.apache.commons.math3.ml.clustering.Cluster;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,43,import org.apache.commons.math3.ml.clustering.Clusterable;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,44,import org.apache.commons.math3.ml.clustering.Clusterer;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,45,import org.apache.commons.math3.ml.clustering.DBSCANClusterer;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,46,import org.apache.commons.math3.ml.clustering.DoublePoint;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,47,import org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,48,import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,49,import org.apache.commons.math3.random.RandomAdaptor;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,50,import org.apache.commons.math3.random.RandomGenerator;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,51,import org.apache.commons.math3.random.SobolSequenceGenerator;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,52,import org.apache.commons.math3.random.Well19937c;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,53,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,54,import org.apache.commons.math3.util.Pair;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,57,* Plots clustering results for various algorithms and datasets.
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,58,* Based on
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,59,"* <a href=""http://scikit-learn.org/stable/auto_examples/cluster/plot_cluster_comparison.html"">scikit learn</a>."
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,61,public class ClusteringExamples {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,63,"public static List<Vector2D> makeCircles(int samples, boolean shuffle, double noise, double factor, final RandomGenerator random) {"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,64,if (factor < 0 || factor > 1) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,65,throw new IllegalArgumentException();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,68,"NormalDistribution dist = new NormalDistribution(random, 0.0, noise, 1e-9);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,70,List<Vector2D> points = new ArrayList<Vector2D>();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,71,double range = 2.0 * FastMath.PI;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,72,double step = range / (samples / 2.0 + 1);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,73,for (double angle = 0; angle < range; angle += step) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,74,"Vector2D outerCircle = new Vector2D(FastMath.cos(angle), FastMath.sin(angle));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,75,Vector2D innerCircle = outerCircle.scalarMultiply(factor);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,77,points.add(outerCircle.add(generateNoiseVector(dist)));
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,78,points.add(innerCircle.add(generateNoiseVector(dist)));
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,81,if (shuffle) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,82,"Collections.shuffle(points, new RandomAdaptor(random));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,85,return points;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,88,"public static List<Vector2D> makeMoons(int samples, boolean shuffle, double noise, RandomGenerator random) {"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,89,"NormalDistribution dist = new NormalDistribution(random, 0.0, noise, 1e-9);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,91,int nSamplesOut = samples / 2;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,92,int nSamplesIn = samples - nSamplesOut;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,94,List<Vector2D> points = new ArrayList<Vector2D>();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,95,double range = FastMath.PI;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,96,double step = range / (nSamplesOut / 2.0);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,97,for (double angle = 0; angle < range; angle += step) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,98,"Vector2D outerCircle = new Vector2D(FastMath.cos(angle), FastMath.sin(angle));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,99,points.add(outerCircle.add(generateNoiseVector(dist)));
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,102,step = range / (nSamplesIn / 2.0);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,103,for (double angle = 0; angle < range; angle += step) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,104,"Vector2D innerCircle = new Vector2D(1 - FastMath.cos(angle), 1 - FastMath.sin(angle) - 0.5);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,105,points.add(innerCircle.add(generateNoiseVector(dist)));
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,108,if (shuffle) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,109,"Collections.shuffle(points, new RandomAdaptor(random));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,112,return points;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,115,"public static List<Vector2D> makeBlobs(int samples, int centers, double clusterStd,"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,116,"double min, double max, boolean shuffle, RandomGenerator random) {"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,118,"NormalDistribution dist = new NormalDistribution(random, 0.0, clusterStd, 1e-9);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,120,double range = max - min;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,121,Vector2D[] centerPoints = new Vector2D[centers];
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,122,for (int i = 0; i < centers; i++) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,123,double x = random.nextDouble() * range + min;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,124,double y = random.nextDouble() * range + min;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,125,"centerPoints[i] = new Vector2D(x, y);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,128,int[] nSamplesPerCenter = new int[centers];
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,129,int count = (samples / centers) * centers;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,130,"Arrays.fill(nSamplesPerCenter, count);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,132,for (int i = 0; i < samples % centers; i++) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,133,nSamplesPerCenter[i]++;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,136,List<Vector2D> points = new ArrayList<Vector2D>();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,137,for (int i = 0; i < centers; i++) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,138,for (int j = 0; j < nSamplesPerCenter[i]; j++) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,139,"Vector2D point = new Vector2D(dist.sample(), dist.sample());"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,140,points.add(point.add(centerPoints[i]));
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,144,if (shuffle) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,145,"Collections.shuffle(points, new RandomAdaptor(random));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,148,return points;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,151,public static List<Vector2D> makeRandom(int samples) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,152,SobolSequenceGenerator generator = new SobolSequenceGenerator(2);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,153,generator.skipTo(999999);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,154,List<Vector2D> points = new ArrayList<Vector2D>();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,155,for (double i = 0; i < samples; i++) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,156,double[] vector = generator.nextVector();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,157,vector[0] = vector[0] * 2 - 1;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,158,vector[1] = vector[1] * 2 - 1;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,159,Vector2D point = new Vector2D(vector);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,160,points.add(point);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,163,return points;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,166,public static Vector2D generateNoiseVector(NormalDistribution distribution) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,167,"return new Vector2D(distribution.sample(), distribution.sample());"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,170,"public static List<DoublePoint> normalize(final List<Vector2D> input, double minX, double maxX, double minY, double maxY) {"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,171,double rangeX = maxX - minX;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,172,double rangeY = maxY - minY;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,173,List<DoublePoint> points = new ArrayList<DoublePoint>();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,174,for (Vector2D p : input) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,175,double[] arr = p.toArray();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,176,arr[0] = (arr[0] - minX) / rangeX * 2 - 1;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,177,arr[1] = (arr[1] - minY) / rangeY * 2 - 1;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,178,points.add(new DoublePoint(arr));
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,180,return points;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,183,public static class Display extends JFrame {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,185,private static final long serialVersionUID = -8846964550416589808L;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,187,public Display() {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,188,"setTitle(""Clustering examples"");"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,189,"setSize(800, 800);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,190,setLocationRelativeTo(null);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,191,setDefaultCloseOperation(EXIT_ON_CLOSE);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,193,setLayout(new GridBagLayout());
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,195,int nSamples = 1500;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,197,RandomGenerator rng = new Well19937c(0);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,198,List<List<DoublePoint>> datasets = new ArrayList<List<DoublePoint>>();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,200,"datasets.add(normalize(makeCircles(nSamples, true, 0.04, 0.5, rng), -1, 1, -1, 1));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,201,"datasets.add(normalize(makeMoons(nSamples, true, 0.04, rng), -1, 2, -1, 1));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,202,"datasets.add(normalize(makeBlobs(nSamples, 3, 1.0, -10, 10, true, rng), -12, 12, -12, 12));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,203,"datasets.add(normalize(makeRandom(nSamples), -1, 1, -1, 1));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,205,"List<Pair<String, Clusterer<DoublePoint>>> algorithms = new ArrayList<Pair<String, Clusterer<DoublePoint>>>();"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,207,"algorithms.add(new Pair<String, Clusterer<DoublePoint>>(""KMeans\n(k=2)"", new KMeansPlusPlusClusterer<DoublePoint>(2)));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,208,"algorithms.add(new Pair<String, Clusterer<DoublePoint>>(""KMeans\n(k=3)"", new KMeansPlusPlusClusterer<DoublePoint>(3)));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,209,"algorithms.add(new Pair<String, Clusterer<DoublePoint>>(""FuzzyKMeans\n(k=3, fuzzy=2)"", new FuzzyKMeansClusterer<DoublePoint>(3, 2)));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,210,"algorithms.add(new Pair<String, Clusterer<DoublePoint>>(""FuzzyKMeans\n(k=3, fuzzy=10)"", new FuzzyKMeansClusterer<DoublePoint>(3, 10)));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,211,"algorithms.add(new Pair<String, Clusterer<DoublePoint>>(""DBSCAN\n(eps=.1, min=3)"", new DBSCANClusterer<DoublePoint>(0.1, 3)));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,213,GridBagConstraints c = new GridBagConstraints();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,214,c.fill = GridBagConstraints.VERTICAL;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,215,c.gridx = 0;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,216,c.gridy = 0;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,217,"c.insets = new Insets(2, 2, 2, 2);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,219,"for (Pair<String, Clusterer<DoublePoint>> pair : algorithms) {"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,220,JTextArea text = new JTextArea(pair.getFirst());
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,221,text.setEditable(false);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,222,text.setOpaque(false);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,223,"add(text, c);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,224,c.gridx++;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,226,c.gridy++;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,228,for (List<DoublePoint> dataset : datasets) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,229,c.gridx = 0;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,230,"for (Pair<String, Clusterer<DoublePoint>> pair : algorithms) {"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,231,long start = System.currentTimeMillis();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,232,List<? extends Cluster<DoublePoint>> clusters = pair.getSecond().cluster(dataset);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,233,long end = System.currentTimeMillis();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,234,"add(new ClusterPlot(clusters, end - start), c);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,235,c.gridx++;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,237,c.gridy++;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,242,public static class ClusterPlot extends JComponent {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,244,private static final long serialVersionUID = 4546352048750419587L;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,246,private static double PAD = 10;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,248,private List<? extends Cluster<DoublePoint>> clusters;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,249,private long duration;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,251,"public ClusterPlot(final List<? extends Cluster<DoublePoint>> clusters, long duration) {"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,252,this.clusters = clusters;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,253,this.duration = duration;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,256,protected void paintComponent(Graphics g) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,257,super.paintComponent(g);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,258,Graphics2D g2 = (Graphics2D)g;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,259,"g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,260,RenderingHints.VALUE_ANTIALIAS_ON);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,262,int w = getWidth();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,263,int h = getHeight();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,265,"g2.clearRect(0, 0, w, h);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,267,g2.setPaint(Color.black);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,268,"g2.drawRect(0, 0, w - 1, h - 1);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,270,int index = 0;
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,271,"Color[] colors = new Color[] { Color.red, Color.blue, Color.green.darker() };"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,272,for (Cluster<DoublePoint> cluster : clusters) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,273,g2.setPaint(colors[index++]);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,274,for (DoublePoint point : cluster.getPoints()) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,275,"Clusterable p = transform(point, w, h);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,276,double[] arr = p.getPoint();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,277,"g2.fill(new Ellipse2D.Double(arr[0] - 2, arr[1] - 2, 4, 4));"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,280,if (cluster instanceof CentroidCluster) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,281,"Clusterable p = transform(((CentroidCluster<?>) cluster).getCenter(), w, h);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,282,double[] arr = p.getPoint();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,283,"Shape s = new Ellipse2D.Double(arr[0] - 4, arr[1] - 4, 8, 8);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,284,g2.fill(s);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,285,g2.setPaint(Color.black);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,286,g2.draw(s);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,290,g2.setPaint(Color.black);
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,291,"g2.drawString(String.format(""%.2f s"", duration / 1e3), w - 30, h - 5);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,294,@Override
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,295,public Dimension getPreferredSize() {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,296,"return new Dimension(150, 150);"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,299,"private Clusterable transform(Clusterable point, int width, int height) {"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,300,double[] arr = point.getPoint();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,301,"return new DoublePoint(new double[] { PAD + (arr[0] + 1) / 2.0 * (width - 2 * PAD),"
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,302,height - PAD - (arr[1] + 1) / 2.0 * (height - 2 * PAD) });
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,306,public static void main(String[] args) {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,307,SwingUtilities.invokeLater(new Runnable() {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,308,public void run() {
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,309,Display d = new Display();
True,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java,310,d.setVisible(true);

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,458, else {
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,459,heckVectorDimensions(v);
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,460,ouble dot = 0;
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,461,terator<Entry> it = v.sparseIterator();
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,462,hile (it.hasNext()) {
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,463,inal Entry e = it.next();
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,464,ot += data[e.getIndex()] * e.getValue();
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,466,eturn dot;
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,459,return super.dotProduct(v);
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,308, Optimized method to compute the dot product with an OpenMapRealVector.
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,309, It iterates over the smallest of the two.
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,311, @param v Cector to compute the dot product with.
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,312, @return the dot product of {@code this} and {@code v}.
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,313, @throws org.apache.commons.math3.exception.DimensionMismatchException
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,314, if the dimensions do not match.
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,316,ublic double dotProduct(OpenMapRealVector v) {
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,317,heckVectorDimensions(v.getDimension());
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,318,oolean thisIsSmaller  = entries.size() < v.entries.size();
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,319,terator iter = thisIsSmaller  ? entries.iterator() : v.entries.iterator();
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,320,penIntToDoubleHashMap larger = thisIsSmaller  ? v.entries : entries;
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,321,ouble d = 0;
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,322,hile(iter.hasNext()) {
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,323,ter.advance();
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,324, += iter.value() * larger.get(iter.key());
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,326,eturn d;
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,329,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,330,Override
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,331,ublic double dotProduct(RealVector v) {
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,332,f(v instanceof OpenMapRealVector) {
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,333,eturn dotProduct((OpenMapRealVector)v);
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,334, else {
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,335,eturn super.dotProduct(v);
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,306,terator<Entry> it = sparseIterator();
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,307,hile (it.hasNext()) {
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,308,inal Entry e = it.next();
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,309, += e.getValue() * v.getEntry(e.getIndex());
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,306,final int n = getDimension();
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,307,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,308,d += getEntry(i) * v.getEntry(i);

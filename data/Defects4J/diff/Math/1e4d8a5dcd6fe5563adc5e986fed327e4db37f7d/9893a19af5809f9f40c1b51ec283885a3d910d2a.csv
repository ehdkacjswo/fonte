is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,504,"igma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,504,"sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,506,ouble worstFitness = fitness[arindex[arindex.length-1]];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,506,double worstFitness = fitness[arindex[arindex.length - 1]];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,568,igma = sigma * Math.exp(0.2+cs/damps);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,568,sigma = sigma * Math.exp(0.2 + cs / damps);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,572,igma = sigma * Math.exp(0.2+cs/damps);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,572,sigma = sigma * Math.exp(0.2 + cs / damps);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,637,ambda = 4 + (int) (3. * Math.log(dimension));
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,637,lambda = 4 + (int) (3 * Math.log(dimension));
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,656,"eights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,656,"weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,664,eights = weights.scalarMultiply(1. / sumw);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,664,weights = weights.scalarMultiply(1 / sumw);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,668,c = (4. + mueff / dimension) /
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,669,dimension + 4. + 2. * mueff / dimension);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,670,s = (mueff + 2.) / (dimension + mueff + 3.);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,671,"amps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,672,dimension + 1.)) - 1.)) *
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,673,"ath.max(0.3,"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,674,. - dimension / (1e-6 + maxIterations)) + cs; // minor increment
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,675,cov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,676,"covmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,677,(dimension + 2.) * (dimension + 2.) + mueff));
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,678,"cov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,679,"covmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,668,cc = (4 + mueff / dimension) /
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,669,(dimension + 4 + 2 * mueff / dimension);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,670,cs = (mueff + 2) / (dimension + mueff + 3.);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,671,"damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,672,(dimension + 1)) - 1)) *
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,673,"Math.max(0.3,"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,674,1 - dimension / (1e-6 + maxIterations)) + cs; // minor increment
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,675,ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,676,"ccovmu = Math.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,677,((dimension + 2) * (dimension + 2) + mueff));
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,678,"ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,679,"ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,681,1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,681,(1 - 1 / ((double) 4 * dimension) + 1 / ((double) 21 * dimension * dimension));
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,683,mean = MatrixUtils.createColumnRealMatrix(guess); // objective
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,684,/ variables
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,685,iagD = insigma.scalarMultiply(1. / sigma);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,683,xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,684,diagD = insigma.scalarMultiply(1 / sigma);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,695,istorySize = 10 + (int) (3. * 10. * dimension / lambda);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,694,historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,711,s = ps.scalarMultiply(1. - cs).add(
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,710,ps = ps.scalarMultiply(1 - cs).add(
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,713,ath.sqrt(cs * (2. - cs) * mueff)));
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,712,Math.sqrt(cs * (2 - cs) * mueff)));
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,716,"ath.sqrt(1. - Math.pow(1. - cs, 2. * iterations)) /"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,717,hiN < 1.4 + 2. / (dimension + 1.);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,718,c = pc.scalarMultiply(1. - cc);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,715,"Math.sqrt(1 - Math.pow(1 - cs, 2 * iterations)) /"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,716,chiN < 1.4 + 2 / ((double) dimension + 1);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,717,pc = pc.scalarMultiply(1 - cc);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,720,c = pc.add(xmean.subtract(xold).scalarMultiply(
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,721,ath.sqrt(cc * (2. - cc) * mueff) / sigma));
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,719,pc = pc.add(xmean.subtract(xold).scalarMultiply(Math.sqrt(cc * (2 - cc) * mueff) / sigma));
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,738,ouble oldFac = hsig ? 0 : ccov1Sep * cc * (2. - cc);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,739,ldFac += 1. - ccov1Sep - ccovmuSep;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,736,double oldFac = hsig ? 0 : ccov1Sep * cc * (2 - cc);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,737,oldFac += 1 - ccov1Sep - ccovmuSep;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,741,/ plus rank one update
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,742,add(square(pc).scalarMultiply(ccov1Sep))
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,743,/ plus rank mu update
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,744,"add((times(diagC, square(bestArz).multiply(weights)))"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,745,scalarMultiply(ccovmuSep));
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,739,.add(square(pc).scalarMultiply(ccov1Sep)) // plus rank one update
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,740,".add((times(diagC, square(bestArz).multiply(weights))) // plus rank mu update"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,741,.scalarMultiply(ccovmuSep));
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,747,f (diagonalOnly > 1 && iterations > diagonalOnly) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,743,if (diagonalOnly > 1 &&
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,744,iterations > diagonalOnly) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,768,"inal RealMatrix arz, final int[] arindex, final RealMatrix xold) {"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,765,"final RealMatrix arz, final int[] arindex,"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,766,final RealMatrix xold) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,772,scalarMultiply(1. / sigma); // mu difference vectors
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,770,.scalarMultiply(1 / sigma); // mu difference vectors
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,776,ouble oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,777,ldFac += 1. - ccov1 - ccovmu;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,774,double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,775,oldFac += 1 - ccov1 - ccovmu;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,780,egccov = (1. - ccovmu) * 0.25 * mueff /
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,781,"Math.pow(dimension + 2., 1.5) + 2. * mueff);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,778,negccov = (1 - ccovmu) * 0.25 * mueff /
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,779,"(Math.pow(dimension + 2, 1.5) + 2 * mueff);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,789,ealMatrix arzneg
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,790," selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,787,"RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,800,ouble negcovMax = (1. - negminresidualvariance) /
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,801,"quare(arnormsInv).multiply(weights).getEntry(0, 0);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,797,double negcovMax = (1 - negminresidualvariance) /
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,798,"square(arnormsInv).multiply(weights).getEntry(0, 0);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,807,ealMatrix Cneg = artmp.multiply(diag(weights)).multiply(
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,808,rtmp.transpose());
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,804,RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,811,/ regard old matrix
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,812,add(roneu)
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,813,/ plus rank one update
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,814,add(arpos.scalarMultiply(
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,815,/ plus rank mu update
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,816,covmu + (1. - negalphaold) * negccov)
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,817,multiply(
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,818,"imes(repmat(weights, 1, dimension),"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,819,rpos.transpose())))
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,820,subtract(Cneg.scalarMultiply(negccov));
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,807,.add(roneu) // regard old matrix
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,808,.add(arpos.scalarMultiply( // plus rank one update
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,809,ccovmu + (1 - negalphaold) * negccov) // plus rank mu update
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,810,".multiply(times(repmat(weights, 1, dimension),"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,811,arpos.transpose())))
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,812,.subtract(Cneg.scalarMultiply(negccov));
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,824,add(roneu)
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,825,/ plus rank one update
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,826,add(arpos.scalarMultiply(ccovmu) // plus rank mu update
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,827,multiply(
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,828,"imes(repmat(weights, 1, dimension),"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,829,rpos.transpose())));
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,816,.add(roneu) // plus rank one update
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,817,.add(arpos.scalarMultiply(ccovmu) // plus rank mu update
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,818,".multiply(times(repmat(weights, 1, dimension),"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,819,arpos.transpose())));
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,842,iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,832,(iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,853,"iagD.setEntry(i, 0, 0.);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,843,"diagD.setEntry(i, 0, 0);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,969,alueRange = 1.0;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,957,valueRange = 1;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1019, @return the repaired objective variables - all in bounds.
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1007,* @return the repaired (i.e. all in bounds) objective variables.
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1070, @param m
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1071,            Input matrix
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1058,* @param m Input matrix.
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1085, @param m Input matrix
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1086, @return Matrix representing the element-wise square (^2) of m.
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1072,* @param m Input matrix.
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1073,* @return Matrix representing the element-wise square of m.
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1199, @param m1 Source matrix 1.
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1186,* @param m1 Source matrix.
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1218,"rrays.fill(d[r], 1.0);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1205,"Arrays.fill(d[r], 1);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1226," @return n-by-m matrix of 0.0-values, diagonal has values 1.0."
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1213,"* @return n-by-m matrix of 0 values out of diagonal, and 1 values on"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1214,* the diagonal.
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1241, @return n-by-m matrix of 0.0-values.
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,1229,* @return n-by-m matrix of zero values.
